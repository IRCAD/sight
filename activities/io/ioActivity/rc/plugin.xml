<plugin id="sight::module::io::activity">

    <requirement id="sight::module::io::session" />
    <requirement id="sight::module::activity" />

    <!-- Activity used to export an image series. -->
    <extension implements="sight::activity::extension::Activity">
        <id>ImageSeriesExport</id>
        <title>ImageSeries Export</title>
        <desc>Activity to export the selected ImageSeries.</desc>
        <icon>sight::module::ui::icons/Export.svg</icon>
        <requirements>
            <requirement name="series" type="sight::data::ImageSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::activity::builder::ActivitySeries</builder>
        <appConfig id="ExportSelection">
            <parameters>
                <parameter replace="selection" by="@values.series" />
            </parameters>
        </appConfig>
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="sight::activity::extension::Activity">
        <id>ModelSeriesExport</id>
        <title>ModelSeries Export</title>
        <desc>Activity to export the selected ModelSeries.</desc>
        <icon>sight::module::ui::icons/Export.svg</icon>
        <requirements>
            <requirement name="series" type="sight::data::ModelSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::activity::builder::ActivitySeries</builder>
        <appConfig id="ExportSelection">
            <parameters>
                <parameter replace="selection" by="@values.series" />
            </parameters>
        </appConfig>
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="sight::activity::extension::Activity">
        <id>DicomSegmentationSurfaceExport</id>
        <title>Dicom Segmentation Surface Export</title>
        <desc>Activity to export a ModelSeries as a Dicom Segmentation Surface file.</desc>
        <icon>sight::module::ui::icons/Export.svg</icon>
        <requirements>
            <requirement name="modelSeries" type="sight::data::ModelSeries" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>::activity::builder::ActivitySeries</builder>
        <appConfig id="ExportDicomSelection">
            <parameters>
                <parameter replace="model" by="@values.modelSeries" />
            </parameters>
        </appConfig>
    </extension>

    <!-- App config used to export the selected series. -->
    <extension implements="sight::service::extension::AppConfig">
        <id>ExportSelection</id>
        <parameters>
            <param name="selection" />
        </parameters>
        <config>
            <object uid="${selection}" src="ref" />

            <service uid="export_selection" type="sight::module::ui::base::io::SSelector">
                <inout key="data" uid="${selection}" />
                <type mode="writer" />
                <selection mode="exclude" />
                <addSelection service="sight::module::io::session::SWriter" />
            </service>
            <start uid="export_selection" />
            <update uid="export_selection" />
        </config>
    </extension>

    <!-- App config used to export a Model to a Dicom Segmentation Surface. -->
    <extension implements="sight::service::extension::AppConfig">
        <id>ExportDicomSelection</id>
        <parameters>
            <param name="model" />
        </parameters>
        <config>
            <object uid="${model}" type="sight::data::ModelSeries" src="ref" />

            <service uid="exportSelection" type="sight::module::ui::base::io::SSelector">
                <inout key="data" uid="${model}" />
                <type mode="writer" />
                <selection mode="include" />
                <addSelection service="sight::module::io::dicom::SSurfaceSegmentationWriter" />
            </service>

            <start uid="exportSelection" />
            <update uid="exportSelection" />
        </config>
    </extension>

    <!-- Service config used to read SeriesDB without using ioAtoms. -->
    <extension implements="sight::service::extension::Config">
        <id>SDBReaderIOSelectorConfig</id>
        <service>sight::module::ui::base::io::SSelector</service>
        <desc>IOSelectorService config for SeriesDB reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <addSelection service="sight::module::io::session::SReader" />
            <addSelection service="sight::module::io::matrix::SAttachmentSeriesReader" />
        </config>
    </extension>

    <!-- Service config used to read seriesDB using ioAtoms. -->
    <extension implements="sight::service::extension::Config">
        <id>SDBAtomsReaderIOSelectorConfig</id>
        <service>sight::module::ui::base::io::SSelector</service>
        <desc>Atoms seriesDB reader.</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::SReader" />
            <config id="SightDataConfig" service="sight::module::io::session::SReader" />
        </config>
    </extension>

    <!-- Service config used to write a seriesDB using ioAtoms. -->
    <extension implements="sight::service::extension::Config">
        <id>SDBAtomsWriterIOSelectorConfig</id>
        <service>sight::module::ui::base::io::SSelector</service>
        <desc>Atoms seriesDB writer.</desc>
        <config>
            <type mode="writer" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::SWriter" />
            <config id="SightDataConfig" service="sight::module::io::session::SWriter" />
        </config>
    </extension>

    <!-- Service config used to read SeriesDB with all the available reader for SeriesDB. -->
    <extension implements="sight::service::extension::Config">
        <id>FullSDBReaderIOSelectorConfig</id>
        <service>sight::module::ui::base::io::SSelector</service>
        <desc>IOSelectorService config for SeriesDB reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <addSelection service="sight::module::io::matrix::SAttachmentSeriesReader" />
            <config id="SightDataConfig" service="sight::module::io::session::SReader" />
        </config>
    </extension>

    <!-- Service config used for io_session reader and writer -->
    <extension implements="sight::service::extension::Config">
        <id>SightDataConfig</id>
        <desc>Sight data</desc>
        <config>
            <dialog extension=".sight" description="Sight data" policy="default"/>
            <password policy="default" encryption="default"/>
        </config>
    </extension>

    <extension implements="sight::service::extension::Config">
        <id>ActivityReaderConfig</id>
        <service>sight::module::ui::base::io::SSelector</service>
        <desc>Activity reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::SReader" />
            <config id="DefaultSessionReaderConfig" service="sight::module::io::session::SReader" />
        </config>
    </extension>

    <extension implements="sight::service::extension::Config">
        <id>ActivityWriterConfig</id>
        <service>sight::module::ui::base::io::SSelector</service>
        <desc>Activity writer</desc>
        <config>
            <type mode="writer" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::SWriter" />
            <config id="DefaultSessionWriterConfig" service="sight::module::io::session::SWriter" />
        </config>
    </extension>

    <!-- Service config used for ioAtoms reader and writer to read landmarks -->
    <extension implements="sight::service::extension::Config">
        <id>LandmarksConfig</id>
        <desc>Landmarks Reader/Writer</desc>
        <config>
            <dialog extension=".sight" description="Sight Landmarks" policy="default"/>
            <password policy="default" encryption="default"/>
        </config>
    </extension>

    <!-- Service config used for session reader and writer -->
    <extension implements="sight::service::extension::Config">
        <id>DefaultSessionReaderConfig</id>
        <service>sight::module::io::session::SReader</service>
        <desc>Session reader</desc>
        <config>
            <dialog extension=".sight" description="Sight session" policy="default"/>
            <password policy="default" encryption="default"/>
        </config>
    </extension>

    <extension implements="sight::service::extension::Config">
        <id>DefaultSessionWriterConfig</id>
        <service>sight::module::io::session::SWriter</service>
        <desc>Session writer</desc>
        <config>
            <dialog extension=".sight" description="Sight session" policy="default"/>
            <password policy="default" encryption="default"/>
        </config>
    </extension>

</plugin>
