<plugin id="ExRGBDImageMasking">

    <requirement id="sight::module::ui::qt" />
    <requirement id="sight::module::service" />
    <requirement id="sight::module::viz::scene3d" />
    <requirement id="sight::module::viz::scene3dQt" />
    <requirement id="sight::module::ui" />

    <extension implements="sight::app::extension::config">
        <id>ExRGBDImageMasking_AppCfg</id>
        <config>

            <!-- ******************************* Objects declaration ****************************** -->

            <!-- Frames timelines to manage video and depth streams  -->
            <object uid="frameTLVideo" type="sight::data::frame_tl" />
            <object uid="frameTLDepth" type="sight::data::frame_tl" />
            <!-- Images extracted from the TL and used to perform image masking -->
            <object uid="videoImage" type="sight::data::image" />
            <object uid="depthImage" type="sight::data::image" />
            <object uid="foregroundImage" type="sight::data::image" />
            <object uid="offscreenImage" type="sight::data::image" />
            <!-- Objects related to the camera managing the calibration data -->
            <object uid="RGBDCameraSet" type="sight::data::camera_set" />
            <object uid="RGBcamera" type="sight::data::camera" src="deferred" />
            <object uid="Dcamera" type="sight::data::camera" src="deferred" />
            <!-- Matrices to register to mesh in the right space regading the camera position -->
            <object uid="registrationMatrix" type="sight::data::matrix4" />
            <object uid="inverseMatrix" type="sight::data::matrix4" />
            <object uid="extrinsic" type="sight::data::matrix4" src="deferred" />
            <!-- Objectes related to the models loaded to perform AR -->
            <object uid="seriesSet" type="sight::data::series_set" />
            <object uid="modelSeries" type="sight::data::model_series" src="deferred" />
            <object uid="mesh" type="sight::data::mesh" src="deferred" />

            <!-- ******************************* UI declaration *********************************** -->

            <!-- declaration of the views, menu and toolbar -->
            <service uid="mainFrame" type="sight::module::ui::frame">
                <gui>
                    <frame>
                        <name>ExRGBDImageMasking</name>
                        <icon>ExRGBDImageMasking/app.ico</icon>
                    </frame>
                    <menuBar />
                    <toolBar />
                </gui>
                <registry>
                    <menuBar sid="menuBarView" start="true" />
                    <toolBar sid="toolbarView" start="true" />
                    <view sid="mainView" start="true" />
                </registry>
            </service>

            <service uid="menuBarView" type="sight::module::ui::menu_bar">
                <gui>
                    <layout>
                        <menu name="File" />
                    </layout>
                </gui>
                <registry>
                    <menu sid="menuView" start="true" />
                </registry>
            </service>

            <service uid="menuView" type="sight::module::ui::menu">
                <gui>
                    <layout>
                        <menuItem name="Load transformation" shortcut="Ctrl+T" />
                        <separator />
                        <menuItem name="Load mesh" shortcut="Ctrl+M" />
                        <separator />
                        <menuItem name="Quit" specialAction="QUIT" shortcut="Ctrl+Q" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="loadTransformationAct" start="true" />
                    <menuItem sid="loadMeshAct" start="true" />
                    <menuItem sid="quitAct" start="true" />
                </registry>
            </service>

            <service uid="toolbarView" type="sight::module::ui::tool_bar">
                <gui>
                    <layout>
                        <editor />
                        <menuItem name="Start" icon="sight::module::ui::flaticons/GreenStart.svg" shortcut="Space" />
                        <menuItem name="Pause" icon="sight::module::ui::flaticons/OrangePause.svg" shortcut="Space" />
                        <menuItem name="Play" icon="sight::module::ui::flaticons/GreenStart.svg" shortcut="Space" />
                        <menuItem name="Stop" icon="sight::module::ui::flaticons/RedStop.svg" />
                        <menuItem name="Loop" icon="sight::module::ui::flaticons/OrangeLoop.svg" style="check" />
                        <separator />
                        <menuItem name="Learn background" icon="sight::module::ui::flaticons/Background.svg" />
                        <separator />
                        <menuItem name="Manage organs" icon="sight::module::ui::flaticons/Stomach.svg" style="check" />
                        <spacer />
                        <menuItem name="Settings" icon="sight::module::ui::flaticons/BlueParameters.svg" style="check" />
                    </layout>
                </gui>
                <registry>
                    <editor sid="videoSelectorSrv" start="true" />
                    <menuItem sid="startVideoAct" start="true" />
                    <menuItem sid="pauseVideoAct" start="true" />
                    <menuItem sid="resumeVideoAct" start="true" />
                    <menuItem sid="stopVideoAct" start="true" />
                    <menuItem sid="loopVideoAct" start="true" />
                    <menuItem sid="learnBackgroundAct" start="true" />
                    <menuItem sid="organManagerAct" start="false" />
                    <menuItem sid="showSettingsAct" start="true" />
                </registry>
            </service>

            <service uid="mainView" type="sight::module::ui::view">
                <gui>
                    <layout type="sight::ui::layout::line">
                        <orientation value="vertical" />
                        <view proportion="0" backgroundColor="#36393E" visible="false" />
                        <view proportion="1" />
                    </layout>
                </gui>
                <registry>
                    <view sid="settingsView" start="true" />
                    <view sid="genericSceneSrv" />
                </registry>
            </service>

            <service uid="settingsView" type="sight::module::ui::view">
                <gui>
                    <layout type="sight::ui::layout::line">
                        <orientation value="horizontal" />
                        <view proportion="0" />
                        <view proportion="0" />
                        <spacer />
                    </layout>
                </gui>
                <registry>
                    <view sid="enableHoleFillingFilterParamSrv" start="true" />
                    <view sid="maskerThresholdParamSrv" start="true" />
                </registry>
            </service>

            <!-- ************************************* Action ************************************ -->

            <!-- declaration of actions/slot callers -->
            <service uid="quitAct" type="sight::module::ui::quit" />

            <service uid="loadTransformationAct" type="sight::module::ui::action" />

            <service uid="loadMeshAct" type="sight::module::ui::action" />

            <!-- Start the frame grabber -->
            <service uid="startVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <!-- Pause the frame grabber -->
            <service uid="pauseVideoAct" type="sight::module::ui::action">
                <state visible="false" />
            </service>

            <!-- Resume the frame grabber -->
            <service uid="resumeVideoAct" type="sight::module::ui::action">
                <state visible="false" />
            </service>

            <!-- Stop the frame grabber -->
            <service uid="stopVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <!-- Loop the frame grabber -->
            <service uid="loopVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <service uid="learnBackgroundAct" type="sight::module::ui::action"></service>

            <service uid="organManagerAct" type="sight::module::ui::config_launcher">
                <appConfig id="ModelSeriesManagerWindow" />
                <inout group="data">
                    <key name="ORGAN_MANAGER_MODELSERIES" uid="modelSeries" />
                </inout>
                <parameter replace="ICON_PATH" by="ExRGBDImageMasking/app.ico" />
            </service>

            <service uid="showSettingsAct" type="sight::module::ui::action" />

            <!-- ******************************* Begin Generic Scene ******************************* -->

            <service uid="genericSceneSrv" type="sight::viz::scene3d::render">
                <scene renderMode="sync">
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="video" order="1">
                        <adaptor uid="videoAdp" />
                    </layer>

                    <layer id="default" order="2">
                        <adaptor uid="meshAdp" />
                        <adaptor uid="cameraAdp" />
                    </layer>

                    <layer id="ar" order="3">
                        <adaptor uid="videoARAdp" />
                    </layer>
                </scene>
            </service>

            <service uid="videoAdp" type="sight::module::viz::scene3d::adaptor::video" auto_connect="true">
                <in key="image" uid="videoImage" />
            </service>

            <service uid="cameraAdp" type="sight::module::viz::scene3d::adaptor::camera">
                <inout key="transform" uid="inverseMatrix" auto_connect="true" />
                <in key="calibration" uid="RGBcamera" />
            </service>

            <service uid="meshAdp" type="sight::module::viz::scene3d::adaptor::model_series" auto_connect="true">
                <in key="model" uid="modelSeries" />
                <config transform="id" autoresetcamera="false" />
            </service>

            <service uid="videoARAdp" type="sight::module::viz::scene3d::adaptor::video" auto_connect="true">
                <in key="image" uid="foregroundImage" />
            </service>

            <!-- ******************************* Begin Generic Scene ******************************* -->

            <!-- Scene in which skin mesh will be render and fill a binary image to perform image masking -->
            <service uid="offscreenSceneSrv" type="sight::viz::scene3d::render">
                <inout key="offScreen" uid="offscreenImage" />
                <scene width="1280" height="720">
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="default" order="1">
                        <adaptor uid="cameraOffscreenAdp" />
                        <adaptor uid="meshOffscreenAdp" />
                    </layer>
                </scene>
            </service>

            <service uid="cameraOffscreenAdp" type="sight::module::viz::scene3d::adaptor::camera" auto_connect="true">
                <inout key="transform" uid="inverseMatrix" auto_connect="true" />
                <in key="calibration" uid="RGBcamera" />
            </service>

            <service uid="meshOffscreenAdp" type="sight::module::viz::scene3d::adaptor::mesh" auto_connect="true">
                <in key="mesh" uid="mesh" shadingMode="ambient" />
                <config transform="id" autoresetcamera="false" />
            </service>

            <!-- ******************************* Services ***************************************** -->

            <!-- Parameter to enable/disable hole filling from the RealSense grabber -->
            <service uid="enableHoleFillingFilterParamSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="bool" name="Enable holes Filling filter" key="enableHolesFilling" defaultValue="true" />
                </parameters>
            </service>

            <!-- Parameter to tune the threshold value from the SRGBDImageMasking service -->
            <service uid="maskerThresholdParamSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="int" name="Masking threshold" key="threshold" defaultValue="10" min="0" max="50" />
                </parameters>
            </service>

            <service uid="videoSelectorSrv" type="sight::module::ui::qt::video::camera">
                <inout key="cameraSet" uid="RGBDCameraSet" />
                <createCameraNumber>2</createCameraNumber>
                <videoSupport>true</videoSupport>
            </service>

            <!-- To get frames from the RealSense camera -->
            <service uid="videoGrabberSrv" type="sight::module::io::realsense::scan" worker="grabber">
                <inout key="cameraSet" uid="RGBDCameraSet" />
                <inout key="depthTL" uid="frameTLDepth" />
                <inout key="frameTL" uid="frameTLVideo" />
                <config fps="30" colorW="1280" colorH="720" depthW="1280" depthH="720" preset="Hand" alignTo="Color" />
            </service>

            <!-- To synchronize matrix, frame and detection -->
            <service uid="frameUpdaterSrv"  type="sight::module::sync::synchronizer" worker="videoWorker">
                <in group="frameTL">
                    <key uid="frameTLVideo" />
                    <key uid="frameTLDepth" />
                </in>
                <inout group="frames">
                    <key uid="videoImage" tl="0" />
                    <key uid="depthImage" tl="1"/>
                </inout>
            </service>

            <!-- Wait for the undistortion and the matrix inversion to be finished -->
            <service uid="syncGenericSceneSrv" type="sight::module::sync::signal_gate">
                <signal>frameUpdaterSrv/synchronizationDone</signal>
                <signal>maskerSrv/updated</signal>
            </service>

            <!-- Matrix (trf format) reader -->
            <!-- This matrix is used to staticaly register the model onto the video -->
            <service uid="transformReaderSrv" type="sight::module::ui::io::selector">
                <inout key="data" uid="registrationMatrix" />
                <type mode="reader" /> <!-- mode is optional (by default it is "reader") -->
                <selection mode="include" />
                <addSelection service="sight::module::io::matrix::Matrix4ReaderService" />
            </service>

            <!-- Reader to open SeriesSet data -->
            <service uid="meshReaderSrv" type="sight::module::ui::io::selector">
                <inout key="data" uid="seriesSet" />
            </service>

            <!-- Extract the ModelSeries from the loaded SeriesSet -->
            <service uid="extractModelSeriesSrv" type="sight::module::data::get_series">
                <in key="seriesSet" uid="seriesSet" />
                <out group="series">
                    <key index="0" uid="modelSeries" />
                </out>
            </service>

            <!-- Extract mesh in the model series -->
            <service uid="extractSkinSrv" type="sight::module::data::get_mesh">
                <in key="modelSeries" uid="modelSeries" />
                <out group="mesh">
                    <key type="Skin" uid="mesh" />
                </out>
            </service>

            <!-- Extract RGB instrinsic Depth intrinsic and Extrinsic matrices from a sight::data::camera_set -->
            <service uid="extractCameraSrv" type="sight::module::data::get_camera">
                <!-- Source -->
                <inout key="cameraSet" uid="RGBDCameraSet" />
                <!-- Destination -->
                <out group="camera">
                    <key index="0" uid="Dcamera" />
                    <key index="1" uid="RGBcamera" />
                </out>
                <out group="extrinsic">
                    <key index="1" uid="extrinsic" />
                </out>
            </service>

            <!-- Use the extrinsic matrix to get back in the RGB space -->
            <service uid="concatenateSrv" type="sight::module::geometry::concatenate_matrices">
                <in group="matrix">
                    <key uid="registrationMatrix" auto_connect="true" inverse="true" />
                    <key uid="extrinsic" auto_connect="true" inverse="true" />
                </in>
                <inout key="output" uid="inverseMatrix" />
            </service>

            <!-- To extract the foreground image to display on top of meshes -->
            <service uid="maskerSrv" type="sight::module::filter::vision::depth_image_masking" worker="masker">
                <in key="maskImage" uid="offscreenImage" />
                <in key="videoImage" uid="videoImage" />
                <in key="depthImage" uid="depthImage" auto_connect="true" />
                <inout key="foregroundImage" uid="foregroundImage" />
            </service>

            <!-- ******************************* Connections ***************************************** -->

            <connect>
                <signal>loadTransformationAct/clicked</signal>
                <slot>transformReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>loadMeshAct/clicked</signal>
                <slot>meshReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>startVideoAct/clicked</signal>
                <slot>videoGrabberSrv/startCamera</slot>
            </connect>

            <connect>
                <signal>pauseVideoAct/clicked</signal>
                <slot>videoGrabberSrv/pauseCamera</slot>
                <slot>resumeVideoAct/show</slot>
                <slot>pauseVideoAct/hide</slot>
            </connect>

            <connect>
                <signal>resumeVideoAct/clicked</signal>
                <slot>videoGrabberSrv/pauseCamera</slot>
                <slot>resumeVideoAct/hide</slot>
                <slot>pauseVideoAct/show</slot>
            </connect>

            <connect>
                <signal>stopVideoAct/clicked</signal>
                <slot>videoGrabberSrv/stopCamera</slot>
                <slot>startVideoAct/show</slot>
                <slot>resumeVideoAct/hide</slot>
                <slot>pauseVideoAct/hide</slot>
                <slot>stopVideoAct/disable</slot>
                <slot>loopVideoAct/disable</slot>
                <slot>loopVideoAct/uncheck</slot>
            </connect>

            <connect>
                <signal>loopVideoAct/clicked</signal>
                <slot>videoGrabberSrv/loopVideo</slot>
            </connect>

            <connect>
                <signal>learnBackgroundAct/clicked</signal>
                <slot>maskerSrv/setBackground</slot>
            </connect>

            <connect>
                <signal>videoSelectorSrv/configuredFile</signal>
                <signal>videoSelectorSrv/configuredStream</signal>
                <signal>videoSelectorSrv/configuredDevice</signal>
                <slot>startVideoAct/update</slot>
            </connect>

            <connect>
                <signal>videoGrabberSrv/cameraStarted</signal>
                <slot>pauseVideoAct/show</slot>
                <slot>startVideoAct/hide</slot>
                <slot>stopVideoAct/enable</slot>
                <slot>loopVideoAct/enable</slot>
            </connect>

            <connect>
                <signal>RGBCamera/idModified</signal>
                <slot>videoGrabberSrv/stopCamera</slot>
            </connect>

            <connect>
                <signal>RGBCamera/modified</signal>
                <slot>startVideoAct/enable</slot>
                <slot>stopVideoAct/update</slot>
            </connect>

            <connect>
                <signal>seriesSet/modified</signal>
                <signal>seriesSet/addedObjects</signal>
                <slot>extractModelSeriesSrv/update</slot>
            </connect>

            <connect>
                <signal>cameraSet/addedCamera</signal>
                <slot>extractCameraSrv/update</slot>
            </connect>

            <connect>
                 <signal>enableHoleFillingFilterParamSrv/parameterChanged</signal>
                 <slot>videoGrabberSrv/setParameter</slot>
            </connect>

            <connect>
                <signal>maskerThresholdParamSrv/intChanged</signal>
                <slot>maskerSrv/setThreshold</slot>
            </connect>

            <connect>
                <signal>showSettingsAct/isChecked</signal>
                <slot>settingsView/setVisible</slot>
            </connect>

            <connect>
                <signal>syncGenericSceneSrv/allReceived</signal>
                <slot>genericSceneSrv/requestRender</slot>
                <slot>frameUpdaterSrv/synchronize</slot>
            </connect>

            <!-- ******************************* Start services ***************************************** -->

            <start uid="mainFrame" />
            <start uid="organManagerAct" />
            <start uid="frameUpdaterSrv" />
            <start uid="syncGenericSceneSrv" />
            <start uid="videoGrabberSrv" />
            <start uid="extractCameraSrv" />
            <start uid="transformReaderSrv" />
            <start uid="maskerSrv" />
            <start uid="meshReaderSrv" />
            <start uid="extractModelSeriesSrv" />
            <start uid="extractSkinSrv" />
            <start uid="concatenateSrv" />
            <start uid="genericSceneSrv" />
            <start uid="videoAdp" />
            <start uid="videoARAdp" />
            <start uid="cameraAdp" />
            <start uid="meshAdp" />
            <start uid="offscreenSceneSrv" />
            <start uid="meshOffscreenAdp" />
            <start uid="cameraOffscreenAdp" />

            <!-- ******************************* Update services ***************************************** -->

            <update uid="extractSkinSrv" />
            <update uid="extractCameraSrv" />
            <update uid="concatenateSrv" />
            <update uid="enableHoleFillingFilterParamSrv" />
            <update uid="meshAdp" />

        </config>
    </extension>
</plugin>