<plugin id="ex_rgbd_manual_ar">
    <requirement id="sight::module::ui::qt" />
    <requirement id="sight::module::service" />
    <requirement id="sight::module::viz::scene3d" />
    <requirement id="sight::module::viz::scene3d_qt" />
    <requirement id="sight::module::ui" />

    <extension implements="sight::app::extension::config">
        <id>ExRGBDManualAR_AppCfg</id>
        <config>
            <!-- ******************************* Objects declaration ****************************** -->

            <object uid="camera_set" type="sight::data::camera_set" />
            <object uid="cameraRGB" type="sight::data::camera" deferred="true" />
            <object uid="cameraDepth" type="sight::data::camera" deferred="true" />
            <object uid="seriesSet" type="sight::data::series_set" />
            <object uid="frameTL" type="sight::data::frame_tl" />
            <object uid="maskTL" type="sight::data::frame_tl" />
            <object uid="videoImage" type="sight::data::image" />
            <object uid="backgroundMask" type="sight::data::image" />
            <object uid="foregroundMask" type="sight::data::image" />
            <object uid="matrix" type="sight::data::matrix4" />
            <object uid="inverseMat" type="sight::data::matrix4" />
            <object uid="extrinsic" type="sight::data::matrix4" deferred="true" />
            <object uid="skinMesh" type="sight::data::mesh" deferred="true" />
            <object uid="modelSeries" type="sight::data::model_series" deferred="true" />

            <!-- ******************************* UI declaration *********************************** -->

            <service uid="mainFrame" type="sight::module::ui::frame">
                <gui>
                    <frame>
                        <name>ex_rgbd_manual_ar</name>
                        <icon>ex_rgbd_manual_ar/app.ico</icon>
                    </frame>
                    <menubar />
                    <toolbar />
                </gui>
                <registry>
                    <menubar sid="menuBarView" />
                    <toolbar sid="toolbarView" />
                    <view sid="mainView" />
                </registry>
            </service>

            <service uid="menuBarView" type="sight::module::ui::menubar">
                <gui>
                    <layout>
                        <menu name="File" />
                        <menu name="Preferences" />
                    </layout>
                </gui>
                <registry>
                    <menu sid="menuFileView" />
                    <menu sid="menuPreferencesView" />
                </registry>
            </service>

            <service uid="menuFileView" type="sight::module::ui::menu">
                <gui>
                    <layout>
                        <menuItem name="Quit" special_action="QUIT" shortcut="Ctrl+Q" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="quitAct" />
                </registry>
            </service>

            <service uid="menuPreferencesView" type="sight::module::ui::menu">
                <gui>
                    <layout>
                        <menuItem name="Video directory" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="videoDirAct" />
                </registry>
            </service>

            <service uid="toolbarView" type="sight::module::ui::toolbar">
                <gui>
                    <layout>
                        <menuItem name="Load calibration" icon="sight::module::ui::icons/calibration.svg" />
                        <separator />
                        <menuItem name="Load transformation" icon="sight::module::ui::icons/load.svg" />
                        <separator />
                        <menuItem name="Load mesh" icon="sight::module::ui::icons/load.svg" />
                        <separator />
                        <editor />
                        <menuItem name="Start" icon="sight::module::ui::icons/play.svg" shortcut="Space" />
                        <menuItem name="Pause" icon="sight::module::ui::icons/pause.svg" shortcut="Space" />
                        <menuItem name="Play" icon="sight::module::ui::icons/play.svg" shortcut="Space" />
                        <menuItem name="Stop" icon="sight::module::ui::icons/stop.svg" />
                        <menuItem name="Loop" icon="sight::module::ui::icons/loop.svg" style="check" />
                        <menuItem name="Manage organs" icon="sight::module::ui::icons/organs.svg" style="check" />
                        <separator />
                        <menuItem name="Learn background model" icon="sight::module::ui::icons/background.svg" />
                        <menuItem name="Learn foreground model" icon="sight::module::ui::icons/foreground.svg" />
                        <menuItem name="Segmentation parameters" icon="sight::module::ui::icons/gear.svg" style="check" />
                        <editor />
                        <editor />
                        <editor />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="loadCalibAct" />
                    <menuItem sid="loadTransformationAct" />
                    <menuItem sid="loadMeshAct" />
                    <editor sid="videoSelectorSrv" />
                    <menuItem sid="startVideoAct" />
                    <menuItem sid="pauseVideoAct" />
                    <menuItem sid="resumeVideoAct" />
                    <menuItem sid="stopVideoAct" />
                    <menuItem sid="loopVideoAct" />
                    <menuItem sid="organ_manager_act" />
                    <menuItem sid="learnBackgroundAct" />
                    <menuItem sid="learnForegroundAct" />
                    <menuItem sid="segmentationParametersAct" />
                    <editor sid="noiseLevelSrv" />
                    <editor sid="bgComponentsSrv" />
                    <editor sid="fgComponentsSrv" />
                </registry>
            </service>

            <service uid="mainView" type="sight::module::ui::view">
                <gui>
                    <layout type="sight::ui::layout::line">
                        <orientation value="vertical" />
                        <view proportion="1" />
                        <view proportion="0" />
                    </layout>
                </gui>
                <registry>
                    <view sid="genericSceneSrv" />
                    <view sid="thresholdSliderSrv" />
                </registry>
            </service>

            <!-- ************************************* Action ************************************ -->

            <service uid="quitAct" type="sight::module::ui::quit" />
            <service uid="loadCalibAct" type="sight::module::ui::action" />
            <service uid="loadTransformationAct" type="sight::module::ui::action" />
            <service uid="loadMeshAct" type="sight::module::ui::action" />

            <!-- Start the frame grabber -->
            <service uid="startVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <!-- Pause the frame grabber -->
            <service uid="pauseVideoAct" type="sight::module::ui::action">
                <state visible="false" />
            </service>

            <!-- Resume the frame grabber -->
            <service uid="resumeVideoAct" type="sight::module::ui::action">
                <state visible="false" />
            </service>

            <!-- Stop the frame grabber -->
            <service uid="stopVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <!-- Loop the frame grabber -->
            <service uid="loopVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <service uid="organ_manager_act" type="sight::module::ui::action" />

            <service uid="organ_manager_cfg" type="sight::app::config_launcher">
                <properties config="ModelSeriesManagerWindow" start="false" />
                <inout group="data">
                    <key name="organ_manager_modelseries" uid="modelSeries" />
                </inout>
                <parameter replace="ICON_PATH" by="ex_rgbd_image_masking/app.ico" />
            </service>

            <service uid="learnBackgroundAct" type="sight::module::ui::action">
                <slots>
                    <slot>extractForegroundSrv/set_background</slot>
                </slots>
            </service>

            <service uid="learnForegroundAct" type="sight::module::ui::action">
                <slots>
                    <slot>extractForegroundSrv/set_foreground</slot>
                </slots>
            </service>

            <service uid="segmentationParametersAct" type="sight::module::ui::modify_layout">
                <state checked="false" />
                <config>
                    <show_or_hide sid="noiseLevelSrv" />
                    <show_or_hide sid="bgComponentsSrv" />
                    <show_or_hide sid="fgComponentsSrv" />
                    <show_or_hide sid="thresholdSliderSrv" />
                </config>
            </service>

            <!-- preference save the video directory and re-open the same directory at next launch of the app -->
            <service uid="videoDirAct" type="sight::module::ui::qt::preferences_configuration">
                <preference>
                    <type>path</type>
                    <name>Video directory</name>
                    <key>VIDEO_DIR_PREF</key>
                    <default_value>...</default_value>
                </preference>
            </service>

            <!-- ******************************* Begin Generic scene ******************************* -->

            <service uid="genericSceneSrv" type="sight::viz::scene3d::render">
                <scene renderMode="manual">
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="video">
                        <adaptor uid="videoAdp" />
                    </layer>

                    <layer id="default">
                        <adaptor uid="modelSeriesAdp" />
                        <adaptor uid="cameraAdp" />
                    </layer>

                    <layer id="foreground">
                        <adaptor uid="foregroundAdp" />
                    </layer>
                </scene>
            </service>

            <service uid="videoAdp" type="sight::module::viz::scene3d::adaptor::video" auto_connect="true">
                <in key="image" uid="videoImage" />
            </service>

            <service uid="foregroundAdp" type="sight::module::viz::scene3d::adaptor::video" auto_connect="true">
                <in key="image" uid="foregroundMask" />
            </service>

            <service uid="modelSeriesAdp" type="sight::module::viz::scene3d::adaptor::model_series" auto_connect="true">
                <in key="model" uid="modelSeries" />
                <config autoresetcamera="false" />
            </service>

            <service uid="cameraAdp" type="sight::module::viz::scene3d::adaptor::camera" auto_connect="true">
                <inout key="transform" uid="inverseMat" />
                <in key="calibration" uid="cameraRGB" />
            </service>

            <!-- ******************************* Begin Generic scene ******************************* -->

            <service uid="offscreenRenderSrv" type="sight::viz::scene3d::render">
                <inout key="offscreen" uid="backgroundMask" />
                <scene width="1280" height="720">
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="default">
                        <adaptor uid="meshOffscreenAdp" />
                        <adaptor uid="cameraOffscreenAdp" />
                    </layer>
                </scene>
            </service>

            <service uid="meshOffscreenAdp" type="sight::module::viz::scene3d::adaptor::mesh" auto_connect="true">
                <in key="mesh" uid="skinMesh" />
                <config autoresetcamera="false" shading="ambient" />
            </service>

            <service uid="cameraOffscreenAdp" type="sight::module::viz::scene3d::adaptor::camera" auto_connect="true">
                <inout key="transform" uid="inverseMat" />
                <in key="calibration" uid="cameraRGB" />
            </service>

            <!-- ******************************* Services ***************************************** -->

            <service uid="meshReaderSrv" type="sight::module::ui::io::selector">
                <inout key="data" uid="seriesSet" />
                <type mode="reader" />
            </service>
            <service uid="extractModelSeriesSrv" type="sight::module::data::get_series">
                <in key="seriesSet" uid="seriesSet" />
                <out group="series">
                    <key index="0" uid="modelSeries" />
                </out>
            </service>

            <!-- Calibration reader (here OpenCV's XML/YAML) -->
            <service uid="calibrationReaderSrv" type="sight::module::io::vision::open_cv_reader">
                <inout key="data" uid="camera_set" />
            </service>

            <!-- Matrix (trf format) reader -->
            <!-- This matrix is used to staticaly register the model onto the video -->
            <service uid="transformReaderSrv" type="sight::module::ui::io::selector">
                <inout key="data" uid="matrix" />
                <!-- mode is optional (by default it is "reader") -->
                <type mode="reader" />
                <selection mode="include" />
                <addSelection service="sight::module::io::matrix::Matrix4ReaderService" />
            </service>

            <!-- extract RGB instrinsic Depth intrinsic and Extrinsic matrices from a sight::data::camera_set -->
            <service uid="cameraExtractorSrv" type="sight::module::data::get_camera">
                <inout key="camera_set" uid="camera_set" />
                <!-- destination -->
                <out group="camera">
                    <key index="0" uid="cameraDepth" />
                    <key index="1" uid="cameraRGB" />
                </out>
                <out group="extrinsic">
                    <key index="1" uid="extrinsic" />
                </out>
            </service>

            <service uid="thresholdSliderSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="int" name="Threshold" key="threshold" defaultValue="1" min="-5" max="5" />
                </parameters>
            </service>

            <service uid="noiseLevelSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="double" name="Noise level" key="noiseLevel" defaultValue="30" min="0" max="200" />
                </parameters>
            </service>

            <service uid="bgComponentsSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="int" name="Background components" key="bgComponents" defaultValue="5" min="1" max="10" widget="spin" />
                </parameters>
            </service>

            <service uid="fgComponentsSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="int" name="Foreground components" key="fgComponents" defaultValue="5" min="1" max="10" widget="spin" />
                </parameters>
            </service>

            <!-- GUI to select camera (device, file, or stream) -->
            <service uid="videoSelectorSrv" type="sight::module::ui::qt::video::camera">
                <inout key="camera" uid="cameraRGB" />
                <videoSupport>true</videoSupport>
            </service>

            <!-- Grab image from camera device and fill a frame timeline -->
            <service uid="videoGrabberSrv" type="sight::module::io::video::frame_grabber">
                <in key="camera" uid="cameraRGB" />
                <inout key="frame_tl" uid="frameTL" />
            </service>

            <!-- Use the extrinsic matrix to get back in the RGB space -->
            <service uid="concatenateSrv" type="sight::module::geometry::concatenate_matrices">
                <in group="matrix">
                    <key uid="matrix" auto_connect="true" inverse="true" />
                    <key uid="extrinsic" auto_connect="true" inverse="true" />
                </in>
                <inout key="output" uid="inverseMat" />
            </service>

            <!-- To synchronize matrix, frame and detection -->
            <service uid="frameUpdaterSrv" type="sight::module::sync::synchronizer" worker="videoWorker">
                <in group="frame_tl" auto_connect="false">
                    <key uid="frameTL" />
                    <key uid="maskTL" />
                </in>
                <inout group="frames">
                    <key uid="videoImage" tl="0" />
                    <key uid="foregroundMask" tl="1" />
                </inout>
                <tolerance>200</tolerance>
            </service>

            <!-- Extract model called "Skin" in the model series -->
            <service uid="extractSkinSrv" type="sight::module::data::get_mesh">
                <in key="modelSeries" uid="modelSeries" />
                <out group="mesh">
                    <key type="Skin" uid="skinMesh" />
                </out>
            </service>

            <!-- Split background and foreground image -->
            <service uid="extractForegroundSrv" type="sight::module::filter::vision::colour_image_masking" worker="videoExtraction">
                <in key="videoTL" uid="frameTL" auto_connect="false" />
                <in key="mask" uid="backgroundMask" />
                <inout key="videoMaskTL" uid="maskTL" />
                <config scaleFactor="1.0" noise="30" foregroundComponents="5" backgroundComponents="5" />
                <HSV>
                    <!-- Range for the blue gloves -->
                    <lower>35,0,0</lower>
                    <upper>360.5,255,255</upper>
                </HSV>
            </service>

            <!-- ******************************* Connections ***************************************** -->

            <connect>
                <signal>loadCalibAct/clicked</signal>
                <slot>calibrationReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>loadTransformationAct/clicked</signal>
                <slot>transformReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>loadMeshAct/clicked</signal>
                <slot>meshReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>startVideoAct/clicked</signal>
                <slot>videoGrabberSrv/start_camera</slot>
                <slot>updater/start</slot>
            </connect>

            <connect>
                <signal>pauseVideoAct/clicked</signal>
                <slot>videoGrabberSrv/pause_camera</slot>
                <slot>resumeVideoAct/show</slot>
                <slot>pauseVideoAct/hide</slot>
                <slot>updater/stop</slot>
            </connect>

            <connect>
                <signal>resumeVideoAct/clicked</signal>
                <slot>videoGrabberSrv/pause_camera</slot>
                <slot>resumeVideoAct/hide</slot>
                <slot>pauseVideoAct/show</slot>
                <slot>updater/start</slot>
            </connect>

            <connect>
                <signal>stopVideoAct/clicked</signal>
                <slot>videoGrabberSrv/stop_camera</slot>
                <slot>startVideoAct/show</slot>
                <slot>resumeVideoAct/hide</slot>
                <slot>pauseVideoAct/hide</slot>
                <slot>stopVideoAct/disable</slot>
                <slot>loopVideoAct/disable</slot>
                <slot>loopVideoAct/uncheck</slot>
                <slot>updater/stop</slot>
            </connect>

            <connect>
                <signal>loopVideoAct/clicked</signal>
                <slot>videoGrabberSrv/loop_video</slot>
            </connect>

            <connect>
                <signal>videoSelectorSrv/configured_file</signal>
                <signal>videoSelectorSrv/configured_stream</signal>
                <signal>videoSelectorSrv/configured_device</signal>
                <slot>startVideoAct/update</slot>
            </connect>

            <connect>
                <signal>videoGrabberSrv/camera_started</signal>
                <slot>pauseVideoAct/show</slot>
                <slot>startVideoAct/hide</slot>
                <slot>stopVideoAct/enable</slot>
                <slot>loopVideoAct/enable</slot>
            </connect>

            <connect>
                <signal>cameraRGB/id_modified</signal>
                <slot>videoGrabberSrv/stop_camera</slot>
                <slot>updater/stop</slot>
            </connect>

            <connect>
                <signal>cameraRGB/modified</signal>
                <slot>startVideoAct/enable</slot>
                <slot>stopVideoAct/update</slot>
            </connect>

            <!-- Extract the model series when it is added to SDB -->
            <connect>
                <signal>seriesSet/modified</signal>
                <signal>seriesSet/added_objects</signal>
                <slot>extractModelSeriesSrv/update</slot>
            </connect>

            <connect>
                <signal>camera_set/added_camera</signal>
                <slot>cameraExtractorSrv/update</slot>
            </connect>

            <connect>
                <signal>thresholdSliderSrv/int_changed</signal>
                <slot>extractForegroundSrv/set_threshold</slot>
            </connect>

            <connect>
                <signal>noiseLevelSrv/double_changed</signal>
                <slot>extractForegroundSrv/set_noise_level</slot>
            </connect>

            <connect>
                <signal>bgComponentsSrv/int_changed</signal>
                <slot>extractForegroundSrv/set_background_components</slot>
            </connect>

            <connect>
                <signal>fgComponentsSrv/int_changed</signal>
                <slot>extractForegroundSrv/set_foreground_components</slot>
            </connect>

            <connect>
                <signal>organ_manager_act/checked</signal>
                <slot>organ_manager_cfg/start</slot>
            </connect>

            <!-- ******************************* Update services ***************************************** -->

            <update>
                <service uid="extractSkinSrv" />
                <service uid="segmentationParametersAct" />

                <sequence uid="updater" loop="true" start="false">
                    <service uid="frameUpdaterSrv" />
                    <service uid="extractForegroundSrv" />
                    <service uid="genericSceneSrv" />
                </sequence>
            </update>
        </config>
    </extension>
</plugin>
