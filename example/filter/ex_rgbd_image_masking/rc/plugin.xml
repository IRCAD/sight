<plugin id="ex_rgbd_image_masking">
    <requirement id="sight::module::ui::qt" />
    <requirement id="sight::module::service" />
    <requirement id="sight::module::viz::scene3d" />
    <requirement id="sight::module::viz::scene3d_qt" />
    <requirement id="sight::module::ui" />

    <extension implements="sight::app::extension::config">
        <id>ExRGBDImageMasking_AppCfg</id>
        <config>
            <!-- ******************************* Objects declaration ****************************** -->

            <!-- Frames timelines to manage video and depth streams  -->
            <object uid="frameTLVideo" type="sight::data::frame_tl" />
            <object uid="frameTLDepth" type="sight::data::frame_tl" />
            <!-- Images extracted from the TL and used to perform image masking -->
            <object uid="videoImage" type="sight::data::image" />
            <object uid="depthImage" type="sight::data::image" />
            <object uid="foregroundImage" type="sight::data::image" />
            <object uid="offscreenImage" type="sight::data::image" />
            <!-- Objects related to the camera managing the calibration data -->
            <object uid="RGBDCameraSet" type="sight::data::camera_set" />
            <object uid="RGBcamera" type="sight::data::camera" deferred="true" />
            <object uid="Dcamera" type="sight::data::camera" deferred="true" />
            <!-- Matrices to register to mesh in the right space regading the camera position -->
            <object uid="registrationMatrix" type="sight::data::matrix4" />
            <object uid="inverseMatrix" type="sight::data::matrix4" />
            <object uid="extrinsic" type="sight::data::matrix4" deferred="true" />
            <!-- Objectes related to the models loaded to perform AR -->
            <object uid="seriesSet" type="sight::data::series_set" />
            <object uid="modelSeries" type="sight::data::model_series" deferred="true" />
            <object uid="mesh" type="sight::data::mesh" deferred="true" />

            <!-- ******************************* UI declaration *********************************** -->

            <!-- declaration of the views, menu and toolbar -->
            <service uid="mainFrame" type="sight::module::ui::frame">
                <gui>
                    <frame>
                        <name>ex_rgbd_image_masking</name>
                        <icon>ex_rgbd_image_masking/app.ico</icon>
                    </frame>
                    <menubar />
                    <toolbar />
                </gui>
                <registry>
                    <menubar sid="menuBarView" />
                    <toolbar sid="toolbarView" />
                    <view sid="mainView" />
                </registry>
            </service>

            <service uid="menuBarView" type="sight::module::ui::menubar">
                <gui>
                    <layout>
                        <menu name="File" />
                    </layout>
                </gui>
                <registry>
                    <menu sid="menuView" />
                </registry>
            </service>

            <service uid="menuView" type="sight::module::ui::menu">
                <gui>
                    <layout>
                        <menuItem name="Load transformation" shortcut="Ctrl+T" />
                        <separator />
                        <menuItem name="Load mesh" shortcut="Ctrl+M" />
                        <separator />
                        <menuItem name="Quit" special_action="QUIT" shortcut="Ctrl+Q" />
                    </layout>
                </gui>
                <registry>
                    <menuItem sid="loadTransformationAct" />
                    <menuItem sid="loadMeshAct" />
                    <menuItem sid="quitAct" />
                </registry>
            </service>

            <service uid="toolbarView" type="sight::module::ui::toolbar">
                <gui>
                    <layout>
                        <editor />
                        <menuItem name="Start" icon="sight::module::ui::icons/play.svg" shortcut="Space" />
                        <menuItem name="Pause" icon="sight::module::ui::icons/pause.svg" shortcut="Space" />
                        <menuItem name="Play" icon="sight::module::ui::icons/play.svg" shortcut="Space" />
                        <menuItem name="Stop" icon="sight::module::ui::icons/stop.svg" />
                        <menuItem name="Loop" icon="sight::module::ui::icons/loop.svg" style="check" />
                        <separator />
                        <menuItem name="Learn background" icon="sight::module::ui::icons/background.svg" />
                        <separator />
                        <menuItem name="Manage organs" icon="sight::module::ui::icons/organs.svg" style="check" />
                        <spacer />
                        <menuItem name="Settings" icon="sight::module::ui::icons/gear.svg" style="check" />
                    </layout>
                </gui>
                <registry>
                    <editor sid="videoSelectorSrv" />
                    <menuItem sid="startVideoAct" />
                    <menuItem sid="pauseVideoAct" />
                    <menuItem sid="resumeVideoAct" />
                    <menuItem sid="stopVideoAct" />
                    <menuItem sid="loopVideoAct" />
                    <menuItem sid="learnBackgroundAct" />
                    <menuItem sid="organ_manager_act" />
                    <menuItem sid="showSettingsAct" />
                </registry>
            </service>

            <service uid="mainView" type="sight::module::ui::view">
                <gui>
                    <layout type="sight::ui::layout::line">
                        <orientation value="vertical" />
                        <view proportion="0" background_color="#36393E" visible="false" />
                        <view proportion="1" />
                    </layout>
                </gui>
                <registry>
                    <view sid="settingsView" />
                    <view sid="genericSceneSrv" />
                </registry>
            </service>

            <service uid="settingsView" type="sight::module::ui::view">
                <gui>
                    <layout type="sight::ui::layout::line">
                        <orientation value="horizontal" />
                        <view proportion="0" />
                        <view proportion="0" />
                        <spacer />
                    </layout>
                </gui>
                <registry>
                    <view sid="enableHoleFillingFilterParamSrv" />
                    <view sid="maskerThresholdParamSrv" />
                </registry>
            </service>

            <!-- ************************************* Action ************************************ -->

            <!-- declaration of actions/slot callers -->
            <service uid="quitAct" type="sight::module::ui::quit" />

            <service uid="loadTransformationAct" type="sight::module::ui::action" />

            <service uid="loadMeshAct" type="sight::module::ui::action" />

            <!-- Start the frame grabber -->
            <service uid="startVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <!-- Pause the frame grabber -->
            <service uid="pauseVideoAct" type="sight::module::ui::action">
                <state visible="false" />
            </service>

            <!-- Resume the frame grabber -->
            <service uid="resumeVideoAct" type="sight::module::ui::action">
                <state visible="false" />
            </service>

            <!-- Stop the frame grabber -->
            <service uid="stopVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <!-- Loop the frame grabber -->
            <service uid="loopVideoAct" type="sight::module::ui::action">
                <state enabled="false" />
            </service>

            <service uid="learnBackgroundAct" type="sight::module::ui::action" />

            <service uid="organ_manager_act" type="sight::module::ui::action" />

            <service uid="organ_manager_cfg" type="sight::app::config_launcher">
                <properties config="ModelSeriesManagerWindow" start="false" />
                <inout group="data">
                    <key name="organ_manager_modelseries" uid="modelSeries" />
                </inout>
                <parameter replace="ICON_PATH" by="ex_rgbd_image_masking/app.ico" />
            </service>

            <service uid="showSettingsAct" type="sight::module::ui::action" />

            <!-- ******************************* Begin Generic scene ******************************* -->

            <service uid="genericSceneSrv" type="sight::viz::scene3d::render">
                <scene renderMode="manual">
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="video">
                        <adaptor uid="videoAdp" />
                    </layer>

                    <layer id="default">
                        <adaptor uid="meshAdp" />
                        <adaptor uid="cameraAdp" />
                    </layer>

                    <layer id="ar">
                        <adaptor uid="videoARAdp" />
                    </layer>
                </scene>
            </service>

            <service uid="videoAdp" type="sight::module::viz::scene3d::adaptor::video" auto_connect="true">
                <in key="image" uid="videoImage" />
            </service>

            <service uid="cameraAdp" type="sight::module::viz::scene3d::adaptor::camera">
                <inout key="transform" uid="inverseMatrix" auto_connect="true" />
                <in key="calibration" uid="RGBcamera" />
            </service>

            <service uid="meshAdp" type="sight::module::viz::scene3d::adaptor::model_series" auto_connect="true">
                <in key="model" uid="modelSeries" />
                <config transform="id" autoresetcamera="false" />
            </service>

            <service uid="videoARAdp" type="sight::module::viz::scene3d::adaptor::video" auto_connect="true">
                <in key="image" uid="foregroundImage" />
            </service>

            <!-- ******************************* Begin Generic scene ******************************* -->

            <!-- scene in which skin mesh will be render and fill a binary image to perform image masking -->
            <service uid="offscreenSceneSrv" type="sight::viz::scene3d::render">
                <inout key="offscreen" uid="offscreenImage" />
                <scene width="1280" height="720">
                    <background topColor="#36393E" bottomColor="#36393E" />

                    <layer id="default">
                        <adaptor uid="cameraOffscreenAdp" />
                        <adaptor uid="meshOffscreenAdp" />
                    </layer>
                </scene>
            </service>

            <service uid="cameraOffscreenAdp" type="sight::module::viz::scene3d::adaptor::camera" auto_connect="true">
                <inout key="transform" uid="inverseMatrix" auto_connect="true" />
                <in key="calibration" uid="RGBcamera" />
            </service>

            <service uid="meshOffscreenAdp" type="sight::module::viz::scene3d::adaptor::mesh" auto_connect="true">
                <in key="mesh" uid="mesh" shading="ambient" />
                <config transform="id" autoresetcamera="false" />
            </service>

            <!-- ******************************* Services ***************************************** -->

            <!-- Parameter to enable/disable hole filling from the RealSense grabber -->
            <service uid="enableHoleFillingFilterParamSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="bool" name="Enable holes Filling filter" key="enableHolesFilling" defaultValue="true" />
                </parameters>
            </service>

            <!-- Parameter to tune the threshold value from the SRGBDImageMasking service -->
            <service uid="maskerThresholdParamSrv" type="sight::module::ui::qt::parameters">
                <parameters>
                    <param type="int" name="Masking threshold" key="threshold" defaultValue="10" min="0" max="50" />
                </parameters>
            </service>

            <service uid="videoSelectorSrv" type="sight::module::ui::qt::video::camera">
                <inout key="camera_set" uid="RGBDCameraSet" />
                <createCameraNumber>2</createCameraNumber>
                <videoSupport>true</videoSupport>
            </service>

            <!-- To get frames from the RealSense camera -->
            <service uid="videoGrabberSrv" type="sight::module::io::realsense::scan" worker="grabber">
                <inout key="camera_set" uid="RGBDCameraSet" />
                <inout key="depth_tl" uid="frameTLDepth" />
                <inout key="frame_tl" uid="frameTLVideo" />
                <config fps="30" colorW="1280" colorH="720" depthW="1280" depthH="720" preset="Hand" alignTo="Color" />
            </service>

            <!-- To synchronize matrix, frame and detection -->
            <service uid="frameUpdaterSrv" type="sight::module::sync::synchronizer" worker="videoWorker">
                <in group="frame_tl" auto_connect="false">
                    <key uid="frameTLVideo" />
                    <key uid="frameTLDepth" />
                </in>
                <inout group="frames">
                    <key uid="videoImage" tl="0" />
                    <key uid="depthImage" tl="1" />
                </inout>
            </service>

            <!-- Matrix (trf format) reader -->
            <!-- This matrix is used to staticaly register the model onto the video -->
            <service uid="transformReaderSrv" type="sight::module::ui::io::selector">
                <inout key="data" uid="registrationMatrix" />
                <!-- mode is optional (by default it is "reader") -->
                <type mode="reader" />
                <selection mode="include" />
                <addSelection service="sight::module::io::matrix::Matrix4ReaderService" />
            </service>

            <!-- Reader to open SeriesSet data -->
            <service uid="meshReaderSrv" type="sight::module::ui::io::selector">
                <inout key="data" uid="seriesSet" />
            </service>

            <!-- Extract the ModelSeries from the loaded SeriesSet -->
            <service uid="extractModelSeriesSrv" type="sight::module::data::get_series">
                <in key="seriesSet" uid="seriesSet" />
                <out group="series">
                    <key index="0" uid="modelSeries" />
                </out>
            </service>

            <!-- Extract mesh in the model series -->
            <service uid="extractSkinSrv" type="sight::module::data::get_mesh">
                <in key="modelSeries" uid="modelSeries" />
                <out group="mesh">
                    <key type="Skin" uid="mesh" />
                </out>
            </service>

            <!-- Extract RGB instrinsic Depth intrinsic and Extrinsic matrices from a sight::data::camera_set -->
            <service uid="extractCameraSrv" type="sight::module::data::get_camera">
                <!-- Source -->
                <inout key="camera_set" uid="RGBDCameraSet" />
                <!-- Destination -->
                <out group="camera">
                    <key index="0" uid="Dcamera" />
                    <key index="1" uid="RGBcamera" />
                </out>
                <out group="extrinsic">
                    <key index="1" uid="extrinsic" />
                </out>
            </service>

            <!-- Use the extrinsic matrix to get back in the RGB space -->
            <service uid="concatenateSrv" type="sight::module::geometry::concatenate_matrices">
                <in group="matrix">
                    <key uid="registrationMatrix" auto_connect="true" inverse="true" />
                    <key uid="extrinsic" auto_connect="true" inverse="true" />
                </in>
                <inout key="output" uid="inverseMatrix" />
            </service>

            <!-- To extract the foreground image to display on top of meshes -->
            <service uid="maskerSrv" type="sight::module::filter::vision::depth_image_masking" worker="masker">
                <in key="maskImage" uid="offscreenImage" />
                <in key="videoImage" uid="videoImage" />
                <in key="depthImage" uid="depthImage" auto_connect="false" />
                <inout key="foregroundImage" uid="foregroundImage" />
            </service>

            <!-- ******************************* Connections ***************************************** -->

            <connect>
                <signal>loadTransformationAct/clicked</signal>
                <slot>transformReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>loadMeshAct/clicked</signal>
                <slot>meshReaderSrv/update</slot>
            </connect>

            <connect>
                <signal>startVideoAct/clicked</signal>
                <slot>videoGrabberSrv/start_camera</slot>
                <slot>updater/start</slot>
            </connect>

            <connect>
                <signal>pauseVideoAct/clicked</signal>
                <slot>videoGrabberSrv/pause_camera</slot>
                <slot>resumeVideoAct/show</slot>
                <slot>pauseVideoAct/hide</slot>
                <slot>updater/stop</slot>
            </connect>

            <connect>
                <signal>resumeVideoAct/clicked</signal>
                <slot>videoGrabberSrv/pause_camera</slot>
                <slot>resumeVideoAct/hide</slot>
                <slot>pauseVideoAct/show</slot>
                <slot>updater/start</slot>
            </connect>

            <connect>
                <signal>stopVideoAct/clicked</signal>
                <slot>videoGrabberSrv/stop_camera</slot>
                <slot>startVideoAct/show</slot>
                <slot>resumeVideoAct/hide</slot>
                <slot>pauseVideoAct/hide</slot>
                <slot>stopVideoAct/disable</slot>
                <slot>loopVideoAct/disable</slot>
                <slot>loopVideoAct/uncheck</slot>
                <slot>updater/stop</slot>
            </connect>

            <connect>
                <signal>loopVideoAct/clicked</signal>
                <slot>videoGrabberSrv/loop_video</slot>
            </connect>

            <connect>
                <signal>learnBackgroundAct/clicked</signal>
                <slot>maskerSrv/set_background</slot>
            </connect>

            <connect>
                <signal>videoSelectorSrv/configured_file</signal>
                <signal>videoSelectorSrv/configured_stream</signal>
                <signal>videoSelectorSrv/configured_device</signal>
                <slot>startVideoAct/update</slot>
            </connect>

            <connect>
                <signal>videoGrabberSrv/camera_started</signal>
                <slot>pauseVideoAct/show</slot>
                <slot>startVideoAct/hide</slot>
                <slot>stopVideoAct/enable</slot>
                <slot>loopVideoAct/enable</slot>
            </connect>

            <connect>
                <signal>RGBCamera/id_modified</signal>
                <slot>videoGrabberSrv/stop_camera</slot>
            </connect>

            <connect>
                <signal>RGBCamera/modified</signal>
                <slot>startVideoAct/enable</slot>
                <slot>stopVideoAct/update</slot>
            </connect>

            <connect>
                <signal>seriesSet/modified</signal>
                <signal>seriesSet/added_objects</signal>
                <slot>extractModelSeriesSrv/update</slot>
            </connect>

            <connect>
                <signal>RGBDCameraSet/added_camera</signal>
                <slot>extractCameraSrv/update</slot>
            </connect>

            <connect>
                <signal>enableHoleFillingFilterParamSrv/parameter_changed</signal>
                <slot>videoGrabberSrv/set_parameter</slot>
            </connect>

            <connect>
                <signal>maskerThresholdParamSrv/int_changed</signal>
                <slot>maskerSrv/set_threshold</slot>
            </connect>

            <connect>
                <signal>showSettingsAct/is_checked</signal>
                <slot>settingsView/set_visible</slot>
            </connect>

            <connect>
                <signal>organ_manager_act/checked</signal>
                <slot>organ_manager_cfg/start</slot>
            </connect>

            <!-- ******************************* Update services ***************************************** -->

            <update>
                <service uid="extractSkinSrv" />
                <service uid="extractCameraSrv" />
                <service uid="concatenateSrv" />
                <service uid="enableHoleFillingFilterParamSrv" />
                <service uid="meshAdp" />

                <sequence uid="updater" loop="true" start="false">
                    <service uid="frameUpdaterSrv" />
                    <service uid="maskerSrv" />
                    <service uid="genericSceneSrv" />
                </sequence>
            </update>
        </config>
    </extension>
</plugin>
