<plugin id="sight::module::geometry::vision" library="true">
    <requirement id="sight::module::service" />
    <extension implements="sight::service::extension::factory">
        <type>sight::service::controller</type>
        <service>sight::module::geometry::vision::chess_board_detector</service>
        <object key="image">sight::data::image</object>
        <object key="calInfo">sight::data::calibration_info</object>
        <object key="detection">sight::data::point_list</object>
        <desc>Detects chessboards in images and pushes detected points to CalibrationInfo objects.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
        <type>sight::service::controller</type>
        <service>sight::module::geometry::vision::chessboard_reprojection</service>
        <desc>Reprojects the chessboard model onto the detected points using the estimated camera pose and calibration.</desc>
    </extension>
    <extension implements="sight::service::extension::factory">
        <type>sight::service::filter</type>
        <service>sight::module::geometry::vision::distortion</service>
        <object key="camera">sight::data::camera</object>
        <object key="input">sight::data::image</object>
        <object key="output">sight::data::image</object>
        <object key="map">sight::data::image</object>
        <desc>Distort or undistort an image according to camera intrinsics and distortion coefficients.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
        <type>sight::service::controller</type>
        <service>sight::module::geometry::vision::marker_to_point</service>
        <object>sight::data::point_list</object>
        <desc>This service update a pointlist with the center of the marker (from a matrixTL) when the extractMarker slot is</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
        <type>sight::geometry::vision::ICalibration</type>
        <service>sight::module::geometry::vision::open_cv_extrinsic</service>
        <object>sight::data::camera_set</object>
        <desc>open_cv_extrinsic service that computes extrinsic calibration with openCV.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
        <type>sight::geometry::vision::ICalibration</type>
        <service>sight::module::geometry::vision::open_cv_intrinsic</service>
        <object>sight::data::camera</object>
        <desc>open_cv_intrinsic service that computes intrinsic calibration with openCV.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
        <type>sight::service::registerer</type>
        <service>sight::module::geometry::vision::pose_from2d</service>
        <desc>pose_from2d Class used to compute the 3d pose of a object using 2d points.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
        <type>sight::service::controller</type>
        <service>sight::module::geometry::vision::reprojection_error</service>
        <desc>reprojection_error Class used to compute the mean error of reprojection between 3d object points</desc>
    </extension>
    <extension implements="sight::service::extension::factory">
        <type>sight::service::registerer</type>
        <service>sight::module::geometry::vision::solve_pnp</service>
        <object key="pointList2d">sight::data::point_list</object>
        <object key="pointList3d">sight::data::point_list</object>
        <object key="calibration">sight::data::camera</object>
        <object key="matrix">sight::data::matrix4</object>
        <desc>This service estimates the object pose given a set of object points, their corresponding image projections,</desc>
    </extension>
</plugin>
