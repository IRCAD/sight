/************************************************************************
 *
 * Copyright (C) 2023 IRCAD France
 *
 * This file is part of Sight.
 *
 * Sight is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Sight is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Sight. If not, see <https://www.gnu.org/licenses/>.
 *
 ***********************************************************************/

// This file was automatically generated by the '/libs/core/data/dicom/class_generator.py' script. DO NOT EDIT !
// Used arguments: 'Namespace(verbose=False, source_url='http://dicom.nema.org/medical/dicom/current/source/docbook',
// sop_list=None, mandatory_tags=[Tag(group='7FE0', element='0010'), Tag(group='0062', element='0002'),
// Tag(group='0066', element='0002'), Tag(group='0066', element='0011'), Tag(group='0070', element='031C')])'

#include "data/dicom/Attribute.hpp"

#include <core/exceptionmacros.hpp>

// cspell: ignore Wundefined afterloader angio autorefraction autosequence boli bscan cadsr ciexy ctdi ctdivol decf
// cspell: ignore deidentification dermoscopic diconde dicos dvhroi exif fiducials fluence fnumber frameof gpsdop hicpp
// cspell: ignore hpgl imager inms inua inus iods isop ivol ivus keratoconus keratometer keratometric kerma lensometry
// cspell: ignore lookat meterset metersets mrfov multiway nmpet nmtomo nolintbegin nolintend octb octz oecf olink
// cspell: ignore postamble powerline prcs presaturation radiofluoroscopic relaxivity reprojection rgblut rtdvh rtroi
// cspell: ignore sddn sdhn sdvn softcopy soundpath stereometric stowrs tlhc tomo tomosynthesis tomotherapeutic toric
// cspell: ignore tractography xaxrf Ascan Framek

// NOLINTBEGIN

namespace sight::data::dicom::attribute
{

//------------------------------------------------------------------------------

template<Keyword keyword>
inline static const Attribute<keyword>& get()
{
    static constexpr Attribute<keyword> instance;
    return instance;
}

//------------------------------------------------------------------------------

template<>
DATA_API const Keyword Attribute<Keyword::SpecificCharacterSet>::s_keyword = Keyword::SpecificCharacterSet;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecificCharacterSet>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecificCharacterSet>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecificCharacterSet>::s_name = "Specific Character Set";
template<>
DATA_API const VR Attribute<Keyword::SpecificCharacterSet>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpecificCharacterSet>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::LanguageCodeSequence>::s_keyword = Keyword::LanguageCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LanguageCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LanguageCodeSequence>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::LanguageCodeSequence>::s_name = "Language Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::LanguageCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::LanguageCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageType>::s_keyword = Keyword::ImageType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageType>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageType>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageType>::s_name = "Image Type";
template<>
DATA_API const VR Attribute<Keyword::ImageType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ImageType>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceCreationDate>::s_keyword = Keyword::InstanceCreationDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCreationDate>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCreationDate>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceCreationDate>::s_name = "Instance Creation Date";
template<>
DATA_API const VR Attribute<Keyword::InstanceCreationDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::InstanceCreationDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceCreationTime>::s_keyword = Keyword::InstanceCreationTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCreationTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCreationTime>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceCreationTime>::s_name = "Instance Creation Time";
template<>
DATA_API const VR Attribute<Keyword::InstanceCreationTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::InstanceCreationTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceCreatorUID>::s_keyword = Keyword::InstanceCreatorUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCreatorUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCreatorUID>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceCreatorUID>::s_name = "Instance Creator UID";
template<>
DATA_API const VR Attribute<Keyword::InstanceCreatorUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::InstanceCreatorUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceCoercionDateTime>::s_keyword = Keyword::InstanceCoercionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCoercionDateTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceCoercionDateTime>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceCoercionDateTime>::s_name = "Instance Coercion DateTime";
template<>
DATA_API const VR Attribute<Keyword::InstanceCoercionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::InstanceCoercionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::sop_classUID>::s_keyword = Keyword::sop_classUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::sop_classUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::sop_classUID>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::sop_classUID>::s_name = "SOP Class UID";
template<>
DATA_API const VR Attribute<Keyword::sop_classUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::sop_classUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionUID>::s_keyword = Keyword::AcquisitionUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionUID>::s_element = 0x0017;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionUID>::s_name = "Acquisition UID";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SOPInstanceUID>::s_keyword = Keyword::SOPInstanceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPInstanceUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPInstanceUID>::s_element = 0x0018;
template<>
DATA_API const std::string_view Attribute<Keyword::SOPInstanceUID>::s_name = "SOP Instance UID";
template<>
DATA_API const VR Attribute<Keyword::SOPInstanceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::SOPInstanceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PyramidUID>::s_keyword = Keyword::PyramidUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PyramidUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PyramidUID>::s_element = 0x0019;
template<>
DATA_API const std::string_view Attribute<Keyword::PyramidUID>::s_name = "Pyramid UID";
template<>
DATA_API const VR Attribute<Keyword::PyramidUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::PyramidUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelatedGeneralsop_classUID>::s_keyword = Keyword::RelatedGeneralsop_classUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelatedGeneralsop_classUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelatedGeneralsop_classUID>::s_element = 0x001A;
template<>
DATA_API const std::string_view Attribute<Keyword::RelatedGeneralsop_classUID>::s_name =
    "Related General SOP Class UID";
template<>
DATA_API const VR Attribute<Keyword::RelatedGeneralsop_classUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::RelatedGeneralsop_classUID>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::OriginalSpecializedsop_classUID>::s_keyword =
    Keyword::OriginalSpecializedsop_classUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OriginalSpecializedsop_classUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OriginalSpecializedsop_classUID>::s_element = 0x001B;
template<>
DATA_API const std::string_view Attribute<Keyword::OriginalSpecializedsop_classUID>::s_name =
    "Original Specialized SOP Class UID";
template<>
DATA_API const VR Attribute<Keyword::OriginalSpecializedsop_classUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::OriginalSpecializedsop_classUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StudyDate>::s_keyword = Keyword::StudyDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyDate>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyDate>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::StudyDate>::s_name = "Study Date";
template<>
DATA_API const VR Attribute<Keyword::StudyDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::StudyDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesDate>::s_keyword = Keyword::SeriesDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesDate>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesDate>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesDate>::s_name = "Series Date";
template<>
DATA_API const VR Attribute<Keyword::SeriesDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::SeriesDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDate>::s_keyword = Keyword::AcquisitionDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDate>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDate>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDate>::s_name = "Acquisition Date";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentDate>::s_keyword = Keyword::ContentDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentDate>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentDate>::s_element = 0x0023;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentDate>::s_name = "Content Date";
template<>
DATA_API const VR Attribute<Keyword::ContentDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::ContentDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDateTime>::s_keyword = Keyword::AcquisitionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDateTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDateTime>::s_element = 0x002A;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDateTime>::s_name = "Acquisition DateTime";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StudyTime>::s_keyword = Keyword::StudyTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyTime>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::StudyTime>::s_name = "Study Time";
template<>
DATA_API const VR Attribute<Keyword::StudyTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::StudyTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesTime>::s_keyword = Keyword::SeriesTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesTime>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesTime>::s_name = "Series Time";
template<>
DATA_API const VR Attribute<Keyword::SeriesTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::SeriesTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionTime>::s_keyword = Keyword::AcquisitionTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTime>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionTime>::s_name = "Acquisition Time";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentTime>::s_keyword = Keyword::ContentTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentTime>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentTime>::s_element = 0x0033;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentTime>::s_name = "Content Time";
template<>
DATA_API const VR Attribute<Keyword::ContentTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::ContentTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AccessionNumber>::s_keyword = Keyword::AccessionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AccessionNumber>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AccessionNumber>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::AccessionNumber>::s_name = "Accession Number";
template<>
DATA_API const VR Attribute<Keyword::AccessionNumber>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::AccessionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfAccessionNumberSequence>::s_keyword =
    Keyword::IssuerOfAccessionNumberSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfAccessionNumberSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfAccessionNumberSequence>::s_element = 0x0051;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfAccessionNumberSequence>::s_name =
    "Issuer of Accession Number Sequence";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfAccessionNumberSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfAccessionNumberSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::QueryRetrieveView>::s_keyword = Keyword::QueryRetrieveView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QueryRetrieveView>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QueryRetrieveView>::s_element = 0x0053;
template<>
DATA_API const std::string_view Attribute<Keyword::QueryRetrieveView>::s_name = "Query/Retrieve view";
template<>
DATA_API const VR Attribute<Keyword::QueryRetrieveView>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::QueryRetrieveView>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RetrieveAETitle>::s_keyword = Keyword::RetrieveAETitle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveAETitle>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveAETitle>::s_element = 0x0054;
template<>
DATA_API const std::string_view Attribute<Keyword::RetrieveAETitle>::s_name = "Retrieve AE Title";
template<>
DATA_API const VR Attribute<Keyword::RetrieveAETitle>::s_vr = VR::AE;
template<>
DATA_API const VM Attribute<Keyword::RetrieveAETitle>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::StationAETitle>::s_keyword = Keyword::StationAETitle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StationAETitle>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StationAETitle>::s_element = 0x0055;
template<>
DATA_API const std::string_view Attribute<Keyword::StationAETitle>::s_name = "Station AE Title";
template<>
DATA_API const VR Attribute<Keyword::StationAETitle>::s_vr = VR::AE;
template<>
DATA_API const VM Attribute<Keyword::StationAETitle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Modality>::s_keyword = Keyword::Modality;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Modality>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Modality>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::Modality>::s_name = "Modality";
template<>
DATA_API const VR Attribute<Keyword::Modality>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Modality>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConversionType>::s_keyword = Keyword::ConversionType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConversionType>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConversionType>::s_element = 0x0064;
template<>
DATA_API const std::string_view Attribute<Keyword::ConversionType>::s_name = "Conversion Type";
template<>
DATA_API const VR Attribute<Keyword::ConversionType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ConversionType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PresentationIntentType>::s_keyword = Keyword::PresentationIntentType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationIntentType>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationIntentType>::s_element = 0x0068;
template<>
DATA_API const std::string_view Attribute<Keyword::PresentationIntentType>::s_name = "Presentation Intent Type";
template<>
DATA_API const VR Attribute<Keyword::PresentationIntentType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PresentationIntentType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Manufacturer>::s_keyword = Keyword::Manufacturer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Manufacturer>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Manufacturer>::s_element = 0x0070;
template<>
DATA_API const std::string_view Attribute<Keyword::Manufacturer>::s_name = "Manufacturer";
template<>
DATA_API const VR Attribute<Keyword::Manufacturer>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::Manufacturer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstitutionName>::s_keyword = Keyword::InstitutionName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionName>::s_element = 0x0080;
template<>
DATA_API const std::string_view Attribute<Keyword::InstitutionName>::s_name = "Institution Name";
template<>
DATA_API const VR Attribute<Keyword::InstitutionName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::InstitutionName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstitutionAddress>::s_keyword = Keyword::InstitutionAddress;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionAddress>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionAddress>::s_element = 0x0081;
template<>
DATA_API const std::string_view Attribute<Keyword::InstitutionAddress>::s_name = "Institution Address";
template<>
DATA_API const VR Attribute<Keyword::InstitutionAddress>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::InstitutionAddress>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstitutionCodeSequence>::s_keyword = Keyword::InstitutionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionCodeSequence>::s_element = 0x0082;
template<>
DATA_API const std::string_view Attribute<Keyword::InstitutionCodeSequence>::s_name = "Institution Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::InstitutionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InstitutionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferringPhysicianName>::s_keyword = Keyword::ReferringPhysicianName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferringPhysicianName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferringPhysicianName>::s_element = 0x0090;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferringPhysicianName>::s_name = "Referring Physician's Name";
template<>
DATA_API const VR Attribute<Keyword::ReferringPhysicianName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::ReferringPhysicianName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferringPhysicianIdentificationSequence>::s_keyword =
    Keyword::ReferringPhysicianIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferringPhysicianIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferringPhysicianIdentificationSequence>::s_element = 0x0096;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferringPhysicianIdentificationSequence>::s_name =
    "Referring Physician Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferringPhysicianIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferringPhysicianIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConsultingPhysicianName>::s_keyword = Keyword::ConsultingPhysicianName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsultingPhysicianName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsultingPhysicianName>::s_element = 0x009C;
template<>
DATA_API const std::string_view Attribute<Keyword::ConsultingPhysicianName>::s_name = "Consulting Physician's Name";
template<>
DATA_API const VR Attribute<Keyword::ConsultingPhysicianName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::ConsultingPhysicianName>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ConsultingPhysicianIdentificationSequence>::s_keyword =
    Keyword::ConsultingPhysicianIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsultingPhysicianIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsultingPhysicianIdentificationSequence>::s_element = 0x009D;
template<>
DATA_API const std::string_view Attribute<Keyword::ConsultingPhysicianIdentificationSequence>::s_name =
    "Consulting Physician Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::ConsultingPhysicianIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ConsultingPhysicianIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodeValue>::s_keyword = Keyword::CodeValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodeValue>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodeValue>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::CodeValue>::s_name = "Code Value";
template<>
DATA_API const VR Attribute<Keyword::CodeValue>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::CodeValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeDesignator>::s_keyword = Keyword::CodingSchemeDesignator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeDesignator>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeDesignator>::s_element = 0x0102;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeDesignator>::s_name = "Coding Scheme Designator";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeDesignator>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeDesignator>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeVersion>::s_keyword = Keyword::CodingSchemeVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeVersion>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeVersion>::s_element = 0x0103;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeVersion>::s_name = "Coding Scheme Version";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeVersion>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodeMeaning>::s_keyword = Keyword::CodeMeaning;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodeMeaning>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodeMeaning>::s_element = 0x0104;
template<>
DATA_API const std::string_view Attribute<Keyword::CodeMeaning>::s_name = "Code Meaning";
template<>
DATA_API const VR Attribute<Keyword::CodeMeaning>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::CodeMeaning>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MappingResource>::s_keyword = Keyword::MappingResource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResource>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResource>::s_element = 0x0105;
template<>
DATA_API const std::string_view Attribute<Keyword::MappingResource>::s_name = "Mapping Resource";
template<>
DATA_API const VR Attribute<Keyword::MappingResource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MappingResource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextGroupVersion>::s_keyword = Keyword::ContextGroupVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupVersion>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupVersion>::s_element = 0x0106;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextGroupVersion>::s_name = "Context Group Version";
template<>
DATA_API const VR Attribute<Keyword::ContextGroupVersion>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ContextGroupVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextGroupLocalVersion>::s_keyword = Keyword::ContextGroupLocalVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupLocalVersion>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupLocalVersion>::s_element = 0x0107;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextGroupLocalVersion>::s_name = "Context Group Local Version";
template<>
DATA_API const VR Attribute<Keyword::ContextGroupLocalVersion>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ContextGroupLocalVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeResourcesSequence>::s_keyword =
    Keyword::CodingSchemeResourcesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeResourcesSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeResourcesSequence>::s_element = 0x0109;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeResourcesSequence>::s_name =
    "Coding Scheme Resources Sequence";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeResourcesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeResourcesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextGroupExtensionFlag>::s_keyword = Keyword::ContextGroupExtensionFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupExtensionFlag>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupExtensionFlag>::s_element = 0x010B;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextGroupExtensionFlag>::s_name = "Context Group Extension Flag";
template<>
DATA_API const VR Attribute<Keyword::ContextGroupExtensionFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContextGroupExtensionFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeUID>::s_keyword = Keyword::CodingSchemeUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeUID>::s_element = 0x010C;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeUID>::s_name = "Coding Scheme UID";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextGroupExtensionCreatorUID>::s_keyword =
    Keyword::ContextGroupExtensionCreatorUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupExtensionCreatorUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupExtensionCreatorUID>::s_element = 0x010D;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextGroupExtensionCreatorUID>::s_name =
    "Context Group Extension Creator UID";
template<>
DATA_API const VR Attribute<Keyword::ContextGroupExtensionCreatorUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ContextGroupExtensionCreatorUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextIdentifier>::s_keyword = Keyword::ContextIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextIdentifier>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextIdentifier>::s_element = 0x010F;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextIdentifier>::s_name = "Context Identifier";
template<>
DATA_API const VR Attribute<Keyword::ContextIdentifier>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContextIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeIdentificationSequence>::s_keyword =
    Keyword::CodingSchemeIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeIdentificationSequence>::s_element = 0x0110;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeIdentificationSequence>::s_name =
    "Coding Scheme Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeRegistry>::s_keyword = Keyword::CodingSchemeRegistry;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeRegistry>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeRegistry>::s_element = 0x0112;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeRegistry>::s_name = "Coding Scheme Registry";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeRegistry>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeRegistry>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeExternalID>::s_keyword = Keyword::CodingSchemeExternalID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeExternalID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeExternalID>::s_element = 0x0114;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeExternalID>::s_name = "Coding Scheme External ID";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeExternalID>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeExternalID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeName>::s_keyword = Keyword::CodingSchemeName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeName>::s_element = 0x0115;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeName>::s_name = "Coding Scheme Name";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeName>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CodingSchemeResponsibleOrganization>::s_keyword =
    Keyword::CodingSchemeResponsibleOrganization;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeResponsibleOrganization>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CodingSchemeResponsibleOrganization>::s_element = 0x0116;
template<>
DATA_API const std::string_view Attribute<Keyword::CodingSchemeResponsibleOrganization>::s_name =
    "Coding Scheme Responsible Organization";
template<>
DATA_API const VR Attribute<Keyword::CodingSchemeResponsibleOrganization>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::CodingSchemeResponsibleOrganization>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextUID>::s_keyword = Keyword::ContextUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextUID>::s_element = 0x0117;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextUID>::s_name = "Context UID";
template<>
DATA_API const VR Attribute<Keyword::ContextUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ContextUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MappingResourceUID>::s_keyword = Keyword::MappingResourceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResourceUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResourceUID>::s_element = 0x0118;
template<>
DATA_API const std::string_view Attribute<Keyword::MappingResourceUID>::s_name = "Mapping Resource UID";
template<>
DATA_API const VR Attribute<Keyword::MappingResourceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::MappingResourceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LongCodeValue>::s_keyword = Keyword::LongCodeValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongCodeValue>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongCodeValue>::s_element = 0x0119;
template<>
DATA_API const std::string_view Attribute<Keyword::LongCodeValue>::s_name = "Long Code Value";
template<>
DATA_API const VR Attribute<Keyword::LongCodeValue>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::LongCodeValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::URNCodeValue>::s_keyword = Keyword::URNCodeValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::URNCodeValue>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::URNCodeValue>::s_element = 0x0120;
template<>
DATA_API const std::string_view Attribute<Keyword::URNCodeValue>::s_name = "URN Code Value";
template<>
DATA_API const VR Attribute<Keyword::URNCodeValue>::s_vr = VR::UR;
template<>
DATA_API const VM Attribute<Keyword::URNCodeValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EquivalentCodeSequence>::s_keyword = Keyword::EquivalentCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquivalentCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquivalentCodeSequence>::s_element = 0x0121;
template<>
DATA_API const std::string_view Attribute<Keyword::EquivalentCodeSequence>::s_name = "Equivalent Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::EquivalentCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EquivalentCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MappingResourceName>::s_keyword = Keyword::MappingResourceName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResourceName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResourceName>::s_element = 0x0122;
template<>
DATA_API const std::string_view Attribute<Keyword::MappingResourceName>::s_name = "Mapping Resource Name";
template<>
DATA_API const VR Attribute<Keyword::MappingResourceName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::MappingResourceName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContextGroupIdentificationSequence>::s_keyword =
    Keyword::ContextGroupIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContextGroupIdentificationSequence>::s_element = 0x0123;
template<>
DATA_API const std::string_view Attribute<Keyword::ContextGroupIdentificationSequence>::s_name =
    "Context Group Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContextGroupIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContextGroupIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MappingResourceIdentificationSequence>::s_keyword =
    Keyword::MappingResourceIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResourceIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappingResourceIdentificationSequence>::s_element = 0x0124;
template<>
DATA_API const std::string_view Attribute<Keyword::MappingResourceIdentificationSequence>::s_name =
    "Mapping Resource Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::MappingResourceIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MappingResourceIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimezoneOffsetFromUTC>::s_keyword = Keyword::TimezoneOffsetFromUTC;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimezoneOffsetFromUTC>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimezoneOffsetFromUTC>::s_element = 0x0201;
template<>
DATA_API const std::string_view Attribute<Keyword::TimezoneOffsetFromUTC>::s_name = "Timezone Offset From UTC";
template<>
DATA_API const VR Attribute<Keyword::TimezoneOffsetFromUTC>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::TimezoneOffsetFromUTC>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ResponsibleGroupCodeSequence>::s_keyword =
    Keyword::ResponsibleGroupCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsibleGroupCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsibleGroupCodeSequence>::s_element = 0x0220;
template<>
DATA_API const std::string_view Attribute<Keyword::ResponsibleGroupCodeSequence>::s_name =
    "Responsible Group Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ResponsibleGroupCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ResponsibleGroupCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrivateDataElementCharacteristicsSequence>::s_keyword =
    Keyword::PrivateDataElementCharacteristicsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateDataElementCharacteristicsSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateDataElementCharacteristicsSequence>::s_element = 0x0300;
template<>
DATA_API const std::string_view Attribute<Keyword::PrivateDataElementCharacteristicsSequence>::s_name =
    "Private Data Element Characteristics Sequence";
template<>
DATA_API const VR Attribute<Keyword::PrivateDataElementCharacteristicsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PrivateDataElementCharacteristicsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrivateGroupReference>::s_keyword = Keyword::PrivateGroupReference;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateGroupReference>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateGroupReference>::s_element = 0x0301;
template<>
DATA_API const std::string_view Attribute<Keyword::PrivateGroupReference>::s_name = "Private Group Reference";
template<>
DATA_API const VR Attribute<Keyword::PrivateGroupReference>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PrivateGroupReference>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrivateCreatorReference>::s_keyword = Keyword::PrivateCreatorReference;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateCreatorReference>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateCreatorReference>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::PrivateCreatorReference>::s_name = "Private Creator Reference";
template<>
DATA_API const VR Attribute<Keyword::PrivateCreatorReference>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PrivateCreatorReference>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlockIdentifyingInformationStatus>::s_keyword =
    Keyword::BlockIdentifyingInformationStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlockIdentifyingInformationStatus>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlockIdentifyingInformationStatus>::s_element = 0x0303;
template<>
DATA_API const std::string_view Attribute<Keyword::BlockIdentifyingInformationStatus>::s_name =
    "Block Identifying Information Status";
template<>
DATA_API const VR Attribute<Keyword::BlockIdentifyingInformationStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BlockIdentifyingInformationStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NonidentifyingPrivateElements>::s_keyword =
    Keyword::NonidentifyingPrivateElements;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NonidentifyingPrivateElements>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NonidentifyingPrivateElements>::s_element = 0x0304;
template<>
DATA_API const std::string_view Attribute<Keyword::NonidentifyingPrivateElements>::s_name =
    "Nonidentifying Private Elements";
template<>
DATA_API const VR Attribute<Keyword::NonidentifyingPrivateElements>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NonidentifyingPrivateElements>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DeidentificationActionSequence>::s_keyword =
    Keyword::DeidentificationActionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeidentificationActionSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeidentificationActionSequence>::s_element = 0x0305;
template<>
DATA_API const std::string_view Attribute<Keyword::DeidentificationActionSequence>::s_name =
    "Deidentification action Sequence";
template<>
DATA_API const VR Attribute<Keyword::DeidentificationActionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DeidentificationActionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrivateDataElementDefinitionSequence>::s_keyword =
    Keyword::PrivateDataElementDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateDataElementDefinitionSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrivateDataElementDefinitionSequence>::s_element = 0x0310;
template<>
DATA_API const std::string_view Attribute<Keyword::PrivateDataElementDefinitionSequence>::s_name =
    "Private Data Element Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::PrivateDataElementDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PrivateDataElementDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StationName>::s_keyword = Keyword::StationName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StationName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StationName>::s_element = 0x1010;
template<>
DATA_API const std::string_view Attribute<Keyword::StationName>::s_name = "Station Name";
template<>
DATA_API const VR Attribute<Keyword::StationName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::StationName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StudyDescription>::s_keyword = Keyword::StudyDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyDescription>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyDescription>::s_element = 0x1030;
template<>
DATA_API const std::string_view Attribute<Keyword::StudyDescription>::s_name = "Study Description";
template<>
DATA_API const VR Attribute<Keyword::StudyDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::StudyDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ProcedureCodeSequence>::s_keyword = Keyword::ProcedureCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProcedureCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProcedureCodeSequence>::s_element = 0x1032;
template<>
DATA_API const std::string_view Attribute<Keyword::ProcedureCodeSequence>::s_name = "Procedure Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ProcedureCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ProcedureCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesDescription>::s_keyword = Keyword::SeriesDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesDescription>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesDescription>::s_element = 0x103E;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesDescription>::s_name = "Series Description";
template<>
DATA_API const VR Attribute<Keyword::SeriesDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SeriesDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesDescriptionCodeSequence>::s_keyword =
    Keyword::SeriesDescriptionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesDescriptionCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesDescriptionCodeSequence>::s_element = 0x103F;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesDescriptionCodeSequence>::s_name =
    "Series Description Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SeriesDescriptionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SeriesDescriptionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstitutionalDepartmentName>::s_keyword =
    Keyword::InstitutionalDepartmentName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionalDepartmentName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionalDepartmentName>::s_element = 0x1040;
template<>
DATA_API const std::string_view Attribute<Keyword::InstitutionalDepartmentName>::s_name =
    "Institutional Department Name";
template<>
DATA_API const VR Attribute<Keyword::InstitutionalDepartmentName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::InstitutionalDepartmentName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstitutionalDepartmentTypeCodeSequence>::s_keyword =
    Keyword::InstitutionalDepartmentTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionalDepartmentTypeCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstitutionalDepartmentTypeCodeSequence>::s_element = 0x1041;
template<>
DATA_API const std::string_view Attribute<Keyword::InstitutionalDepartmentTypeCodeSequence>::s_name =
    "Institutional Department Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::InstitutionalDepartmentTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InstitutionalDepartmentTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhysiciansOfRecord>::s_keyword = Keyword::PhysiciansOfRecord;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysiciansOfRecord>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysiciansOfRecord>::s_element = 0x1048;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysiciansOfRecord>::s_name = "Physician(s) of Record";
template<>
DATA_API const VR Attribute<Keyword::PhysiciansOfRecord>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::PhysiciansOfRecord>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::PhysiciansOfRecordIdentificationSequence>::s_keyword =
    Keyword::PhysiciansOfRecordIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysiciansOfRecordIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysiciansOfRecordIdentificationSequence>::s_element = 0x1049;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysiciansOfRecordIdentificationSequence>::s_name =
    "Physician(s) of Record Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::PhysiciansOfRecordIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PhysiciansOfRecordIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformingPhysicianName>::s_keyword = Keyword::PerformingPhysicianName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformingPhysicianName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformingPhysicianName>::s_element = 0x1050;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformingPhysicianName>::s_name = "Performing Physician's Name";
template<>
DATA_API const VR Attribute<Keyword::PerformingPhysicianName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::PerformingPhysicianName>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::PerformingPhysicianIdentificationSequence>::s_keyword =
    Keyword::PerformingPhysicianIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformingPhysicianIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformingPhysicianIdentificationSequence>::s_element = 0x1052;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformingPhysicianIdentificationSequence>::s_name =
    "Performing Physician Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::PerformingPhysicianIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PerformingPhysicianIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NameOfPhysiciansReadingStudy>::s_keyword =
    Keyword::NameOfPhysiciansReadingStudy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NameOfPhysiciansReadingStudy>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NameOfPhysiciansReadingStudy>::s_element = 0x1060;
template<>
DATA_API const std::string_view Attribute<Keyword::NameOfPhysiciansReadingStudy>::s_name =
    "Name of Physician(s) Reading Study";
template<>
DATA_API const VR Attribute<Keyword::NameOfPhysiciansReadingStudy>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::NameOfPhysiciansReadingStudy>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::PhysiciansReadingStudyIdentificationSequence>::s_keyword =
    Keyword::PhysiciansReadingStudyIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysiciansReadingStudyIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysiciansReadingStudyIdentificationSequence>::s_element = 0x1062;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysiciansReadingStudyIdentificationSequence>::s_name =
    "Physician(s) Reading Study Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::PhysiciansReadingStudyIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PhysiciansReadingStudyIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OperatorsName>::s_keyword = Keyword::OperatorsName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OperatorsName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OperatorsName>::s_element = 0x1070;
template<>
DATA_API const std::string_view Attribute<Keyword::OperatorsName>::s_name = "Operators' Name";
template<>
DATA_API const VR Attribute<Keyword::OperatorsName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::OperatorsName>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::OperatorIdentificationSequence>::s_keyword =
    Keyword::OperatorIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OperatorIdentificationSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OperatorIdentificationSequence>::s_element = 0x1072;
template<>
DATA_API const std::string_view Attribute<Keyword::OperatorIdentificationSequence>::s_name =
    "Operator Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::OperatorIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OperatorIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AdmittingDiagnosesDescription>::s_keyword =
    Keyword::AdmittingDiagnosesDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdmittingDiagnosesDescription>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdmittingDiagnosesDescription>::s_element = 0x1080;
template<>
DATA_API const std::string_view Attribute<Keyword::AdmittingDiagnosesDescription>::s_name =
    "Admitting Diagnoses Description";
template<>
DATA_API const VR Attribute<Keyword::AdmittingDiagnosesDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AdmittingDiagnosesDescription>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::AdmittingDiagnosesCodeSequence>::s_keyword =
    Keyword::AdmittingDiagnosesCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdmittingDiagnosesCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdmittingDiagnosesCodeSequence>::s_element = 0x1084;
template<>
DATA_API const std::string_view Attribute<Keyword::AdmittingDiagnosesCodeSequence>::s_name =
    "Admitting Diagnoses Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AdmittingDiagnosesCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AdmittingDiagnosesCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PyramidDescription>::s_keyword = Keyword::PyramidDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PyramidDescription>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PyramidDescription>::s_element = 0x1088;
template<>
DATA_API const std::string_view Attribute<Keyword::PyramidDescription>::s_name = "Pyramid Description";
template<>
DATA_API const VR Attribute<Keyword::PyramidDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PyramidDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ManufacturerModelName>::s_keyword = Keyword::ManufacturerModelName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerModelName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerModelName>::s_element = 0x1090;
template<>
DATA_API const std::string_view Attribute<Keyword::ManufacturerModelName>::s_name = "Manufacturer's Model Name";
template<>
DATA_API const VR Attribute<Keyword::ManufacturerModelName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ManufacturerModelName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedStudySequence>::s_keyword = Keyword::ReferencedStudySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedStudySequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedStudySequence>::s_element = 0x1110;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedStudySequence>::s_name = "Referenced Study Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedStudySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedStudySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPerformedProcedureStepSequence>::s_keyword =
    Keyword::ReferencedPerformedProcedureStepSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPerformedProcedureStepSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPerformedProcedureStepSequence>::s_element = 0x1111;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPerformedProcedureStepSequence>::s_name =
    "Referenced Performed Procedure Step Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPerformedProcedureStepSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPerformedProcedureStepSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSeriesSequence>::s_keyword = Keyword::ReferencedSeriesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSeriesSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSeriesSequence>::s_element = 0x1115;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSeriesSequence>::s_name = "Referenced Series Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSeriesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSeriesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPatientSequence>::s_keyword = Keyword::ReferencedPatientSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPatientSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPatientSequence>::s_element = 0x1120;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPatientSequence>::s_name = "Referenced Patient Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPatientSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPatientSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedStereometricInstanceSequence>::s_keyword =
    Keyword::ReferencedStereometricInstanceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedStereometricInstanceSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedStereometricInstanceSequence>::s_element = 0x1134;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedStereometricInstanceSequence>::s_name =
    "Referenced Stereometric Instance Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedStereometricInstanceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedStereometricInstanceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedWaveformSequence>::s_keyword = Keyword::ReferencedWaveformSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedWaveformSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedWaveformSequence>::s_element = 0x113A;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedWaveformSequence>::s_name = "Referenced Waveform Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedWaveformSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedWaveformSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedImageSequence>::s_keyword = Keyword::ReferencedImageSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedImageSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedImageSequence>::s_element = 0x1140;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedImageSequence>::s_name = "Referenced Image Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedImageSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedImageSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedInstanceSequence>::s_keyword = Keyword::ReferencedInstanceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedInstanceSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedInstanceSequence>::s_element = 0x114A;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedInstanceSequence>::s_name = "Referenced Instance Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedInstanceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedInstanceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedRealWorldValueMappingInstanceSequence>::s_keyword =
    Keyword::ReferencedRealWorldValueMappingInstanceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRealWorldValueMappingInstanceSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRealWorldValueMappingInstanceSequence>::s_element = 0x114B;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedRealWorldValueMappingInstanceSequence>::s_name =
    "Referenced Real World Value Mapping Instance Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedRealWorldValueMappingInstanceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedRealWorldValueMappingInstanceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSOPClassUID>::s_keyword = Keyword::ReferencedSOPClassUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPClassUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPClassUID>::s_element = 0x1150;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSOPClassUID>::s_name = "Referenced SOP Class UID";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSOPClassUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSOPClassUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSOPInstanceUID>::s_keyword = Keyword::ReferencedSOPInstanceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPInstanceUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPInstanceUID>::s_element = 0x1155;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSOPInstanceUID>::s_name = "Referenced SOP Instance UID";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSOPInstanceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSOPInstanceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DefinitionSourceSequence>::s_keyword = Keyword::DefinitionSourceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DefinitionSourceSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DefinitionSourceSequence>::s_element = 0x1156;
template<>
DATA_API const std::string_view Attribute<Keyword::DefinitionSourceSequence>::s_name = "Definition Source Sequence";
template<>
DATA_API const VR Attribute<Keyword::DefinitionSourceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DefinitionSourceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedFrameNumber>::s_keyword = Keyword::ReferencedFrameNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFrameNumber>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFrameNumber>::s_element = 0x1160;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedFrameNumber>::s_name = "Referenced Frame Number";
template<>
DATA_API const VR Attribute<Keyword::ReferencedFrameNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ReferencedFrameNumber>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SimpleFrameList>::s_keyword = Keyword::SimpleFrameList;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SimpleFrameList>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SimpleFrameList>::s_element = 0x1161;
template<>
DATA_API const std::string_view Attribute<Keyword::SimpleFrameList>::s_name = "Simple Frame List";
template<>
DATA_API const VR Attribute<Keyword::SimpleFrameList>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::SimpleFrameList>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::CalculatedFrameList>::s_keyword = Keyword::CalculatedFrameList;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalculatedFrameList>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalculatedFrameList>::s_element = 0x1162;
template<>
DATA_API const std::string_view Attribute<Keyword::CalculatedFrameList>::s_name = "Calculated Frame List";
template<>
DATA_API const VR Attribute<Keyword::CalculatedFrameList>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::CalculatedFrameList>::s_vm = VM::MIN_3_MAX_3N;
template<>
DATA_API const Keyword Attribute<Keyword::TimeRange>::s_keyword = Keyword::TimeRange;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeRange>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeRange>::s_element = 0x1163;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeRange>::s_name = "Time Range";
template<>
DATA_API const VR Attribute<Keyword::TimeRange>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TimeRange>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::FrameExtractionSequence>::s_keyword = Keyword::FrameExtractionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameExtractionSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameExtractionSequence>::s_element = 0x1164;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameExtractionSequence>::s_name = "Frame Extraction Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameExtractionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameExtractionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultiFrameSourceSOPInstanceUID>::s_keyword =
    Keyword::MultiFrameSourceSOPInstanceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiFrameSourceSOPInstanceUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiFrameSourceSOPInstanceUID>::s_element = 0x1167;
template<>
DATA_API const std::string_view Attribute<Keyword::MultiFrameSourceSOPInstanceUID>::s_name =
    "Multi-frame Source SOP Instance UID";
template<>
DATA_API const VR Attribute<Keyword::MultiFrameSourceSOPInstanceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::MultiFrameSourceSOPInstanceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RetrieveURL>::s_keyword = Keyword::RetrieveURL;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveURL>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveURL>::s_element = 0x1190;
template<>
DATA_API const std::string_view Attribute<Keyword::RetrieveURL>::s_name = "Retrieve URL";
template<>
DATA_API const VR Attribute<Keyword::RetrieveURL>::s_vr = VR::UR;
template<>
DATA_API const VM Attribute<Keyword::RetrieveURL>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSOPSequence>::s_keyword = Keyword::ReferencedSOPSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPSequence>::s_element = 0x1199;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSOPSequence>::s_name = "Referenced SOP Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSOPSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSOPSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StudiesContainingOtherReferencedInstancesSequence>::s_keyword =
    Keyword::StudiesContainingOtherReferencedInstancesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudiesContainingOtherReferencedInstancesSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudiesContainingOtherReferencedInstancesSequence>::s_element = 0x1200;
template<>
DATA_API const std::string_view Attribute<Keyword::StudiesContainingOtherReferencedInstancesSequence>::s_name =
    "Studies Containing Other Referenced Instances Sequence";
template<>
DATA_API const VR Attribute<Keyword::StudiesContainingOtherReferencedInstancesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StudiesContainingOtherReferencedInstancesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelatedSeriesSequence>::s_keyword = Keyword::RelatedSeriesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelatedSeriesSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelatedSeriesSequence>::s_element = 0x1250;
template<>
DATA_API const std::string_view Attribute<Keyword::RelatedSeriesSequence>::s_name = "Related Series Sequence";
template<>
DATA_API const VR Attribute<Keyword::RelatedSeriesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RelatedSeriesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DerivationDescription>::s_keyword = Keyword::DerivationDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationDescription>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationDescription>::s_element = 0x2111;
template<>
DATA_API const std::string_view Attribute<Keyword::DerivationDescription>::s_name = "Derivation Description";
template<>
DATA_API const VR Attribute<Keyword::DerivationDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::DerivationDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceImageSequence>::s_keyword = Keyword::SourceImageSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceImageSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceImageSequence>::s_element = 0x2112;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceImageSequence>::s_name = "Source Image Sequence";
template<>
DATA_API const VR Attribute<Keyword::SourceImageSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SourceImageSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StageName>::s_keyword = Keyword::StageName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StageName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StageName>::s_element = 0x2120;
template<>
DATA_API const std::string_view Attribute<Keyword::StageName>::s_name = "Stage Name";
template<>
DATA_API const VR Attribute<Keyword::StageName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::StageName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StageNumber>::s_keyword = Keyword::StageNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StageNumber>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StageNumber>::s_element = 0x2122;
template<>
DATA_API const std::string_view Attribute<Keyword::StageNumber>::s_name = "Stage Number";
template<>
DATA_API const VR Attribute<Keyword::StageNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::StageNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfStages>::s_keyword = Keyword::NumberOfStages;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfStages>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfStages>::s_element = 0x2124;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfStages>::s_name = "Number of Stages";
template<>
DATA_API const VR Attribute<Keyword::NumberOfStages>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfStages>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewName>::s_keyword = Keyword::ViewName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewName>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewName>::s_element = 0x2127;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewName>::s_name = "view Name";
template<>
DATA_API const VR Attribute<Keyword::ViewName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ViewName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewNumber>::s_keyword = Keyword::ViewNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewNumber>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewNumber>::s_element = 0x2128;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewNumber>::s_name = "view Number";
template<>
DATA_API const VR Attribute<Keyword::ViewNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ViewNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfEventTimers>::s_keyword = Keyword::NumberOfEventTimers;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfEventTimers>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfEventTimers>::s_element = 0x2129;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfEventTimers>::s_name = "Number of Event Timers";
template<>
DATA_API const VR Attribute<Keyword::NumberOfEventTimers>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfEventTimers>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfViewsInStage>::s_keyword = Keyword::NumberOfViewsInStage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfViewsInStage>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfViewsInStage>::s_element = 0x212A;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfViewsInStage>::s_name = "Number of Views in Stage";
template<>
DATA_API const VR Attribute<Keyword::NumberOfViewsInStage>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfViewsInStage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EventElapsedTimes>::s_keyword = Keyword::EventElapsedTimes;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventElapsedTimes>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventElapsedTimes>::s_element = 0x2130;
template<>
DATA_API const std::string_view Attribute<Keyword::EventElapsedTimes>::s_name = "Event Elapsed Time(s)";
template<>
DATA_API const VR Attribute<Keyword::EventElapsedTimes>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EventElapsedTimes>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::EventTimerNames>::s_keyword = Keyword::EventTimerNames;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventTimerNames>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventTimerNames>::s_element = 0x2132;
template<>
DATA_API const std::string_view Attribute<Keyword::EventTimerNames>::s_name = "Event Timer Name(s)";
template<>
DATA_API const VR Attribute<Keyword::EventTimerNames>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::EventTimerNames>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::EventTimerSequence>::s_keyword = Keyword::EventTimerSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventTimerSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventTimerSequence>::s_element = 0x2133;
template<>
DATA_API const std::string_view Attribute<Keyword::EventTimerSequence>::s_name = "Event Timer Sequence";
template<>
DATA_API const VR Attribute<Keyword::EventTimerSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EventTimerSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EventTimeOffset>::s_keyword = Keyword::EventTimeOffset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventTimeOffset>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventTimeOffset>::s_element = 0x2134;
template<>
DATA_API const std::string_view Attribute<Keyword::EventTimeOffset>::s_name = "Event Time Offset";
template<>
DATA_API const VR Attribute<Keyword::EventTimeOffset>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::EventTimeOffset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EventCodeSequence>::s_keyword = Keyword::EventCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EventCodeSequence>::s_element = 0x2135;
template<>
DATA_API const std::string_view Attribute<Keyword::EventCodeSequence>::s_name = "Event Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::EventCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EventCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartTrim>::s_keyword = Keyword::StartTrim;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartTrim>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartTrim>::s_element = 0x2142;
template<>
DATA_API const std::string_view Attribute<Keyword::StartTrim>::s_name = "Start Trim";
template<>
DATA_API const VR Attribute<Keyword::StartTrim>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::StartTrim>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StopTrim>::s_keyword = Keyword::StopTrim;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StopTrim>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StopTrim>::s_element = 0x2143;
template<>
DATA_API const std::string_view Attribute<Keyword::StopTrim>::s_name = "Stop Trim";
template<>
DATA_API const VR Attribute<Keyword::StopTrim>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::StopTrim>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedDisplayFrameRate>::s_keyword =
    Keyword::RecommendedDisplayFrameRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayFrameRate>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayFrameRate>::s_element = 0x2144;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedDisplayFrameRate>::s_name =
    "Recommended Display Frame Rate";
template<>
DATA_API const VR Attribute<Keyword::RecommendedDisplayFrameRate>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::RecommendedDisplayFrameRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AnatomicRegionSequence>::s_keyword = Keyword::AnatomicRegionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicRegionSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicRegionSequence>::s_element = 0x2218;
template<>
DATA_API const std::string_view Attribute<Keyword::AnatomicRegionSequence>::s_name = "Anatomic Region Sequence";
template<>
DATA_API const VR Attribute<Keyword::AnatomicRegionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AnatomicRegionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AnatomicRegionModifierSequence>::s_keyword =
    Keyword::AnatomicRegionModifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicRegionModifierSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicRegionModifierSequence>::s_element = 0x2220;
template<>
DATA_API const std::string_view Attribute<Keyword::AnatomicRegionModifierSequence>::s_name =
    "Anatomic Region Modifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::AnatomicRegionModifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AnatomicRegionModifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryAnatomicStructureSequence>::s_keyword =
    Keyword::PrimaryAnatomicStructureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryAnatomicStructureSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryAnatomicStructureSequence>::s_element = 0x2228;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryAnatomicStructureSequence>::s_name =
    "Primary Anatomic Structure Sequence";
template<>
DATA_API const VR Attribute<Keyword::PrimaryAnatomicStructureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PrimaryAnatomicStructureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryAnatomicStructureModifierSequence>::s_keyword =
    Keyword::PrimaryAnatomicStructureModifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryAnatomicStructureModifierSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryAnatomicStructureModifierSequence>::s_element = 0x2230;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryAnatomicStructureModifierSequence>::s_name =
    "Primary Anatomic Structure Modifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::PrimaryAnatomicStructureModifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PrimaryAnatomicStructureModifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IrradiationEventUID>::s_keyword = Keyword::IrradiationEventUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IrradiationEventUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IrradiationEventUID>::s_element = 0x3010;
template<>
DATA_API const std::string_view Attribute<Keyword::IrradiationEventUID>::s_name = "Irradiation Event UID";
template<>
DATA_API const VR Attribute<Keyword::IrradiationEventUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::IrradiationEventUID>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SourceIrradiationEventSequence>::s_keyword =
    Keyword::SourceIrradiationEventSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceIrradiationEventSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceIrradiationEventSequence>::s_element = 0x3011;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceIrradiationEventSequence>::s_name =
    "Source Irradiation Event Sequence";
template<>
DATA_API const VR Attribute<Keyword::SourceIrradiationEventSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SourceIrradiationEventSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalAdministrationEventUID>::s_keyword =
    Keyword::RadiopharmaceuticalAdministrationEventUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalAdministrationEventUID>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalAdministrationEventUID>::s_element = 0x3012;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalAdministrationEventUID>::s_name =
    "Radiopharmaceutical Administration Event UID";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalAdministrationEventUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalAdministrationEventUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameType>::s_keyword = Keyword::FrameType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameType>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameType>::s_element = 0x9007;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameType>::s_name = "Frame Type";
template<>
DATA_API const VR Attribute<Keyword::FrameType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FrameType>::s_vm = VM::MIN_4_MAX_5;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedImageEvidenceSequence>::s_keyword =
    Keyword::ReferencedImageEvidenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedImageEvidenceSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedImageEvidenceSequence>::s_element = 0x9092;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedImageEvidenceSequence>::s_name =
    "Referenced Image Evidence Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedImageEvidenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedImageEvidenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedRawDataSequence>::s_keyword = Keyword::ReferencedRawDataSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRawDataSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRawDataSequence>::s_element = 0x9121;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedRawDataSequence>::s_name = "Referenced Raw Data Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedRawDataSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedRawDataSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DerivationImageSequence>::s_keyword = Keyword::DerivationImageSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationImageSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationImageSequence>::s_element = 0x9124;
template<>
DATA_API const std::string_view Attribute<Keyword::DerivationImageSequence>::s_name = "Derivation Image Sequence";
template<>
DATA_API const VR Attribute<Keyword::DerivationImageSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DerivationImageSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceImageEvidenceSequence>::s_keyword =
    Keyword::SourceImageEvidenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceImageEvidenceSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceImageEvidenceSequence>::s_element = 0x9154;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceImageEvidenceSequence>::s_name =
    "Source Image Evidence Sequence";
template<>
DATA_API const VR Attribute<Keyword::SourceImageEvidenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SourceImageEvidenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelPresentation>::s_keyword = Keyword::PixelPresentation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelPresentation>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelPresentation>::s_element = 0x9205;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelPresentation>::s_name = "Pixel Presentation";
template<>
DATA_API const VR Attribute<Keyword::PixelPresentation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PixelPresentation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VolumetricProperties>::s_keyword = Keyword::VolumetricProperties;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumetricProperties>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumetricProperties>::s_element = 0x9206;
template<>
DATA_API const std::string_view Attribute<Keyword::VolumetricProperties>::s_name = "Volumetric Properties";
template<>
DATA_API const VR Attribute<Keyword::VolumetricProperties>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::VolumetricProperties>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VolumeBasedCalculationTechnique>::s_keyword =
    Keyword::VolumeBasedCalculationTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeBasedCalculationTechnique>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeBasedCalculationTechnique>::s_element = 0x9207;
template<>
DATA_API const std::string_view Attribute<Keyword::VolumeBasedCalculationTechnique>::s_name =
    "Volume Based Calculation technique";
template<>
DATA_API const VR Attribute<Keyword::VolumeBasedCalculationTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::VolumeBasedCalculationTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ComplexImageComponent>::s_keyword = Keyword::ComplexImageComponent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ComplexImageComponent>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ComplexImageComponent>::s_element = 0x9208;
template<>
DATA_API const std::string_view Attribute<Keyword::ComplexImageComponent>::s_name = "Complex Image Component";
template<>
DATA_API const VR Attribute<Keyword::ComplexImageComponent>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ComplexImageComponent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionContrast>::s_keyword = Keyword::AcquisitionContrast;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionContrast>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionContrast>::s_element = 0x9209;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionContrast>::s_name = "Acquisition Contrast";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionContrast>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionContrast>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DerivationCodeSequence>::s_keyword = Keyword::DerivationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationCodeSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationCodeSequence>::s_element = 0x9215;
template<>
DATA_API const std::string_view Attribute<Keyword::DerivationCodeSequence>::s_name = "Derivation Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::DerivationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DerivationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPresentationStateSequence>::s_keyword =
    Keyword::ReferencedPresentationStateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPresentationStateSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPresentationStateSequence>::s_element = 0x9237;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPresentationStateSequence>::s_name =
    "Referenced Presentation State Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPresentationStateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPresentationStateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedOtherPlaneSequence>::s_keyword =
    Keyword::ReferencedOtherPlaneSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedOtherPlaneSequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedOtherPlaneSequence>::s_element = 0x9410;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedOtherPlaneSequence>::s_name =
    "Referenced Other Plane Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedOtherPlaneSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedOtherPlaneSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameDisplaySequence>::s_keyword = Keyword::FrameDisplaySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDisplaySequence>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDisplaySequence>::s_element = 0x9458;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameDisplaySequence>::s_name = "Frame Display Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameDisplaySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameDisplaySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedDisplayFrameRateInFloat>::s_keyword =
    Keyword::RecommendedDisplayFrameRateInFloat;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayFrameRateInFloat>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayFrameRateInFloat>::s_element = 0x9459;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedDisplayFrameRateInFloat>::s_name =
    "Recommended Display Frame Rate in Float";
template<>
DATA_API const VR Attribute<Keyword::RecommendedDisplayFrameRateInFloat>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RecommendedDisplayFrameRateInFloat>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SkipFrameRangeFlag>::s_keyword = Keyword::SkipFrameRangeFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SkipFrameRangeFlag>::s_group = 0x0008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SkipFrameRangeFlag>::s_element = 0x9460;
template<>
DATA_API const std::string_view Attribute<Keyword::SkipFrameRangeFlag>::s_name = "Skip Frame Range Flag";
template<>
DATA_API const VR Attribute<Keyword::SkipFrameRangeFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SkipFrameRangeFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientName>::s_keyword = Keyword::PatientName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientName>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientName>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientName>::s_name = "Patient's Name";
template<>
DATA_API const VR Attribute<Keyword::PatientName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::PatientName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientID>::s_keyword = Keyword::PatientID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientID>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientID>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientID>::s_name = "Patient ID";
template<>
DATA_API const VR Attribute<Keyword::PatientID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PatientID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfPatientID>::s_keyword = Keyword::IssuerOfPatientID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfPatientID>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfPatientID>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfPatientID>::s_name = "Issuer of Patient ID";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfPatientID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfPatientID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TypeOfPatientID>::s_keyword = Keyword::TypeOfPatientID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfPatientID>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfPatientID>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::TypeOfPatientID>::s_name = "Type of Patient ID";
template<>
DATA_API const VR Attribute<Keyword::TypeOfPatientID>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TypeOfPatientID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfPatientIDQualifiersSequence>::s_keyword =
    Keyword::IssuerOfPatientIDQualifiersSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfPatientIDQualifiersSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfPatientIDQualifiersSequence>::s_element = 0x0024;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfPatientIDQualifiersSequence>::s_name =
    "Issuer of Patient ID Qualifiers Sequence";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfPatientIDQualifiersSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfPatientIDQualifiersSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourcePatientGroupIdentificationSequence>::s_keyword =
    Keyword::SourcePatientGroupIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourcePatientGroupIdentificationSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourcePatientGroupIdentificationSequence>::s_element = 0x0026;
template<>
DATA_API const std::string_view Attribute<Keyword::SourcePatientGroupIdentificationSequence>::s_name =
    "Source Patient Group Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::SourcePatientGroupIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SourcePatientGroupIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GroupOfPatientsIdentificationSequence>::s_keyword =
    Keyword::GroupOfPatientsIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GroupOfPatientsIdentificationSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GroupOfPatientsIdentificationSequence>::s_element = 0x0027;
template<>
DATA_API const std::string_view Attribute<Keyword::GroupOfPatientsIdentificationSequence>::s_name =
    "Group of Patients Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::GroupOfPatientsIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::GroupOfPatientsIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SubjectRelativePositionInImage>::s_keyword =
    Keyword::SubjectRelativePositionInImage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectRelativePositionInImage>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectRelativePositionInImage>::s_element = 0x0028;
template<>
DATA_API const std::string_view Attribute<Keyword::SubjectRelativePositionInImage>::s_name =
    "Subject Relative Position in Image";
template<>
DATA_API const VR Attribute<Keyword::SubjectRelativePositionInImage>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SubjectRelativePositionInImage>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::PatientBirthDate>::s_keyword = Keyword::PatientBirthDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBirthDate>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBirthDate>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientBirthDate>::s_name = "Patient's Birth Date";
template<>
DATA_API const VR Attribute<Keyword::PatientBirthDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::PatientBirthDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientBirthTime>::s_keyword = Keyword::PatientBirthTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBirthTime>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBirthTime>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientBirthTime>::s_name = "Patient's Birth Time";
template<>
DATA_API const VR Attribute<Keyword::PatientBirthTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::PatientBirthTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientBirthDateInAlternativeCalendar>::s_keyword =
    Keyword::PatientBirthDateInAlternativeCalendar;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBirthDateInAlternativeCalendar>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBirthDateInAlternativeCalendar>::s_element = 0x0033;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientBirthDateInAlternativeCalendar>::s_name =
    "Patient's Birth Date in Alternative Calendar";
template<>
DATA_API const VR Attribute<Keyword::PatientBirthDateInAlternativeCalendar>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PatientBirthDateInAlternativeCalendar>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientDeathDateInAlternativeCalendar>::s_keyword =
    Keyword::PatientDeathDateInAlternativeCalendar;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientDeathDateInAlternativeCalendar>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientDeathDateInAlternativeCalendar>::s_element = 0x0034;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientDeathDateInAlternativeCalendar>::s_name =
    "Patient's Death Date in Alternative Calendar";
template<>
DATA_API const VR Attribute<Keyword::PatientDeathDateInAlternativeCalendar>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PatientDeathDateInAlternativeCalendar>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientAlternativeCalendar>::s_keyword = Keyword::PatientAlternativeCalendar;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientAlternativeCalendar>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientAlternativeCalendar>::s_element = 0x0035;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientAlternativeCalendar>::s_name =
    "Patient's Alternative Calendar";
template<>
DATA_API const VR Attribute<Keyword::PatientAlternativeCalendar>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientAlternativeCalendar>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSex>::s_keyword = Keyword::PatientSex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSex>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSex>::s_element = 0x0040;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSex>::s_name = "Patient's Sex";
template<>
DATA_API const VR Attribute<Keyword::PatientSex>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientSex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::QualityControlSubject>::s_keyword = Keyword::QualityControlSubject;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QualityControlSubject>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QualityControlSubject>::s_element = 0x0200;
template<>
DATA_API const std::string_view Attribute<Keyword::QualityControlSubject>::s_name = "Quality Control Subject";
template<>
DATA_API const VR Attribute<Keyword::QualityControlSubject>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::QualityControlSubject>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainDescription>::s_keyword = Keyword::StrainDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainDescription>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainDescription>::s_element = 0x0212;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainDescription>::s_name = "Strain Description";
template<>
DATA_API const VR Attribute<Keyword::StrainDescription>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::StrainDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainNomenclature>::s_keyword = Keyword::StrainNomenclature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainNomenclature>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainNomenclature>::s_element = 0x0213;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainNomenclature>::s_name = "Strain Nomenclature";
template<>
DATA_API const VR Attribute<Keyword::StrainNomenclature>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::StrainNomenclature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainStockNumber>::s_keyword = Keyword::StrainStockNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainStockNumber>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainStockNumber>::s_element = 0x0214;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainStockNumber>::s_name = "Strain Stock Number";
template<>
DATA_API const VR Attribute<Keyword::StrainStockNumber>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::StrainStockNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainSourceRegistryCodeSequence>::s_keyword =
    Keyword::StrainSourceRegistryCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainSourceRegistryCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainSourceRegistryCodeSequence>::s_element = 0x0215;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainSourceRegistryCodeSequence>::s_name =
    "Strain Source Registry Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::StrainSourceRegistryCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StrainSourceRegistryCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainStockSequence>::s_keyword = Keyword::StrainStockSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainStockSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainStockSequence>::s_element = 0x0216;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainStockSequence>::s_name = "Strain Stock Sequence";
template<>
DATA_API const VR Attribute<Keyword::StrainStockSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StrainStockSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainSource>::s_keyword = Keyword::StrainSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainSource>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainSource>::s_element = 0x0217;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainSource>::s_name = "Strain Source";
template<>
DATA_API const VR Attribute<Keyword::StrainSource>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::StrainSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainAdditionalInformation>::s_keyword =
    Keyword::StrainAdditionalInformation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainAdditionalInformation>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainAdditionalInformation>::s_element = 0x0218;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainAdditionalInformation>::s_name =
    "Strain Additional Information";
template<>
DATA_API const VR Attribute<Keyword::StrainAdditionalInformation>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::StrainAdditionalInformation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StrainCodeSequence>::s_keyword = Keyword::StrainCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StrainCodeSequence>::s_element = 0x0219;
template<>
DATA_API const std::string_view Attribute<Keyword::StrainCodeSequence>::s_name = "Strain Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::StrainCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StrainCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneticModificationsSequence>::s_keyword =
    Keyword::GeneticModificationsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsSequence>::s_element = 0x0221;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneticModificationsSequence>::s_name =
    "Genetic Modifications Sequence";
template<>
DATA_API const VR Attribute<Keyword::GeneticModificationsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::GeneticModificationsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneticModificationsDescription>::s_keyword =
    Keyword::GeneticModificationsDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsDescription>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsDescription>::s_element = 0x0222;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneticModificationsDescription>::s_name =
    "Genetic Modifications Description";
template<>
DATA_API const VR Attribute<Keyword::GeneticModificationsDescription>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::GeneticModificationsDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneticModificationsNomenclature>::s_keyword =
    Keyword::GeneticModificationsNomenclature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsNomenclature>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsNomenclature>::s_element = 0x0223;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneticModificationsNomenclature>::s_name =
    "Genetic Modifications Nomenclature";
template<>
DATA_API const VR Attribute<Keyword::GeneticModificationsNomenclature>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::GeneticModificationsNomenclature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneticModificationsCodeSequence>::s_keyword =
    Keyword::GeneticModificationsCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneticModificationsCodeSequence>::s_element = 0x0229;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneticModificationsCodeSequence>::s_name =
    "Genetic Modifications Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::GeneticModificationsCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::GeneticModificationsCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OtherPatientNames>::s_keyword = Keyword::OtherPatientNames;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OtherPatientNames>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OtherPatientNames>::s_element = 0x1001;
template<>
DATA_API const std::string_view Attribute<Keyword::OtherPatientNames>::s_name = "Other Patient Names";
template<>
DATA_API const VR Attribute<Keyword::OtherPatientNames>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::OtherPatientNames>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::OtherPatientIDsSequence>::s_keyword = Keyword::OtherPatientIDsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OtherPatientIDsSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OtherPatientIDsSequence>::s_element = 0x1002;
template<>
DATA_API const std::string_view Attribute<Keyword::OtherPatientIDsSequence>::s_name = "Other Patient IDs Sequence";
template<>
DATA_API const VR Attribute<Keyword::OtherPatientIDsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OtherPatientIDsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientAge>::s_keyword = Keyword::PatientAge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientAge>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientAge>::s_element = 0x1010;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientAge>::s_name = "Patient's Age";
template<>
DATA_API const VR Attribute<Keyword::PatientAge>::s_vr = VR::AS;
template<>
DATA_API const VM Attribute<Keyword::PatientAge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSize>::s_keyword = Keyword::PatientSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSize>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSize>::s_element = 0x1020;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSize>::s_name = "Patient's Size";
template<>
DATA_API const VR Attribute<Keyword::PatientSize>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PatientSize>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSizeCodeSequence>::s_keyword = Keyword::PatientSizeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSizeCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSizeCodeSequence>::s_element = 0x1021;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSizeCodeSequence>::s_name = "Patient's Size Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientSizeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientSizeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientBodyMassIndex>::s_keyword = Keyword::PatientBodyMassIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBodyMassIndex>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBodyMassIndex>::s_element = 0x1022;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientBodyMassIndex>::s_name = "Patient's Body Mass Index";
template<>
DATA_API const VR Attribute<Keyword::PatientBodyMassIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PatientBodyMassIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MeasuredAPDimension>::s_keyword = Keyword::MeasuredAPDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasuredAPDimension>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasuredAPDimension>::s_element = 0x1023;
template<>
DATA_API const std::string_view Attribute<Keyword::MeasuredAPDimension>::s_name = "Measured AP Dimension";
template<>
DATA_API const VR Attribute<Keyword::MeasuredAPDimension>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MeasuredAPDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MeasuredLateralDimension>::s_keyword = Keyword::MeasuredLateralDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasuredLateralDimension>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasuredLateralDimension>::s_element = 0x1024;
template<>
DATA_API const std::string_view Attribute<Keyword::MeasuredLateralDimension>::s_name = "Measured Lateral Dimension";
template<>
DATA_API const VR Attribute<Keyword::MeasuredLateralDimension>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MeasuredLateralDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientWeight>::s_keyword = Keyword::PatientWeight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientWeight>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientWeight>::s_element = 0x1030;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientWeight>::s_name = "Patient's Weight";
template<>
DATA_API const VR Attribute<Keyword::PatientWeight>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PatientWeight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPatientPhotoSequence>::s_keyword =
    Keyword::ReferencedPatientPhotoSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPatientPhotoSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPatientPhotoSequence>::s_element = 0x1100;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPatientPhotoSequence>::s_name =
    "Referenced Patient Photo Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPatientPhotoSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPatientPhotoSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MedicalAlerts>::s_keyword = Keyword::MedicalAlerts;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MedicalAlerts>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MedicalAlerts>::s_element = 0x2000;
template<>
DATA_API const std::string_view Attribute<Keyword::MedicalAlerts>::s_name = "Medical Alerts";
template<>
DATA_API const VR Attribute<Keyword::MedicalAlerts>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::MedicalAlerts>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::Allergies>::s_keyword = Keyword::Allergies;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Allergies>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Allergies>::s_element = 0x2110;
template<>
DATA_API const std::string_view Attribute<Keyword::Allergies>::s_name = "Allergies";
template<>
DATA_API const VR Attribute<Keyword::Allergies>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::Allergies>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::EthnicGroup>::s_keyword = Keyword::EthnicGroup;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EthnicGroup>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EthnicGroup>::s_element = 0x2160;
template<>
DATA_API const std::string_view Attribute<Keyword::EthnicGroup>::s_name = "Ethnic Group";
template<>
DATA_API const VR Attribute<Keyword::EthnicGroup>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::EthnicGroup>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Occupation>::s_keyword = Keyword::Occupation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Occupation>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Occupation>::s_element = 0x2180;
template<>
DATA_API const std::string_view Attribute<Keyword::Occupation>::s_name = "Occupation";
template<>
DATA_API const VR Attribute<Keyword::Occupation>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::Occupation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SmokingStatus>::s_keyword = Keyword::SmokingStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SmokingStatus>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SmokingStatus>::s_element = 0x21A0;
template<>
DATA_API const std::string_view Attribute<Keyword::SmokingStatus>::s_name = "Smoking Status";
template<>
DATA_API const VR Attribute<Keyword::SmokingStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SmokingStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AdditionalPatientHistory>::s_keyword = Keyword::AdditionalPatientHistory;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdditionalPatientHistory>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdditionalPatientHistory>::s_element = 0x21B0;
template<>
DATA_API const std::string_view Attribute<Keyword::AdditionalPatientHistory>::s_name = "Additional Patient History";
template<>
DATA_API const VR Attribute<Keyword::AdditionalPatientHistory>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::AdditionalPatientHistory>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PregnancyStatus>::s_keyword = Keyword::PregnancyStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PregnancyStatus>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PregnancyStatus>::s_element = 0x21C0;
template<>
DATA_API const std::string_view Attribute<Keyword::PregnancyStatus>::s_name = "Pregnancy Status";
template<>
DATA_API const VR Attribute<Keyword::PregnancyStatus>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PregnancyStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LastMenstrualDate>::s_keyword = Keyword::LastMenstrualDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LastMenstrualDate>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LastMenstrualDate>::s_element = 0x21D0;
template<>
DATA_API const std::string_view Attribute<Keyword::LastMenstrualDate>::s_name = "Last Menstrual Date";
template<>
DATA_API const VR Attribute<Keyword::LastMenstrualDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::LastMenstrualDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSpeciesDescription>::s_keyword = Keyword::PatientSpeciesDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSpeciesDescription>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSpeciesDescription>::s_element = 0x2201;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSpeciesDescription>::s_name = "Patient Species Description";
template<>
DATA_API const VR Attribute<Keyword::PatientSpeciesDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PatientSpeciesDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSpeciesCodeSequence>::s_keyword = Keyword::PatientSpeciesCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSpeciesCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSpeciesCodeSequence>::s_element = 0x2202;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSpeciesCodeSequence>::s_name =
    "Patient Species Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientSpeciesCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientSpeciesCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSexNeutered>::s_keyword = Keyword::PatientSexNeutered;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSexNeutered>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSexNeutered>::s_element = 0x2203;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSexNeutered>::s_name = "Patient's Sex Neutered";
template<>
DATA_API const VR Attribute<Keyword::PatientSexNeutered>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientSexNeutered>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AnatomicalOrientationType>::s_keyword = Keyword::AnatomicalOrientationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicalOrientationType>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicalOrientationType>::s_element = 0x2210;
template<>
DATA_API const std::string_view Attribute<Keyword::AnatomicalOrientationType>::s_name = "Anatomical Orientation Type";
template<>
DATA_API const VR Attribute<Keyword::AnatomicalOrientationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AnatomicalOrientationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientBreedDescription>::s_keyword = Keyword::PatientBreedDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBreedDescription>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBreedDescription>::s_element = 0x2292;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientBreedDescription>::s_name = "Patient Breed Description";
template<>
DATA_API const VR Attribute<Keyword::PatientBreedDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PatientBreedDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientBreedCodeSequence>::s_keyword = Keyword::PatientBreedCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBreedCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientBreedCodeSequence>::s_element = 0x2293;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientBreedCodeSequence>::s_name = "Patient Breed Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientBreedCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientBreedCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreedRegistrationSequence>::s_keyword = Keyword::BreedRegistrationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreedRegistrationSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreedRegistrationSequence>::s_element = 0x2294;
template<>
DATA_API const std::string_view Attribute<Keyword::BreedRegistrationSequence>::s_name = "Breed Registration Sequence";
template<>
DATA_API const VR Attribute<Keyword::BreedRegistrationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BreedRegistrationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreedRegistrationNumber>::s_keyword = Keyword::BreedRegistrationNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreedRegistrationNumber>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreedRegistrationNumber>::s_element = 0x2295;
template<>
DATA_API const std::string_view Attribute<Keyword::BreedRegistrationNumber>::s_name = "Breed Registration Number";
template<>
DATA_API const VR Attribute<Keyword::BreedRegistrationNumber>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::BreedRegistrationNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreedRegistryCodeSequence>::s_keyword = Keyword::BreedRegistryCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreedRegistryCodeSequence>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreedRegistryCodeSequence>::s_element = 0x2296;
template<>
DATA_API const std::string_view Attribute<Keyword::BreedRegistryCodeSequence>::s_name = "Breed Registry Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::BreedRegistryCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BreedRegistryCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ResponsiblePerson>::s_keyword = Keyword::ResponsiblePerson;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsiblePerson>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsiblePerson>::s_element = 0x2297;
template<>
DATA_API const std::string_view Attribute<Keyword::ResponsiblePerson>::s_name = "Responsible Person";
template<>
DATA_API const VR Attribute<Keyword::ResponsiblePerson>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::ResponsiblePerson>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ResponsiblePersonRole>::s_keyword = Keyword::ResponsiblePersonRole;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsiblePersonRole>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsiblePersonRole>::s_element = 0x2298;
template<>
DATA_API const std::string_view Attribute<Keyword::ResponsiblePersonRole>::s_name = "Responsible Person Role";
template<>
DATA_API const VR Attribute<Keyword::ResponsiblePersonRole>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ResponsiblePersonRole>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ResponsibleOrganization>::s_keyword = Keyword::ResponsibleOrganization;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsibleOrganization>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResponsibleOrganization>::s_element = 0x2299;
template<>
DATA_API const std::string_view Attribute<Keyword::ResponsibleOrganization>::s_name = "Responsible Organization";
template<>
DATA_API const VR Attribute<Keyword::ResponsibleOrganization>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ResponsibleOrganization>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientComments>::s_keyword = Keyword::PatientComments;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientComments>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientComments>::s_element = 0x4000;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientComments>::s_name = "Patient Comments";
template<>
DATA_API const VR Attribute<Keyword::PatientComments>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::PatientComments>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExaminedBodyThickness>::s_keyword = Keyword::ExaminedBodyThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExaminedBodyThickness>::s_group = 0x0010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExaminedBodyThickness>::s_element = 0x9431;
template<>
DATA_API const std::string_view Attribute<Keyword::ExaminedBodyThickness>::s_name = "Examined Body Thickness";
template<>
DATA_API const VR Attribute<Keyword::ExaminedBodyThickness>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ExaminedBodyThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSponsorName>::s_keyword = Keyword::ClinicalTrialSponsorName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSponsorName>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSponsorName>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSponsorName>::s_name = "Clinical Trial Sponsor Name";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSponsorName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSponsorName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialProtocolID>::s_keyword = Keyword::ClinicalTrialProtocolID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolID>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolID>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialProtocolID>::s_name = "Clinical Trial Protocol ID";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialProtocolID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialProtocolID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialProtocolName>::s_keyword = Keyword::ClinicalTrialProtocolName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolName>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolName>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialProtocolName>::s_name = "Clinical Trial Protocol Name";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialProtocolName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialProtocolName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSiteID>::s_keyword = Keyword::ClinicalTrialSiteID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSiteID>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSiteID>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSiteID>::s_name = "Clinical Trial Site ID";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSiteID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSiteID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSiteName>::s_keyword = Keyword::ClinicalTrialSiteName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSiteName>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSiteName>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSiteName>::s_name = "Clinical Trial Site Name";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSiteName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSiteName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSubjectID>::s_keyword = Keyword::ClinicalTrialSubjectID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSubjectID>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSubjectID>::s_element = 0x0040;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSubjectID>::s_name = "Clinical Trial Subject ID";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSubjectID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSubjectID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSubjectReadingID>::s_keyword =
    Keyword::ClinicalTrialSubjectReadingID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSubjectReadingID>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSubjectReadingID>::s_element = 0x0042;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSubjectReadingID>::s_name =
    "Clinical Trial Subject Reading ID";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSubjectReadingID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSubjectReadingID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialTimePointID>::s_keyword = Keyword::ClinicalTrialTimePointID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialTimePointID>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialTimePointID>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialTimePointID>::s_name = "Clinical Trial Time Point ID";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialTimePointID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialTimePointID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialTimePointDescription>::s_keyword =
    Keyword::ClinicalTrialTimePointDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialTimePointDescription>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialTimePointDescription>::s_element = 0x0051;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialTimePointDescription>::s_name =
    "Clinical Trial Time Point Description";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialTimePointDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialTimePointDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LongitudinalTemporalOffsetFromEvent>::s_keyword =
    Keyword::LongitudinalTemporalOffsetFromEvent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongitudinalTemporalOffsetFromEvent>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongitudinalTemporalOffsetFromEvent>::s_element = 0x0052;
template<>
DATA_API const std::string_view Attribute<Keyword::LongitudinalTemporalOffsetFromEvent>::s_name =
    "Longitudinal Temporal Offset from Event";
template<>
DATA_API const VR Attribute<Keyword::LongitudinalTemporalOffsetFromEvent>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::LongitudinalTemporalOffsetFromEvent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LongitudinalTemporalEventType>::s_keyword =
    Keyword::LongitudinalTemporalEventType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongitudinalTemporalEventType>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongitudinalTemporalEventType>::s_element = 0x0053;
template<>
DATA_API const std::string_view Attribute<Keyword::LongitudinalTemporalEventType>::s_name =
    "Longitudinal Temporal Event Type";
template<>
DATA_API const VR Attribute<Keyword::LongitudinalTemporalEventType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::LongitudinalTemporalEventType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialTimePointTypeCodeSequence>::s_keyword =
    Keyword::ClinicalTrialTimePointTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialTimePointTypeCodeSequence>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialTimePointTypeCodeSequence>::s_element = 0x0054;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialTimePointTypeCodeSequence>::s_name =
    "Clinical Trial Time Point Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialTimePointTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialTimePointTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialCoordinatingCenterName>::s_keyword =
    Keyword::ClinicalTrialCoordinatingCenterName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialCoordinatingCenterName>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialCoordinatingCenterName>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialCoordinatingCenterName>::s_name =
    "Clinical Trial Coordinating Center Name";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialCoordinatingCenterName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialCoordinatingCenterName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientIdentityRemoved>::s_keyword = Keyword::PatientIdentityRemoved;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientIdentityRemoved>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientIdentityRemoved>::s_element = 0x0062;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientIdentityRemoved>::s_name = "Patient Identity Removed";
template<>
DATA_API const VR Attribute<Keyword::PatientIdentityRemoved>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientIdentityRemoved>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeidentificationMethod>::s_keyword = Keyword::DeidentificationMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeidentificationMethod>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeidentificationMethod>::s_element = 0x0063;
template<>
DATA_API const std::string_view Attribute<Keyword::DeidentificationMethod>::s_name = "De-identification Method";
template<>
DATA_API const VR Attribute<Keyword::DeidentificationMethod>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DeidentificationMethod>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DeidentificationMethodCodeSequence>::s_keyword =
    Keyword::DeidentificationMethodCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeidentificationMethodCodeSequence>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeidentificationMethodCodeSequence>::s_element = 0x0064;
template<>
DATA_API const std::string_view Attribute<Keyword::DeidentificationMethodCodeSequence>::s_name =
    "De-identification Method Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::DeidentificationMethodCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DeidentificationMethodCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSeriesID>::s_keyword = Keyword::ClinicalTrialSeriesID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSeriesID>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSeriesID>::s_element = 0x0071;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSeriesID>::s_name = "Clinical Trial Series ID";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSeriesID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSeriesID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialSeriesDescription>::s_keyword =
    Keyword::ClinicalTrialSeriesDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSeriesDescription>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialSeriesDescription>::s_element = 0x0072;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialSeriesDescription>::s_name =
    "Clinical Trial Series Description";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialSeriesDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialSeriesDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeName>::s_keyword =
    Keyword::ClinicalTrialProtocolEthicsCommitteeName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeName>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeName>::s_element = 0x0081;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeName>::s_name =
    "Clinical Trial Protocol Ethics Committee Name";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>::s_keyword =
    Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>::s_element = 0x0082;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>::s_name =
    "Clinical Trial Protocol Ethics Committee Approval Number";
template<>
DATA_API const VR Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConsentForClinicalTrialUseSequence>::s_keyword =
    Keyword::ConsentForClinicalTrialUseSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsentForClinicalTrialUseSequence>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsentForClinicalTrialUseSequence>::s_element = 0x0083;
template<>
DATA_API const std::string_view Attribute<Keyword::ConsentForClinicalTrialUseSequence>::s_name =
    "Consent for Clinical Trial Use Sequence";
template<>
DATA_API const VR Attribute<Keyword::ConsentForClinicalTrialUseSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ConsentForClinicalTrialUseSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistributionType>::s_keyword = Keyword::DistributionType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistributionType>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistributionType>::s_element = 0x0084;
template<>
DATA_API const std::string_view Attribute<Keyword::DistributionType>::s_name = "Distribution Type";
template<>
DATA_API const VR Attribute<Keyword::DistributionType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DistributionType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConsentForDistributionFlag>::s_keyword = Keyword::ConsentForDistributionFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsentForDistributionFlag>::s_group = 0x0012;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConsentForDistributionFlag>::s_element = 0x0085;
template<>
DATA_API const std::string_view Attribute<Keyword::ConsentForDistributionFlag>::s_name =
    "Consent for Distribution Flag";
template<>
DATA_API const VR Attribute<Keyword::ConsentForDistributionFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ConsentForDistributionFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WhitePoint>::s_keyword = Keyword::WhitePoint;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WhitePoint>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WhitePoint>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::WhitePoint>::s_name = "White Point";
template<>
DATA_API const VR Attribute<Keyword::WhitePoint>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::WhitePoint>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryChromaticities>::s_keyword = Keyword::PrimaryChromaticities;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryChromaticities>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryChromaticities>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryChromaticities>::s_name = "Primary Chromaticities";
template<>
DATA_API const VR Attribute<Keyword::PrimaryChromaticities>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PrimaryChromaticities>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::BatteryLevel>::s_keyword = Keyword::BatteryLevel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BatteryLevel>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BatteryLevel>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::BatteryLevel>::s_name = "Battery Level";
template<>
DATA_API const VR Attribute<Keyword::BatteryLevel>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::BatteryLevel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureTimeInSeconds>::s_keyword = Keyword::ExposureTimeInSeconds;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTimeInSeconds>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTimeInSeconds>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureTimeInSeconds>::s_name = "Exposure Time in Seconds";
template<>
DATA_API const VR Attribute<Keyword::ExposureTimeInSeconds>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ExposureTimeInSeconds>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FNumber>::s_keyword = Keyword::FNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FNumber>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FNumber>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::FNumber>::s_name = "F-Number";
template<>
DATA_API const VR Attribute<Keyword::FNumber>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OECFRows>::s_keyword = Keyword::OECFRows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFRows>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFRows>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::OECFRows>::s_name = "OECF Rows";
template<>
DATA_API const VR Attribute<Keyword::OECFRows>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::OECFRows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OECFColumns>::s_keyword = Keyword::OECFColumns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFColumns>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFColumns>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::OECFColumns>::s_name = "OECF Columns";
template<>
DATA_API const VR Attribute<Keyword::OECFColumns>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::OECFColumns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OECFColumnNames>::s_keyword = Keyword::OECFColumnNames;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFColumnNames>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFColumnNames>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::OECFColumnNames>::s_name = "OECF Column Names";
template<>
DATA_API const VR Attribute<Keyword::OECFColumnNames>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::OECFColumnNames>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::OECFValues>::s_keyword = Keyword::OECFValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFValues>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OECFValues>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::OECFValues>::s_name = "OECF Values";
template<>
DATA_API const VR Attribute<Keyword::OECFValues>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::OECFValues>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialFrequencyResponseRows>::s_keyword =
    Keyword::SpatialFrequencyResponseRows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseRows>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseRows>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialFrequencyResponseRows>::s_name =
    "Spatial Frequency Response Rows";
template<>
DATA_API const VR Attribute<Keyword::SpatialFrequencyResponseRows>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SpatialFrequencyResponseRows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialFrequencyResponseColumns>::s_keyword =
    Keyword::SpatialFrequencyResponseColumns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseColumns>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseColumns>::s_element = 0x000B;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialFrequencyResponseColumns>::s_name =
    "Spatial Frequency Response Columns";
template<>
DATA_API const VR Attribute<Keyword::SpatialFrequencyResponseColumns>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SpatialFrequencyResponseColumns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialFrequencyResponseColumnNames>::s_keyword =
    Keyword::SpatialFrequencyResponseColumnNames;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseColumnNames>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseColumnNames>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialFrequencyResponseColumnNames>::s_name =
    "Spatial Frequency Response Column Names";
template<>
DATA_API const VR Attribute<Keyword::SpatialFrequencyResponseColumnNames>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::SpatialFrequencyResponseColumnNames>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialFrequencyResponseValues>::s_keyword =
    Keyword::SpatialFrequencyResponseValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseValues>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialFrequencyResponseValues>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialFrequencyResponseValues>::s_name =
    "Spatial Frequency Response Values";
template<>
DATA_API const VR Attribute<Keyword::SpatialFrequencyResponseValues>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SpatialFrequencyResponseValues>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ColorFilterArrayPatternRows>::s_keyword =
    Keyword::ColorFilterArrayPatternRows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorFilterArrayPatternRows>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorFilterArrayPatternRows>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::ColorFilterArrayPatternRows>::s_name =
    "Color Filter Array Pattern Rows";
template<>
DATA_API const VR Attribute<Keyword::ColorFilterArrayPatternRows>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ColorFilterArrayPatternRows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ColorFilterArrayPatternColumns>::s_keyword =
    Keyword::ColorFilterArrayPatternColumns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorFilterArrayPatternColumns>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorFilterArrayPatternColumns>::s_element = 0x000F;
template<>
DATA_API const std::string_view Attribute<Keyword::ColorFilterArrayPatternColumns>::s_name =
    "Color Filter Array Pattern Columns";
template<>
DATA_API const VR Attribute<Keyword::ColorFilterArrayPatternColumns>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ColorFilterArrayPatternColumns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ColorFilterArrayPatternValues>::s_keyword =
    Keyword::ColorFilterArrayPatternValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorFilterArrayPatternValues>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorFilterArrayPatternValues>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::ColorFilterArrayPatternValues>::s_name =
    "Color Filter Array Pattern Values";
template<>
DATA_API const VR Attribute<Keyword::ColorFilterArrayPatternValues>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ColorFilterArrayPatternValues>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FlashFiringStatus>::s_keyword = Keyword::FlashFiringStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashFiringStatus>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashFiringStatus>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::FlashFiringStatus>::s_name = "Flash Firing Status";
template<>
DATA_API const VR Attribute<Keyword::FlashFiringStatus>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FlashFiringStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlashReturnStatus>::s_keyword = Keyword::FlashReturnStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashReturnStatus>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashReturnStatus>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::FlashReturnStatus>::s_name = "Flash Return Status";
template<>
DATA_API const VR Attribute<Keyword::FlashReturnStatus>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FlashReturnStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlashMode>::s_keyword = Keyword::FlashMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashMode>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashMode>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::FlashMode>::s_name = "Flash Mode";
template<>
DATA_API const VR Attribute<Keyword::FlashMode>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FlashMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlashFunctionPresent>::s_keyword = Keyword::FlashFunctionPresent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashFunctionPresent>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashFunctionPresent>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::FlashFunctionPresent>::s_name = "Flash Function Present";
template<>
DATA_API const VR Attribute<Keyword::FlashFunctionPresent>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FlashFunctionPresent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlashRedEyeMode>::s_keyword = Keyword::FlashRedEyeMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashRedEyeMode>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashRedEyeMode>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::FlashRedEyeMode>::s_name = "Flash Red Eye Mode";
template<>
DATA_API const VR Attribute<Keyword::FlashRedEyeMode>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FlashRedEyeMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureProgram>::s_keyword = Keyword::ExposureProgram;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureProgram>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureProgram>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureProgram>::s_name = "Exposure Program";
template<>
DATA_API const VR Attribute<Keyword::ExposureProgram>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ExposureProgram>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpectralSensitivity>::s_keyword = Keyword::SpectralSensitivity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpectralSensitivity>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpectralSensitivity>::s_element = 0x0017;
template<>
DATA_API const std::string_view Attribute<Keyword::SpectralSensitivity>::s_name = "Spectral Sensitivity";
template<>
DATA_API const VR Attribute<Keyword::SpectralSensitivity>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::SpectralSensitivity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhotographicSensitivity>::s_keyword = Keyword::PhotographicSensitivity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotographicSensitivity>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotographicSensitivity>::s_element = 0x0018;
template<>
DATA_API const std::string_view Attribute<Keyword::PhotographicSensitivity>::s_name = "Photographic Sensitivity";
template<>
DATA_API const VR Attribute<Keyword::PhotographicSensitivity>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::PhotographicSensitivity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SelfTimerMode>::s_keyword = Keyword::SelfTimerMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SelfTimerMode>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SelfTimerMode>::s_element = 0x0019;
template<>
DATA_API const std::string_view Attribute<Keyword::SelfTimerMode>::s_name = "Self Timer Mode";
template<>
DATA_API const VR Attribute<Keyword::SelfTimerMode>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SelfTimerMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SensitivityType>::s_keyword = Keyword::SensitivityType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SensitivityType>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SensitivityType>::s_element = 0x001A;
template<>
DATA_API const std::string_view Attribute<Keyword::SensitivityType>::s_name = "Sensitivity Type";
template<>
DATA_API const VR Attribute<Keyword::SensitivityType>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SensitivityType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StandardOutputSensitivity>::s_keyword = Keyword::StandardOutputSensitivity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StandardOutputSensitivity>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StandardOutputSensitivity>::s_element = 0x001B;
template<>
DATA_API const std::string_view Attribute<Keyword::StandardOutputSensitivity>::s_name = "Standard Output Sensitivity";
template<>
DATA_API const VR Attribute<Keyword::StandardOutputSensitivity>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::StandardOutputSensitivity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedExposureIndex>::s_keyword = Keyword::RecommendedExposureIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedExposureIndex>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedExposureIndex>::s_element = 0x001C;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedExposureIndex>::s_name = "Recommended Exposure Index";
template<>
DATA_API const VR Attribute<Keyword::RecommendedExposureIndex>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::RecommendedExposureIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ISOSpeed>::s_keyword = Keyword::ISOSpeed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ISOSpeed>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ISOSpeed>::s_element = 0x001D;
template<>
DATA_API const std::string_view Attribute<Keyword::ISOSpeed>::s_name = "ISO Speed";
template<>
DATA_API const VR Attribute<Keyword::ISOSpeed>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ISOSpeed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ISOSpeedLatitudeyyy>::s_keyword = Keyword::ISOSpeedLatitudeyyy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ISOSpeedLatitudeyyy>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ISOSpeedLatitudeyyy>::s_element = 0x001E;
template<>
DATA_API const std::string_view Attribute<Keyword::ISOSpeedLatitudeyyy>::s_name = "ISO Speed Latitude yyy";
template<>
DATA_API const VR Attribute<Keyword::ISOSpeedLatitudeyyy>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ISOSpeedLatitudeyyy>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ISOSpeedLatitudezzz>::s_keyword = Keyword::ISOSpeedLatitudezzz;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ISOSpeedLatitudezzz>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ISOSpeedLatitudezzz>::s_element = 0x001F;
template<>
DATA_API const std::string_view Attribute<Keyword::ISOSpeedLatitudezzz>::s_name = "ISO Speed Latitude zzz";
template<>
DATA_API const VR Attribute<Keyword::ISOSpeedLatitudezzz>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ISOSpeedLatitudezzz>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EXIFVersion>::s_keyword = Keyword::EXIFVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EXIFVersion>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EXIFVersion>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::EXIFVersion>::s_name = "EXIF Version";
template<>
DATA_API const VR Attribute<Keyword::EXIFVersion>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::EXIFVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterSpeedValue>::s_keyword = Keyword::ShutterSpeedValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterSpeedValue>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterSpeedValue>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterSpeedValue>::s_name = "Shutter Speed Value";
template<>
DATA_API const VR Attribute<Keyword::ShutterSpeedValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ShutterSpeedValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApertureValue>::s_keyword = Keyword::ApertureValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApertureValue>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApertureValue>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::ApertureValue>::s_name = "Aperture Value";
template<>
DATA_API const VR Attribute<Keyword::ApertureValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ApertureValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BrightnessValue>::s_keyword = Keyword::BrightnessValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BrightnessValue>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BrightnessValue>::s_element = 0x0023;
template<>
DATA_API const std::string_view Attribute<Keyword::BrightnessValue>::s_name = "Brightness Value";
template<>
DATA_API const VR Attribute<Keyword::BrightnessValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::BrightnessValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureBiasValue>::s_keyword = Keyword::ExposureBiasValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureBiasValue>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureBiasValue>::s_element = 0x0024;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureBiasValue>::s_name = "Exposure Bias Value";
template<>
DATA_API const VR Attribute<Keyword::ExposureBiasValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ExposureBiasValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaxApertureValue>::s_keyword = Keyword::MaxApertureValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaxApertureValue>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaxApertureValue>::s_element = 0x0025;
template<>
DATA_API const std::string_view Attribute<Keyword::MaxApertureValue>::s_name = "Max Aperture Value";
template<>
DATA_API const VR Attribute<Keyword::MaxApertureValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MaxApertureValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SubjectDistance>::s_keyword = Keyword::SubjectDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectDistance>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectDistance>::s_element = 0x0026;
template<>
DATA_API const std::string_view Attribute<Keyword::SubjectDistance>::s_name = "Subject Distance";
template<>
DATA_API const VR Attribute<Keyword::SubjectDistance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SubjectDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MeteringMode>::s_keyword = Keyword::MeteringMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeteringMode>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeteringMode>::s_element = 0x0027;
template<>
DATA_API const std::string_view Attribute<Keyword::MeteringMode>::s_name = "Metering Mode";
template<>
DATA_API const VR Attribute<Keyword::MeteringMode>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MeteringMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LightSource>::s_keyword = Keyword::LightSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightSource>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightSource>::s_element = 0x0028;
template<>
DATA_API const std::string_view Attribute<Keyword::LightSource>::s_name = "Light Source";
template<>
DATA_API const VR Attribute<Keyword::LightSource>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::LightSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FocalLength>::s_keyword = Keyword::FocalLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalLength>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalLength>::s_element = 0x0029;
template<>
DATA_API const std::string_view Attribute<Keyword::FocalLength>::s_name = "Focal Length";
template<>
DATA_API const VR Attribute<Keyword::FocalLength>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FocalLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SubjectArea>::s_keyword = Keyword::SubjectArea;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectArea>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectArea>::s_element = 0x002A;
template<>
DATA_API const std::string_view Attribute<Keyword::SubjectArea>::s_name = "Subject Area";
template<>
DATA_API const VR Attribute<Keyword::SubjectArea>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SubjectArea>::s_vm = VM::MIN_2_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::MakerNote>::s_keyword = Keyword::MakerNote;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MakerNote>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MakerNote>::s_element = 0x002B;
template<>
DATA_API const std::string_view Attribute<Keyword::MakerNote>::s_name = "Maker Note";
template<>
DATA_API const VR Attribute<Keyword::MakerNote>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::MakerNote>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Temperature>::s_keyword = Keyword::Temperature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Temperature>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Temperature>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::Temperature>::s_name = "Temperature";
template<>
DATA_API const VR Attribute<Keyword::Temperature>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::Temperature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Humidity>::s_keyword = Keyword::Humidity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Humidity>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Humidity>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::Humidity>::s_name = "Humidity";
template<>
DATA_API const VR Attribute<Keyword::Humidity>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::Humidity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Pressure>::s_keyword = Keyword::Pressure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Pressure>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Pressure>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::Pressure>::s_name = "Pressure";
template<>
DATA_API const VR Attribute<Keyword::Pressure>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::Pressure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WaterDepth>::s_keyword = Keyword::WaterDepth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WaterDepth>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WaterDepth>::s_element = 0x0033;
template<>
DATA_API const std::string_view Attribute<Keyword::WaterDepth>::s_name = "Water Depth";
template<>
DATA_API const VR Attribute<Keyword::WaterDepth>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::WaterDepth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Acceleration>::s_keyword = Keyword::Acceleration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Acceleration>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Acceleration>::s_element = 0x0034;
template<>
DATA_API const std::string_view Attribute<Keyword::Acceleration>::s_name = "Acceleration";
template<>
DATA_API const VR Attribute<Keyword::Acceleration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::Acceleration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CameraElevationAngle>::s_keyword = Keyword::CameraElevationAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraElevationAngle>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraElevationAngle>::s_element = 0x0035;
template<>
DATA_API const std::string_view Attribute<Keyword::CameraElevationAngle>::s_name = "Camera Elevation Angle";
template<>
DATA_API const VR Attribute<Keyword::CameraElevationAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CameraElevationAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlashEnergy>::s_keyword = Keyword::FlashEnergy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashEnergy>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlashEnergy>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::FlashEnergy>::s_name = "Flash Energy";
template<>
DATA_API const VR Attribute<Keyword::FlashEnergy>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FlashEnergy>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::SubjectLocation>::s_keyword = Keyword::SubjectLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectLocation>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectLocation>::s_element = 0x0037;
template<>
DATA_API const std::string_view Attribute<Keyword::SubjectLocation>::s_name = "Subject Location";
template<>
DATA_API const VR Attribute<Keyword::SubjectLocation>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SubjectLocation>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PhotographicExposureIndex>::s_keyword = Keyword::PhotographicExposureIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotographicExposureIndex>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotographicExposureIndex>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::PhotographicExposureIndex>::s_name = "Photographic Exposure Index";
template<>
DATA_API const VR Attribute<Keyword::PhotographicExposureIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PhotographicExposureIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SensingMethod>::s_keyword = Keyword::SensingMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SensingMethod>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SensingMethod>::s_element = 0x0039;
template<>
DATA_API const std::string_view Attribute<Keyword::SensingMethod>::s_name = "Sensing Method";
template<>
DATA_API const VR Attribute<Keyword::SensingMethod>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SensingMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FileSource>::s_keyword = Keyword::FileSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FileSource>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FileSource>::s_element = 0x003A;
template<>
DATA_API const std::string_view Attribute<Keyword::FileSource>::s_name = "File Source";
template<>
DATA_API const VR Attribute<Keyword::FileSource>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FileSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SceneType>::s_keyword = Keyword::SceneType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SceneType>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SceneType>::s_element = 0x003B;
template<>
DATA_API const std::string_view Attribute<Keyword::SceneType>::s_name = "scene Type";
template<>
DATA_API const VR Attribute<Keyword::SceneType>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SceneType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CustomRendered>::s_keyword = Keyword::CustomRendered;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CustomRendered>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CustomRendered>::s_element = 0x0041;
template<>
DATA_API const std::string_view Attribute<Keyword::CustomRendered>::s_name = "Custom Rendered";
template<>
DATA_API const VR Attribute<Keyword::CustomRendered>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::CustomRendered>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureMode>::s_keyword = Keyword::ExposureMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureMode>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureMode>::s_element = 0x0042;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureMode>::s_name = "Exposure Mode";
template<>
DATA_API const VR Attribute<Keyword::ExposureMode>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ExposureMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WhiteBalance>::s_keyword = Keyword::WhiteBalance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WhiteBalance>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WhiteBalance>::s_element = 0x0043;
template<>
DATA_API const std::string_view Attribute<Keyword::WhiteBalance>::s_name = "White Balance";
template<>
DATA_API const VR Attribute<Keyword::WhiteBalance>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::WhiteBalance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DigitalZoomRatio>::s_keyword = Keyword::DigitalZoomRatio;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalZoomRatio>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalZoomRatio>::s_element = 0x0044;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitalZoomRatio>::s_name = "Digital Zoom Ratio";
template<>
DATA_API const VR Attribute<Keyword::DigitalZoomRatio>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DigitalZoomRatio>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FocalLengthIn35mmFilm>::s_keyword = Keyword::FocalLengthIn35mmFilm;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalLengthIn35mmFilm>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalLengthIn35mmFilm>::s_element = 0x0045;
template<>
DATA_API const std::string_view Attribute<Keyword::FocalLengthIn35mmFilm>::s_name = "Focal Length In 35mm Film";
template<>
DATA_API const VR Attribute<Keyword::FocalLengthIn35mmFilm>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::FocalLengthIn35mmFilm>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SceneCaptureType>::s_keyword = Keyword::SceneCaptureType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SceneCaptureType>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SceneCaptureType>::s_element = 0x0046;
template<>
DATA_API const std::string_view Attribute<Keyword::SceneCaptureType>::s_name = "scene Capture Type";
template<>
DATA_API const VR Attribute<Keyword::SceneCaptureType>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SceneCaptureType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GainControl>::s_keyword = Keyword::GainControl;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GainControl>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GainControl>::s_element = 0x0047;
template<>
DATA_API const std::string_view Attribute<Keyword::GainControl>::s_name = "Gain Control";
template<>
DATA_API const VR Attribute<Keyword::GainControl>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::GainControl>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Contrast>::s_keyword = Keyword::Contrast;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Contrast>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Contrast>::s_element = 0x0048;
template<>
DATA_API const std::string_view Attribute<Keyword::Contrast>::s_name = "Contrast";
template<>
DATA_API const VR Attribute<Keyword::Contrast>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::Contrast>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Saturation>::s_keyword = Keyword::Saturation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Saturation>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Saturation>::s_element = 0x0049;
template<>
DATA_API const std::string_view Attribute<Keyword::Saturation>::s_name = "Saturation";
template<>
DATA_API const VR Attribute<Keyword::Saturation>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::Saturation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Sharpness>::s_keyword = Keyword::Sharpness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Sharpness>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Sharpness>::s_element = 0x004A;
template<>
DATA_API const std::string_view Attribute<Keyword::Sharpness>::s_name = "Sharpness";
template<>
DATA_API const VR Attribute<Keyword::Sharpness>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::Sharpness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceSettingDescription>::s_keyword = Keyword::DeviceSettingDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceSettingDescription>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceSettingDescription>::s_element = 0x004B;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceSettingDescription>::s_name = "Device Setting Description";
template<>
DATA_API const VR Attribute<Keyword::DeviceSettingDescription>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::DeviceSettingDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SubjectDistanceRange>::s_keyword = Keyword::SubjectDistanceRange;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectDistanceRange>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubjectDistanceRange>::s_element = 0x004C;
template<>
DATA_API const std::string_view Attribute<Keyword::SubjectDistanceRange>::s_name = "Subject Distance Range";
template<>
DATA_API const VR Attribute<Keyword::SubjectDistanceRange>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SubjectDistanceRange>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CameraOwnerName>::s_keyword = Keyword::CameraOwnerName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraOwnerName>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraOwnerName>::s_element = 0x004D;
template<>
DATA_API const std::string_view Attribute<Keyword::CameraOwnerName>::s_name = "Camera Owner Name";
template<>
DATA_API const VR Attribute<Keyword::CameraOwnerName>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::CameraOwnerName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LensSpecification>::s_keyword = Keyword::LensSpecification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensSpecification>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensSpecification>::s_element = 0x004E;
template<>
DATA_API const std::string_view Attribute<Keyword::LensSpecification>::s_name = "Lens Specification";
template<>
DATA_API const VR Attribute<Keyword::LensSpecification>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::LensSpecification>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::LensMake>::s_keyword = Keyword::LensMake;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensMake>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensMake>::s_element = 0x004F;
template<>
DATA_API const std::string_view Attribute<Keyword::LensMake>::s_name = "Lens Make";
template<>
DATA_API const VR Attribute<Keyword::LensMake>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::LensMake>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LensModel>::s_keyword = Keyword::LensModel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensModel>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensModel>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::LensModel>::s_name = "Lens Model";
template<>
DATA_API const VR Attribute<Keyword::LensModel>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::LensModel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LensSerialNumber>::s_keyword = Keyword::LensSerialNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensSerialNumber>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensSerialNumber>::s_element = 0x0051;
template<>
DATA_API const std::string_view Attribute<Keyword::LensSerialNumber>::s_name = "Lens Serial Number";
template<>
DATA_API const VR Attribute<Keyword::LensSerialNumber>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::LensSerialNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InteroperabilityIndex>::s_keyword = Keyword::InteroperabilityIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InteroperabilityIndex>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InteroperabilityIndex>::s_element = 0x0061;
template<>
DATA_API const std::string_view Attribute<Keyword::InteroperabilityIndex>::s_name = "Interoperability Index";
template<>
DATA_API const VR Attribute<Keyword::InteroperabilityIndex>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InteroperabilityIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InteroperabilityVersion>::s_keyword = Keyword::InteroperabilityVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InteroperabilityVersion>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InteroperabilityVersion>::s_element = 0x0062;
template<>
DATA_API const std::string_view Attribute<Keyword::InteroperabilityVersion>::s_name = "Interoperability Version";
template<>
DATA_API const VR Attribute<Keyword::InteroperabilityVersion>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::InteroperabilityVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSVersionID>::s_keyword = Keyword::GPSVersionID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSVersionID>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSVersionID>::s_element = 0x0070;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSVersionID>::s_name = "GPS Version ID";
template<>
DATA_API const VR Attribute<Keyword::GPSVersionID>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::GPSVersionID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSLatitudeRef>::s_keyword = Keyword::GPSLatitudeRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLatitudeRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLatitudeRef>::s_element = 0x0071;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSLatitudeRef>::s_name = "GPS Latitude Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSLatitudeRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSLatitudeRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSLatitude>::s_keyword = Keyword::GPSLatitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLatitude>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLatitude>::s_element = 0x0072;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSLatitude>::s_name = "GPS Latitude";
template<>
DATA_API const VR Attribute<Keyword::GPSLatitude>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSLatitude>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::GPSLongitudeRef>::s_keyword = Keyword::GPSLongitudeRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLongitudeRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLongitudeRef>::s_element = 0x0073;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSLongitudeRef>::s_name = "GPS Longitude Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSLongitudeRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSLongitudeRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSLongitude>::s_keyword = Keyword::GPSLongitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLongitude>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSLongitude>::s_element = 0x0074;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSLongitude>::s_name = "GPS Longitude";
template<>
DATA_API const VR Attribute<Keyword::GPSLongitude>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSLongitude>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::GPSAltitudeRef>::s_keyword = Keyword::GPSAltitudeRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSAltitudeRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSAltitudeRef>::s_element = 0x0075;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSAltitudeRef>::s_name = "GPS Altitude Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSAltitudeRef>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::GPSAltitudeRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSAltitude>::s_keyword = Keyword::GPSAltitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSAltitude>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSAltitude>::s_element = 0x0076;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSAltitude>::s_name = "GPS Altitude";
template<>
DATA_API const VR Attribute<Keyword::GPSAltitude>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSAltitude>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSTimeStamp>::s_keyword = Keyword::GPSTimeStamp;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSTimeStamp>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSTimeStamp>::s_element = 0x0077;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSTimeStamp>::s_name = "GPS Time Stamp";
template<>
DATA_API const VR Attribute<Keyword::GPSTimeStamp>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::GPSTimeStamp>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSSatellites>::s_keyword = Keyword::GPSSatellites;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSSatellites>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSSatellites>::s_element = 0x0078;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSSatellites>::s_name = "GPS Satellites";
template<>
DATA_API const VR Attribute<Keyword::GPSSatellites>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::GPSSatellites>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPstatus>::s_keyword = Keyword::GPstatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPstatus>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPstatus>::s_element = 0x0079;
template<>
DATA_API const std::string_view Attribute<Keyword::GPstatus>::s_name = "GPS Status";
template<>
DATA_API const VR Attribute<Keyword::GPstatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPstatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSMeasureMode>::s_keyword = Keyword::GPSMeasureMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSMeasureMode>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSMeasureMode>::s_element = 0x007A;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSMeasureMode>::s_name = "GPS Measure Mode";
template<>
DATA_API const VR Attribute<Keyword::GPSMeasureMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSMeasureMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDOP>::s_keyword = Keyword::GPSDOP;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDOP>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDOP>::s_element = 0x007B;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDOP>::s_name = "GPS DOP";
template<>
DATA_API const VR Attribute<Keyword::GPSDOP>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSDOP>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSSpeedRef>::s_keyword = Keyword::GPSSpeedRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSSpeedRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSSpeedRef>::s_element = 0x007C;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSSpeedRef>::s_name = "GPS Speed Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSSpeedRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSSpeedRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSSpeed>::s_keyword = Keyword::GPSSpeed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSSpeed>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSSpeed>::s_element = 0x007D;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSSpeed>::s_name = "GPS Speed";
template<>
DATA_API const VR Attribute<Keyword::GPSSpeed>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSSpeed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSTrackRef>::s_keyword = Keyword::GPSTrackRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSTrackRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSTrackRef>::s_element = 0x007E;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSTrackRef>::s_name = "GPS Track Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSTrackRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSTrackRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSTrack>::s_keyword = Keyword::GPSTrack;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSTrack>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSTrack>::s_element = 0x007F;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSTrack>::s_name = "GPS Track";
template<>
DATA_API const VR Attribute<Keyword::GPSTrack>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSTrack>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSImgDirectionRef>::s_keyword = Keyword::GPSImgDirectionRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSImgDirectionRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSImgDirectionRef>::s_element = 0x0080;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSImgDirectionRef>::s_name = "GPS Img Direction Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSImgDirectionRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSImgDirectionRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSImgDirection>::s_keyword = Keyword::GPSImgDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSImgDirection>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSImgDirection>::s_element = 0x0081;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSImgDirection>::s_name = "GPS Img Direction";
template<>
DATA_API const VR Attribute<Keyword::GPSImgDirection>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSImgDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSMapDatum>::s_keyword = Keyword::GPSMapDatum;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSMapDatum>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSMapDatum>::s_element = 0x0082;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSMapDatum>::s_name = "GPS Map Datum";
template<>
DATA_API const VR Attribute<Keyword::GPSMapDatum>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::GPSMapDatum>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestLatitudeRef>::s_keyword = Keyword::GPSDestLatitudeRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLatitudeRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLatitudeRef>::s_element = 0x0083;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestLatitudeRef>::s_name = "GPS Dest Latitude Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSDestLatitudeRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestLatitudeRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestLatitude>::s_keyword = Keyword::GPSDestLatitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLatitude>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLatitude>::s_element = 0x0084;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestLatitude>::s_name = "GPS Dest Latitude";
template<>
DATA_API const VR Attribute<Keyword::GPSDestLatitude>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestLatitude>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestLongitudeRef>::s_keyword = Keyword::GPSDestLongitudeRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLongitudeRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLongitudeRef>::s_element = 0x0085;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestLongitudeRef>::s_name = "GPS Dest Longitude Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSDestLongitudeRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestLongitudeRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestLongitude>::s_keyword = Keyword::GPSDestLongitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLongitude>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestLongitude>::s_element = 0x0086;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestLongitude>::s_name = "GPS Dest Longitude";
template<>
DATA_API const VR Attribute<Keyword::GPSDestLongitude>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestLongitude>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestBearingRef>::s_keyword = Keyword::GPSDestBearingRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestBearingRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestBearingRef>::s_element = 0x0087;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestBearingRef>::s_name = "GPS Dest Bearing Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSDestBearingRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestBearingRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestBearing>::s_keyword = Keyword::GPSDestBearing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestBearing>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestBearing>::s_element = 0x0088;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestBearing>::s_name = "GPS Dest Bearing";
template<>
DATA_API const VR Attribute<Keyword::GPSDestBearing>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestBearing>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestDistanceRef>::s_keyword = Keyword::GPSDestDistanceRef;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestDistanceRef>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestDistanceRef>::s_element = 0x0089;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestDistanceRef>::s_name = "GPS Dest Distance Ref";
template<>
DATA_API const VR Attribute<Keyword::GPSDestDistanceRef>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestDistanceRef>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDestDistance>::s_keyword = Keyword::GPSDestDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestDistance>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDestDistance>::s_element = 0x008A;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDestDistance>::s_name = "GPS Dest Distance";
template<>
DATA_API const VR Attribute<Keyword::GPSDestDistance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GPSDestDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSProcessingMethod>::s_keyword = Keyword::GPSProcessingMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSProcessingMethod>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSProcessingMethod>::s_element = 0x008B;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSProcessingMethod>::s_name = "GPS Processing Method";
template<>
DATA_API const VR Attribute<Keyword::GPSProcessingMethod>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::GPSProcessingMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSAreaInformation>::s_keyword = Keyword::GPSAreaInformation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSAreaInformation>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSAreaInformation>::s_element = 0x008C;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSAreaInformation>::s_name = "GPS Area Information";
template<>
DATA_API const VR Attribute<Keyword::GPSAreaInformation>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::GPSAreaInformation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDateStamp>::s_keyword = Keyword::GPSDateStamp;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDateStamp>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDateStamp>::s_element = 0x008D;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDateStamp>::s_name = "GPS Date Stamp";
template<>
DATA_API const VR Attribute<Keyword::GPSDateStamp>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::GPSDateStamp>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GPSDifferential>::s_keyword = Keyword::GPSDifferential;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDifferential>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GPSDifferential>::s_element = 0x008E;
template<>
DATA_API const std::string_view Attribute<Keyword::GPSDifferential>::s_name = "GPS Differential";
template<>
DATA_API const VR Attribute<Keyword::GPSDifferential>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::GPSDifferential>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LightSourcePolarization>::s_keyword = Keyword::LightSourcePolarization;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightSourcePolarization>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightSourcePolarization>::s_element = 0x1001;
template<>
DATA_API const std::string_view Attribute<Keyword::LightSourcePolarization>::s_name = "Light Source Polarization";
template<>
DATA_API const VR Attribute<Keyword::LightSourcePolarization>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::LightSourcePolarization>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EmitterColorTemperature>::s_keyword = Keyword::EmitterColorTemperature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EmitterColorTemperature>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EmitterColorTemperature>::s_element = 0x1002;
template<>
DATA_API const std::string_view Attribute<Keyword::EmitterColorTemperature>::s_name = "Emitter Color Temperature";
template<>
DATA_API const VR Attribute<Keyword::EmitterColorTemperature>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EmitterColorTemperature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContactMethod>::s_keyword = Keyword::ContactMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContactMethod>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContactMethod>::s_element = 0x1003;
template<>
DATA_API const std::string_view Attribute<Keyword::ContactMethod>::s_name = "Contact Method";
template<>
DATA_API const VR Attribute<Keyword::ContactMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContactMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImmersionMedia>::s_keyword = Keyword::ImmersionMedia;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImmersionMedia>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImmersionMedia>::s_element = 0x1004;
template<>
DATA_API const std::string_view Attribute<Keyword::ImmersionMedia>::s_name = "Immersion Media";
template<>
DATA_API const VR Attribute<Keyword::ImmersionMedia>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ImmersionMedia>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::OpticalMagnificationFactor>::s_keyword = Keyword::OpticalMagnificationFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalMagnificationFactor>::s_group = 0x0016;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalMagnificationFactor>::s_element = 0x1005;
template<>
DATA_API const std::string_view Attribute<Keyword::OpticalMagnificationFactor>::s_name = "Optical Magnification Factor";
template<>
DATA_API const VR Attribute<Keyword::OpticalMagnificationFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::OpticalMagnificationFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAgent>::s_keyword = Keyword::ContrastBolusAgent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgent>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgent>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAgent>::s_name = "Contrast/Bolus Agent";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAgent>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAgent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAgentSequence>::s_keyword = Keyword::ContrastBolusAgentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentSequence>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAgentSequence>::s_name =
    "Contrast/Bolus Agent Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAgentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAgentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusT1Relaxivity>::s_keyword = Keyword::ContrastBolusT1Relaxivity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusT1Relaxivity>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusT1Relaxivity>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusT1Relaxivity>::s_name = "Contrast/Bolus T1 Relaxivity";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusT1Relaxivity>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusT1Relaxivity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAdministrationRouteSequence>::s_keyword =
    Keyword::ContrastBolusAdministrationRouteSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAdministrationRouteSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAdministrationRouteSequence>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAdministrationRouteSequence>::s_name =
    "Contrast/Bolus Administration Route Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAdministrationRouteSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAdministrationRouteSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BodyPartExamined>::s_keyword = Keyword::BodyPartExamined;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BodyPartExamined>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BodyPartExamined>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::BodyPartExamined>::s_name = "Body Part Examined";
template<>
DATA_API const VR Attribute<Keyword::BodyPartExamined>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BodyPartExamined>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScanningSequence>::s_keyword = Keyword::ScanningSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanningSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanningSequence>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanningSequence>::s_name = "Scanning Sequence";
template<>
DATA_API const VR Attribute<Keyword::ScanningSequence>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ScanningSequence>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SequenceVariant>::s_keyword = Keyword::SequenceVariant;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SequenceVariant>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SequenceVariant>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::SequenceVariant>::s_name = "Sequence Variant";
template<>
DATA_API const VR Attribute<Keyword::SequenceVariant>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SequenceVariant>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ScanOptions>::s_keyword = Keyword::ScanOptions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanOptions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanOptions>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanOptions>::s_name = "Scan Options";
template<>
DATA_API const VR Attribute<Keyword::ScanOptions>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ScanOptions>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::MRAcquisitionType>::s_keyword = Keyword::MRAcquisitionType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionType>::s_element = 0x0023;
template<>
DATA_API const std::string_view Attribute<Keyword::MRAcquisitionType>::s_name = "MR Acquisition Type";
template<>
DATA_API const VR Attribute<Keyword::MRAcquisitionType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MRAcquisitionType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SequenceName>::s_keyword = Keyword::SequenceName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SequenceName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SequenceName>::s_element = 0x0024;
template<>
DATA_API const std::string_view Attribute<Keyword::SequenceName>::s_name = "Sequence Name";
template<>
DATA_API const VR Attribute<Keyword::SequenceName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::SequenceName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AngioFlag>::s_keyword = Keyword::AngioFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AngioFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AngioFlag>::s_element = 0x0025;
template<>
DATA_API const std::string_view Attribute<Keyword::AngioFlag>::s_name = "Angio Flag";
template<>
DATA_API const VR Attribute<Keyword::AngioFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AngioFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDrugInformationSequence>::s_keyword =
    Keyword::InterventionDrugInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugInformationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugInformationSequence>::s_element = 0x0026;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDrugInformationSequence>::s_name =
    "Intervention Drug Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::InterventionDrugInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InterventionDrugInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDrugStopTime>::s_keyword = Keyword::InterventionDrugStopTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugStopTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugStopTime>::s_element = 0x0027;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDrugStopTime>::s_name = "Intervention Drug Stop Time";
template<>
DATA_API const VR Attribute<Keyword::InterventionDrugStopTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::InterventionDrugStopTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDrugDose>::s_keyword = Keyword::InterventionDrugDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugDose>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugDose>::s_element = 0x0028;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDrugDose>::s_name = "Intervention Drug Dose";
template<>
DATA_API const VR Attribute<Keyword::InterventionDrugDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::InterventionDrugDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDrugCodeSequence>::s_keyword =
    Keyword::InterventionDrugCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugCodeSequence>::s_element = 0x0029;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDrugCodeSequence>::s_name =
    "Intervention Drug Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::InterventionDrugCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InterventionDrugCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AdditionalDrugSequence>::s_keyword = Keyword::AdditionalDrugSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdditionalDrugSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdditionalDrugSequence>::s_element = 0x002A;
template<>
DATA_API const std::string_view Attribute<Keyword::AdditionalDrugSequence>::s_name = "Additional Drug Sequence";
template<>
DATA_API const VR Attribute<Keyword::AdditionalDrugSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AdditionalDrugSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Radiopharmaceutical>::s_keyword = Keyword::Radiopharmaceutical;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Radiopharmaceutical>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Radiopharmaceutical>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::Radiopharmaceutical>::s_name = "Radiopharmaceutical";
template<>
DATA_API const VR Attribute<Keyword::Radiopharmaceutical>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::Radiopharmaceutical>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDrugName>::s_keyword = Keyword::InterventionDrugName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugName>::s_element = 0x0034;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDrugName>::s_name = "Intervention Drug Name";
template<>
DATA_API const VR Attribute<Keyword::InterventionDrugName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::InterventionDrugName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDrugStartTime>::s_keyword = Keyword::InterventionDrugStartTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugStartTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDrugStartTime>::s_element = 0x0035;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDrugStartTime>::s_name = "Intervention Drug Start Time";
template<>
DATA_API const VR Attribute<Keyword::InterventionDrugStartTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::InterventionDrugStartTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionSequence>::s_keyword = Keyword::InterventionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionSequence>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionSequence>::s_name = "Intervention Sequence";
template<>
DATA_API const VR Attribute<Keyword::InterventionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InterventionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionStatus>::s_keyword = Keyword::InterventionStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionStatus>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionStatus>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionStatus>::s_name = "Intervention Status";
template<>
DATA_API const VR Attribute<Keyword::InterventionStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InterventionStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterventionDescription>::s_keyword = Keyword::InterventionDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterventionDescription>::s_element = 0x003A;
template<>
DATA_API const std::string_view Attribute<Keyword::InterventionDescription>::s_name = "Intervention Description";
template<>
DATA_API const VR Attribute<Keyword::InterventionDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::InterventionDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CineRate>::s_keyword = Keyword::CineRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CineRate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CineRate>::s_element = 0x0040;
template<>
DATA_API const std::string_view Attribute<Keyword::CineRate>::s_name = "Cine Rate";
template<>
DATA_API const VR Attribute<Keyword::CineRate>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CineRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InitialCineRunState>::s_keyword = Keyword::InitialCineRunState;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InitialCineRunState>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InitialCineRunState>::s_element = 0x0042;
template<>
DATA_API const std::string_view Attribute<Keyword::InitialCineRunState>::s_name = "Initial Cine Run State";
template<>
DATA_API const VR Attribute<Keyword::InitialCineRunState>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InitialCineRunState>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SliceThickness>::s_keyword = Keyword::SliceThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceThickness>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceThickness>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::SliceThickness>::s_name = "Slice Thickness";
template<>
DATA_API const VR Attribute<Keyword::SliceThickness>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SliceThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::KVP>::s_keyword = Keyword::KVP;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KVP>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KVP>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::KVP>::s_name = "KVP";
template<>
DATA_API const VR Attribute<Keyword::KVP>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::KVP>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CountsAccumulated>::s_keyword = Keyword::CountsAccumulated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountsAccumulated>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountsAccumulated>::s_element = 0x0070;
template<>
DATA_API const std::string_view Attribute<Keyword::CountsAccumulated>::s_name = "Counts Accumulated";
template<>
DATA_API const VR Attribute<Keyword::CountsAccumulated>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CountsAccumulated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionTerminationCondition>::s_keyword =
    Keyword::AcquisitionTerminationCondition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTerminationCondition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTerminationCondition>::s_element = 0x0071;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionTerminationCondition>::s_name =
    "Acquisition Termination Condition";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionTerminationCondition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionTerminationCondition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EffectiveDuration>::s_keyword = Keyword::EffectiveDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveDuration>::s_element = 0x0072;
template<>
DATA_API const std::string_view Attribute<Keyword::EffectiveDuration>::s_name = "Effective Duration";
template<>
DATA_API const VR Attribute<Keyword::EffectiveDuration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EffectiveDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionStartCondition>::s_keyword = Keyword::AcquisitionStartCondition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionStartCondition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionStartCondition>::s_element = 0x0073;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionStartCondition>::s_name = "Acquisition Start Condition";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionStartCondition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionStartCondition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionStartConditionData>::s_keyword =
    Keyword::AcquisitionStartConditionData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionStartConditionData>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionStartConditionData>::s_element = 0x0074;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionStartConditionData>::s_name =
    "Acquisition Start Condition Data";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionStartConditionData>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionStartConditionData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionTerminationConditionData>::s_keyword =
    Keyword::AcquisitionTerminationConditionData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTerminationConditionData>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTerminationConditionData>::s_element = 0x0075;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionTerminationConditionData>::s_name =
    "Acquisition Termination Condition Data";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionTerminationConditionData>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionTerminationConditionData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RepetitionTime>::s_keyword = Keyword::RepetitionTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RepetitionTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RepetitionTime>::s_element = 0x0080;
template<>
DATA_API const std::string_view Attribute<Keyword::RepetitionTime>::s_name = "Repetition Time";
template<>
DATA_API const VR Attribute<Keyword::RepetitionTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RepetitionTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EchoTime>::s_keyword = Keyword::EchoTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoTime>::s_element = 0x0081;
template<>
DATA_API const std::string_view Attribute<Keyword::EchoTime>::s_name = "Echo Time";
template<>
DATA_API const VR Attribute<Keyword::EchoTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EchoTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InversionTime>::s_keyword = Keyword::InversionTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InversionTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InversionTime>::s_element = 0x0082;
template<>
DATA_API const std::string_view Attribute<Keyword::InversionTime>::s_name = "Inversion Time";
template<>
DATA_API const VR Attribute<Keyword::InversionTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::InversionTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfAverages>::s_keyword = Keyword::NumberOfAverages;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfAverages>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfAverages>::s_element = 0x0083;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfAverages>::s_name = "Number of Averages";
template<>
DATA_API const VR Attribute<Keyword::NumberOfAverages>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfAverages>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagingFrequency>::s_keyword = Keyword::ImagingFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagingFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagingFrequency>::s_element = 0x0084;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagingFrequency>::s_name = "Imaging Frequency";
template<>
DATA_API const VR Attribute<Keyword::ImagingFrequency>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImagingFrequency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagedNucleus>::s_keyword = Keyword::ImagedNucleus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedNucleus>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedNucleus>::s_element = 0x0085;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagedNucleus>::s_name = "Imaged Nucleus";
template<>
DATA_API const VR Attribute<Keyword::ImagedNucleus>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ImagedNucleus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EchoNumbers>::s_keyword = Keyword::EchoNumbers;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoNumbers>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoNumbers>::s_element = 0x0086;
template<>
DATA_API const std::string_view Attribute<Keyword::EchoNumbers>::s_name = "Echo Number(s)";
template<>
DATA_API const VR Attribute<Keyword::EchoNumbers>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::EchoNumbers>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::MagneticFieldStrength>::s_keyword = Keyword::MagneticFieldStrength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MagneticFieldStrength>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MagneticFieldStrength>::s_element = 0x0087;
template<>
DATA_API const std::string_view Attribute<Keyword::MagneticFieldStrength>::s_name = "Magnetic field Strength";
template<>
DATA_API const VR Attribute<Keyword::MagneticFieldStrength>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MagneticFieldStrength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpacingBetweenSlices>::s_keyword = Keyword::SpacingBetweenSlices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpacingBetweenSlices>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpacingBetweenSlices>::s_element = 0x0088;
template<>
DATA_API const std::string_view Attribute<Keyword::SpacingBetweenSlices>::s_name = "Spacing Between Slices";
template<>
DATA_API const VR Attribute<Keyword::SpacingBetweenSlices>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SpacingBetweenSlices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfPhaseEncodingSteps>::s_keyword = Keyword::NumberOfPhaseEncodingSteps;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPhaseEncodingSteps>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPhaseEncodingSteps>::s_element = 0x0089;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfPhaseEncodingSteps>::s_name =
    "Number of Phase Encoding Steps";
template<>
DATA_API const VR Attribute<Keyword::NumberOfPhaseEncodingSteps>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfPhaseEncodingSteps>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataCollectionDiameter>::s_keyword = Keyword::DataCollectionDiameter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataCollectionDiameter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataCollectionDiameter>::s_element = 0x0090;
template<>
DATA_API const std::string_view Attribute<Keyword::DataCollectionDiameter>::s_name = "Data Collection Diameter";
template<>
DATA_API const VR Attribute<Keyword::DataCollectionDiameter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DataCollectionDiameter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EchoTrainLength>::s_keyword = Keyword::EchoTrainLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoTrainLength>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoTrainLength>::s_element = 0x0091;
template<>
DATA_API const std::string_view Attribute<Keyword::EchoTrainLength>::s_name = "Echo Train Length";
template<>
DATA_API const VR Attribute<Keyword::EchoTrainLength>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::EchoTrainLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PercentSampling>::s_keyword = Keyword::PercentSampling;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PercentSampling>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PercentSampling>::s_element = 0x0093;
template<>
DATA_API const std::string_view Attribute<Keyword::PercentSampling>::s_name = "Percent Sampling";
template<>
DATA_API const VR Attribute<Keyword::PercentSampling>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PercentSampling>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PercentPhaseFieldOfView>::s_keyword = Keyword::PercentPhaseFieldOfView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PercentPhaseFieldOfView>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PercentPhaseFieldOfView>::s_element = 0x0094;
template<>
DATA_API const std::string_view Attribute<Keyword::PercentPhaseFieldOfView>::s_name = "Percent Phase field of view";
template<>
DATA_API const VR Attribute<Keyword::PercentPhaseFieldOfView>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PercentPhaseFieldOfView>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelBandwidth>::s_keyword = Keyword::PixelBandwidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelBandwidth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelBandwidth>::s_element = 0x0095;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelBandwidth>::s_name = "Pixel Bandwidth";
template<>
DATA_API const VR Attribute<Keyword::PixelBandwidth>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PixelBandwidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceSerialNumber>::s_keyword = Keyword::DeviceSerialNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceSerialNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceSerialNumber>::s_element = 0x1000;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceSerialNumber>::s_name = "Device Serial Number";
template<>
DATA_API const VR Attribute<Keyword::DeviceSerialNumber>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DeviceSerialNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceUID>::s_keyword = Keyword::DeviceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceUID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceUID>::s_element = 0x1002;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceUID>::s_name = "Device UID";
template<>
DATA_API const VR Attribute<Keyword::DeviceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::DeviceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceID>::s_keyword = Keyword::DeviceID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceID>::s_element = 0x1003;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceID>::s_name = "Device ID";
template<>
DATA_API const VR Attribute<Keyword::DeviceID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DeviceID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlateID>::s_keyword = Keyword::PlateID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlateID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlateID>::s_element = 0x1004;
template<>
DATA_API const std::string_view Attribute<Keyword::PlateID>::s_name = "Plate ID";
template<>
DATA_API const VR Attribute<Keyword::PlateID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PlateID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneratorID>::s_keyword = Keyword::GeneratorID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneratorID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneratorID>::s_element = 0x1005;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneratorID>::s_name = "Generator ID";
template<>
DATA_API const VR Attribute<Keyword::GeneratorID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::GeneratorID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridID>::s_keyword = Keyword::GridID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridID>::s_element = 0x1006;
template<>
DATA_API const std::string_view Attribute<Keyword::GridID>::s_name = "Grid ID";
template<>
DATA_API const VR Attribute<Keyword::GridID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::GridID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CassetteID>::s_keyword = Keyword::CassetteID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CassetteID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CassetteID>::s_element = 0x1007;
template<>
DATA_API const std::string_view Attribute<Keyword::CassetteID>::s_name = "Cassette ID";
template<>
DATA_API const VR Attribute<Keyword::CassetteID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::CassetteID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GantryID>::s_keyword = Keyword::GantryID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryID>::s_element = 0x1008;
template<>
DATA_API const std::string_view Attribute<Keyword::GantryID>::s_name = "Gantry ID";
template<>
DATA_API const VR Attribute<Keyword::GantryID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::GantryID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UniqueDeviceIdentifier>::s_keyword = Keyword::UniqueDeviceIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UniqueDeviceIdentifier>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UniqueDeviceIdentifier>::s_element = 0x1009;
template<>
DATA_API const std::string_view Attribute<Keyword::UniqueDeviceIdentifier>::s_name = "Unique Device Identifier";
template<>
DATA_API const VR Attribute<Keyword::UniqueDeviceIdentifier>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::UniqueDeviceIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UDISequence>::s_keyword = Keyword::UDISequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UDISequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UDISequence>::s_element = 0x100A;
template<>
DATA_API const std::string_view Attribute<Keyword::UDISequence>::s_name = "UDI Sequence";
template<>
DATA_API const VR Attribute<Keyword::UDISequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::UDISequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ManufacturerDeviceClassUID>::s_keyword = Keyword::ManufacturerDeviceClassUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerDeviceClassUID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerDeviceClassUID>::s_element = 0x100B;
template<>
DATA_API const std::string_view Attribute<Keyword::ManufacturerDeviceClassUID>::s_name =
    "Manufacturer's Device Class UID";
template<>
DATA_API const VR Attribute<Keyword::ManufacturerDeviceClassUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ManufacturerDeviceClassUID>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryCaptureDeviceID>::s_keyword = Keyword::SecondaryCaptureDeviceID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceID>::s_element = 0x1010;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryCaptureDeviceID>::s_name = "Secondary Capture Device ID";
template<>
DATA_API const VR Attribute<Keyword::SecondaryCaptureDeviceID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SecondaryCaptureDeviceID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DateOfSecondaryCapture>::s_keyword = Keyword::DateOfSecondaryCapture;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfSecondaryCapture>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfSecondaryCapture>::s_element = 0x1012;
template<>
DATA_API const std::string_view Attribute<Keyword::DateOfSecondaryCapture>::s_name = "Date of Secondary Capture";
template<>
DATA_API const VR Attribute<Keyword::DateOfSecondaryCapture>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::DateOfSecondaryCapture>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeOfSecondaryCapture>::s_keyword = Keyword::TimeOfSecondaryCapture;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfSecondaryCapture>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfSecondaryCapture>::s_element = 0x1014;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeOfSecondaryCapture>::s_name = "Time of Secondary Capture";
template<>
DATA_API const VR Attribute<Keyword::TimeOfSecondaryCapture>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::TimeOfSecondaryCapture>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryCaptureDeviceManufacturer>::s_keyword =
    Keyword::SecondaryCaptureDeviceManufacturer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceManufacturer>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceManufacturer>::s_element = 0x1016;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryCaptureDeviceManufacturer>::s_name =
    "Secondary Capture Device Manufacturer";
template<>
DATA_API const VR Attribute<Keyword::SecondaryCaptureDeviceManufacturer>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SecondaryCaptureDeviceManufacturer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryCaptureDeviceManufacturerModelName>::s_keyword =
    Keyword::SecondaryCaptureDeviceManufacturerModelName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceManufacturerModelName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceManufacturerModelName>::s_element = 0x1018;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryCaptureDeviceManufacturerModelName>::s_name =
    "Secondary Capture Device Manufacturer's Model Name";
template<>
DATA_API const VR Attribute<Keyword::SecondaryCaptureDeviceManufacturerModelName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SecondaryCaptureDeviceManufacturerModelName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryCaptureDeviceSoftwareVersions>::s_keyword =
    Keyword::SecondaryCaptureDeviceSoftwareVersions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceSoftwareVersions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCaptureDeviceSoftwareVersions>::s_element = 0x1019;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryCaptureDeviceSoftwareVersions>::s_name =
    "Secondary Capture Device Software Versions";
template<>
DATA_API const VR Attribute<Keyword::SecondaryCaptureDeviceSoftwareVersions>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SecondaryCaptureDeviceSoftwareVersions>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SoftwareVersions>::s_keyword = Keyword::SoftwareVersions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftwareVersions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftwareVersions>::s_element = 0x1020;
template<>
DATA_API const std::string_view Attribute<Keyword::SoftwareVersions>::s_name = "Software Versions";
template<>
DATA_API const VR Attribute<Keyword::SoftwareVersions>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SoftwareVersions>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::VideoImageFormatAcquired>::s_keyword = Keyword::VideoImageFormatAcquired;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VideoImageFormatAcquired>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VideoImageFormatAcquired>::s_element = 0x1022;
template<>
DATA_API const std::string_view Attribute<Keyword::VideoImageFormatAcquired>::s_name = "Video Image Format Acquired";
template<>
DATA_API const VR Attribute<Keyword::VideoImageFormatAcquired>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::VideoImageFormatAcquired>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DigitalImageFormatAcquired>::s_keyword = Keyword::DigitalImageFormatAcquired;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalImageFormatAcquired>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalImageFormatAcquired>::s_element = 0x1023;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitalImageFormatAcquired>::s_name =
    "Digital Image Format Acquired";
template<>
DATA_API const VR Attribute<Keyword::DigitalImageFormatAcquired>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DigitalImageFormatAcquired>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ProtocolName>::s_keyword = Keyword::ProtocolName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProtocolName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProtocolName>::s_element = 0x1030;
template<>
DATA_API const std::string_view Attribute<Keyword::ProtocolName>::s_name = "Protocol Name";
template<>
DATA_API const VR Attribute<Keyword::ProtocolName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ProtocolName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusRoute>::s_keyword = Keyword::ContrastBolusRoute;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusRoute>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusRoute>::s_element = 0x1040;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusRoute>::s_name = "Contrast/Bolus Route";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusRoute>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusRoute>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusVolume>::s_keyword = Keyword::ContrastBolusVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusVolume>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusVolume>::s_element = 0x1041;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusVolume>::s_name = "Contrast/Bolus Volume";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusVolume>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusVolume>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusStartTime>::s_keyword = Keyword::ContrastBolusStartTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusStartTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusStartTime>::s_element = 0x1042;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusStartTime>::s_name = "Contrast/Bolus Start Time";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusStartTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusStartTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusStopTime>::s_keyword = Keyword::ContrastBolusStopTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusStopTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusStopTime>::s_element = 0x1043;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusStopTime>::s_name = "Contrast/Bolus Stop Time";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusStopTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusStopTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusTotalDose>::s_keyword = Keyword::ContrastBolusTotalDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusTotalDose>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusTotalDose>::s_element = 0x1044;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusTotalDose>::s_name = "Contrast/Bolus Total Dose";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusTotalDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusTotalDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastFlowRate>::s_keyword = Keyword::ContrastFlowRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastFlowRate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastFlowRate>::s_element = 0x1046;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastFlowRate>::s_name = "Contrast Flow Rate";
template<>
DATA_API const VR Attribute<Keyword::ContrastFlowRate>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ContrastFlowRate>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastFlowDuration>::s_keyword = Keyword::ContrastFlowDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastFlowDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastFlowDuration>::s_element = 0x1047;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastFlowDuration>::s_name = "Contrast Flow Duration";
template<>
DATA_API const VR Attribute<Keyword::ContrastFlowDuration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ContrastFlowDuration>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusIngredient>::s_keyword = Keyword::ContrastBolusIngredient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredient>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredient>::s_element = 0x1048;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusIngredient>::s_name = "Contrast/Bolus Ingredient";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusIngredient>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusIngredient>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusIngredientConcentration>::s_keyword =
    Keyword::ContrastBolusIngredientConcentration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientConcentration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientConcentration>::s_element = 0x1049;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusIngredientConcentration>::s_name =
    "Contrast/Bolus Ingredient Concentration";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusIngredientConcentration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusIngredientConcentration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialResolution>::s_keyword = Keyword::SpatialResolution;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialResolution>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialResolution>::s_element = 0x1050;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialResolution>::s_name = "Spatial Resolution";
template<>
DATA_API const VR Attribute<Keyword::SpatialResolution>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SpatialResolution>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TriggerTime>::s_keyword = Keyword::TriggerTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerTime>::s_element = 0x1060;
template<>
DATA_API const std::string_view Attribute<Keyword::TriggerTime>::s_name = "Trigger Time";
template<>
DATA_API const VR Attribute<Keyword::TriggerTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TriggerTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TriggerSourceOrType>::s_keyword = Keyword::TriggerSourceOrType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerSourceOrType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerSourceOrType>::s_element = 0x1061;
template<>
DATA_API const std::string_view Attribute<Keyword::TriggerSourceOrType>::s_name = "Trigger Source or Type";
template<>
DATA_API const VR Attribute<Keyword::TriggerSourceOrType>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::TriggerSourceOrType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalInterval>::s_keyword = Keyword::NominalInterval;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalInterval>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalInterval>::s_element = 0x1062;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalInterval>::s_name = "Nominal Interval";
template<>
DATA_API const VR Attribute<Keyword::NominalInterval>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NominalInterval>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameTime>::s_keyword = Keyword::FrameTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameTime>::s_element = 0x1063;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameTime>::s_name = "Frame Time";
template<>
DATA_API const VR Attribute<Keyword::FrameTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FrameTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacFramingType>::s_keyword = Keyword::CardiacFramingType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacFramingType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacFramingType>::s_element = 0x1064;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacFramingType>::s_name = "Cardiac Framing Type";
template<>
DATA_API const VR Attribute<Keyword::CardiacFramingType>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::CardiacFramingType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameTimeVector>::s_keyword = Keyword::FrameTimeVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameTimeVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameTimeVector>::s_element = 0x1065;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameTimeVector>::s_name = "Frame Time Vector";
template<>
DATA_API const VR Attribute<Keyword::FrameTimeVector>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FrameTimeVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameDelay>::s_keyword = Keyword::FrameDelay;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDelay>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDelay>::s_element = 0x1066;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameDelay>::s_name = "Frame Delay";
template<>
DATA_API const VR Attribute<Keyword::FrameDelay>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FrameDelay>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageTriggerDelay>::s_keyword = Keyword::ImageTriggerDelay;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageTriggerDelay>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageTriggerDelay>::s_element = 0x1067;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageTriggerDelay>::s_name = "Image Trigger Delay";
template<>
DATA_API const VR Attribute<Keyword::ImageTriggerDelay>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImageTriggerDelay>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SynchronizationTrigger>::s_keyword = Keyword::SynchronizationTrigger;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizationTrigger>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizationTrigger>::s_element = 0x106A;
template<>
DATA_API const std::string_view Attribute<Keyword::SynchronizationTrigger>::s_name = "Synchronization Trigger";
template<>
DATA_API const VR Attribute<Keyword::SynchronizationTrigger>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SynchronizationTrigger>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SynchronizationChannel>::s_keyword = Keyword::SynchronizationChannel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizationChannel>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizationChannel>::s_element = 0x106C;
template<>
DATA_API const std::string_view Attribute<Keyword::SynchronizationChannel>::s_name = "Synchronization Channel";
template<>
DATA_API const VR Attribute<Keyword::SynchronizationChannel>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SynchronizationChannel>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalRoute>::s_keyword = Keyword::RadiopharmaceuticalRoute;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalRoute>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalRoute>::s_element = 0x1070;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalRoute>::s_name = "Radiopharmaceutical Route";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalRoute>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalRoute>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalVolume>::s_keyword = Keyword::RadiopharmaceuticalVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalVolume>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalVolume>::s_element = 0x1071;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalVolume>::s_name = "Radiopharmaceutical Volume";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalVolume>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalVolume>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalStartTime>::s_keyword =
    Keyword::RadiopharmaceuticalStartTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStartTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStartTime>::s_element = 0x1072;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalStartTime>::s_name =
    "Radiopharmaceutical Start Time";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalStartTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalStartTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalStopTime>::s_keyword =
    Keyword::RadiopharmaceuticalStopTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStopTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStopTime>::s_element = 0x1073;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalStopTime>::s_name =
    "Radiopharmaceutical Stop Time";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalStopTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalStopTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadionuclideTotalDose>::s_keyword = Keyword::RadionuclideTotalDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclideTotalDose>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclideTotalDose>::s_element = 0x1074;
template<>
DATA_API const std::string_view Attribute<Keyword::RadionuclideTotalDose>::s_name = "Radionuclide Total Dose";
template<>
DATA_API const VR Attribute<Keyword::RadionuclideTotalDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadionuclideTotalDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadionuclideHalfLife>::s_keyword = Keyword::RadionuclideHalfLife;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclideHalfLife>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclideHalfLife>::s_element = 0x1075;
template<>
DATA_API const std::string_view Attribute<Keyword::RadionuclideHalfLife>::s_name = "Radionuclide Half Life";
template<>
DATA_API const VR Attribute<Keyword::RadionuclideHalfLife>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadionuclideHalfLife>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadionuclidePositronFraction>::s_keyword =
    Keyword::RadionuclidePositronFraction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclidePositronFraction>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclidePositronFraction>::s_element = 0x1076;
template<>
DATA_API const std::string_view Attribute<Keyword::RadionuclidePositronFraction>::s_name =
    "Radionuclide Positron Fraction";
template<>
DATA_API const VR Attribute<Keyword::RadionuclidePositronFraction>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadionuclidePositronFraction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalSpecificActivity>::s_keyword =
    Keyword::RadiopharmaceuticalSpecificActivity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalSpecificActivity>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalSpecificActivity>::s_element = 0x1077;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalSpecificActivity>::s_name =
    "Radiopharmaceutical Specific Activity";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalSpecificActivity>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalSpecificActivity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalStartDateTime>::s_keyword =
    Keyword::RadiopharmaceuticalStartDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStartDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStartDateTime>::s_element = 0x1078;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalStartDateTime>::s_name =
    "Radiopharmaceutical Start DateTime";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalStartDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalStartDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalStopDateTime>::s_keyword =
    Keyword::RadiopharmaceuticalStopDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStopDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalStopDateTime>::s_element = 0x1079;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalStopDateTime>::s_name =
    "Radiopharmaceutical Stop DateTime";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalStopDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalStopDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeatRejectionFlag>::s_keyword = Keyword::BeatRejectionFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeatRejectionFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeatRejectionFlag>::s_element = 0x1080;
template<>
DATA_API const std::string_view Attribute<Keyword::BeatRejectionFlag>::s_name = "Beat Rejection Flag";
template<>
DATA_API const VR Attribute<Keyword::BeatRejectionFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BeatRejectionFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LowRRValue>::s_keyword = Keyword::LowRRValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LowRRValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LowRRValue>::s_element = 0x1081;
template<>
DATA_API const std::string_view Attribute<Keyword::LowRRValue>::s_name = "Low R-R Value";
template<>
DATA_API const VR Attribute<Keyword::LowRRValue>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::LowRRValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HighRRValue>::s_keyword = Keyword::HighRRValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HighRRValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HighRRValue>::s_element = 0x1082;
template<>
DATA_API const std::string_view Attribute<Keyword::HighRRValue>::s_name = "High R-R Value";
template<>
DATA_API const VR Attribute<Keyword::HighRRValue>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::HighRRValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntervalsAcquired>::s_keyword = Keyword::IntervalsAcquired;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntervalsAcquired>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntervalsAcquired>::s_element = 0x1083;
template<>
DATA_API const std::string_view Attribute<Keyword::IntervalsAcquired>::s_name = "Intervals Acquired";
template<>
DATA_API const VR Attribute<Keyword::IntervalsAcquired>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::IntervalsAcquired>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntervalsRejected>::s_keyword = Keyword::IntervalsRejected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntervalsRejected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntervalsRejected>::s_element = 0x1084;
template<>
DATA_API const std::string_view Attribute<Keyword::IntervalsRejected>::s_name = "Intervals Rejected";
template<>
DATA_API const VR Attribute<Keyword::IntervalsRejected>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::IntervalsRejected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PVCRejection>::s_keyword = Keyword::PVCRejection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PVCRejection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PVCRejection>::s_element = 0x1085;
template<>
DATA_API const std::string_view Attribute<Keyword::PVCRejection>::s_name = "PVC Rejection";
template<>
DATA_API const VR Attribute<Keyword::PVCRejection>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PVCRejection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SkipBeats>::s_keyword = Keyword::SkipBeats;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SkipBeats>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SkipBeats>::s_element = 0x1086;
template<>
DATA_API const std::string_view Attribute<Keyword::SkipBeats>::s_name = "Skip Beats";
template<>
DATA_API const VR Attribute<Keyword::SkipBeats>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SkipBeats>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HeartRate>::s_keyword = Keyword::HeartRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HeartRate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HeartRate>::s_element = 0x1088;
template<>
DATA_API const std::string_view Attribute<Keyword::HeartRate>::s_name = "Heart Rate";
template<>
DATA_API const VR Attribute<Keyword::HeartRate>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::HeartRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacNumberOfImages>::s_keyword = Keyword::CardiacNumberOfImages;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacNumberOfImages>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacNumberOfImages>::s_element = 0x1090;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacNumberOfImages>::s_name = "Cardiac Number of Images";
template<>
DATA_API const VR Attribute<Keyword::CardiacNumberOfImages>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CardiacNumberOfImages>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TriggerWindow>::s_keyword = Keyword::TriggerWindow;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerWindow>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerWindow>::s_element = 0x1094;
template<>
DATA_API const std::string_view Attribute<Keyword::TriggerWindow>::s_name = "Trigger Window";
template<>
DATA_API const VR Attribute<Keyword::TriggerWindow>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::TriggerWindow>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionDiameter>::s_keyword = Keyword::ReconstructionDiameter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionDiameter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionDiameter>::s_element = 0x1100;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionDiameter>::s_name = "Reconstruction Diameter";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionDiameter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionDiameter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceSourceToDetector>::s_keyword = Keyword::DistanceSourceToDetector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToDetector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToDetector>::s_element = 0x1110;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceSourceToDetector>::s_name = "Distance Source to Detector";
template<>
DATA_API const VR Attribute<Keyword::DistanceSourceToDetector>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DistanceSourceToDetector>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceSourceToPatient>::s_keyword = Keyword::DistanceSourceToPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToPatient>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToPatient>::s_element = 0x1111;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceSourceToPatient>::s_name = "Distance Source to Patient";
template<>
DATA_API const VR Attribute<Keyword::DistanceSourceToPatient>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DistanceSourceToPatient>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EstimatedRadiographicMagnificationFactor>::s_keyword =
    Keyword::EstimatedRadiographicMagnificationFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EstimatedRadiographicMagnificationFactor>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EstimatedRadiographicMagnificationFactor>::s_element = 0x1114;
template<>
DATA_API const std::string_view Attribute<Keyword::EstimatedRadiographicMagnificationFactor>::s_name =
    "Estimated Radiographic Magnification Factor";
template<>
DATA_API const VR Attribute<Keyword::EstimatedRadiographicMagnificationFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EstimatedRadiographicMagnificationFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GantryDetectorTilt>::s_keyword = Keyword::GantryDetectorTilt;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryDetectorTilt>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryDetectorTilt>::s_element = 0x1120;
template<>
DATA_API const std::string_view Attribute<Keyword::GantryDetectorTilt>::s_name = "Gantry/Detector Tilt";
template<>
DATA_API const VR Attribute<Keyword::GantryDetectorTilt>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GantryDetectorTilt>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GantryDetectorSlew>::s_keyword = Keyword::GantryDetectorSlew;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryDetectorSlew>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryDetectorSlew>::s_element = 0x1121;
template<>
DATA_API const std::string_view Attribute<Keyword::GantryDetectorSlew>::s_name = "Gantry/Detector Slew";
template<>
DATA_API const VR Attribute<Keyword::GantryDetectorSlew>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GantryDetectorSlew>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableHeight>::s_keyword = Keyword::TableHeight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableHeight>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableHeight>::s_element = 0x1130;
template<>
DATA_API const std::string_view Attribute<Keyword::TableHeight>::s_name = "Table Height";
template<>
DATA_API const VR Attribute<Keyword::TableHeight>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableHeight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTraverse>::s_keyword = Keyword::TableTraverse;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTraverse>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTraverse>::s_element = 0x1131;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTraverse>::s_name = "Table Traverse";
template<>
DATA_API const VR Attribute<Keyword::TableTraverse>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableTraverse>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableMotion>::s_keyword = Keyword::TableMotion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableMotion>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableMotion>::s_element = 0x1134;
template<>
DATA_API const std::string_view Attribute<Keyword::TableMotion>::s_name = "Table Motion";
template<>
DATA_API const VR Attribute<Keyword::TableMotion>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TableMotion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableVerticalIncrement>::s_keyword = Keyword::TableVerticalIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableVerticalIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableVerticalIncrement>::s_element = 0x1135;
template<>
DATA_API const std::string_view Attribute<Keyword::TableVerticalIncrement>::s_name = "Table Vertical Increment";
template<>
DATA_API const VR Attribute<Keyword::TableVerticalIncrement>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableVerticalIncrement>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TableLateralIncrement>::s_keyword = Keyword::TableLateralIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableLateralIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableLateralIncrement>::s_element = 0x1136;
template<>
DATA_API const std::string_view Attribute<Keyword::TableLateralIncrement>::s_name = "Table Lateral Increment";
template<>
DATA_API const VR Attribute<Keyword::TableLateralIncrement>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableLateralIncrement>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TableLongitudinalIncrement>::s_keyword = Keyword::TableLongitudinalIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableLongitudinalIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableLongitudinalIncrement>::s_element = 0x1137;
template<>
DATA_API const std::string_view Attribute<Keyword::TableLongitudinalIncrement>::s_name = "Table Longitudinal Increment";
template<>
DATA_API const VR Attribute<Keyword::TableLongitudinalIncrement>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableLongitudinalIncrement>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TableAngle>::s_keyword = Keyword::TableAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableAngle>::s_element = 0x1138;
template<>
DATA_API const std::string_view Attribute<Keyword::TableAngle>::s_name = "Table Angle";
template<>
DATA_API const VR Attribute<Keyword::TableAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableType>::s_keyword = Keyword::TableType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableType>::s_element = 0x113A;
template<>
DATA_API const std::string_view Attribute<Keyword::TableType>::s_name = "Table Type";
template<>
DATA_API const VR Attribute<Keyword::TableType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TableType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RotationDirection>::s_keyword = Keyword::RotationDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationDirection>::s_element = 0x1140;
template<>
DATA_API const std::string_view Attribute<Keyword::RotationDirection>::s_name = "Rotation Direction";
template<>
DATA_API const VR Attribute<Keyword::RotationDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RotationDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadialPosition>::s_keyword = Keyword::RadialPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadialPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadialPosition>::s_element = 0x1142;
template<>
DATA_API const std::string_view Attribute<Keyword::RadialPosition>::s_name = "Radial Position";
template<>
DATA_API const VR Attribute<Keyword::RadialPosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadialPosition>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ScanArc>::s_keyword = Keyword::ScanArc;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanArc>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanArc>::s_element = 0x1143;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanArc>::s_name = "Scan Arc";
template<>
DATA_API const VR Attribute<Keyword::ScanArc>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ScanArc>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AngularStep>::s_keyword = Keyword::AngularStep;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AngularStep>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AngularStep>::s_element = 0x1144;
template<>
DATA_API const std::string_view Attribute<Keyword::AngularStep>::s_name = "Angular Step";
template<>
DATA_API const VR Attribute<Keyword::AngularStep>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::AngularStep>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CenterOfRotationOffset>::s_keyword = Keyword::CenterOfRotationOffset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfRotationOffset>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfRotationOffset>::s_element = 0x1145;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterOfRotationOffset>::s_name = "Center of Rotation Offset";
template<>
DATA_API const VR Attribute<Keyword::CenterOfRotationOffset>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CenterOfRotationOffset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewShape>::s_keyword = Keyword::FieldOfViewShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewShape>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewShape>::s_element = 0x1147;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewShape>::s_name = "field of view Shape";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewShape>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewDimensions>::s_keyword = Keyword::FieldOfViewDimensions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewDimensions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewDimensions>::s_element = 0x1149;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewDimensions>::s_name = "field of view Dimension(s)";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewDimensions>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewDimensions>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureTime>::s_keyword = Keyword::ExposureTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTime>::s_element = 0x1150;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureTime>::s_name = "Exposure Time";
template<>
DATA_API const VR Attribute<Keyword::ExposureTime>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ExposureTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayTubeCurrent>::s_keyword = Keyword::XRayTubeCurrent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayTubeCurrent>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayTubeCurrent>::s_element = 0x1151;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayTubeCurrent>::s_name = "X-Ray Tube Current";
template<>
DATA_API const VR Attribute<Keyword::XRayTubeCurrent>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::XRayTubeCurrent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Exposure>::s_keyword = Keyword::Exposure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Exposure>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Exposure>::s_element = 0x1152;
template<>
DATA_API const std::string_view Attribute<Keyword::Exposure>::s_name = "Exposure";
template<>
DATA_API const VR Attribute<Keyword::Exposure>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::Exposure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureInuAs>::s_keyword = Keyword::ExposureInuAs;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureInuAs>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureInuAs>::s_element = 0x1153;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureInuAs>::s_name = "Exposure in uAs";
template<>
DATA_API const VR Attribute<Keyword::ExposureInuAs>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ExposureInuAs>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AveragePulseWidth>::s_keyword = Keyword::AveragePulseWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AveragePulseWidth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AveragePulseWidth>::s_element = 0x1154;
template<>
DATA_API const std::string_view Attribute<Keyword::AveragePulseWidth>::s_name = "Average Pulse Width";
template<>
DATA_API const VR Attribute<Keyword::AveragePulseWidth>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::AveragePulseWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiationSetting>::s_keyword = Keyword::RadiationSetting;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationSetting>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationSetting>::s_element = 0x1155;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiationSetting>::s_name = "Radiation Setting";
template<>
DATA_API const VR Attribute<Keyword::RadiationSetting>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RadiationSetting>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RectificationType>::s_keyword = Keyword::RectificationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RectificationType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RectificationType>::s_element = 0x1156;
template<>
DATA_API const std::string_view Attribute<Keyword::RectificationType>::s_name = "Rectification Type";
template<>
DATA_API const VR Attribute<Keyword::RectificationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RectificationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiationMode>::s_keyword = Keyword::RadiationMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMode>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMode>::s_element = 0x115A;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiationMode>::s_name = "Radiation Mode";
template<>
DATA_API const VR Attribute<Keyword::RadiationMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RadiationMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageAndFluoroscopyAreaDoseProduct>::s_keyword =
    Keyword::ImageAndFluoroscopyAreaDoseProduct;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageAndFluoroscopyAreaDoseProduct>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageAndFluoroscopyAreaDoseProduct>::s_element = 0x115E;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageAndFluoroscopyAreaDoseProduct>::s_name =
    "Image and Fluoroscopy Area Dose Product";
template<>
DATA_API const VR Attribute<Keyword::ImageAndFluoroscopyAreaDoseProduct>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImageAndFluoroscopyAreaDoseProduct>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FilterType>::s_keyword = Keyword::FilterType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterType>::s_element = 0x1160;
template<>
DATA_API const std::string_view Attribute<Keyword::FilterType>::s_name = "Filter Type";
template<>
DATA_API const VR Attribute<Keyword::FilterType>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::FilterType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TypeOfFilters>::s_keyword = Keyword::TypeOfFilters;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfFilters>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfFilters>::s_element = 0x1161;
template<>
DATA_API const std::string_view Attribute<Keyword::TypeOfFilters>::s_name = "Type of Filters";
template<>
DATA_API const VR Attribute<Keyword::TypeOfFilters>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::TypeOfFilters>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::IntensifierSize>::s_keyword = Keyword::IntensifierSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntensifierSize>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntensifierSize>::s_element = 0x1162;
template<>
DATA_API const std::string_view Attribute<Keyword::IntensifierSize>::s_name = "Intensifier Size";
template<>
DATA_API const VR Attribute<Keyword::IntensifierSize>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::IntensifierSize>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagerPixelSpacing>::s_keyword = Keyword::ImagerPixelSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagerPixelSpacing>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagerPixelSpacing>::s_element = 0x1164;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagerPixelSpacing>::s_name = "Imager Pixel Spacing";
template<>
DATA_API const VR Attribute<Keyword::ImagerPixelSpacing>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImagerPixelSpacing>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::Grid>::s_keyword = Keyword::Grid;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Grid>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Grid>::s_element = 0x1166;
template<>
DATA_API const std::string_view Attribute<Keyword::Grid>::s_name = "Grid";
template<>
DATA_API const VR Attribute<Keyword::Grid>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Grid>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::GeneratorPower>::s_keyword = Keyword::GeneratorPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneratorPower>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneratorPower>::s_element = 0x1170;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneratorPower>::s_name = "Generator Power";
template<>
DATA_API const VR Attribute<Keyword::GeneratorPower>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::GeneratorPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorGridName>::s_keyword = Keyword::CollimatorGridName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorGridName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorGridName>::s_element = 0x1180;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorGridName>::s_name = "Collimator/grid Name";
template<>
DATA_API const VR Attribute<Keyword::CollimatorGridName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::CollimatorGridName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorType>::s_keyword = Keyword::CollimatorType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorType>::s_element = 0x1181;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorType>::s_name = "Collimator Type";
template<>
DATA_API const VR Attribute<Keyword::CollimatorType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CollimatorType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FocalDistance>::s_keyword = Keyword::FocalDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalDistance>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalDistance>::s_element = 0x1182;
template<>
DATA_API const std::string_view Attribute<Keyword::FocalDistance>::s_name = "Focal Distance";
template<>
DATA_API const VR Attribute<Keyword::FocalDistance>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::FocalDistance>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::XFocusCenter>::s_keyword = Keyword::XFocusCenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XFocusCenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XFocusCenter>::s_element = 0x1183;
template<>
DATA_API const std::string_view Attribute<Keyword::XFocusCenter>::s_name = "X Focus Center";
template<>
DATA_API const VR Attribute<Keyword::XFocusCenter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::XFocusCenter>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::YFocusCenter>::s_keyword = Keyword::YFocusCenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::YFocusCenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::YFocusCenter>::s_element = 0x1184;
template<>
DATA_API const std::string_view Attribute<Keyword::YFocusCenter>::s_name = "Y Focus Center";
template<>
DATA_API const VR Attribute<Keyword::YFocusCenter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::YFocusCenter>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::FocalSpots>::s_keyword = Keyword::FocalSpots;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalSpots>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocalSpots>::s_element = 0x1190;
template<>
DATA_API const std::string_view Attribute<Keyword::FocalSpots>::s_name = "Focal Spot(s)";
template<>
DATA_API const VR Attribute<Keyword::FocalSpots>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FocalSpots>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::AnodeTargetMaterial>::s_keyword = Keyword::AnodeTargetMaterial;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnodeTargetMaterial>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnodeTargetMaterial>::s_element = 0x1191;
template<>
DATA_API const std::string_view Attribute<Keyword::AnodeTargetMaterial>::s_name = "Anode Target Material";
template<>
DATA_API const VR Attribute<Keyword::AnodeTargetMaterial>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AnodeTargetMaterial>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BodyPartThickness>::s_keyword = Keyword::BodyPartThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BodyPartThickness>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BodyPartThickness>::s_element = 0x11A0;
template<>
DATA_API const std::string_view Attribute<Keyword::BodyPartThickness>::s_name = "Body Part Thickness";
template<>
DATA_API const VR Attribute<Keyword::BodyPartThickness>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::BodyPartThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CompressionForce>::s_keyword = Keyword::CompressionForce;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompressionForce>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompressionForce>::s_element = 0x11A2;
template<>
DATA_API const std::string_view Attribute<Keyword::CompressionForce>::s_name = "Compression Force";
template<>
DATA_API const VR Attribute<Keyword::CompressionForce>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CompressionForce>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CompressionPressure>::s_keyword = Keyword::CompressionPressure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompressionPressure>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompressionPressure>::s_element = 0x11A3;
template<>
DATA_API const std::string_view Attribute<Keyword::CompressionPressure>::s_name = "Compression Pressure";
template<>
DATA_API const VR Attribute<Keyword::CompressionPressure>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CompressionPressure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PaddleDescription>::s_keyword = Keyword::PaddleDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PaddleDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PaddleDescription>::s_element = 0x11A4;
template<>
DATA_API const std::string_view Attribute<Keyword::PaddleDescription>::s_name = "Paddle Description";
template<>
DATA_API const VR Attribute<Keyword::PaddleDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PaddleDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CompressionContactArea>::s_keyword = Keyword::CompressionContactArea;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompressionContactArea>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompressionContactArea>::s_element = 0x11A5;
template<>
DATA_API const std::string_view Attribute<Keyword::CompressionContactArea>::s_name = "Compression Contact Area";
template<>
DATA_API const VR Attribute<Keyword::CompressionContactArea>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CompressionContactArea>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DateOfLastCalibration>::s_keyword = Keyword::DateOfLastCalibration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfLastCalibration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfLastCalibration>::s_element = 0x1200;
template<>
DATA_API const std::string_view Attribute<Keyword::DateOfLastCalibration>::s_name = "Date of Last Calibration";
template<>
DATA_API const VR Attribute<Keyword::DateOfLastCalibration>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::DateOfLastCalibration>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TimeOfLastCalibration>::s_keyword = Keyword::TimeOfLastCalibration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfLastCalibration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfLastCalibration>::s_element = 0x1201;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeOfLastCalibration>::s_name = "Time of Last Calibration";
template<>
DATA_API const VR Attribute<Keyword::TimeOfLastCalibration>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::TimeOfLastCalibration>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DateOfManufacture>::s_keyword = Keyword::DateOfManufacture;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfManufacture>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfManufacture>::s_element = 0x1204;
template<>
DATA_API const std::string_view Attribute<Keyword::DateOfManufacture>::s_name = "Date of Manufacture";
template<>
DATA_API const VR Attribute<Keyword::DateOfManufacture>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::DateOfManufacture>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DateOfInstallation>::s_keyword = Keyword::DateOfInstallation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfInstallation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfInstallation>::s_element = 0x1205;
template<>
DATA_API const std::string_view Attribute<Keyword::DateOfInstallation>::s_name = "Date of Installation";
template<>
DATA_API const VR Attribute<Keyword::DateOfInstallation>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::DateOfInstallation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConvolutionKernel>::s_keyword = Keyword::ConvolutionKernel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConvolutionKernel>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConvolutionKernel>::s_element = 0x1210;
template<>
DATA_API const std::string_view Attribute<Keyword::ConvolutionKernel>::s_name = "Convolution Kernel";
template<>
DATA_API const VR Attribute<Keyword::ConvolutionKernel>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ConvolutionKernel>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ActualFrameDuration>::s_keyword = Keyword::ActualFrameDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualFrameDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualFrameDuration>::s_element = 0x1242;
template<>
DATA_API const std::string_view Attribute<Keyword::ActualFrameDuration>::s_name = "Actual Frame Duration";
template<>
DATA_API const VR Attribute<Keyword::ActualFrameDuration>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ActualFrameDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CountRate>::s_keyword = Keyword::CountRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountRate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountRate>::s_element = 0x1243;
template<>
DATA_API const std::string_view Attribute<Keyword::CountRate>::s_name = "Count Rate";
template<>
DATA_API const VR Attribute<Keyword::CountRate>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CountRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PreferredPlaybackSequencing>::s_keyword =
    Keyword::PreferredPlaybackSequencing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PreferredPlaybackSequencing>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PreferredPlaybackSequencing>::s_element = 0x1244;
template<>
DATA_API const std::string_view Attribute<Keyword::PreferredPlaybackSequencing>::s_name =
    "Preferred Playback Sequencing";
template<>
DATA_API const VR Attribute<Keyword::PreferredPlaybackSequencing>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PreferredPlaybackSequencing>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReceiveCoilName>::s_keyword = Keyword::ReceiveCoilName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReceiveCoilName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReceiveCoilName>::s_element = 0x1250;
template<>
DATA_API const std::string_view Attribute<Keyword::ReceiveCoilName>::s_name = "Receive Coil Name";
template<>
DATA_API const VR Attribute<Keyword::ReceiveCoilName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ReceiveCoilName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransmitCoilName>::s_keyword = Keyword::TransmitCoilName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitCoilName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitCoilName>::s_element = 0x1251;
template<>
DATA_API const std::string_view Attribute<Keyword::TransmitCoilName>::s_name = "Transmit Coil Name";
template<>
DATA_API const VR Attribute<Keyword::TransmitCoilName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::TransmitCoilName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlateType>::s_keyword = Keyword::PlateType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlateType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlateType>::s_element = 0x1260;
template<>
DATA_API const std::string_view Attribute<Keyword::PlateType>::s_name = "Plate Type";
template<>
DATA_API const VR Attribute<Keyword::PlateType>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::PlateType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhosphorType>::s_keyword = Keyword::PhosphorType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhosphorType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhosphorType>::s_element = 0x1261;
template<>
DATA_API const std::string_view Attribute<Keyword::PhosphorType>::s_name = "Phosphor Type";
template<>
DATA_API const VR Attribute<Keyword::PhosphorType>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PhosphorType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WaterEquivalentDiameter>::s_keyword = Keyword::WaterEquivalentDiameter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WaterEquivalentDiameter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WaterEquivalentDiameter>::s_element = 0x1271;
template<>
DATA_API const std::string_view Attribute<Keyword::WaterEquivalentDiameter>::s_name = "Water Equivalent Diameter";
template<>
DATA_API const VR Attribute<Keyword::WaterEquivalentDiameter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::WaterEquivalentDiameter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>::s_keyword =
    Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>::s_element =
    0x1272;
template<>
DATA_API const std::string_view Attribute<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>::s_name =
    "Water Equivalent Diameter Calculation Method Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScanVelocity>::s_keyword = Keyword::ScanVelocity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanVelocity>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanVelocity>::s_element = 0x1300;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanVelocity>::s_name = "Scan Velocity";
template<>
DATA_API const VR Attribute<Keyword::ScanVelocity>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ScanVelocity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WholeBodyTechnique>::s_keyword = Keyword::WholeBodyTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WholeBodyTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WholeBodyTechnique>::s_element = 0x1301;
template<>
DATA_API const std::string_view Attribute<Keyword::WholeBodyTechnique>::s_name = "Whole Body technique";
template<>
DATA_API const VR Attribute<Keyword::WholeBodyTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::WholeBodyTechnique>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ScanLength>::s_keyword = Keyword::ScanLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanLength>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanLength>::s_element = 0x1302;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanLength>::s_name = "Scan Length";
template<>
DATA_API const VR Attribute<Keyword::ScanLength>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ScanLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionMatrix>::s_keyword = Keyword::AcquisitionMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionMatrix>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionMatrix>::s_element = 0x1310;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionMatrix>::s_name = "Acquisition Matrix";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionMatrix>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionMatrix>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::InPlanePhaseEncodingDirection>::s_keyword =
    Keyword::InPlanePhaseEncodingDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InPlanePhaseEncodingDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InPlanePhaseEncodingDirection>::s_element = 0x1312;
template<>
DATA_API const std::string_view Attribute<Keyword::InPlanePhaseEncodingDirection>::s_name =
    "In-plane Phase Encoding Direction";
template<>
DATA_API const VR Attribute<Keyword::InPlanePhaseEncodingDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InPlanePhaseEncodingDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlipAngle>::s_keyword = Keyword::FlipAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlipAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlipAngle>::s_element = 0x1314;
template<>
DATA_API const std::string_view Attribute<Keyword::FlipAngle>::s_name = "Flip Angle";
template<>
DATA_API const VR Attribute<Keyword::FlipAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FlipAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VariableFlipAngleFlag>::s_keyword = Keyword::VariableFlipAngleFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VariableFlipAngleFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VariableFlipAngleFlag>::s_element = 0x1315;
template<>
DATA_API const std::string_view Attribute<Keyword::VariableFlipAngleFlag>::s_name = "Variable Flip Angle Flag";
template<>
DATA_API const VR Attribute<Keyword::VariableFlipAngleFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::VariableFlipAngleFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SAR>::s_keyword = Keyword::SAR;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SAR>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SAR>::s_element = 0x1316;
template<>
DATA_API const std::string_view Attribute<Keyword::SAR>::s_name = "SAR";
template<>
DATA_API const VR Attribute<Keyword::SAR>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SAR>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::dBdt>::s_keyword = Keyword::dBdt;
template<>
DATA_API const std::uint16_t Attribute<Keyword::dBdt>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::dBdt>::s_element = 0x1318;
template<>
DATA_API const std::string_view Attribute<Keyword::dBdt>::s_name = "dB/dt";
template<>
DATA_API const VR Attribute<Keyword::dBdt>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::dBdt>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::B1rms>::s_keyword = Keyword::B1rms;
template<>
DATA_API const std::uint16_t Attribute<Keyword::B1rms>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::B1rms>::s_element = 0x1320;
template<>
DATA_API const std::string_view Attribute<Keyword::B1rms>::s_name = "B1rms";
template<>
DATA_API const VR Attribute<Keyword::B1rms>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::B1rms>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDeviceProcessingDescription>::s_keyword =
    Keyword::AcquisitionDeviceProcessingDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceProcessingDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceProcessingDescription>::s_element = 0x1400;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDeviceProcessingDescription>::s_name =
    "Acquisition Device Processing Description";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDeviceProcessingDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDeviceProcessingDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDeviceProcessingCode>::s_keyword =
    Keyword::AcquisitionDeviceProcessingCode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceProcessingCode>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceProcessingCode>::s_element = 0x1401;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDeviceProcessingCode>::s_name =
    "Acquisition Device Processing Code";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDeviceProcessingCode>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDeviceProcessingCode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CassetteOrientation>::s_keyword = Keyword::CassetteOrientation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CassetteOrientation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CassetteOrientation>::s_element = 0x1402;
template<>
DATA_API const std::string_view Attribute<Keyword::CassetteOrientation>::s_name = "Cassette Orientation";
template<>
DATA_API const VR Attribute<Keyword::CassetteOrientation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CassetteOrientation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CassetteSize>::s_keyword = Keyword::CassetteSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CassetteSize>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CassetteSize>::s_element = 0x1403;
template<>
DATA_API const std::string_view Attribute<Keyword::CassetteSize>::s_name = "Cassette Size";
template<>
DATA_API const VR Attribute<Keyword::CassetteSize>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CassetteSize>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposuresOnPlate>::s_keyword = Keyword::ExposuresOnPlate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposuresOnPlate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposuresOnPlate>::s_element = 0x1404;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposuresOnPlate>::s_name = "Exposures on Plate";
template<>
DATA_API const VR Attribute<Keyword::ExposuresOnPlate>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ExposuresOnPlate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelativeXRayExposure>::s_keyword = Keyword::RelativeXRayExposure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeXRayExposure>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeXRayExposure>::s_element = 0x1405;
template<>
DATA_API const std::string_view Attribute<Keyword::RelativeXRayExposure>::s_name = "Relative X-Ray Exposure";
template<>
DATA_API const VR Attribute<Keyword::RelativeXRayExposure>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::RelativeXRayExposure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureIndex>::s_keyword = Keyword::ExposureIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureIndex>::s_element = 0x1411;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureIndex>::s_name = "Exposure Index";
template<>
DATA_API const VR Attribute<Keyword::ExposureIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ExposureIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TargetExposureIndex>::s_keyword = Keyword::TargetExposureIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TargetExposureIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TargetExposureIndex>::s_element = 0x1412;
template<>
DATA_API const std::string_view Attribute<Keyword::TargetExposureIndex>::s_name = "Target Exposure Index";
template<>
DATA_API const VR Attribute<Keyword::TargetExposureIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TargetExposureIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviationIndex>::s_keyword = Keyword::DeviationIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviationIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviationIndex>::s_element = 0x1413;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviationIndex>::s_name = "Deviation Index";
template<>
DATA_API const VR Attribute<Keyword::DeviationIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DeviationIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ColumnAngulation>::s_keyword = Keyword::ColumnAngulation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColumnAngulation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColumnAngulation>::s_element = 0x1450;
template<>
DATA_API const std::string_view Attribute<Keyword::ColumnAngulation>::s_name = "Column Angulation";
template<>
DATA_API const VR Attribute<Keyword::ColumnAngulation>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ColumnAngulation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TomoLayerHeight>::s_keyword = Keyword::TomoLayerHeight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoLayerHeight>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoLayerHeight>::s_element = 0x1460;
template<>
DATA_API const std::string_view Attribute<Keyword::TomoLayerHeight>::s_name = "Tomo Layer Height";
template<>
DATA_API const VR Attribute<Keyword::TomoLayerHeight>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TomoLayerHeight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TomoAngle>::s_keyword = Keyword::TomoAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoAngle>::s_element = 0x1470;
template<>
DATA_API const std::string_view Attribute<Keyword::TomoAngle>::s_name = "Tomo Angle";
template<>
DATA_API const VR Attribute<Keyword::TomoAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TomoAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TomoTime>::s_keyword = Keyword::TomoTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoTime>::s_element = 0x1480;
template<>
DATA_API const std::string_view Attribute<Keyword::TomoTime>::s_name = "Tomo Time";
template<>
DATA_API const VR Attribute<Keyword::TomoTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TomoTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TomoType>::s_keyword = Keyword::TomoType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoType>::s_element = 0x1490;
template<>
DATA_API const std::string_view Attribute<Keyword::TomoType>::s_name = "Tomo Type";
template<>
DATA_API const VR Attribute<Keyword::TomoType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TomoType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TomoClass>::s_keyword = Keyword::TomoClass;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoClass>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TomoClass>::s_element = 0x1491;
template<>
DATA_API const std::string_view Attribute<Keyword::TomoClass>::s_name = "Tomo Class";
template<>
DATA_API const VR Attribute<Keyword::TomoClass>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TomoClass>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTomosynthesisSourceImages>::s_keyword =
    Keyword::NumberOfTomosynthesisSourceImages;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTomosynthesisSourceImages>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTomosynthesisSourceImages>::s_element = 0x1495;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTomosynthesisSourceImages>::s_name =
    "Number of Tomosynthesis Source Images";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTomosynthesisSourceImages>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTomosynthesisSourceImages>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerMotion>::s_keyword = Keyword::PositionerMotion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerMotion>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerMotion>::s_element = 0x1500;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerMotion>::s_name = "Positioner Motion";
template<>
DATA_API const VR Attribute<Keyword::PositionerMotion>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PositionerMotion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerType>::s_keyword = Keyword::PositionerType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerType>::s_element = 0x1508;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerType>::s_name = "Positioner Type";
template<>
DATA_API const VR Attribute<Keyword::PositionerType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PositionerType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerPrimaryAngle>::s_keyword = Keyword::PositionerPrimaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPrimaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPrimaryAngle>::s_element = 0x1510;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerPrimaryAngle>::s_name = "Positioner Primary Angle";
template<>
DATA_API const VR Attribute<Keyword::PositionerPrimaryAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PositionerPrimaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerSecondaryAngle>::s_keyword = Keyword::PositionerSecondaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerSecondaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerSecondaryAngle>::s_element = 0x1511;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerSecondaryAngle>::s_name = "Positioner Secondary Angle";
template<>
DATA_API const VR Attribute<Keyword::PositionerSecondaryAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PositionerSecondaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerPrimaryAngleIncrement>::s_keyword =
    Keyword::PositionerPrimaryAngleIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPrimaryAngleIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPrimaryAngleIncrement>::s_element = 0x1520;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerPrimaryAngleIncrement>::s_name =
    "Positioner Primary Angle Increment";
template<>
DATA_API const VR Attribute<Keyword::PositionerPrimaryAngleIncrement>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PositionerPrimaryAngleIncrement>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerSecondaryAngleIncrement>::s_keyword =
    Keyword::PositionerSecondaryAngleIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerSecondaryAngleIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerSecondaryAngleIncrement>::s_element = 0x1521;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerSecondaryAngleIncrement>::s_name =
    "Positioner Secondary Angle Increment";
template<>
DATA_API const VR Attribute<Keyword::PositionerSecondaryAngleIncrement>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PositionerSecondaryAngleIncrement>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorPrimaryAngle>::s_keyword = Keyword::DetectorPrimaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorPrimaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorPrimaryAngle>::s_element = 0x1530;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorPrimaryAngle>::s_name = "Detector Primary Angle";
template<>
DATA_API const VR Attribute<Keyword::DetectorPrimaryAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorPrimaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorSecondaryAngle>::s_keyword = Keyword::DetectorSecondaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorSecondaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorSecondaryAngle>::s_element = 0x1531;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorSecondaryAngle>::s_name = "Detector Secondary Angle";
template<>
DATA_API const VR Attribute<Keyword::DetectorSecondaryAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorSecondaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterShape>::s_keyword = Keyword::ShutterShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterShape>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterShape>::s_element = 0x1600;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterShape>::s_name = "Shutter Shape";
template<>
DATA_API const VR Attribute<Keyword::ShutterShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ShutterShape>::s_vm = VM::MIN_1_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterLeftVerticalEdge>::s_keyword = Keyword::ShutterLeftVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterLeftVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterLeftVerticalEdge>::s_element = 0x1602;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterLeftVerticalEdge>::s_name = "Shutter Left Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::ShutterLeftVerticalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ShutterLeftVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterRightVerticalEdge>::s_keyword = Keyword::ShutterRightVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterRightVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterRightVerticalEdge>::s_element = 0x1604;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterRightVerticalEdge>::s_name = "Shutter Right Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::ShutterRightVerticalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ShutterRightVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterUpperHorizontalEdge>::s_keyword = Keyword::ShutterUpperHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterUpperHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterUpperHorizontalEdge>::s_element = 0x1606;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterUpperHorizontalEdge>::s_name =
    "Shutter Upper Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::ShutterUpperHorizontalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ShutterUpperHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterLowerHorizontalEdge>::s_keyword = Keyword::ShutterLowerHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterLowerHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterLowerHorizontalEdge>::s_element = 0x1608;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterLowerHorizontalEdge>::s_name =
    "Shutter Lower Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::ShutterLowerHorizontalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ShutterLowerHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CenterOfCircularShutter>::s_keyword = Keyword::CenterOfCircularShutter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularShutter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularShutter>::s_element = 0x1610;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterOfCircularShutter>::s_name = "Center of Circular Shutter";
template<>
DATA_API const VR Attribute<Keyword::CenterOfCircularShutter>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CenterOfCircularShutter>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RadiusOfCircularShutter>::s_keyword = Keyword::RadiusOfCircularShutter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCircularShutter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCircularShutter>::s_element = 0x1612;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiusOfCircularShutter>::s_name = "Radius of Circular Shutter";
template<>
DATA_API const VR Attribute<Keyword::RadiusOfCircularShutter>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::RadiusOfCircularShutter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerticesOfThePolygonalShutter>::s_keyword =
    Keyword::VerticesOfThePolygonalShutter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalShutter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalShutter>::s_element = 0x1620;
template<>
DATA_API const std::string_view Attribute<Keyword::VerticesOfThePolygonalShutter>::s_name =
    "Vertices of the Polygonal Shutter";
template<>
DATA_API const VR Attribute<Keyword::VerticesOfThePolygonalShutter>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::VerticesOfThePolygonalShutter>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterPresentationValue>::s_keyword = Keyword::ShutterPresentationValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterPresentationValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterPresentationValue>::s_element = 0x1622;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterPresentationValue>::s_name = "Shutter Presentation Value";
template<>
DATA_API const VR Attribute<Keyword::ShutterPresentationValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ShutterPresentationValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterOverlayGroup>::s_keyword = Keyword::ShutterOverlayGroup;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterOverlayGroup>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterOverlayGroup>::s_element = 0x1623;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterOverlayGroup>::s_name = "Shutter Overlay Group";
template<>
DATA_API const VR Attribute<Keyword::ShutterOverlayGroup>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ShutterOverlayGroup>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShutterPresentationColorCIELabValue>::s_keyword =
    Keyword::ShutterPresentationColorCIELabValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterPresentationColorCIELabValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShutterPresentationColorCIELabValue>::s_element = 0x1624;
template<>
DATA_API const std::string_view Attribute<Keyword::ShutterPresentationColorCIELabValue>::s_name =
    "Shutter Presentation Color CIELab Value";
template<>
DATA_API const VR Attribute<Keyword::ShutterPresentationColorCIELabValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ShutterPresentationColorCIELabValue>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::OutlineShapeType>::s_keyword = Keyword::OutlineShapeType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineShapeType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineShapeType>::s_element = 0x1630;
template<>
DATA_API const std::string_view Attribute<Keyword::OutlineShapeType>::s_name = "Outline Shape Type";
template<>
DATA_API const VR Attribute<Keyword::OutlineShapeType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OutlineShapeType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OutlineLeftVerticalEdge>::s_keyword = Keyword::OutlineLeftVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineLeftVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineLeftVerticalEdge>::s_element = 0x1631;
template<>
DATA_API const std::string_view Attribute<Keyword::OutlineLeftVerticalEdge>::s_name = "Outline Left Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::OutlineLeftVerticalEdge>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OutlineLeftVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OutlineRightVerticalEdge>::s_keyword = Keyword::OutlineRightVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineRightVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineRightVerticalEdge>::s_element = 0x1632;
template<>
DATA_API const std::string_view Attribute<Keyword::OutlineRightVerticalEdge>::s_name = "Outline Right Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::OutlineRightVerticalEdge>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OutlineRightVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OutlineUpperHorizontalEdge>::s_keyword = Keyword::OutlineUpperHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineUpperHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineUpperHorizontalEdge>::s_element = 0x1633;
template<>
DATA_API const std::string_view Attribute<Keyword::OutlineUpperHorizontalEdge>::s_name =
    "Outline Upper Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::OutlineUpperHorizontalEdge>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OutlineUpperHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OutlineLowerHorizontalEdge>::s_keyword = Keyword::OutlineLowerHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineLowerHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutlineLowerHorizontalEdge>::s_element = 0x1634;
template<>
DATA_API const std::string_view Attribute<Keyword::OutlineLowerHorizontalEdge>::s_name =
    "Outline Lower Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::OutlineLowerHorizontalEdge>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OutlineLowerHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CenterOfCircularOutline>::s_keyword = Keyword::CenterOfCircularOutline;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularOutline>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularOutline>::s_element = 0x1635;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterOfCircularOutline>::s_name = "Center of Circular Outline";
template<>
DATA_API const VR Attribute<Keyword::CenterOfCircularOutline>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::CenterOfCircularOutline>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DiameterOfCircularOutline>::s_keyword = Keyword::DiameterOfCircularOutline;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiameterOfCircularOutline>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiameterOfCircularOutline>::s_element = 0x1636;
template<>
DATA_API const std::string_view Attribute<Keyword::DiameterOfCircularOutline>::s_name = "Diameter of Circular Outline";
template<>
DATA_API const VR Attribute<Keyword::DiameterOfCircularOutline>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DiameterOfCircularOutline>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfPolygonalVertices>::s_keyword = Keyword::NumberOfPolygonalVertices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPolygonalVertices>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPolygonalVertices>::s_element = 0x1637;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfPolygonalVertices>::s_name = "Number of Polygonal Vertices";
template<>
DATA_API const VR Attribute<Keyword::NumberOfPolygonalVertices>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfPolygonalVertices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerticesOfThePolygonalOutline>::s_keyword =
    Keyword::VerticesOfThePolygonalOutline;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalOutline>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalOutline>::s_element = 0x1638;
template<>
DATA_API const std::string_view Attribute<Keyword::VerticesOfThePolygonalOutline>::s_name =
    "Vertices of the Polygonal Outline";
template<>
DATA_API const VR Attribute<Keyword::VerticesOfThePolygonalOutline>::s_vr = VR::OF;
template<>
DATA_API const VM Attribute<Keyword::VerticesOfThePolygonalOutline>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorShape>::s_keyword = Keyword::CollimatorShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorShape>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorShape>::s_element = 0x1700;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorShape>::s_name = "Collimator Shape";
template<>
DATA_API const VR Attribute<Keyword::CollimatorShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CollimatorShape>::s_vm = VM::MIN_1_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorLeftVerticalEdge>::s_keyword = Keyword::CollimatorLeftVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorLeftVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorLeftVerticalEdge>::s_element = 0x1702;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorLeftVerticalEdge>::s_name =
    "Collimator Left Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::CollimatorLeftVerticalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CollimatorLeftVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorRightVerticalEdge>::s_keyword =
    Keyword::CollimatorRightVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorRightVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorRightVerticalEdge>::s_element = 0x1704;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorRightVerticalEdge>::s_name =
    "Collimator Right Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::CollimatorRightVerticalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CollimatorRightVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorUpperHorizontalEdge>::s_keyword =
    Keyword::CollimatorUpperHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorUpperHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorUpperHorizontalEdge>::s_element = 0x1706;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorUpperHorizontalEdge>::s_name =
    "Collimator Upper Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::CollimatorUpperHorizontalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CollimatorUpperHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorLowerHorizontalEdge>::s_keyword =
    Keyword::CollimatorLowerHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorLowerHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorLowerHorizontalEdge>::s_element = 0x1708;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorLowerHorizontalEdge>::s_name =
    "Collimator Lower Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::CollimatorLowerHorizontalEdge>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CollimatorLowerHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CenterOfCircularCollimator>::s_keyword = Keyword::CenterOfCircularCollimator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularCollimator>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularCollimator>::s_element = 0x1710;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterOfCircularCollimator>::s_name =
    "Center of Circular Collimator";
template<>
DATA_API const VR Attribute<Keyword::CenterOfCircularCollimator>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CenterOfCircularCollimator>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RadiusOfCircularCollimator>::s_keyword = Keyword::RadiusOfCircularCollimator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCircularCollimator>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCircularCollimator>::s_element = 0x1712;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiusOfCircularCollimator>::s_name =
    "Radius of Circular Collimator";
template<>
DATA_API const VR Attribute<Keyword::RadiusOfCircularCollimator>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::RadiusOfCircularCollimator>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerticesOfThePolygonalCollimator>::s_keyword =
    Keyword::VerticesOfThePolygonalCollimator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalCollimator>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalCollimator>::s_element = 0x1720;
template<>
DATA_API const std::string_view Attribute<Keyword::VerticesOfThePolygonalCollimator>::s_name =
    "Vertices of the Polygonal Collimator";
template<>
DATA_API const VR Attribute<Keyword::VerticesOfThePolygonalCollimator>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::VerticesOfThePolygonalCollimator>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionTimeSynchronized>::s_keyword =
    Keyword::AcquisitionTimeSynchronized;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTimeSynchronized>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionTimeSynchronized>::s_element = 0x1800;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionTimeSynchronized>::s_name =
    "Acquisition Time Synchronized";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionTimeSynchronized>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionTimeSynchronized>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeSource>::s_keyword = Keyword::TimeSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeSource>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeSource>::s_element = 0x1801;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeSource>::s_name = "Time Source";
template<>
DATA_API const VR Attribute<Keyword::TimeSource>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::TimeSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeDistributionProtocol>::s_keyword = Keyword::TimeDistributionProtocol;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeDistributionProtocol>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeDistributionProtocol>::s_element = 0x1802;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeDistributionProtocol>::s_name = "Time Distribution Protocol";
template<>
DATA_API const VR Attribute<Keyword::TimeDistributionProtocol>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TimeDistributionProtocol>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NTPSourceAddress>::s_keyword = Keyword::NTPSourceAddress;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NTPSourceAddress>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NTPSourceAddress>::s_element = 0x1803;
template<>
DATA_API const std::string_view Attribute<Keyword::NTPSourceAddress>::s_name = "NTP Source Address";
template<>
DATA_API const VR Attribute<Keyword::NTPSourceAddress>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::NTPSourceAddress>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PageNumberVector>::s_keyword = Keyword::PageNumberVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PageNumberVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PageNumberVector>::s_element = 0x2001;
template<>
DATA_API const std::string_view Attribute<Keyword::PageNumberVector>::s_name = "Page Number Vector";
template<>
DATA_API const VR Attribute<Keyword::PageNumberVector>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::PageNumberVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameLabelVector>::s_keyword = Keyword::FrameLabelVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameLabelVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameLabelVector>::s_element = 0x2002;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameLabelVector>::s_name = "Frame Label Vector";
template<>
DATA_API const VR Attribute<Keyword::FrameLabelVector>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::FrameLabelVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FramePrimaryAngleVector>::s_keyword = Keyword::FramePrimaryAngleVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FramePrimaryAngleVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FramePrimaryAngleVector>::s_element = 0x2003;
template<>
DATA_API const std::string_view Attribute<Keyword::FramePrimaryAngleVector>::s_name = "Frame Primary Angle Vector";
template<>
DATA_API const VR Attribute<Keyword::FramePrimaryAngleVector>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FramePrimaryAngleVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameSecondaryAngleVector>::s_keyword = Keyword::FrameSecondaryAngleVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameSecondaryAngleVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameSecondaryAngleVector>::s_element = 0x2004;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameSecondaryAngleVector>::s_name = "Frame Secondary Angle Vector";
template<>
DATA_API const VR Attribute<Keyword::FrameSecondaryAngleVector>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FrameSecondaryAngleVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SliceLocationVector>::s_keyword = Keyword::SliceLocationVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceLocationVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceLocationVector>::s_element = 0x2005;
template<>
DATA_API const std::string_view Attribute<Keyword::SliceLocationVector>::s_name = "Slice Location Vector";
template<>
DATA_API const VR Attribute<Keyword::SliceLocationVector>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SliceLocationVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DisplayWindowLabelVector>::s_keyword = Keyword::DisplayWindowLabelVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayWindowLabelVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayWindowLabelVector>::s_element = 0x2006;
template<>
DATA_API const std::string_view Attribute<Keyword::DisplayWindowLabelVector>::s_name = "Display Window Label Vector";
template<>
DATA_API const VR Attribute<Keyword::DisplayWindowLabelVector>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::DisplayWindowLabelVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NominalScannedPixelSpacing>::s_keyword = Keyword::NominalScannedPixelSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalScannedPixelSpacing>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalScannedPixelSpacing>::s_element = 0x2010;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalScannedPixelSpacing>::s_name =
    "Nominal Scanned Pixel Spacing";
template<>
DATA_API const VR Attribute<Keyword::NominalScannedPixelSpacing>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::NominalScannedPixelSpacing>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DigitizingDeviceTransportDirection>::s_keyword =
    Keyword::DigitizingDeviceTransportDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitizingDeviceTransportDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitizingDeviceTransportDirection>::s_element = 0x2020;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitizingDeviceTransportDirection>::s_name =
    "Digitizing Device Transport Direction";
template<>
DATA_API const VR Attribute<Keyword::DigitizingDeviceTransportDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DigitizingDeviceTransportDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RotationOfScannedFilm>::s_keyword = Keyword::RotationOfScannedFilm;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationOfScannedFilm>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationOfScannedFilm>::s_element = 0x2030;
template<>
DATA_API const std::string_view Attribute<Keyword::RotationOfScannedFilm>::s_name = "Rotation of Scanned Film";
template<>
DATA_API const VR Attribute<Keyword::RotationOfScannedFilm>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RotationOfScannedFilm>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BiopsyTargetSequence>::s_keyword = Keyword::BiopsyTargetSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BiopsyTargetSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BiopsyTargetSequence>::s_element = 0x2041;
template<>
DATA_API const std::string_view Attribute<Keyword::BiopsyTargetSequence>::s_name = "Biopsy Target Sequence";
template<>
DATA_API const VR Attribute<Keyword::BiopsyTargetSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BiopsyTargetSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TargetUID>::s_keyword = Keyword::TargetUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TargetUID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TargetUID>::s_element = 0x2042;
template<>
DATA_API const std::string_view Attribute<Keyword::TargetUID>::s_name = "Target UID";
template<>
DATA_API const VR Attribute<Keyword::TargetUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::TargetUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LocalizingCursorPosition>::s_keyword = Keyword::LocalizingCursorPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LocalizingCursorPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LocalizingCursorPosition>::s_element = 0x2043;
template<>
DATA_API const std::string_view Attribute<Keyword::LocalizingCursorPosition>::s_name = "Localizing cursor Position";
template<>
DATA_API const VR Attribute<Keyword::LocalizingCursorPosition>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::LocalizingCursorPosition>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::CalculatedTargetPosition>::s_keyword = Keyword::CalculatedTargetPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalculatedTargetPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalculatedTargetPosition>::s_element = 0x2044;
template<>
DATA_API const std::string_view Attribute<Keyword::CalculatedTargetPosition>::s_name = "Calculated Target Position";
template<>
DATA_API const VR Attribute<Keyword::CalculatedTargetPosition>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CalculatedTargetPosition>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::TargetLabel>::s_keyword = Keyword::TargetLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TargetLabel>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TargetLabel>::s_element = 0x2045;
template<>
DATA_API const std::string_view Attribute<Keyword::TargetLabel>::s_name = "Target Label";
template<>
DATA_API const VR Attribute<Keyword::TargetLabel>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::TargetLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DisplayedZValue>::s_keyword = Keyword::DisplayedZValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayedZValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayedZValue>::s_element = 0x2046;
template<>
DATA_API const std::string_view Attribute<Keyword::DisplayedZValue>::s_name = "Displayed Z Value";
template<>
DATA_API const VR Attribute<Keyword::DisplayedZValue>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DisplayedZValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IVUSAcquisition>::s_keyword = Keyword::IVUSAcquisition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSAcquisition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSAcquisition>::s_element = 0x3100;
template<>
DATA_API const std::string_view Attribute<Keyword::IVUSAcquisition>::s_name = "IVUS Acquisition";
template<>
DATA_API const VR Attribute<Keyword::IVUSAcquisition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IVUSAcquisition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IVUSPullbackRate>::s_keyword = Keyword::IVUSPullbackRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSPullbackRate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSPullbackRate>::s_element = 0x3101;
template<>
DATA_API const std::string_view Attribute<Keyword::IVUSPullbackRate>::s_name = "IVUS Pullback Rate";
template<>
DATA_API const VR Attribute<Keyword::IVUSPullbackRate>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::IVUSPullbackRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IVUSGatedRate>::s_keyword = Keyword::IVUSGatedRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSGatedRate>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSGatedRate>::s_element = 0x3102;
template<>
DATA_API const std::string_view Attribute<Keyword::IVUSGatedRate>::s_name = "IVUS Gated Rate";
template<>
DATA_API const VR Attribute<Keyword::IVUSGatedRate>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::IVUSGatedRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IVUSPullbackStartFrameNumber>::s_keyword =
    Keyword::IVUSPullbackStartFrameNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSPullbackStartFrameNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSPullbackStartFrameNumber>::s_element = 0x3103;
template<>
DATA_API const std::string_view Attribute<Keyword::IVUSPullbackStartFrameNumber>::s_name =
    "IVUS Pullback Start Frame Number";
template<>
DATA_API const VR Attribute<Keyword::IVUSPullbackStartFrameNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::IVUSPullbackStartFrameNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IVUSPullbackStopFrameNumber>::s_keyword =
    Keyword::IVUSPullbackStopFrameNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSPullbackStopFrameNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IVUSPullbackStopFrameNumber>::s_element = 0x3104;
template<>
DATA_API const std::string_view Attribute<Keyword::IVUSPullbackStopFrameNumber>::s_name =
    "IVUS Pullback Stop Frame Number";
template<>
DATA_API const VR Attribute<Keyword::IVUSPullbackStopFrameNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::IVUSPullbackStopFrameNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LesionNumber>::s_keyword = Keyword::LesionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LesionNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LesionNumber>::s_element = 0x3105;
template<>
DATA_API const std::string_view Attribute<Keyword::LesionNumber>::s_name = "Lesion Number";
template<>
DATA_API const VR Attribute<Keyword::LesionNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::LesionNumber>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::OutputPower>::s_keyword = Keyword::OutputPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutputPower>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OutputPower>::s_element = 0x5000;
template<>
DATA_API const std::string_view Attribute<Keyword::OutputPower>::s_name = "Output Power";
template<>
DATA_API const VR Attribute<Keyword::OutputPower>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::OutputPower>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerData>::s_keyword = Keyword::TransducerData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerData>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerData>::s_element = 0x5010;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerData>::s_name = "Transducer Data";
template<>
DATA_API const VR Attribute<Keyword::TransducerData>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::TransducerData>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerIdentificationSequence>::s_keyword =
    Keyword::TransducerIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerIdentificationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerIdentificationSequence>::s_element = 0x5011;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerIdentificationSequence>::s_name =
    "Transducer Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FocusDepth>::s_keyword = Keyword::FocusDepth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocusDepth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocusDepth>::s_element = 0x5012;
template<>
DATA_API const std::string_view Attribute<Keyword::FocusDepth>::s_name = "Focus Depth";
template<>
DATA_API const VR Attribute<Keyword::FocusDepth>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FocusDepth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ProcessingFunction>::s_keyword = Keyword::ProcessingFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProcessingFunction>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProcessingFunction>::s_element = 0x5020;
template<>
DATA_API const std::string_view Attribute<Keyword::ProcessingFunction>::s_name = "Processing Function";
template<>
DATA_API const VR Attribute<Keyword::ProcessingFunction>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ProcessingFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MechanicalIndex>::s_keyword = Keyword::MechanicalIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MechanicalIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MechanicalIndex>::s_element = 0x5022;
template<>
DATA_API const std::string_view Attribute<Keyword::MechanicalIndex>::s_name = "Mechanical Index";
template<>
DATA_API const VR Attribute<Keyword::MechanicalIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MechanicalIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BoneThermalIndex>::s_keyword = Keyword::BoneThermalIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BoneThermalIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BoneThermalIndex>::s_element = 0x5024;
template<>
DATA_API const std::string_view Attribute<Keyword::BoneThermalIndex>::s_name = "Bone Thermal Index";
template<>
DATA_API const VR Attribute<Keyword::BoneThermalIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::BoneThermalIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CranialThermalIndex>::s_keyword = Keyword::CranialThermalIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CranialThermalIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CranialThermalIndex>::s_element = 0x5026;
template<>
DATA_API const std::string_view Attribute<Keyword::CranialThermalIndex>::s_name = "Cranial Thermal Index";
template<>
DATA_API const VR Attribute<Keyword::CranialThermalIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CranialThermalIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SoftTissueThermalIndex>::s_keyword = Keyword::SoftTissueThermalIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftTissueThermalIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftTissueThermalIndex>::s_element = 0x5027;
template<>
DATA_API const std::string_view Attribute<Keyword::SoftTissueThermalIndex>::s_name = "Soft Tissue Thermal Index";
template<>
DATA_API const VR Attribute<Keyword::SoftTissueThermalIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SoftTissueThermalIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SoftTissueFocusThermalIndex>::s_keyword =
    Keyword::SoftTissueFocusThermalIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftTissueFocusThermalIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftTissueFocusThermalIndex>::s_element = 0x5028;
template<>
DATA_API const std::string_view Attribute<Keyword::SoftTissueFocusThermalIndex>::s_name =
    "Soft Tissue-focus Thermal Index";
template<>
DATA_API const VR Attribute<Keyword::SoftTissueFocusThermalIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SoftTissueFocusThermalIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SoftTissueSurfaceThermalIndex>::s_keyword =
    Keyword::SoftTissueSurfaceThermalIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftTissueSurfaceThermalIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoftTissueSurfaceThermalIndex>::s_element = 0x5029;
template<>
DATA_API const std::string_view Attribute<Keyword::SoftTissueSurfaceThermalIndex>::s_name =
    "Soft Tissue-surface Thermal Index";
template<>
DATA_API const VR Attribute<Keyword::SoftTissueSurfaceThermalIndex>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SoftTissueSurfaceThermalIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DepthOfScanField>::s_keyword = Keyword::DepthOfScanField;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthOfScanField>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthOfScanField>::s_element = 0x5050;
template<>
DATA_API const std::string_view Attribute<Keyword::DepthOfScanField>::s_name = "Depth of Scan field";
template<>
DATA_API const VR Attribute<Keyword::DepthOfScanField>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::DepthOfScanField>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientPosition>::s_keyword = Keyword::PatientPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientPosition>::s_element = 0x5100;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientPosition>::s_name = "Patient Position";
template<>
DATA_API const VR Attribute<Keyword::PatientPosition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewPosition>::s_keyword = Keyword::ViewPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewPosition>::s_element = 0x5101;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewPosition>::s_name = "view Position";
template<>
DATA_API const VR Attribute<Keyword::ViewPosition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ViewPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ProjectionEponymousNameCodeSequence>::s_keyword =
    Keyword::ProjectionEponymousNameCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProjectionEponymousNameCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProjectionEponymousNameCodeSequence>::s_element = 0x5104;
template<>
DATA_API const std::string_view Attribute<Keyword::ProjectionEponymousNameCodeSequence>::s_name =
    "Projection Eponymous Name Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ProjectionEponymousNameCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ProjectionEponymousNameCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Sensitivity>::s_keyword = Keyword::Sensitivity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Sensitivity>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Sensitivity>::s_element = 0x6000;
template<>
DATA_API const std::string_view Attribute<Keyword::Sensitivity>::s_name = "Sensitivity";
template<>
DATA_API const VR Attribute<Keyword::Sensitivity>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::Sensitivity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SequenceOfUltrasoundRegions>::s_keyword =
    Keyword::SequenceOfUltrasoundRegions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SequenceOfUltrasoundRegions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SequenceOfUltrasoundRegions>::s_element = 0x6011;
template<>
DATA_API const std::string_view Attribute<Keyword::SequenceOfUltrasoundRegions>::s_name =
    "Sequence of Ultrasound Regions";
template<>
DATA_API const VR Attribute<Keyword::SequenceOfUltrasoundRegions>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SequenceOfUltrasoundRegions>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionSpatialFormat>::s_keyword = Keyword::RegionSpatialFormat;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionSpatialFormat>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionSpatialFormat>::s_element = 0x6012;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionSpatialFormat>::s_name = "Region Spatial Format";
template<>
DATA_API const VR Attribute<Keyword::RegionSpatialFormat>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RegionSpatialFormat>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionDataType>::s_keyword = Keyword::RegionDataType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionDataType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionDataType>::s_element = 0x6014;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionDataType>::s_name = "Region Data Type";
template<>
DATA_API const VR Attribute<Keyword::RegionDataType>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RegionDataType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionFlags>::s_keyword = Keyword::RegionFlags;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionFlags>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionFlags>::s_element = 0x6016;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionFlags>::s_name = "Region Flags";
template<>
DATA_API const VR Attribute<Keyword::RegionFlags>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::RegionFlags>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionLocationMinX0>::s_keyword = Keyword::RegionLocationMinX0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMinX0>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMinX0>::s_element = 0x6018;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionLocationMinX0>::s_name = "Region Location Min X0";
template<>
DATA_API const VR Attribute<Keyword::RegionLocationMinX0>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::RegionLocationMinX0>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionLocationMinY0>::s_keyword = Keyword::RegionLocationMinY0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMinY0>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMinY0>::s_element = 0x601A;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionLocationMinY0>::s_name = "Region Location Min Y0";
template<>
DATA_API const VR Attribute<Keyword::RegionLocationMinY0>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::RegionLocationMinY0>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionLocationMaxX1>::s_keyword = Keyword::RegionLocationMaxX1;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMaxX1>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMaxX1>::s_element = 0x601C;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionLocationMaxX1>::s_name = "Region Location Max X1";
template<>
DATA_API const VR Attribute<Keyword::RegionLocationMaxX1>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::RegionLocationMaxX1>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegionLocationMaxY1>::s_keyword = Keyword::RegionLocationMaxY1;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMaxY1>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegionLocationMaxY1>::s_element = 0x601E;
template<>
DATA_API const std::string_view Attribute<Keyword::RegionLocationMaxY1>::s_name = "Region Location Max Y1";
template<>
DATA_API const VR Attribute<Keyword::RegionLocationMaxY1>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::RegionLocationMaxY1>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencePixelX0>::s_keyword = Keyword::ReferencePixelX0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelX0>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelX0>::s_element = 0x6020;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencePixelX0>::s_name = "Reference Pixel X0";
template<>
DATA_API const VR Attribute<Keyword::ReferencePixelX0>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::ReferencePixelX0>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencePixelY0>::s_keyword = Keyword::ReferencePixelY0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelY0>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelY0>::s_element = 0x6022;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencePixelY0>::s_name = "Reference Pixel Y0";
template<>
DATA_API const VR Attribute<Keyword::ReferencePixelY0>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::ReferencePixelY0>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhysicalUnitsXDirection>::s_keyword = Keyword::PhysicalUnitsXDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalUnitsXDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalUnitsXDirection>::s_element = 0x6024;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysicalUnitsXDirection>::s_name = "Physical Units X Direction";
template<>
DATA_API const VR Attribute<Keyword::PhysicalUnitsXDirection>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PhysicalUnitsXDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhysicalUnitsYDirection>::s_keyword = Keyword::PhysicalUnitsYDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalUnitsYDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalUnitsYDirection>::s_element = 0x6026;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysicalUnitsYDirection>::s_name = "Physical Units Y Direction";
template<>
DATA_API const VR Attribute<Keyword::PhysicalUnitsYDirection>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PhysicalUnitsYDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencePixelPhysicalValueX>::s_keyword =
    Keyword::ReferencePixelPhysicalValueX;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelPhysicalValueX>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelPhysicalValueX>::s_element = 0x6028;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencePixelPhysicalValueX>::s_name =
    "Reference Pixel Physical Value X";
template<>
DATA_API const VR Attribute<Keyword::ReferencePixelPhysicalValueX>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ReferencePixelPhysicalValueX>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencePixelPhysicalValueY>::s_keyword =
    Keyword::ReferencePixelPhysicalValueY;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelPhysicalValueY>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencePixelPhysicalValueY>::s_element = 0x602A;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencePixelPhysicalValueY>::s_name =
    "Reference Pixel Physical Value Y";
template<>
DATA_API const VR Attribute<Keyword::ReferencePixelPhysicalValueY>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ReferencePixelPhysicalValueY>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhysicalDeltaX>::s_keyword = Keyword::PhysicalDeltaX;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalDeltaX>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalDeltaX>::s_element = 0x602C;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysicalDeltaX>::s_name = "Physical Delta X";
template<>
DATA_API const VR Attribute<Keyword::PhysicalDeltaX>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::PhysicalDeltaX>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhysicalDeltaY>::s_keyword = Keyword::PhysicalDeltaY;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalDeltaY>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalDeltaY>::s_element = 0x602E;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysicalDeltaY>::s_name = "Physical Delta Y";
template<>
DATA_API const VR Attribute<Keyword::PhysicalDeltaY>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::PhysicalDeltaY>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerFrequency>::s_keyword = Keyword::TransducerFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerFrequency>::s_element = 0x6030;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerFrequency>::s_name = "Transducer Frequency";
template<>
DATA_API const VR Attribute<Keyword::TransducerFrequency>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TransducerFrequency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerType>::s_keyword = Keyword::TransducerType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerType>::s_element = 0x6031;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerType>::s_name = "Transducer Type";
template<>
DATA_API const VR Attribute<Keyword::TransducerType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TransducerType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PulseRepetitionFrequency>::s_keyword = Keyword::PulseRepetitionFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PulseRepetitionFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PulseRepetitionFrequency>::s_element = 0x6032;
template<>
DATA_API const std::string_view Attribute<Keyword::PulseRepetitionFrequency>::s_name = "Pulse Repetition Frequency";
template<>
DATA_API const VR Attribute<Keyword::PulseRepetitionFrequency>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::PulseRepetitionFrequency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DopplerCorrectionAngle>::s_keyword = Keyword::DopplerCorrectionAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DopplerCorrectionAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DopplerCorrectionAngle>::s_element = 0x6034;
template<>
DATA_API const std::string_view Attribute<Keyword::DopplerCorrectionAngle>::s_name = "Doppler Correction Angle";
template<>
DATA_API const VR Attribute<Keyword::DopplerCorrectionAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DopplerCorrectionAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SteeringAngle>::s_keyword = Keyword::SteeringAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SteeringAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SteeringAngle>::s_element = 0x6036;
template<>
DATA_API const std::string_view Attribute<Keyword::SteeringAngle>::s_name = "Steering Angle";
template<>
DATA_API const VR Attribute<Keyword::SteeringAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SteeringAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DopplerSampleVolumeXPosition>::s_keyword =
    Keyword::DopplerSampleVolumeXPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DopplerSampleVolumeXPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DopplerSampleVolumeXPosition>::s_element = 0x6039;
template<>
DATA_API const std::string_view Attribute<Keyword::DopplerSampleVolumeXPosition>::s_name =
    "Doppler Sample Volume X Position";
template<>
DATA_API const VR Attribute<Keyword::DopplerSampleVolumeXPosition>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::DopplerSampleVolumeXPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DopplerSampleVolumeYPosition>::s_keyword =
    Keyword::DopplerSampleVolumeYPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DopplerSampleVolumeYPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DopplerSampleVolumeYPosition>::s_element = 0x603B;
template<>
DATA_API const std::string_view Attribute<Keyword::DopplerSampleVolumeYPosition>::s_name =
    "Doppler Sample Volume Y Position";
template<>
DATA_API const VR Attribute<Keyword::DopplerSampleVolumeYPosition>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::DopplerSampleVolumeYPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TMLinePositionX0>::s_keyword = Keyword::TMLinePositionX0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionX0>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionX0>::s_element = 0x603D;
template<>
DATA_API const std::string_view Attribute<Keyword::TMLinePositionX0>::s_name = "TM-Line Position X0";
template<>
DATA_API const VR Attribute<Keyword::TMLinePositionX0>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::TMLinePositionX0>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TMLinePositionY0>::s_keyword = Keyword::TMLinePositionY0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionY0>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionY0>::s_element = 0x603F;
template<>
DATA_API const std::string_view Attribute<Keyword::TMLinePositionY0>::s_name = "TM-Line Position Y0";
template<>
DATA_API const VR Attribute<Keyword::TMLinePositionY0>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::TMLinePositionY0>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TMLinePositionX1>::s_keyword = Keyword::TMLinePositionX1;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionX1>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionX1>::s_element = 0x6041;
template<>
DATA_API const std::string_view Attribute<Keyword::TMLinePositionX1>::s_name = "TM-Line Position X1";
template<>
DATA_API const VR Attribute<Keyword::TMLinePositionX1>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::TMLinePositionX1>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TMLinePositionY1>::s_keyword = Keyword::TMLinePositionY1;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionY1>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TMLinePositionY1>::s_element = 0x6043;
template<>
DATA_API const std::string_view Attribute<Keyword::TMLinePositionY1>::s_name = "TM-Line Position Y1";
template<>
DATA_API const VR Attribute<Keyword::TMLinePositionY1>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::TMLinePositionY1>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelComponentOrganization>::s_keyword = Keyword::PixelComponentOrganization;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentOrganization>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentOrganization>::s_element = 0x6044;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelComponentOrganization>::s_name = "Pixel Component Organization";
template<>
DATA_API const VR Attribute<Keyword::PixelComponentOrganization>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PixelComponentOrganization>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelComponentMask>::s_keyword = Keyword::PixelComponentMask;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentMask>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentMask>::s_element = 0x6046;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelComponentMask>::s_name = "Pixel Component Mask";
template<>
DATA_API const VR Attribute<Keyword::PixelComponentMask>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::PixelComponentMask>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelComponentRangeStart>::s_keyword = Keyword::PixelComponentRangeStart;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentRangeStart>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentRangeStart>::s_element = 0x6048;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelComponentRangeStart>::s_name = "Pixel Component Range Start";
template<>
DATA_API const VR Attribute<Keyword::PixelComponentRangeStart>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::PixelComponentRangeStart>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelComponentRangeStop>::s_keyword = Keyword::PixelComponentRangeStop;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentRangeStop>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentRangeStop>::s_element = 0x604A;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelComponentRangeStop>::s_name = "Pixel Component Range Stop";
template<>
DATA_API const VR Attribute<Keyword::PixelComponentRangeStop>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::PixelComponentRangeStop>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelComponentPhysicalUnits>::s_keyword =
    Keyword::PixelComponentPhysicalUnits;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentPhysicalUnits>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentPhysicalUnits>::s_element = 0x604C;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelComponentPhysicalUnits>::s_name =
    "Pixel Component Physical Units";
template<>
DATA_API const VR Attribute<Keyword::PixelComponentPhysicalUnits>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PixelComponentPhysicalUnits>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelComponentDataType>::s_keyword = Keyword::PixelComponentDataType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentDataType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelComponentDataType>::s_element = 0x604E;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelComponentDataType>::s_name = "Pixel Component Data Type";
template<>
DATA_API const VR Attribute<Keyword::PixelComponentDataType>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PixelComponentDataType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTableBreakPoints>::s_keyword = Keyword::NumberOfTableBreakPoints;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableBreakPoints>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableBreakPoints>::s_element = 0x6050;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTableBreakPoints>::s_name = "Number of Table Break Points";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTableBreakPoints>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTableBreakPoints>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableOfXBreakPoints>::s_keyword = Keyword::TableOfXBreakPoints;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfXBreakPoints>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfXBreakPoints>::s_element = 0x6052;
template<>
DATA_API const std::string_view Attribute<Keyword::TableOfXBreakPoints>::s_name = "Table of X Break Points";
template<>
DATA_API const VR Attribute<Keyword::TableOfXBreakPoints>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TableOfXBreakPoints>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TableOfYBreakPoints>::s_keyword = Keyword::TableOfYBreakPoints;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfYBreakPoints>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfYBreakPoints>::s_element = 0x6054;
template<>
DATA_API const std::string_view Attribute<Keyword::TableOfYBreakPoints>::s_name = "Table of Y Break Points";
template<>
DATA_API const VR Attribute<Keyword::TableOfYBreakPoints>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TableOfYBreakPoints>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTableEntries>::s_keyword = Keyword::NumberOfTableEntries;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableEntries>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableEntries>::s_element = 0x6056;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTableEntries>::s_name = "Number of Table Entries";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTableEntries>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTableEntries>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableOfPixelValues>::s_keyword = Keyword::TableOfPixelValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfPixelValues>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfPixelValues>::s_element = 0x6058;
template<>
DATA_API const std::string_view Attribute<Keyword::TableOfPixelValues>::s_name = "Table of Pixel Values";
template<>
DATA_API const VR Attribute<Keyword::TableOfPixelValues>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TableOfPixelValues>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TableOfParameterValues>::s_keyword = Keyword::TableOfParameterValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfParameterValues>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableOfParameterValues>::s_element = 0x605A;
template<>
DATA_API const std::string_view Attribute<Keyword::TableOfParameterValues>::s_name = "Table of Parameter Values";
template<>
DATA_API const VR Attribute<Keyword::TableOfParameterValues>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableOfParameterValues>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RWaveTimeVector>::s_keyword = Keyword::RWaveTimeVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RWaveTimeVector>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RWaveTimeVector>::s_element = 0x6060;
template<>
DATA_API const std::string_view Attribute<Keyword::RWaveTimeVector>::s_name = "R Wave Time Vector";
template<>
DATA_API const VR Attribute<Keyword::RWaveTimeVector>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RWaveTimeVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ActiveImageAreaOverlayGroup>::s_keyword =
    Keyword::ActiveImageAreaOverlayGroup;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActiveImageAreaOverlayGroup>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActiveImageAreaOverlayGroup>::s_element = 0x6070;
template<>
DATA_API const std::string_view Attribute<Keyword::ActiveImageAreaOverlayGroup>::s_name =
    "Active Image Area Overlay Group";
template<>
DATA_API const VR Attribute<Keyword::ActiveImageAreaOverlayGroup>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ActiveImageAreaOverlayGroup>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorConditionsNominalFlag>::s_keyword =
    Keyword::DetectorConditionsNominalFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorConditionsNominalFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorConditionsNominalFlag>::s_element = 0x7000;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorConditionsNominalFlag>::s_name =
    "Detector Conditions Nominal Flag";
template<>
DATA_API const VR Attribute<Keyword::DetectorConditionsNominalFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DetectorConditionsNominalFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorTemperature>::s_keyword = Keyword::DetectorTemperature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorTemperature>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorTemperature>::s_element = 0x7001;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorTemperature>::s_name = "Detector Temperature";
template<>
DATA_API const VR Attribute<Keyword::DetectorTemperature>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorTemperature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorType>::s_keyword = Keyword::DetectorType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorType>::s_element = 0x7004;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorType>::s_name = "Detector Type";
template<>
DATA_API const VR Attribute<Keyword::DetectorType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DetectorType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorConfiguration>::s_keyword = Keyword::DetectorConfiguration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorConfiguration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorConfiguration>::s_element = 0x7005;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorConfiguration>::s_name = "Detector Configuration";
template<>
DATA_API const VR Attribute<Keyword::DetectorConfiguration>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DetectorConfiguration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorDescription>::s_keyword = Keyword::DetectorDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorDescription>::s_element = 0x7006;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorDescription>::s_name = "Detector Description";
template<>
DATA_API const VR Attribute<Keyword::DetectorDescription>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::DetectorDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorMode>::s_keyword = Keyword::DetectorMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorMode>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorMode>::s_element = 0x7008;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorMode>::s_name = "Detector Mode";
template<>
DATA_API const VR Attribute<Keyword::DetectorMode>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::DetectorMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorID>::s_keyword = Keyword::DetectorID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorID>::s_element = 0x700A;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorID>::s_name = "Detector ID";
template<>
DATA_API const VR Attribute<Keyword::DetectorID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::DetectorID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DateOfLastDetectorCalibration>::s_keyword =
    Keyword::DateOfLastDetectorCalibration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfLastDetectorCalibration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateOfLastDetectorCalibration>::s_element = 0x700C;
template<>
DATA_API const std::string_view Attribute<Keyword::DateOfLastDetectorCalibration>::s_name =
    "Date of Last Detector Calibration";
template<>
DATA_API const VR Attribute<Keyword::DateOfLastDetectorCalibration>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::DateOfLastDetectorCalibration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeOfLastDetectorCalibration>::s_keyword =
    Keyword::TimeOfLastDetectorCalibration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfLastDetectorCalibration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfLastDetectorCalibration>::s_element = 0x700E;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeOfLastDetectorCalibration>::s_name =
    "Time of Last Detector Calibration";
template<>
DATA_API const VR Attribute<Keyword::TimeOfLastDetectorCalibration>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::TimeOfLastDetectorCalibration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposuresOnDetectorSinceLastCalibration>::s_keyword =
    Keyword::ExposuresOnDetectorSinceLastCalibration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposuresOnDetectorSinceLastCalibration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposuresOnDetectorSinceLastCalibration>::s_element = 0x7010;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposuresOnDetectorSinceLastCalibration>::s_name =
    "Exposures on Detector Since Last Calibration";
template<>
DATA_API const VR Attribute<Keyword::ExposuresOnDetectorSinceLastCalibration>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ExposuresOnDetectorSinceLastCalibration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposuresOnDetectorSinceManufactured>::s_keyword =
    Keyword::ExposuresOnDetectorSinceManufactured;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposuresOnDetectorSinceManufactured>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposuresOnDetectorSinceManufactured>::s_element = 0x7011;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposuresOnDetectorSinceManufactured>::s_name =
    "Exposures on Detector Since Manufactured";
template<>
DATA_API const VR Attribute<Keyword::ExposuresOnDetectorSinceManufactured>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ExposuresOnDetectorSinceManufactured>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorTimeSinceLastExposure>::s_keyword =
    Keyword::DetectorTimeSinceLastExposure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorTimeSinceLastExposure>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorTimeSinceLastExposure>::s_element = 0x7012;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorTimeSinceLastExposure>::s_name =
    "Detector Time Since Last Exposure";
template<>
DATA_API const VR Attribute<Keyword::DetectorTimeSinceLastExposure>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorTimeSinceLastExposure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActiveTime>::s_keyword = Keyword::DetectorActiveTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveTime>::s_element = 0x7014;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActiveTime>::s_name = "Detector Active Time";
template<>
DATA_API const VR Attribute<Keyword::DetectorActiveTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorActiveTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActivationOffsetFromExposure>::s_keyword =
    Keyword::DetectorActivationOffsetFromExposure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActivationOffsetFromExposure>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActivationOffsetFromExposure>::s_element = 0x7016;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActivationOffsetFromExposure>::s_name =
    "Detector Activation Offset From Exposure";
template<>
DATA_API const VR Attribute<Keyword::DetectorActivationOffsetFromExposure>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorActivationOffsetFromExposure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorBinning>::s_keyword = Keyword::DetectorBinning;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorBinning>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorBinning>::s_element = 0x701A;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorBinning>::s_name = "Detector Binning";
template<>
DATA_API const VR Attribute<Keyword::DetectorBinning>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorBinning>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorElementPhysicalSize>::s_keyword =
    Keyword::DetectorElementPhysicalSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorElementPhysicalSize>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorElementPhysicalSize>::s_element = 0x7020;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorElementPhysicalSize>::s_name =
    "Detector Element Physical Size";
template<>
DATA_API const VR Attribute<Keyword::DetectorElementPhysicalSize>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorElementPhysicalSize>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorElementSpacing>::s_keyword = Keyword::DetectorElementSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorElementSpacing>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorElementSpacing>::s_element = 0x7022;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorElementSpacing>::s_name = "Detector Element Spacing";
template<>
DATA_API const VR Attribute<Keyword::DetectorElementSpacing>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorElementSpacing>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActiveShape>::s_keyword = Keyword::DetectorActiveShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveShape>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveShape>::s_element = 0x7024;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActiveShape>::s_name = "Detector Active Shape";
template<>
DATA_API const VR Attribute<Keyword::DetectorActiveShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DetectorActiveShape>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActiveDimensions>::s_keyword = Keyword::DetectorActiveDimensions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveDimensions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveDimensions>::s_element = 0x7026;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActiveDimensions>::s_name = "Detector Active Dimension(s)";
template<>
DATA_API const VR Attribute<Keyword::DetectorActiveDimensions>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorActiveDimensions>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActiveOrigin>::s_keyword = Keyword::DetectorActiveOrigin;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveOrigin>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveOrigin>::s_element = 0x7028;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActiveOrigin>::s_name = "Detector Active Origin";
template<>
DATA_API const VR Attribute<Keyword::DetectorActiveOrigin>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorActiveOrigin>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorManufacturerName>::s_keyword = Keyword::DetectorManufacturerName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorManufacturerName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorManufacturerName>::s_element = 0x702A;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorManufacturerName>::s_name = "Detector Manufacturer Name";
template<>
DATA_API const VR Attribute<Keyword::DetectorManufacturerName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DetectorManufacturerName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorManufacturerModelName>::s_keyword =
    Keyword::DetectorManufacturerModelName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorManufacturerModelName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorManufacturerModelName>::s_element = 0x702B;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorManufacturerModelName>::s_name =
    "Detector Manufacturer's Model Name";
template<>
DATA_API const VR Attribute<Keyword::DetectorManufacturerModelName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DetectorManufacturerModelName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewOrigin>::s_keyword = Keyword::FieldOfViewOrigin;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewOrigin>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewOrigin>::s_element = 0x7030;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewOrigin>::s_name = "field of view Origin";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewOrigin>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewOrigin>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewRotation>::s_keyword = Keyword::FieldOfViewRotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewRotation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewRotation>::s_element = 0x7032;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewRotation>::s_name = "field of view Rotation";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewRotation>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewRotation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewHorizontalFlip>::s_keyword = Keyword::FieldOfViewHorizontalFlip;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewHorizontalFlip>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewHorizontalFlip>::s_element = 0x7034;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewHorizontalFlip>::s_name = "field of view Horizontal Flip";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewHorizontalFlip>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewHorizontalFlip>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelDataAreaOriginRelativeToFOV>::s_keyword =
    Keyword::PixelDataAreaOriginRelativeToFOV;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelDataAreaOriginRelativeToFOV>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelDataAreaOriginRelativeToFOV>::s_element = 0x7036;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelDataAreaOriginRelativeToFOV>::s_name =
    "Pixel Data Area Origin Relative To FOV";
template<>
DATA_API const VR Attribute<Keyword::PixelDataAreaOriginRelativeToFOV>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PixelDataAreaOriginRelativeToFOV>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PixelDataAreaRotationAngleRelativeToFOV>::s_keyword =
    Keyword::PixelDataAreaRotationAngleRelativeToFOV;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelDataAreaRotationAngleRelativeToFOV>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelDataAreaRotationAngleRelativeToFOV>::s_element = 0x7038;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelDataAreaRotationAngleRelativeToFOV>::s_name =
    "Pixel Data Area Rotation Angle Relative To FOV";
template<>
DATA_API const VR Attribute<Keyword::PixelDataAreaRotationAngleRelativeToFOV>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PixelDataAreaRotationAngleRelativeToFOV>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridAbsorbingMaterial>::s_keyword = Keyword::GridAbsorbingMaterial;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridAbsorbingMaterial>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridAbsorbingMaterial>::s_element = 0x7040;
template<>
DATA_API const std::string_view Attribute<Keyword::GridAbsorbingMaterial>::s_name = "Grid Absorbing Material";
template<>
DATA_API const VR Attribute<Keyword::GridAbsorbingMaterial>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::GridAbsorbingMaterial>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridSpacingMaterial>::s_keyword = Keyword::GridSpacingMaterial;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridSpacingMaterial>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridSpacingMaterial>::s_element = 0x7041;
template<>
DATA_API const std::string_view Attribute<Keyword::GridSpacingMaterial>::s_name = "Grid Spacing Material";
template<>
DATA_API const VR Attribute<Keyword::GridSpacingMaterial>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::GridSpacingMaterial>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridThickness>::s_keyword = Keyword::GridThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridThickness>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridThickness>::s_element = 0x7042;
template<>
DATA_API const std::string_view Attribute<Keyword::GridThickness>::s_name = "Grid Thickness";
template<>
DATA_API const VR Attribute<Keyword::GridThickness>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GridThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridPitch>::s_keyword = Keyword::GridPitch;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridPitch>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridPitch>::s_element = 0x7044;
template<>
DATA_API const std::string_view Attribute<Keyword::GridPitch>::s_name = "Grid Pitch";
template<>
DATA_API const VR Attribute<Keyword::GridPitch>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GridPitch>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridAspectRatio>::s_keyword = Keyword::GridAspectRatio;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridAspectRatio>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridAspectRatio>::s_element = 0x7046;
template<>
DATA_API const std::string_view Attribute<Keyword::GridAspectRatio>::s_name = "Grid Aspect Ratio";
template<>
DATA_API const VR Attribute<Keyword::GridAspectRatio>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::GridAspectRatio>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::GridPeriod>::s_keyword = Keyword::GridPeriod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridPeriod>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridPeriod>::s_element = 0x7048;
template<>
DATA_API const std::string_view Attribute<Keyword::GridPeriod>::s_name = "Grid Period";
template<>
DATA_API const VR Attribute<Keyword::GridPeriod>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GridPeriod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridFocalDistance>::s_keyword = Keyword::GridFocalDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridFocalDistance>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridFocalDistance>::s_element = 0x704C;
template<>
DATA_API const std::string_view Attribute<Keyword::GridFocalDistance>::s_name = "Grid Focal Distance";
template<>
DATA_API const VR Attribute<Keyword::GridFocalDistance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GridFocalDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FilterMaterial>::s_keyword = Keyword::FilterMaterial;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterMaterial>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterMaterial>::s_element = 0x7050;
template<>
DATA_API const std::string_view Attribute<Keyword::FilterMaterial>::s_name = "Filter Material";
template<>
DATA_API const VR Attribute<Keyword::FilterMaterial>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FilterMaterial>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FilterThicknessMinimum>::s_keyword = Keyword::FilterThicknessMinimum;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterThicknessMinimum>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterThicknessMinimum>::s_element = 0x7052;
template<>
DATA_API const std::string_view Attribute<Keyword::FilterThicknessMinimum>::s_name = "Filter Thickness Minimum";
template<>
DATA_API const VR Attribute<Keyword::FilterThicknessMinimum>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FilterThicknessMinimum>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FilterThicknessMaximum>::s_keyword = Keyword::FilterThicknessMaximum;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterThicknessMaximum>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterThicknessMaximum>::s_element = 0x7054;
template<>
DATA_API const std::string_view Attribute<Keyword::FilterThicknessMaximum>::s_name = "Filter Thickness Maximum";
template<>
DATA_API const VR Attribute<Keyword::FilterThicknessMaximum>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FilterThicknessMaximum>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FilterBeamPathLengthMinimum>::s_keyword =
    Keyword::FilterBeamPathLengthMinimum;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterBeamPathLengthMinimum>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterBeamPathLengthMinimum>::s_element = 0x7056;
template<>
DATA_API const std::string_view Attribute<Keyword::FilterBeamPathLengthMinimum>::s_name =
    "Filter Beam Path Length Minimum";
template<>
DATA_API const VR Attribute<Keyword::FilterBeamPathLengthMinimum>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::FilterBeamPathLengthMinimum>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FilterBeamPathLengthMaximum>::s_keyword =
    Keyword::FilterBeamPathLengthMaximum;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterBeamPathLengthMaximum>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FilterBeamPathLengthMaximum>::s_element = 0x7058;
template<>
DATA_API const std::string_view Attribute<Keyword::FilterBeamPathLengthMaximum>::s_name =
    "Filter Beam Path Length Maximum";
template<>
DATA_API const VR Attribute<Keyword::FilterBeamPathLengthMaximum>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::FilterBeamPathLengthMaximum>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlMode>::s_keyword = Keyword::ExposureControlMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlMode>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlMode>::s_element = 0x7060;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlMode>::s_name = "Exposure Control Mode";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlModeDescription>::s_keyword =
    Keyword::ExposureControlModeDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlModeDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlModeDescription>::s_element = 0x7062;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlModeDescription>::s_name =
    "Exposure Control Mode Description";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlModeDescription>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlModeDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureStatus>::s_keyword = Keyword::ExposureStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureStatus>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureStatus>::s_element = 0x7064;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureStatus>::s_name = "Exposure Status";
template<>
DATA_API const VR Attribute<Keyword::ExposureStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ExposureStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhototimerSetting>::s_keyword = Keyword::PhototimerSetting;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhototimerSetting>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhototimerSetting>::s_element = 0x7065;
template<>
DATA_API const std::string_view Attribute<Keyword::PhototimerSetting>::s_name = "Phototimer Setting";
template<>
DATA_API const VR Attribute<Keyword::PhototimerSetting>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PhototimerSetting>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureTimeInuS>::s_keyword = Keyword::ExposureTimeInuS;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTimeInuS>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTimeInuS>::s_element = 0x8150;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureTimeInuS>::s_name = "Exposure Time in uS";
template<>
DATA_API const VR Attribute<Keyword::ExposureTimeInuS>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ExposureTimeInuS>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayTubeCurrentInuA>::s_keyword = Keyword::XRayTubeCurrentInuA;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayTubeCurrentInuA>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayTubeCurrentInuA>::s_element = 0x8151;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayTubeCurrentInuA>::s_name = "X-Ray Tube Current in uA";
template<>
DATA_API const VR Attribute<Keyword::XRayTubeCurrentInuA>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::XRayTubeCurrentInuA>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentQualification>::s_keyword = Keyword::ContentQualification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentQualification>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentQualification>::s_element = 0x9004;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentQualification>::s_name = "Content Qualification";
template<>
DATA_API const VR Attribute<Keyword::ContentQualification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContentQualification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PulseSequenceName>::s_keyword = Keyword::PulseSequenceName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PulseSequenceName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PulseSequenceName>::s_element = 0x9005;
template<>
DATA_API const std::string_view Attribute<Keyword::PulseSequenceName>::s_name = "Pulse Sequence Name";
template<>
DATA_API const VR Attribute<Keyword::PulseSequenceName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::PulseSequenceName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRImagingModifierSequence>::s_keyword = Keyword::MRImagingModifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRImagingModifierSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRImagingModifierSequence>::s_element = 0x9006;
template<>
DATA_API const std::string_view Attribute<Keyword::MRImagingModifierSequence>::s_name = "MR Imaging Modifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRImagingModifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRImagingModifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EchoPulseSequence>::s_keyword = Keyword::EchoPulseSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoPulseSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoPulseSequence>::s_element = 0x9008;
template<>
DATA_API const std::string_view Attribute<Keyword::EchoPulseSequence>::s_name = "Echo Pulse Sequence";
template<>
DATA_API const VR Attribute<Keyword::EchoPulseSequence>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::EchoPulseSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InversionRecovery>::s_keyword = Keyword::InversionRecovery;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InversionRecovery>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InversionRecovery>::s_element = 0x9009;
template<>
DATA_API const std::string_view Attribute<Keyword::InversionRecovery>::s_name = "Inversion Recovery";
template<>
DATA_API const VR Attribute<Keyword::InversionRecovery>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InversionRecovery>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlowCompensation>::s_keyword = Keyword::FlowCompensation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlowCompensation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlowCompensation>::s_element = 0x9010;
template<>
DATA_API const std::string_view Attribute<Keyword::FlowCompensation>::s_name = "Flow Compensation";
template<>
DATA_API const VR Attribute<Keyword::FlowCompensation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FlowCompensation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultipleSpinEcho>::s_keyword = Keyword::MultipleSpinEcho;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultipleSpinEcho>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultipleSpinEcho>::s_element = 0x9011;
template<>
DATA_API const std::string_view Attribute<Keyword::MultipleSpinEcho>::s_name = "Multiple Spin Echo";
template<>
DATA_API const VR Attribute<Keyword::MultipleSpinEcho>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MultipleSpinEcho>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultiPlanarExcitation>::s_keyword = Keyword::MultiPlanarExcitation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiPlanarExcitation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiPlanarExcitation>::s_element = 0x9012;
template<>
DATA_API const std::string_view Attribute<Keyword::MultiPlanarExcitation>::s_name = "Multi-planar Excitation";
template<>
DATA_API const VR Attribute<Keyword::MultiPlanarExcitation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MultiPlanarExcitation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhaseContrast>::s_keyword = Keyword::PhaseContrast;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseContrast>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseContrast>::s_element = 0x9014;
template<>
DATA_API const std::string_view Attribute<Keyword::PhaseContrast>::s_name = "Phase Contrast";
template<>
DATA_API const VR Attribute<Keyword::PhaseContrast>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PhaseContrast>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeOfFlightContrast>::s_keyword = Keyword::TimeOfFlightContrast;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfFlightContrast>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfFlightContrast>::s_element = 0x9015;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeOfFlightContrast>::s_name = "Time of Flight Contrast";
template<>
DATA_API const VR Attribute<Keyword::TimeOfFlightContrast>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TimeOfFlightContrast>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Spoiling>::s_keyword = Keyword::Spoiling;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Spoiling>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Spoiling>::s_element = 0x9016;
template<>
DATA_API const std::string_view Attribute<Keyword::Spoiling>::s_name = "Spoiling";
template<>
DATA_API const VR Attribute<Keyword::Spoiling>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Spoiling>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SteadyStatePulseSequence>::s_keyword = Keyword::SteadyStatePulseSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SteadyStatePulseSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SteadyStatePulseSequence>::s_element = 0x9017;
template<>
DATA_API const std::string_view Attribute<Keyword::SteadyStatePulseSequence>::s_name = "Steady State Pulse Sequence";
template<>
DATA_API const VR Attribute<Keyword::SteadyStatePulseSequence>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SteadyStatePulseSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EchoPlanarPulseSequence>::s_keyword = Keyword::EchoPlanarPulseSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoPlanarPulseSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EchoPlanarPulseSequence>::s_element = 0x9018;
template<>
DATA_API const std::string_view Attribute<Keyword::EchoPlanarPulseSequence>::s_name = "Echo Planar Pulse Sequence";
template<>
DATA_API const VR Attribute<Keyword::EchoPlanarPulseSequence>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::EchoPlanarPulseSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TagAngleFirstAxis>::s_keyword = Keyword::TagAngleFirstAxis;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagAngleFirstAxis>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagAngleFirstAxis>::s_element = 0x9019;
template<>
DATA_API const std::string_view Attribute<Keyword::TagAngleFirstAxis>::s_name = "Tag Angle First Axis";
template<>
DATA_API const VR Attribute<Keyword::TagAngleFirstAxis>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TagAngleFirstAxis>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MagnetizationTransfer>::s_keyword = Keyword::MagnetizationTransfer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MagnetizationTransfer>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MagnetizationTransfer>::s_element = 0x9020;
template<>
DATA_API const std::string_view Attribute<Keyword::MagnetizationTransfer>::s_name = "Magnetization Transfer";
template<>
DATA_API const VR Attribute<Keyword::MagnetizationTransfer>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MagnetizationTransfer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::T2Preparation>::s_keyword = Keyword::T2Preparation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::T2Preparation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::T2Preparation>::s_element = 0x9021;
template<>
DATA_API const std::string_view Attribute<Keyword::T2Preparation>::s_name = "T2 Preparation";
template<>
DATA_API const VR Attribute<Keyword::T2Preparation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::T2Preparation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BloodSignalNulling>::s_keyword = Keyword::BloodSignalNulling;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BloodSignalNulling>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BloodSignalNulling>::s_element = 0x9022;
template<>
DATA_API const std::string_view Attribute<Keyword::BloodSignalNulling>::s_name = "Blood Signal Nulling";
template<>
DATA_API const VR Attribute<Keyword::BloodSignalNulling>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BloodSignalNulling>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SaturationRecovery>::s_keyword = Keyword::SaturationRecovery;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SaturationRecovery>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SaturationRecovery>::s_element = 0x9024;
template<>
DATA_API const std::string_view Attribute<Keyword::SaturationRecovery>::s_name = "Saturation Recovery";
template<>
DATA_API const VR Attribute<Keyword::SaturationRecovery>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SaturationRecovery>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpectrallySelectedSuppression>::s_keyword =
    Keyword::SpectrallySelectedSuppression;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpectrallySelectedSuppression>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpectrallySelectedSuppression>::s_element = 0x9025;
template<>
DATA_API const std::string_view Attribute<Keyword::SpectrallySelectedSuppression>::s_name =
    "Spectrally Selected Suppression";
template<>
DATA_API const VR Attribute<Keyword::SpectrallySelectedSuppression>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpectrallySelectedSuppression>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpectrallySelectedExcitation>::s_keyword =
    Keyword::SpectrallySelectedExcitation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpectrallySelectedExcitation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpectrallySelectedExcitation>::s_element = 0x9026;
template<>
DATA_API const std::string_view Attribute<Keyword::SpectrallySelectedExcitation>::s_name =
    "Spectrally Selected Excitation";
template<>
DATA_API const VR Attribute<Keyword::SpectrallySelectedExcitation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpectrallySelectedExcitation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialPresaturation>::s_keyword = Keyword::SpatialPresaturation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialPresaturation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialPresaturation>::s_element = 0x9027;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialPresaturation>::s_name = "Spatial Pre-saturation";
template<>
DATA_API const VR Attribute<Keyword::SpatialPresaturation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpatialPresaturation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Tagging>::s_keyword = Keyword::Tagging;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Tagging>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Tagging>::s_element = 0x9028;
template<>
DATA_API const std::string_view Attribute<Keyword::Tagging>::s_name = "Tagging";
template<>
DATA_API const VR Attribute<Keyword::Tagging>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Tagging>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OversamplingPhase>::s_keyword = Keyword::OversamplingPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OversamplingPhase>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OversamplingPhase>::s_element = 0x9029;
template<>
DATA_API const std::string_view Attribute<Keyword::OversamplingPhase>::s_name = "Oversampling Phase";
template<>
DATA_API const VR Attribute<Keyword::OversamplingPhase>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OversamplingPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TagSpacingFirstDimension>::s_keyword = Keyword::TagSpacingFirstDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagSpacingFirstDimension>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagSpacingFirstDimension>::s_element = 0x9030;
template<>
DATA_API const std::string_view Attribute<Keyword::TagSpacingFirstDimension>::s_name = "Tag Spacing First Dimension";
template<>
DATA_API const VR Attribute<Keyword::TagSpacingFirstDimension>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TagSpacingFirstDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeometryOfKSpaceTraversal>::s_keyword = Keyword::GeometryOfKSpaceTraversal;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeometryOfKSpaceTraversal>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeometryOfKSpaceTraversal>::s_element = 0x9032;
template<>
DATA_API const std::string_view Attribute<Keyword::GeometryOfKSpaceTraversal>::s_name = "Geometry of k-Space Traversal";
template<>
DATA_API const VR Attribute<Keyword::GeometryOfKSpaceTraversal>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GeometryOfKSpaceTraversal>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedKSpaceTraversal>::s_keyword = Keyword::SegmentedKSpaceTraversal;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedKSpaceTraversal>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedKSpaceTraversal>::s_element = 0x9033;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedKSpaceTraversal>::s_name = "Segmented k-Space Traversal";
template<>
DATA_API const VR Attribute<Keyword::SegmentedKSpaceTraversal>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SegmentedKSpaceTraversal>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RectilinearPhaseEncodeReordering>::s_keyword =
    Keyword::RectilinearPhaseEncodeReordering;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RectilinearPhaseEncodeReordering>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RectilinearPhaseEncodeReordering>::s_element = 0x9034;
template<>
DATA_API const std::string_view Attribute<Keyword::RectilinearPhaseEncodeReordering>::s_name =
    "Rectilinear Phase Encode Reordering";
template<>
DATA_API const VR Attribute<Keyword::RectilinearPhaseEncodeReordering>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RectilinearPhaseEncodeReordering>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TagThickness>::s_keyword = Keyword::TagThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagThickness>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagThickness>::s_element = 0x9035;
template<>
DATA_API const std::string_view Attribute<Keyword::TagThickness>::s_name = "Tag Thickness";
template<>
DATA_API const VR Attribute<Keyword::TagThickness>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TagThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PartialFourierDirection>::s_keyword = Keyword::PartialFourierDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialFourierDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialFourierDirection>::s_element = 0x9036;
template<>
DATA_API const std::string_view Attribute<Keyword::PartialFourierDirection>::s_name = "Partial Fourier Direction";
template<>
DATA_API const VR Attribute<Keyword::PartialFourierDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PartialFourierDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacSynchronizationTechnique>::s_keyword =
    Keyword::CardiacSynchronizationTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacSynchronizationTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacSynchronizationTechnique>::s_element = 0x9037;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacSynchronizationTechnique>::s_name =
    "Cardiac Synchronization technique";
template<>
DATA_API const VR Attribute<Keyword::CardiacSynchronizationTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CardiacSynchronizationTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReceiveCoilManufacturerName>::s_keyword =
    Keyword::ReceiveCoilManufacturerName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReceiveCoilManufacturerName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReceiveCoilManufacturerName>::s_element = 0x9041;
template<>
DATA_API const std::string_view Attribute<Keyword::ReceiveCoilManufacturerName>::s_name =
    "Receive Coil Manufacturer Name";
template<>
DATA_API const VR Attribute<Keyword::ReceiveCoilManufacturerName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ReceiveCoilManufacturerName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRReceiveCoilSequence>::s_keyword = Keyword::MRReceiveCoilSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRReceiveCoilSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRReceiveCoilSequence>::s_element = 0x9042;
template<>
DATA_API const std::string_view Attribute<Keyword::MRReceiveCoilSequence>::s_name = "MR Receive Coil Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRReceiveCoilSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRReceiveCoilSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReceiveCoilType>::s_keyword = Keyword::ReceiveCoilType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReceiveCoilType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReceiveCoilType>::s_element = 0x9043;
template<>
DATA_API const std::string_view Attribute<Keyword::ReceiveCoilType>::s_name = "Receive Coil Type";
template<>
DATA_API const VR Attribute<Keyword::ReceiveCoilType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ReceiveCoilType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::QuadratureReceiveCoil>::s_keyword = Keyword::QuadratureReceiveCoil;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QuadratureReceiveCoil>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QuadratureReceiveCoil>::s_element = 0x9044;
template<>
DATA_API const std::string_view Attribute<Keyword::QuadratureReceiveCoil>::s_name = "Quadrature Receive Coil";
template<>
DATA_API const VR Attribute<Keyword::QuadratureReceiveCoil>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::QuadratureReceiveCoil>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultiCoilDefinitionSequence>::s_keyword =
    Keyword::MultiCoilDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiCoilDefinitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiCoilDefinitionSequence>::s_element = 0x9045;
template<>
DATA_API const std::string_view Attribute<Keyword::MultiCoilDefinitionSequence>::s_name =
    "Multi-Coil Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultiCoilDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultiCoilDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultiCoilConfiguration>::s_keyword = Keyword::MultiCoilConfiguration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiCoilConfiguration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiCoilConfiguration>::s_element = 0x9046;
template<>
DATA_API const std::string_view Attribute<Keyword::MultiCoilConfiguration>::s_name = "Multi-Coil Configuration";
template<>
DATA_API const VR Attribute<Keyword::MultiCoilConfiguration>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::MultiCoilConfiguration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRTransmitCoilSequence>::s_keyword = Keyword::MRTransmitCoilSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRTransmitCoilSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRTransmitCoilSequence>::s_element = 0x9049;
template<>
DATA_API const std::string_view Attribute<Keyword::MRTransmitCoilSequence>::s_name = "MR Transmit Coil Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRTransmitCoilSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRTransmitCoilSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransmitCoilManufacturerName>::s_keyword =
    Keyword::TransmitCoilManufacturerName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitCoilManufacturerName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitCoilManufacturerName>::s_element = 0x9050;
template<>
DATA_API const std::string_view Attribute<Keyword::TransmitCoilManufacturerName>::s_name =
    "Transmit Coil Manufacturer Name";
template<>
DATA_API const VR Attribute<Keyword::TransmitCoilManufacturerName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::TransmitCoilManufacturerName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransmitCoilType>::s_keyword = Keyword::TransmitCoilType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitCoilType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitCoilType>::s_element = 0x9051;
template<>
DATA_API const std::string_view Attribute<Keyword::TransmitCoilType>::s_name = "Transmit Coil Type";
template<>
DATA_API const VR Attribute<Keyword::TransmitCoilType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TransmitCoilType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRAcquisitionFrequencyEncodingSteps>::s_keyword =
    Keyword::MRAcquisitionFrequencyEncodingSteps;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionFrequencyEncodingSteps>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionFrequencyEncodingSteps>::s_element = 0x9058;
template<>
DATA_API const std::string_view Attribute<Keyword::MRAcquisitionFrequencyEncodingSteps>::s_name =
    "MR Acquisition Frequency Encoding Steps";
template<>
DATA_API const VR Attribute<Keyword::MRAcquisitionFrequencyEncodingSteps>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MRAcquisitionFrequencyEncodingSteps>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::KSpaceFiltering>::s_keyword = Keyword::KSpaceFiltering;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KSpaceFiltering>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KSpaceFiltering>::s_element = 0x9064;
template<>
DATA_API const std::string_view Attribute<Keyword::KSpaceFiltering>::s_name = "k-space Filtering";
template<>
DATA_API const VR Attribute<Keyword::KSpaceFiltering>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::KSpaceFiltering>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelReductionFactorInPlane>::s_keyword =
    Keyword::ParallelReductionFactorInPlane;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelReductionFactorInPlane>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelReductionFactorInPlane>::s_element = 0x9069;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelReductionFactorInPlane>::s_name =
    "Parallel Reduction Factor In-plane";
template<>
DATA_API const VR Attribute<Keyword::ParallelReductionFactorInPlane>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ParallelReductionFactorInPlane>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacRRIntervalSpecified>::s_keyword = Keyword::CardiacRRIntervalSpecified;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacRRIntervalSpecified>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacRRIntervalSpecified>::s_element = 0x9070;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacRRIntervalSpecified>::s_name =
    "Cardiac R-R Interval Specified";
template<>
DATA_API const VR Attribute<Keyword::CardiacRRIntervalSpecified>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::CardiacRRIntervalSpecified>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDuration>::s_keyword = Keyword::AcquisitionDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDuration>::s_element = 0x9073;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDuration>::s_name = "Acquisition Duration";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDuration>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameAcquisitionDateTime>::s_keyword = Keyword::FrameAcquisitionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionDateTime>::s_element = 0x9074;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameAcquisitionDateTime>::s_name = "Frame Acquisition DateTime";
template<>
DATA_API const VR Attribute<Keyword::FrameAcquisitionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::FrameAcquisitionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DiffusionDirectionality>::s_keyword = Keyword::DiffusionDirectionality;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionDirectionality>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionDirectionality>::s_element = 0x9075;
template<>
DATA_API const std::string_view Attribute<Keyword::DiffusionDirectionality>::s_name = "Diffusion Directionality";
template<>
DATA_API const VR Attribute<Keyword::DiffusionDirectionality>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DiffusionDirectionality>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DiffusionGradientDirectionSequence>::s_keyword =
    Keyword::DiffusionGradientDirectionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionGradientDirectionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionGradientDirectionSequence>::s_element = 0x9076;
template<>
DATA_API const std::string_view Attribute<Keyword::DiffusionGradientDirectionSequence>::s_name =
    "Diffusion Gradient Direction Sequence";
template<>
DATA_API const VR Attribute<Keyword::DiffusionGradientDirectionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DiffusionGradientDirectionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelAcquisition>::s_keyword = Keyword::ParallelAcquisition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelAcquisition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelAcquisition>::s_element = 0x9077;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelAcquisition>::s_name = "Parallel Acquisition";
template<>
DATA_API const VR Attribute<Keyword::ParallelAcquisition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ParallelAcquisition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelAcquisitionTechnique>::s_keyword =
    Keyword::ParallelAcquisitionTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelAcquisitionTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelAcquisitionTechnique>::s_element = 0x9078;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelAcquisitionTechnique>::s_name =
    "Parallel Acquisition technique";
template<>
DATA_API const VR Attribute<Keyword::ParallelAcquisitionTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ParallelAcquisitionTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InversionTimes>::s_keyword = Keyword::InversionTimes;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InversionTimes>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InversionTimes>::s_element = 0x9079;
template<>
DATA_API const std::string_view Attribute<Keyword::InversionTimes>::s_name = "Inversion Times";
template<>
DATA_API const VR Attribute<Keyword::InversionTimes>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::InversionTimes>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::MetaboliteMapDescription>::s_keyword = Keyword::MetaboliteMapDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MetaboliteMapDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MetaboliteMapDescription>::s_element = 0x9080;
template<>
DATA_API const std::string_view Attribute<Keyword::MetaboliteMapDescription>::s_name = "Metabolite Map Description";
template<>
DATA_API const VR Attribute<Keyword::MetaboliteMapDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::MetaboliteMapDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PartialFourier>::s_keyword = Keyword::PartialFourier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialFourier>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialFourier>::s_element = 0x9081;
template<>
DATA_API const std::string_view Attribute<Keyword::PartialFourier>::s_name = "Partial Fourier";
template<>
DATA_API const VR Attribute<Keyword::PartialFourier>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PartialFourier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EffectiveEchoTime>::s_keyword = Keyword::EffectiveEchoTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveEchoTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveEchoTime>::s_element = 0x9082;
template<>
DATA_API const std::string_view Attribute<Keyword::EffectiveEchoTime>::s_name = "Effective Echo Time";
template<>
DATA_API const VR Attribute<Keyword::EffectiveEchoTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::EffectiveEchoTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MetaboliteMapCodeSequence>::s_keyword = Keyword::MetaboliteMapCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MetaboliteMapCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MetaboliteMapCodeSequence>::s_element = 0x9083;
template<>
DATA_API const std::string_view Attribute<Keyword::MetaboliteMapCodeSequence>::s_name = "Metabolite Map Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::MetaboliteMapCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MetaboliteMapCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ChemicalShiftSequence>::s_keyword = Keyword::ChemicalShiftSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChemicalShiftSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChemicalShiftSequence>::s_element = 0x9084;
template<>
DATA_API const std::string_view Attribute<Keyword::ChemicalShiftSequence>::s_name = "Chemical Shift Sequence";
template<>
DATA_API const VR Attribute<Keyword::ChemicalShiftSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ChemicalShiftSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacSignalSource>::s_keyword = Keyword::CardiacSignalSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacSignalSource>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacSignalSource>::s_element = 0x9085;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacSignalSource>::s_name = "Cardiac Signal Source";
template<>
DATA_API const VR Attribute<Keyword::CardiacSignalSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CardiacSignalSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DiffusionBValue>::s_keyword = Keyword::DiffusionBValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionBValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionBValue>::s_element = 0x9087;
template<>
DATA_API const std::string_view Attribute<Keyword::DiffusionBValue>::s_name = "Diffusion b-value";
template<>
DATA_API const VR Attribute<Keyword::DiffusionBValue>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DiffusionBValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VelocityEncodingDirection>::s_keyword = Keyword::VelocityEncodingDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingDirection>::s_element = 0x9090;
template<>
DATA_API const std::string_view Attribute<Keyword::VelocityEncodingDirection>::s_name = "Velocity Encoding Direction";
template<>
DATA_API const VR Attribute<Keyword::VelocityEncodingDirection>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::VelocityEncodingDirection>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::VelocityEncodingMinimumValue>::s_keyword =
    Keyword::VelocityEncodingMinimumValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingMinimumValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingMinimumValue>::s_element = 0x9091;
template<>
DATA_API const std::string_view Attribute<Keyword::VelocityEncodingMinimumValue>::s_name =
    "Velocity Encoding Minimum Value";
template<>
DATA_API const VR Attribute<Keyword::VelocityEncodingMinimumValue>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::VelocityEncodingMinimumValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VelocityEncodingAcquisitionSequence>::s_keyword =
    Keyword::VelocityEncodingAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingAcquisitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingAcquisitionSequence>::s_element = 0x9092;
template<>
DATA_API const std::string_view Attribute<Keyword::VelocityEncodingAcquisitionSequence>::s_name =
    "Velocity Encoding Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::VelocityEncodingAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::VelocityEncodingAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfKSpaceTrajectories>::s_keyword = Keyword::NumberOfKSpaceTrajectories;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfKSpaceTrajectories>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfKSpaceTrajectories>::s_element = 0x9093;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfKSpaceTrajectories>::s_name =
    "Number of k-Space Trajectories";
template<>
DATA_API const VR Attribute<Keyword::NumberOfKSpaceTrajectories>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfKSpaceTrajectories>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CoverageOfKSpace>::s_keyword = Keyword::CoverageOfKSpace;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CoverageOfKSpace>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CoverageOfKSpace>::s_element = 0x9094;
template<>
DATA_API const std::string_view Attribute<Keyword::CoverageOfKSpace>::s_name = "Coverage of k-Space";
template<>
DATA_API const VR Attribute<Keyword::CoverageOfKSpace>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CoverageOfKSpace>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransmitterFrequency>::s_keyword = Keyword::TransmitterFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitterFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransmitterFrequency>::s_element = 0x9098;
template<>
DATA_API const std::string_view Attribute<Keyword::TransmitterFrequency>::s_name = "Transmitter Frequency";
template<>
DATA_API const VR Attribute<Keyword::TransmitterFrequency>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TransmitterFrequency>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ResonantNucleus>::s_keyword = Keyword::ResonantNucleus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResonantNucleus>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ResonantNucleus>::s_element = 0x9100;
template<>
DATA_API const std::string_view Attribute<Keyword::ResonantNucleus>::s_name = "Resonant Nucleus";
template<>
DATA_API const VR Attribute<Keyword::ResonantNucleus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ResonantNucleus>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::SlabThickness>::s_keyword = Keyword::SlabThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SlabThickness>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SlabThickness>::s_element = 0x9104;
template<>
DATA_API const std::string_view Attribute<Keyword::SlabThickness>::s_name = "Slab Thickness";
template<>
DATA_API const VR Attribute<Keyword::SlabThickness>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SlabThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SlabOrientation>::s_keyword = Keyword::SlabOrientation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SlabOrientation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SlabOrientation>::s_element = 0x9105;
template<>
DATA_API const std::string_view Attribute<Keyword::SlabOrientation>::s_name = "Slab Orientation";
template<>
DATA_API const VR Attribute<Keyword::SlabOrientation>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SlabOrientation>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::MidSlabPosition>::s_keyword = Keyword::MidSlabPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MidSlabPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MidSlabPosition>::s_element = 0x9106;
template<>
DATA_API const std::string_view Attribute<Keyword::MidSlabPosition>::s_name = "Mid Slab Position";
template<>
DATA_API const VR Attribute<Keyword::MidSlabPosition>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::MidSlabPosition>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::MRSpatialSaturationSequence>::s_keyword =
    Keyword::MRSpatialSaturationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRSpatialSaturationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRSpatialSaturationSequence>::s_element = 0x9107;
template<>
DATA_API const std::string_view Attribute<Keyword::MRSpatialSaturationSequence>::s_name =
    "MR Spatial Saturation Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRSpatialSaturationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRSpatialSaturationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRTimingAndRelatedParametersSequence>::s_keyword =
    Keyword::MRTimingAndRelatedParametersSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRTimingAndRelatedParametersSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRTimingAndRelatedParametersSequence>::s_element = 0x9112;
template<>
DATA_API const std::string_view Attribute<Keyword::MRTimingAndRelatedParametersSequence>::s_name =
    "MR Timing and Related Parameters Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRTimingAndRelatedParametersSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRTimingAndRelatedParametersSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MREchoSequence>::s_keyword = Keyword::MREchoSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MREchoSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MREchoSequence>::s_element = 0x9114;
template<>
DATA_API const std::string_view Attribute<Keyword::MREchoSequence>::s_name = "MR Echo Sequence";
template<>
DATA_API const VR Attribute<Keyword::MREchoSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MREchoSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRModifierSequence>::s_keyword = Keyword::MRModifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRModifierSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRModifierSequence>::s_element = 0x9115;
template<>
DATA_API const std::string_view Attribute<Keyword::MRModifierSequence>::s_name = "MR Modifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRModifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRModifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRDiffusionSequence>::s_keyword = Keyword::MRDiffusionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRDiffusionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRDiffusionSequence>::s_element = 0x9117;
template<>
DATA_API const std::string_view Attribute<Keyword::MRDiffusionSequence>::s_name = "MR Diffusion Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRDiffusionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRDiffusionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacSynchronizationSequence>::s_keyword =
    Keyword::CardiacSynchronizationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacSynchronizationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacSynchronizationSequence>::s_element = 0x9118;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacSynchronizationSequence>::s_name =
    "Cardiac Synchronization Sequence";
template<>
DATA_API const VR Attribute<Keyword::CardiacSynchronizationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CardiacSynchronizationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRAveragesSequence>::s_keyword = Keyword::MRAveragesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAveragesSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAveragesSequence>::s_element = 0x9119;
template<>
DATA_API const std::string_view Attribute<Keyword::MRAveragesSequence>::s_name = "MR Averages Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRAveragesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRAveragesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRFOVGeometrySequence>::s_keyword = Keyword::MRFOVGeometrySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRFOVGeometrySequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRFOVGeometrySequence>::s_element = 0x9125;
template<>
DATA_API const std::string_view Attribute<Keyword::MRFOVGeometrySequence>::s_name = "MR FOV/Geometry Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRFOVGeometrySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRFOVGeometrySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DiffusionAnisotropyType>::s_keyword = Keyword::DiffusionAnisotropyType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionAnisotropyType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionAnisotropyType>::s_element = 0x9147;
template<>
DATA_API const std::string_view Attribute<Keyword::DiffusionAnisotropyType>::s_name = "Diffusion Anisotropy Type";
template<>
DATA_API const VR Attribute<Keyword::DiffusionAnisotropyType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DiffusionAnisotropyType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameReferenceDateTime>::s_keyword = Keyword::FrameReferenceDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameReferenceDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameReferenceDateTime>::s_element = 0x9151;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameReferenceDateTime>::s_name = "Frame Reference DateTime";
template<>
DATA_API const VR Attribute<Keyword::FrameReferenceDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::FrameReferenceDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRMetaboliteMapSequence>::s_keyword = Keyword::MRMetaboliteMapSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRMetaboliteMapSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRMetaboliteMapSequence>::s_element = 0x9152;
template<>
DATA_API const std::string_view Attribute<Keyword::MRMetaboliteMapSequence>::s_name = "MR Metabolite Map Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRMetaboliteMapSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRMetaboliteMapSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelReductionFactorOutOfPlane>::s_keyword =
    Keyword::ParallelReductionFactorOutOfPlane;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelReductionFactorOutOfPlane>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelReductionFactorOutOfPlane>::s_element = 0x9155;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelReductionFactorOutOfPlane>::s_name =
    "Parallel Reduction Factor out-of-plane";
template<>
DATA_API const VR Attribute<Keyword::ParallelReductionFactorOutOfPlane>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ParallelReductionFactorOutOfPlane>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelReductionFactorSecondInPlane>::s_keyword =
    Keyword::ParallelReductionFactorSecondInPlane;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelReductionFactorSecondInPlane>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelReductionFactorSecondInPlane>::s_element = 0x9168;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelReductionFactorSecondInPlane>::s_name =
    "Parallel Reduction Factor Second In-plane";
template<>
DATA_API const VR Attribute<Keyword::ParallelReductionFactorSecondInPlane>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ParallelReductionFactorSecondInPlane>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacBeatRejectionTechnique>::s_keyword =
    Keyword::CardiacBeatRejectionTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacBeatRejectionTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacBeatRejectionTechnique>::s_element = 0x9169;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacBeatRejectionTechnique>::s_name =
    "Cardiac Beat Rejection technique";
template<>
DATA_API const VR Attribute<Keyword::CardiacBeatRejectionTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CardiacBeatRejectionTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratoryMotionCompensationTechnique>::s_keyword =
    Keyword::RespiratoryMotionCompensationTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryMotionCompensationTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryMotionCompensationTechnique>::s_element = 0x9170;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratoryMotionCompensationTechnique>::s_name =
    "Respiratory Motion Compensation technique";
template<>
DATA_API const VR Attribute<Keyword::RespiratoryMotionCompensationTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RespiratoryMotionCompensationTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratorySignalSource>::s_keyword = Keyword::RespiratorySignalSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratorySignalSource>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratorySignalSource>::s_element = 0x9171;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratorySignalSource>::s_name = "Respiratory Signal Source";
template<>
DATA_API const VR Attribute<Keyword::RespiratorySignalSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RespiratorySignalSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BulkMotionCompensationTechnique>::s_keyword =
    Keyword::BulkMotionCompensationTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BulkMotionCompensationTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BulkMotionCompensationTechnique>::s_element = 0x9172;
template<>
DATA_API const std::string_view Attribute<Keyword::BulkMotionCompensationTechnique>::s_name =
    "Bulk Motion Compensation technique";
template<>
DATA_API const VR Attribute<Keyword::BulkMotionCompensationTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BulkMotionCompensationTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BulkMotionSignalSource>::s_keyword = Keyword::BulkMotionSignalSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BulkMotionSignalSource>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BulkMotionSignalSource>::s_element = 0x9173;
template<>
DATA_API const std::string_view Attribute<Keyword::BulkMotionSignalSource>::s_name = "Bulk Motion Signal Source";
template<>
DATA_API const VR Attribute<Keyword::BulkMotionSignalSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BulkMotionSignalSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicableSafetyStandardAgency>::s_keyword =
    Keyword::ApplicableSafetyStandardAgency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicableSafetyStandardAgency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicableSafetyStandardAgency>::s_element = 0x9174;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicableSafetyStandardAgency>::s_name =
    "Applicable Safety Standard Agency";
template<>
DATA_API const VR Attribute<Keyword::ApplicableSafetyStandardAgency>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ApplicableSafetyStandardAgency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicableSafetyStandardDescription>::s_keyword =
    Keyword::ApplicableSafetyStandardDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicableSafetyStandardDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicableSafetyStandardDescription>::s_element = 0x9175;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicableSafetyStandardDescription>::s_name =
    "Applicable Safety Standard Description";
template<>
DATA_API const VR Attribute<Keyword::ApplicableSafetyStandardDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ApplicableSafetyStandardDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OperatingModeSequence>::s_keyword = Keyword::OperatingModeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OperatingModeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OperatingModeSequence>::s_element = 0x9176;
template<>
DATA_API const std::string_view Attribute<Keyword::OperatingModeSequence>::s_name = "Operating Mode Sequence";
template<>
DATA_API const VR Attribute<Keyword::OperatingModeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OperatingModeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GradientOutputType>::s_keyword = Keyword::GradientOutputType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GradientOutputType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GradientOutputType>::s_element = 0x9180;
template<>
DATA_API const std::string_view Attribute<Keyword::GradientOutputType>::s_name = "Gradient Output Type";
template<>
DATA_API const VR Attribute<Keyword::GradientOutputType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GradientOutputType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GradientOutput>::s_keyword = Keyword::GradientOutput;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GradientOutput>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GradientOutput>::s_element = 0x9182;
template<>
DATA_API const std::string_view Attribute<Keyword::GradientOutput>::s_name = "Gradient Output";
template<>
DATA_API const VR Attribute<Keyword::GradientOutput>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::GradientOutput>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlowCompensationDirection>::s_keyword = Keyword::FlowCompensationDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlowCompensationDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlowCompensationDirection>::s_element = 0x9183;
template<>
DATA_API const std::string_view Attribute<Keyword::FlowCompensationDirection>::s_name = "Flow Compensation Direction";
template<>
DATA_API const VR Attribute<Keyword::FlowCompensationDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FlowCompensationDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TaggingDelay>::s_keyword = Keyword::TaggingDelay;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TaggingDelay>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TaggingDelay>::s_element = 0x9184;
template<>
DATA_API const std::string_view Attribute<Keyword::TaggingDelay>::s_name = "Tagging Delay";
template<>
DATA_API const VR Attribute<Keyword::TaggingDelay>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TaggingDelay>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRVelocityEncodingSequence>::s_keyword = Keyword::MRVelocityEncodingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRVelocityEncodingSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRVelocityEncodingSequence>::s_element = 0x9197;
template<>
DATA_API const std::string_view Attribute<Keyword::MRVelocityEncodingSequence>::s_name =
    "MR Velocity Encoding Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRVelocityEncodingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRVelocityEncodingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratoryCyclePosition>::s_keyword = Keyword::RespiratoryCyclePosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryCyclePosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryCyclePosition>::s_element = 0x9214;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratoryCyclePosition>::s_name = "Respiratory Cycle Position";
template<>
DATA_API const VR Attribute<Keyword::RespiratoryCyclePosition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RespiratoryCyclePosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VelocityEncodingMaximumValue>::s_keyword =
    Keyword::VelocityEncodingMaximumValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingMaximumValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VelocityEncodingMaximumValue>::s_element = 0x9217;
template<>
DATA_API const std::string_view Attribute<Keyword::VelocityEncodingMaximumValue>::s_name =
    "Velocity Encoding Maximum Value";
template<>
DATA_API const VR Attribute<Keyword::VelocityEncodingMaximumValue>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::VelocityEncodingMaximumValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TagSpacingSecondDimension>::s_keyword = Keyword::TagSpacingSecondDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagSpacingSecondDimension>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagSpacingSecondDimension>::s_element = 0x9218;
template<>
DATA_API const std::string_view Attribute<Keyword::TagSpacingSecondDimension>::s_name = "Tag Spacing Second Dimension";
template<>
DATA_API const VR Attribute<Keyword::TagSpacingSecondDimension>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TagSpacingSecondDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TagAngleSecondAxis>::s_keyword = Keyword::TagAngleSecondAxis;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagAngleSecondAxis>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TagAngleSecondAxis>::s_element = 0x9219;
template<>
DATA_API const std::string_view Attribute<Keyword::TagAngleSecondAxis>::s_name = "Tag Angle Second Axis";
template<>
DATA_API const VR Attribute<Keyword::TagAngleSecondAxis>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::TagAngleSecondAxis>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameAcquisitionDuration>::s_keyword = Keyword::FrameAcquisitionDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionDuration>::s_element = 0x9220;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameAcquisitionDuration>::s_name = "Frame Acquisition Duration";
template<>
DATA_API const VR Attribute<Keyword::FrameAcquisitionDuration>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::FrameAcquisitionDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRImageFrameTypeSequence>::s_keyword = Keyword::MRImageFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRImageFrameTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRImageFrameTypeSequence>::s_element = 0x9226;
template<>
DATA_API const std::string_view Attribute<Keyword::MRImageFrameTypeSequence>::s_name = "MR Image Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRImageFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRImageFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>::s_keyword =
    Keyword::MRAcquisitionPhaseEncodingStepsInPlane;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>::s_element = 0x9231;
template<>
DATA_API const std::string_view Attribute<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>::s_name =
    "MR Acquisition Phase Encoding Steps in-plane";
template<>
DATA_API const VR Attribute<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>::s_keyword =
    Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>::s_element = 0x9232;
template<>
DATA_API const std::string_view Attribute<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>::s_name =
    "MR Acquisition Phase Encoding Steps out-of-plane";
template<>
DATA_API const VR Attribute<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CardiacCyclePosition>::s_keyword = Keyword::CardiacCyclePosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacCyclePosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CardiacCyclePosition>::s_element = 0x9236;
template<>
DATA_API const std::string_view Attribute<Keyword::CardiacCyclePosition>::s_name = "Cardiac Cycle Position";
template<>
DATA_API const VR Attribute<Keyword::CardiacCyclePosition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CardiacCyclePosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecificAbsorptionRateSequence>::s_keyword =
    Keyword::SpecificAbsorptionRateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecificAbsorptionRateSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecificAbsorptionRateSequence>::s_element = 0x9239;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecificAbsorptionRateSequence>::s_name =
    "Specific Absorption Rate Sequence";
template<>
DATA_API const VR Attribute<Keyword::SpecificAbsorptionRateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SpecificAbsorptionRateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RFEchoTrainLength>::s_keyword = Keyword::RFEchoTrainLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RFEchoTrainLength>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RFEchoTrainLength>::s_element = 0x9240;
template<>
DATA_API const std::string_view Attribute<Keyword::RFEchoTrainLength>::s_name = "RF Echo Train Length";
template<>
DATA_API const VR Attribute<Keyword::RFEchoTrainLength>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RFEchoTrainLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GradientEchoTrainLength>::s_keyword = Keyword::GradientEchoTrainLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GradientEchoTrainLength>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GradientEchoTrainLength>::s_element = 0x9241;
template<>
DATA_API const std::string_view Attribute<Keyword::GradientEchoTrainLength>::s_name = "Gradient Echo Train Length";
template<>
DATA_API const VR Attribute<Keyword::GradientEchoTrainLength>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::GradientEchoTrainLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ArterialSpinLabelingContrast>::s_keyword =
    Keyword::ArterialSpinLabelingContrast;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ArterialSpinLabelingContrast>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ArterialSpinLabelingContrast>::s_element = 0x9250;
template<>
DATA_API const std::string_view Attribute<Keyword::ArterialSpinLabelingContrast>::s_name =
    "Arterial Spin Labeling Contrast";
template<>
DATA_API const VR Attribute<Keyword::ArterialSpinLabelingContrast>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ArterialSpinLabelingContrast>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MRArterialSpinLabelingSequence>::s_keyword =
    Keyword::MRArterialSpinLabelingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRArterialSpinLabelingSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MRArterialSpinLabelingSequence>::s_element = 0x9251;
template<>
DATA_API const std::string_view Attribute<Keyword::MRArterialSpinLabelingSequence>::s_name =
    "MR Arterial Spin Labeling Sequence";
template<>
DATA_API const VR Attribute<Keyword::MRArterialSpinLabelingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MRArterialSpinLabelingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLTechniqueDescription>::s_keyword = Keyword::ASLTechniqueDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLTechniqueDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLTechniqueDescription>::s_element = 0x9252;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLTechniqueDescription>::s_name = "ASL technique Description";
template<>
DATA_API const VR Attribute<Keyword::ASLTechniqueDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ASLTechniqueDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLContext>::s_keyword = Keyword::ASLContext;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLContext>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLContext>::s_element = 0x9257;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLContext>::s_name = "ASL Context";
template<>
DATA_API const VR Attribute<Keyword::ASLContext>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ASLContext>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLCrusherFlag>::s_keyword = Keyword::ASLCrusherFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLCrusherFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLCrusherFlag>::s_element = 0x9259;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLCrusherFlag>::s_name = "ASL Crusher Flag";
template<>
DATA_API const VR Attribute<Keyword::ASLCrusherFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ASLCrusherFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLCrusherFlowLimit>::s_keyword = Keyword::ASLCrusherFlowLimit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLCrusherFlowLimit>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLCrusherFlowLimit>::s_element = 0x925A;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLCrusherFlowLimit>::s_name = "ASL Crusher Flow Limit";
template<>
DATA_API const VR Attribute<Keyword::ASLCrusherFlowLimit>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ASLCrusherFlowLimit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLCrusherDescription>::s_keyword = Keyword::ASLCrusherDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLCrusherDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLCrusherDescription>::s_element = 0x925B;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLCrusherDescription>::s_name = "ASL Crusher Description";
template<>
DATA_API const VR Attribute<Keyword::ASLCrusherDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ASLCrusherDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLBolusCutoffFlag>::s_keyword = Keyword::ASLBolusCutoffFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLBolusCutoffFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLBolusCutoffFlag>::s_element = 0x925C;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLBolusCutoffFlag>::s_name = "ASL Bolus Cut-off Flag";
template<>
DATA_API const VR Attribute<Keyword::ASLBolusCutoffFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ASLBolusCutoffFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLBolusCutoffTimingSequence>::s_keyword =
    Keyword::ASLBolusCutoffTimingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLBolusCutoffTimingSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLBolusCutoffTimingSequence>::s_element = 0x925D;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLBolusCutoffTimingSequence>::s_name =
    "ASL Bolus Cut-off Timing Sequence";
template<>
DATA_API const VR Attribute<Keyword::ASLBolusCutoffTimingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ASLBolusCutoffTimingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ASLSlabSequence>::s_keyword = Keyword::ASLSlabSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLSlabSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ASLSlabSequence>::s_element = 0x9260;
template<>
DATA_API const std::string_view Attribute<Keyword::ASLSlabSequence>::s_name = "ASL Slab Sequence";
template<>
DATA_API const VR Attribute<Keyword::ASLSlabSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ASLSlabSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTAcquisitionTypeSequence>::s_keyword = Keyword::CTAcquisitionTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTAcquisitionTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTAcquisitionTypeSequence>::s_element = 0x9301;
template<>
DATA_API const std::string_view Attribute<Keyword::CTAcquisitionTypeSequence>::s_name = "CT Acquisition Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTAcquisitionTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTAcquisitionTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionType>::s_keyword = Keyword::AcquisitionType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionType>::s_element = 0x9302;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionType>::s_name = "Acquisition Type";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TubeAngle>::s_keyword = Keyword::TubeAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TubeAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TubeAngle>::s_element = 0x9303;
template<>
DATA_API const std::string_view Attribute<Keyword::TubeAngle>::s_name = "Tube Angle";
template<>
DATA_API const VR Attribute<Keyword::TubeAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TubeAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTAcquisitionDetailsSequence>::s_keyword =
    Keyword::CTAcquisitionDetailsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTAcquisitionDetailsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTAcquisitionDetailsSequence>::s_element = 0x9304;
template<>
DATA_API const std::string_view Attribute<Keyword::CTAcquisitionDetailsSequence>::s_name =
    "CT Acquisition Details Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTAcquisitionDetailsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTAcquisitionDetailsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RevolutionTime>::s_keyword = Keyword::RevolutionTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RevolutionTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RevolutionTime>::s_element = 0x9305;
template<>
DATA_API const std::string_view Attribute<Keyword::RevolutionTime>::s_name = "Revolution Time";
template<>
DATA_API const VR Attribute<Keyword::RevolutionTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RevolutionTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SingleCollimationWidth>::s_keyword = Keyword::SingleCollimationWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SingleCollimationWidth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SingleCollimationWidth>::s_element = 0x9306;
template<>
DATA_API const std::string_view Attribute<Keyword::SingleCollimationWidth>::s_name = "Single Collimation Width";
template<>
DATA_API const VR Attribute<Keyword::SingleCollimationWidth>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SingleCollimationWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TotalCollimationWidth>::s_keyword = Keyword::TotalCollimationWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalCollimationWidth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalCollimationWidth>::s_element = 0x9307;
template<>
DATA_API const std::string_view Attribute<Keyword::TotalCollimationWidth>::s_name = "Total Collimation Width";
template<>
DATA_API const VR Attribute<Keyword::TotalCollimationWidth>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TotalCollimationWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTTableDynamicsSequence>::s_keyword = Keyword::CTTableDynamicsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTTableDynamicsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTTableDynamicsSequence>::s_element = 0x9308;
template<>
DATA_API const std::string_view Attribute<Keyword::CTTableDynamicsSequence>::s_name = "CT Table Dynamics Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTTableDynamicsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTTableDynamicsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableSpeed>::s_keyword = Keyword::TableSpeed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableSpeed>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableSpeed>::s_element = 0x9309;
template<>
DATA_API const std::string_view Attribute<Keyword::TableSpeed>::s_name = "Table Speed";
template<>
DATA_API const VR Attribute<Keyword::TableSpeed>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TableSpeed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableFeedPerRotation>::s_keyword = Keyword::TableFeedPerRotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableFeedPerRotation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableFeedPerRotation>::s_element = 0x9310;
template<>
DATA_API const std::string_view Attribute<Keyword::TableFeedPerRotation>::s_name = "Table Feed per Rotation";
template<>
DATA_API const VR Attribute<Keyword::TableFeedPerRotation>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TableFeedPerRotation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpiralPitchFactor>::s_keyword = Keyword::SpiralPitchFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpiralPitchFactor>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpiralPitchFactor>::s_element = 0x9311;
template<>
DATA_API const std::string_view Attribute<Keyword::SpiralPitchFactor>::s_name = "Spiral Pitch Factor";
template<>
DATA_API const VR Attribute<Keyword::SpiralPitchFactor>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SpiralPitchFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTGeometrySequence>::s_keyword = Keyword::CTGeometrySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTGeometrySequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTGeometrySequence>::s_element = 0x9312;
template<>
DATA_API const std::string_view Attribute<Keyword::CTGeometrySequence>::s_name = "CT Geometry Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTGeometrySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTGeometrySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataCollectionCenterPatient>::s_keyword =
    Keyword::DataCollectionCenterPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataCollectionCenterPatient>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataCollectionCenterPatient>::s_element = 0x9313;
template<>
DATA_API const std::string_view Attribute<Keyword::DataCollectionCenterPatient>::s_name =
    "Data Collection Center (Patient)";
template<>
DATA_API const VR Attribute<Keyword::DataCollectionCenterPatient>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DataCollectionCenterPatient>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::CTReconstructionSequence>::s_keyword = Keyword::CTReconstructionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTReconstructionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTReconstructionSequence>::s_element = 0x9314;
template<>
DATA_API const std::string_view Attribute<Keyword::CTReconstructionSequence>::s_name = "CT Reconstruction Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTReconstructionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTReconstructionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionAlgorithm>::s_keyword = Keyword::ReconstructionAlgorithm;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionAlgorithm>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionAlgorithm>::s_element = 0x9315;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionAlgorithm>::s_name = "Reconstruction Algorithm";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionAlgorithm>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionAlgorithm>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConvolutionKernelGroup>::s_keyword = Keyword::ConvolutionKernelGroup;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConvolutionKernelGroup>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConvolutionKernelGroup>::s_element = 0x9316;
template<>
DATA_API const std::string_view Attribute<Keyword::ConvolutionKernelGroup>::s_name = "Convolution Kernel Group";
template<>
DATA_API const VR Attribute<Keyword::ConvolutionKernelGroup>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ConvolutionKernelGroup>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionFieldOfView>::s_keyword = Keyword::ReconstructionFieldOfView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionFieldOfView>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionFieldOfView>::s_element = 0x9317;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionFieldOfView>::s_name = "Reconstruction field of view";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionFieldOfView>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionFieldOfView>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionTargetCenterPatient>::s_keyword =
    Keyword::ReconstructionTargetCenterPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionTargetCenterPatient>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionTargetCenterPatient>::s_element = 0x9318;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionTargetCenterPatient>::s_name =
    "Reconstruction Target Center (Patient)";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionTargetCenterPatient>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionTargetCenterPatient>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionAngle>::s_keyword = Keyword::ReconstructionAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionAngle>::s_element = 0x9319;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionAngle>::s_name = "Reconstruction Angle";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageFilter>::s_keyword = Keyword::ImageFilter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageFilter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageFilter>::s_element = 0x9320;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageFilter>::s_name = "Image Filter";
template<>
DATA_API const VR Attribute<Keyword::ImageFilter>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ImageFilter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTExposureSequence>::s_keyword = Keyword::CTExposureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTExposureSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTExposureSequence>::s_element = 0x9321;
template<>
DATA_API const std::string_view Attribute<Keyword::CTExposureSequence>::s_name = "CT Exposure Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTExposureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTExposureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionPixelSpacing>::s_keyword = Keyword::ReconstructionPixelSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionPixelSpacing>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionPixelSpacing>::s_element = 0x9322;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionPixelSpacing>::s_name = "Reconstruction Pixel Spacing";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionPixelSpacing>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionPixelSpacing>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureModulationType>::s_keyword = Keyword::ExposureModulationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureModulationType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureModulationType>::s_element = 0x9323;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureModulationType>::s_name = "Exposure Modulation Type";
template<>
DATA_API const VR Attribute<Keyword::ExposureModulationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ExposureModulationType>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::CTXRayDetailsSequence>::s_keyword = Keyword::CTXRayDetailsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTXRayDetailsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTXRayDetailsSequence>::s_element = 0x9325;
template<>
DATA_API const std::string_view Attribute<Keyword::CTXRayDetailsSequence>::s_name = "CT X-Ray Details Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTXRayDetailsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTXRayDetailsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTPositionSequence>::s_keyword = Keyword::CTPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTPositionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTPositionSequence>::s_element = 0x9326;
template<>
DATA_API const std::string_view Attribute<Keyword::CTPositionSequence>::s_name = "CT Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TablePosition>::s_keyword = Keyword::TablePosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TablePosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TablePosition>::s_element = 0x9327;
template<>
DATA_API const std::string_view Attribute<Keyword::TablePosition>::s_name = "Table Position";
template<>
DATA_API const VR Attribute<Keyword::TablePosition>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TablePosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureTimeInms>::s_keyword = Keyword::ExposureTimeInms;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTimeInms>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureTimeInms>::s_element = 0x9328;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureTimeInms>::s_name = "Exposure Time in ms";
template<>
DATA_API const VR Attribute<Keyword::ExposureTimeInms>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExposureTimeInms>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTImageFrameTypeSequence>::s_keyword = Keyword::CTImageFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTImageFrameTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTImageFrameTypeSequence>::s_element = 0x9329;
template<>
DATA_API const std::string_view Attribute<Keyword::CTImageFrameTypeSequence>::s_name = "CT Image Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTImageFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTImageFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayTubeCurrentInmA>::s_keyword = Keyword::XRayTubeCurrentInmA;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayTubeCurrentInmA>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayTubeCurrentInmA>::s_element = 0x9330;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayTubeCurrentInmA>::s_name = "X-Ray Tube Current in mA";
template<>
DATA_API const VR Attribute<Keyword::XRayTubeCurrentInmA>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::XRayTubeCurrentInmA>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureInmAs>::s_keyword = Keyword::ExposureInmAs;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureInmAs>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureInmAs>::s_element = 0x9332;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureInmAs>::s_name = "Exposure in mAs";
template<>
DATA_API const VR Attribute<Keyword::ExposureInmAs>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExposureInmAs>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConstantVolumeFlag>::s_keyword = Keyword::ConstantVolumeFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConstantVolumeFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConstantVolumeFlag>::s_element = 0x9333;
template<>
DATA_API const std::string_view Attribute<Keyword::ConstantVolumeFlag>::s_name = "Constant Volume Flag";
template<>
DATA_API const VR Attribute<Keyword::ConstantVolumeFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ConstantVolumeFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FluoroscopyFlag>::s_keyword = Keyword::FluoroscopyFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluoroscopyFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluoroscopyFlag>::s_element = 0x9334;
template<>
DATA_API const std::string_view Attribute<Keyword::FluoroscopyFlag>::s_name = "Fluoroscopy Flag";
template<>
DATA_API const VR Attribute<Keyword::FluoroscopyFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FluoroscopyFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceSourceToDataCollectionCenter>::s_keyword =
    Keyword::DistanceSourceToDataCollectionCenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToDataCollectionCenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToDataCollectionCenter>::s_element = 0x9335;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceSourceToDataCollectionCenter>::s_name =
    "Distance Source to Data Collection Center";
template<>
DATA_API const VR Attribute<Keyword::DistanceSourceToDataCollectionCenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DistanceSourceToDataCollectionCenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAgentNumber>::s_keyword = Keyword::ContrastBolusAgentNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentNumber>::s_element = 0x9337;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAgentNumber>::s_name = "Contrast/Bolus Agent Number";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAgentNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAgentNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusIngredientCodeSequence>::s_keyword =
    Keyword::ContrastBolusIngredientCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientCodeSequence>::s_element = 0x9338;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusIngredientCodeSequence>::s_name =
    "Contrast/Bolus Ingredient Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusIngredientCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusIngredientCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastAdministrationProfileSequence>::s_keyword =
    Keyword::ContrastAdministrationProfileSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastAdministrationProfileSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastAdministrationProfileSequence>::s_element = 0x9340;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastAdministrationProfileSequence>::s_name =
    "Contrast Administration Profile Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContrastAdministrationProfileSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContrastAdministrationProfileSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusUsageSequence>::s_keyword = Keyword::ContrastBolusUsageSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusUsageSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusUsageSequence>::s_element = 0x9341;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusUsageSequence>::s_name =
    "Contrast/Bolus Usage Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusUsageSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusUsageSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAgentAdministered>::s_keyword =
    Keyword::ContrastBolusAgentAdministered;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentAdministered>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentAdministered>::s_element = 0x9342;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAgentAdministered>::s_name =
    "Contrast/Bolus Agent Administered";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAgentAdministered>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAgentAdministered>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAgentDetected>::s_keyword = Keyword::ContrastBolusAgentDetected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentDetected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentDetected>::s_element = 0x9343;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAgentDetected>::s_name =
    "Contrast/Bolus Agent Detected";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAgentDetected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAgentDetected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusAgentPhase>::s_keyword = Keyword::ContrastBolusAgentPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentPhase>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusAgentPhase>::s_element = 0x9344;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusAgentPhase>::s_name = "Contrast/Bolus Agent Phase";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusAgentPhase>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusAgentPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTDIvol>::s_keyword = Keyword::CTDIvol;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTDIvol>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTDIvol>::s_element = 0x9345;
template<>
DATA_API const std::string_view Attribute<Keyword::CTDIvol>::s_name = "CTDIvol";
template<>
DATA_API const VR Attribute<Keyword::CTDIvol>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::CTDIvol>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTDIPhantomTypeCodeSequence>::s_keyword =
    Keyword::CTDIPhantomTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTDIPhantomTypeCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTDIPhantomTypeCodeSequence>::s_element = 0x9346;
template<>
DATA_API const std::string_view Attribute<Keyword::CTDIPhantomTypeCodeSequence>::s_name =
    "CTDI Phantom Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTDIPhantomTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTDIPhantomTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CalciumScoringMassFactorPatient>::s_keyword =
    Keyword::CalciumScoringMassFactorPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalciumScoringMassFactorPatient>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalciumScoringMassFactorPatient>::s_element = 0x9351;
template<>
DATA_API const std::string_view Attribute<Keyword::CalciumScoringMassFactorPatient>::s_name =
    "Calcium Scoring Mass Factor Patient";
template<>
DATA_API const VR Attribute<Keyword::CalciumScoringMassFactorPatient>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CalciumScoringMassFactorPatient>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CalciumScoringMassFactorDevice>::s_keyword =
    Keyword::CalciumScoringMassFactorDevice;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalciumScoringMassFactorDevice>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalciumScoringMassFactorDevice>::s_element = 0x9352;
template<>
DATA_API const std::string_view Attribute<Keyword::CalciumScoringMassFactorDevice>::s_name =
    "Calcium Scoring Mass Factor Device";
template<>
DATA_API const VR Attribute<Keyword::CalciumScoringMassFactorDevice>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CalciumScoringMassFactorDevice>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWeightingFactor>::s_keyword = Keyword::EnergyWeightingFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWeightingFactor>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWeightingFactor>::s_element = 0x9353;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWeightingFactor>::s_name = "Energy Weighting Factor";
template<>
DATA_API const VR Attribute<Keyword::EnergyWeightingFactor>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::EnergyWeightingFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CTAdditionalXRaySourceSequence>::s_keyword =
    Keyword::CTAdditionalXRaySourceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTAdditionalXRaySourceSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CTAdditionalXRaySourceSequence>::s_element = 0x9360;
template<>
DATA_API const std::string_view Attribute<Keyword::CTAdditionalXRaySourceSequence>::s_name =
    "CT Additional X-Ray Source Sequence";
template<>
DATA_API const VR Attribute<Keyword::CTAdditionalXRaySourceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CTAdditionalXRaySourceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTAcquisition>::s_keyword = Keyword::MultienergyCTAcquisition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTAcquisition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTAcquisition>::s_element = 0x9361;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTAcquisition>::s_name = "Multi-energy CT Acquisition";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTAcquisition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTAcquisition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTAcquisitionSequence>::s_keyword =
    Keyword::MultienergyCTAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTAcquisitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTAcquisitionSequence>::s_element = 0x9362;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTAcquisitionSequence>::s_name =
    "Multi-energy CT Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTProcessingSequence>::s_keyword =
    Keyword::MultienergyCTProcessingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTProcessingSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTProcessingSequence>::s_element = 0x9363;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTProcessingSequence>::s_name =
    "Multi-energy CT Processing Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTProcessingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTProcessingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTCharacteristicsSequence>::s_keyword =
    Keyword::MultienergyCTCharacteristicsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTCharacteristicsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTCharacteristicsSequence>::s_element = 0x9364;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTCharacteristicsSequence>::s_name =
    "Multi-energy CT Characteristics Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTCharacteristicsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTCharacteristicsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTXRaySourceSequence>::s_keyword =
    Keyword::MultienergyCTXRaySourceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTXRaySourceSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTXRaySourceSequence>::s_element = 0x9365;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTXRaySourceSequence>::s_name =
    "Multi-energy CT X-Ray Source Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTXRaySourceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTXRaySourceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRaySourceIndex>::s_keyword = Keyword::XRaySourceIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceIndex>::s_element = 0x9366;
template<>
DATA_API const std::string_view Attribute<Keyword::XRaySourceIndex>::s_name = "X-Ray Source Index";
template<>
DATA_API const VR Attribute<Keyword::XRaySourceIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::XRaySourceIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRaySourceID>::s_keyword = Keyword::XRaySourceID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceID>::s_element = 0x9367;
template<>
DATA_API const std::string_view Attribute<Keyword::XRaySourceID>::s_name = "X-Ray Source ID";
template<>
DATA_API const VR Attribute<Keyword::XRaySourceID>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::XRaySourceID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergySourceTechnique>::s_keyword = Keyword::MultienergySourceTechnique;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergySourceTechnique>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergySourceTechnique>::s_element = 0x9368;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergySourceTechnique>::s_name =
    "Multi-energy Source technique";
template<>
DATA_API const VR Attribute<Keyword::MultienergySourceTechnique>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MultienergySourceTechnique>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceStartDateTime>::s_keyword = Keyword::SourceStartDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceStartDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceStartDateTime>::s_element = 0x9369;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceStartDateTime>::s_name = "Source Start DateTime";
template<>
DATA_API const VR Attribute<Keyword::SourceStartDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::SourceStartDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceEndDateTime>::s_keyword = Keyword::SourceEndDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceEndDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceEndDateTime>::s_element = 0x936A;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceEndDateTime>::s_name = "Source End DateTime";
template<>
DATA_API const VR Attribute<Keyword::SourceEndDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::SourceEndDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SwitchingPhaseNumber>::s_keyword = Keyword::SwitchingPhaseNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SwitchingPhaseNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SwitchingPhaseNumber>::s_element = 0x936B;
template<>
DATA_API const std::string_view Attribute<Keyword::SwitchingPhaseNumber>::s_name = "Switching Phase Number";
template<>
DATA_API const VR Attribute<Keyword::SwitchingPhaseNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SwitchingPhaseNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SwitchingPhaseNominalDuration>::s_keyword =
    Keyword::SwitchingPhaseNominalDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SwitchingPhaseNominalDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SwitchingPhaseNominalDuration>::s_element = 0x936C;
template<>
DATA_API const std::string_view Attribute<Keyword::SwitchingPhaseNominalDuration>::s_name =
    "Switching Phase Nominal Duration";
template<>
DATA_API const VR Attribute<Keyword::SwitchingPhaseNominalDuration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SwitchingPhaseNominalDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SwitchingPhaseTransitionDuration>::s_keyword =
    Keyword::SwitchingPhaseTransitionDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SwitchingPhaseTransitionDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SwitchingPhaseTransitionDuration>::s_element = 0x936D;
template<>
DATA_API const std::string_view Attribute<Keyword::SwitchingPhaseTransitionDuration>::s_name =
    "Switching Phase Transition Duration";
template<>
DATA_API const VR Attribute<Keyword::SwitchingPhaseTransitionDuration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SwitchingPhaseTransitionDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EffectiveBinEnergy>::s_keyword = Keyword::EffectiveBinEnergy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveBinEnergy>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveBinEnergy>::s_element = 0x936E;
template<>
DATA_API const std::string_view Attribute<Keyword::EffectiveBinEnergy>::s_name = "Effective Bin Energy";
template<>
DATA_API const VR Attribute<Keyword::EffectiveBinEnergy>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EffectiveBinEnergy>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTXRayDetectorSequence>::s_keyword =
    Keyword::MultienergyCTXRayDetectorSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTXRayDetectorSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTXRayDetectorSequence>::s_element = 0x936F;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTXRayDetectorSequence>::s_name =
    "Multi-energy CT X-Ray Detector Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTXRayDetectorSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTXRayDetectorSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayDetectorIndex>::s_keyword = Keyword::XRayDetectorIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayDetectorIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayDetectorIndex>::s_element = 0x9370;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayDetectorIndex>::s_name = "X-Ray Detector Index";
template<>
DATA_API const VR Attribute<Keyword::XRayDetectorIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::XRayDetectorIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayDetectorID>::s_keyword = Keyword::XRayDetectorID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayDetectorID>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayDetectorID>::s_element = 0x9371;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayDetectorID>::s_name = "X-Ray Detector ID";
template<>
DATA_API const VR Attribute<Keyword::XRayDetectorID>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::XRayDetectorID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyDetectorType>::s_keyword = Keyword::MultienergyDetectorType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyDetectorType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyDetectorType>::s_element = 0x9372;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyDetectorType>::s_name = "Multi-energy Detector Type";
template<>
DATA_API const VR Attribute<Keyword::MultienergyDetectorType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MultienergyDetectorType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayDetectorLabel>::s_keyword = Keyword::XRayDetectorLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayDetectorLabel>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayDetectorLabel>::s_element = 0x9373;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayDetectorLabel>::s_name = "X-Ray Detector Label";
template<>
DATA_API const VR Attribute<Keyword::XRayDetectorLabel>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::XRayDetectorLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalMaxEnergy>::s_keyword = Keyword::NominalMaxEnergy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalMaxEnergy>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalMaxEnergy>::s_element = 0x9374;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalMaxEnergy>::s_name = "Nominal Max Energy";
template<>
DATA_API const VR Attribute<Keyword::NominalMaxEnergy>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::NominalMaxEnergy>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalMinEnergy>::s_keyword = Keyword::NominalMinEnergy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalMinEnergy>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalMinEnergy>::s_element = 0x9375;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalMinEnergy>::s_name = "Nominal Min Energy";
template<>
DATA_API const VR Attribute<Keyword::NominalMinEnergy>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::NominalMinEnergy>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedXRayDetectorIndex>::s_keyword =
    Keyword::ReferencedXRayDetectorIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedXRayDetectorIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedXRayDetectorIndex>::s_element = 0x9376;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedXRayDetectorIndex>::s_name =
    "Referenced X-Ray Detector Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedXRayDetectorIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedXRayDetectorIndex>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedXRaySourceIndex>::s_keyword = Keyword::ReferencedXRaySourceIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedXRaySourceIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedXRaySourceIndex>::s_element = 0x9377;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedXRaySourceIndex>::s_name = "Referenced X-Ray Source Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedXRaySourceIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedXRaySourceIndex>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPathIndex>::s_keyword = Keyword::ReferencedPathIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPathIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPathIndex>::s_element = 0x9378;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPathIndex>::s_name = "Referenced Path Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPathIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPathIndex>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTPathSequence>::s_keyword = Keyword::MultienergyCTPathSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTPathSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTPathSequence>::s_element = 0x9379;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTPathSequence>::s_name = "Multi-energy CT Path Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTPathSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTPathSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyCTPathIndex>::s_keyword = Keyword::MultienergyCTPathIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTPathIndex>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyCTPathIndex>::s_element = 0x937A;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyCTPathIndex>::s_name = "Multi-energy CT Path Index";
template<>
DATA_API const VR Attribute<Keyword::MultienergyCTPathIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MultienergyCTPathIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultienergyAcquisitionDescription>::s_keyword =
    Keyword::MultienergyAcquisitionDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyAcquisitionDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultienergyAcquisitionDescription>::s_element = 0x937B;
template<>
DATA_API const std::string_view Attribute<Keyword::MultienergyAcquisitionDescription>::s_name =
    "Multi-energy Acquisition Description";
template<>
DATA_API const VR Attribute<Keyword::MultienergyAcquisitionDescription>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::MultienergyAcquisitionDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MonoenergeticEnergyEquivalent>::s_keyword =
    Keyword::MonoenergeticEnergyEquivalent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MonoenergeticEnergyEquivalent>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MonoenergeticEnergyEquivalent>::s_element = 0x937C;
template<>
DATA_API const std::string_view Attribute<Keyword::MonoenergeticEnergyEquivalent>::s_name =
    "Monoenergetic Energy Equivalent";
template<>
DATA_API const VR Attribute<Keyword::MonoenergeticEnergyEquivalent>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::MonoenergeticEnergyEquivalent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecompositionMethod>::s_keyword = Keyword::DecompositionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionMethod>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionMethod>::s_element = 0x937E;
template<>
DATA_API const std::string_view Attribute<Keyword::DecompositionMethod>::s_name = "Decomposition Method";
template<>
DATA_API const VR Attribute<Keyword::DecompositionMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DecompositionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecompositionDescription>::s_keyword = Keyword::DecompositionDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionDescription>::s_element = 0x937F;
template<>
DATA_API const std::string_view Attribute<Keyword::DecompositionDescription>::s_name = "Decomposition Description";
template<>
DATA_API const VR Attribute<Keyword::DecompositionDescription>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::DecompositionDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecompositionAlgorithmIdentificationSequence>::s_keyword =
    Keyword::DecompositionAlgorithmIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionAlgorithmIdentificationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionAlgorithmIdentificationSequence>::s_element = 0x9380;
template<>
DATA_API const std::string_view Attribute<Keyword::DecompositionAlgorithmIdentificationSequence>::s_name =
    "Decomposition Algorithm Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::DecompositionAlgorithmIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DecompositionAlgorithmIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecompositionMaterialSequence>::s_keyword =
    Keyword::DecompositionMaterialSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionMaterialSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecompositionMaterialSequence>::s_element = 0x9381;
template<>
DATA_API const std::string_view Attribute<Keyword::DecompositionMaterialSequence>::s_name =
    "Decomposition Material Sequence";
template<>
DATA_API const VR Attribute<Keyword::DecompositionMaterialSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DecompositionMaterialSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ProjectionPixelCalibrationSequence>::s_keyword =
    Keyword::ProjectionPixelCalibrationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProjectionPixelCalibrationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProjectionPixelCalibrationSequence>::s_element = 0x9401;
template<>
DATA_API const std::string_view Attribute<Keyword::ProjectionPixelCalibrationSequence>::s_name =
    "Projection Pixel Calibration Sequence";
template<>
DATA_API const VR Attribute<Keyword::ProjectionPixelCalibrationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ProjectionPixelCalibrationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceSourceToIsocenter>::s_keyword = Keyword::DistanceSourceToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToIsocenter>::s_element = 0x9402;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceSourceToIsocenter>::s_name = "Distance Source to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::DistanceSourceToIsocenter>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DistanceSourceToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceObjectToTableTop>::s_keyword = Keyword::DistanceObjectToTableTop;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceObjectToTableTop>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceObjectToTableTop>::s_element = 0x9403;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceObjectToTableTop>::s_name = "Distance Object to Table Top";
template<>
DATA_API const VR Attribute<Keyword::DistanceObjectToTableTop>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DistanceObjectToTableTop>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObjectPixelSpacingInCenterOfBeam>::s_keyword =
    Keyword::ObjectPixelSpacingInCenterOfBeam;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectPixelSpacingInCenterOfBeam>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectPixelSpacingInCenterOfBeam>::s_element = 0x9404;
template<>
DATA_API const std::string_view Attribute<Keyword::ObjectPixelSpacingInCenterOfBeam>::s_name =
    "Object Pixel Spacing in Center of Beam";
template<>
DATA_API const VR Attribute<Keyword::ObjectPixelSpacingInCenterOfBeam>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ObjectPixelSpacingInCenterOfBeam>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerPositionSequence>::s_keyword = Keyword::PositionerPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPositionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPositionSequence>::s_element = 0x9405;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerPositionSequence>::s_name = "Positioner Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::PositionerPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PositionerPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TablePositionSequence>::s_keyword = Keyword::TablePositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TablePositionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TablePositionSequence>::s_element = 0x9406;
template<>
DATA_API const std::string_view Attribute<Keyword::TablePositionSequence>::s_name = "Table Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::TablePositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TablePositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CollimatorShapeSequence>::s_keyword = Keyword::CollimatorShapeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorShapeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CollimatorShapeSequence>::s_element = 0x9407;
template<>
DATA_API const std::string_view Attribute<Keyword::CollimatorShapeSequence>::s_name = "Collimator Shape Sequence";
template<>
DATA_API const VR Attribute<Keyword::CollimatorShapeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CollimatorShapeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanesInAcquisition>::s_keyword = Keyword::PlanesInAcquisition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanesInAcquisition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanesInAcquisition>::s_element = 0x9410;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanesInAcquisition>::s_name = "Planes in Acquisition";
template<>
DATA_API const VR Attribute<Keyword::PlanesInAcquisition>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PlanesInAcquisition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XAXRFFrameCharacteristicsSequence>::s_keyword =
    Keyword::XAXRFFrameCharacteristicsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XAXRFFrameCharacteristicsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XAXRFFrameCharacteristicsSequence>::s_element = 0x9412;
template<>
DATA_API const std::string_view Attribute<Keyword::XAXRFFrameCharacteristicsSequence>::s_name =
    "XA/XRF Frame Characteristics Sequence";
template<>
DATA_API const VR Attribute<Keyword::XAXRFFrameCharacteristicsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XAXRFFrameCharacteristicsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameAcquisitionSequence>::s_keyword = Keyword::FrameAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionSequence>::s_element = 0x9417;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameAcquisitionSequence>::s_name = "Frame Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayReceptorType>::s_keyword = Keyword::XRayReceptorType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayReceptorType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayReceptorType>::s_element = 0x9420;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayReceptorType>::s_name = "X-Ray Receptor Type";
template<>
DATA_API const VR Attribute<Keyword::XRayReceptorType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::XRayReceptorType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionProtocolName>::s_keyword = Keyword::AcquisitionProtocolName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionProtocolName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionProtocolName>::s_element = 0x9423;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionProtocolName>::s_name = "Acquisition Protocol Name";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionProtocolName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionProtocolName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionProtocolDescription>::s_keyword =
    Keyword::AcquisitionProtocolDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionProtocolDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionProtocolDescription>::s_element = 0x9424;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionProtocolDescription>::s_name =
    "Acquisition Protocol Description";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionProtocolDescription>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionProtocolDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusIngredientOpaque>::s_keyword =
    Keyword::ContrastBolusIngredientOpaque;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientOpaque>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientOpaque>::s_element = 0x9425;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusIngredientOpaque>::s_name =
    "Contrast/Bolus Ingredient Opaque";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusIngredientOpaque>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusIngredientOpaque>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceReceptorPlaneToDetectorHousing>::s_keyword =
    Keyword::DistanceReceptorPlaneToDetectorHousing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceReceptorPlaneToDetectorHousing>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceReceptorPlaneToDetectorHousing>::s_element = 0x9426;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceReceptorPlaneToDetectorHousing>::s_name =
    "Distance Receptor Plane to Detector Housing";
template<>
DATA_API const VR Attribute<Keyword::DistanceReceptorPlaneToDetectorHousing>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DistanceReceptorPlaneToDetectorHousing>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntensifierActiveShape>::s_keyword = Keyword::IntensifierActiveShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntensifierActiveShape>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntensifierActiveShape>::s_element = 0x9427;
template<>
DATA_API const std::string_view Attribute<Keyword::IntensifierActiveShape>::s_name = "Intensifier Active Shape";
template<>
DATA_API const VR Attribute<Keyword::IntensifierActiveShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IntensifierActiveShape>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntensifierActiveDimensions>::s_keyword =
    Keyword::IntensifierActiveDimensions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntensifierActiveDimensions>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntensifierActiveDimensions>::s_element = 0x9428;
template<>
DATA_API const std::string_view Attribute<Keyword::IntensifierActiveDimensions>::s_name =
    "Intensifier Active Dimension(s)";
template<>
DATA_API const VR Attribute<Keyword::IntensifierActiveDimensions>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::IntensifierActiveDimensions>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PhysicalDetectorSize>::s_keyword = Keyword::PhysicalDetectorSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalDetectorSize>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhysicalDetectorSize>::s_element = 0x9429;
template<>
DATA_API const std::string_view Attribute<Keyword::PhysicalDetectorSize>::s_name = "Physical Detector Size";
template<>
DATA_API const VR Attribute<Keyword::PhysicalDetectorSize>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PhysicalDetectorSize>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PositionOfIsocenterProjection>::s_keyword =
    Keyword::PositionOfIsocenterProjection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionOfIsocenterProjection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionOfIsocenterProjection>::s_element = 0x9430;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionOfIsocenterProjection>::s_name =
    "Position of Isocenter Projection";
template<>
DATA_API const VR Attribute<Keyword::PositionOfIsocenterProjection>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PositionOfIsocenterProjection>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewSequence>::s_keyword = Keyword::FieldOfViewSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewSequence>::s_element = 0x9432;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewSequence>::s_name = "field of view Sequence";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewDescription>::s_keyword = Keyword::FieldOfViewDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewDescription>::s_element = 0x9433;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewDescription>::s_name = "field of view Description";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlSensingRegionsSequence>::s_keyword =
    Keyword::ExposureControlSensingRegionsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionsSequence>::s_element = 0x9434;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlSensingRegionsSequence>::s_name =
    "Exposure Control Sensing Regions Sequence";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlSensingRegionsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlSensingRegionsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlSensingRegionShape>::s_keyword =
    Keyword::ExposureControlSensingRegionShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionShape>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionShape>::s_element = 0x9435;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlSensingRegionShape>::s_name =
    "Exposure Control Sensing Region Shape";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlSensingRegionShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlSensingRegionShape>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlSensingRegionLeftVerticalEdge>::s_keyword =
    Keyword::ExposureControlSensingRegionLeftVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionLeftVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionLeftVerticalEdge>::s_element = 0x9436;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlSensingRegionLeftVerticalEdge>::s_name =
    "Exposure Control Sensing Region Left Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlSensingRegionLeftVerticalEdge>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlSensingRegionLeftVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlSensingRegionRightVerticalEdge>::s_keyword =
    Keyword::ExposureControlSensingRegionRightVerticalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionRightVerticalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionRightVerticalEdge>::s_element = 0x9437;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlSensingRegionRightVerticalEdge>::s_name =
    "Exposure Control Sensing Region Right Vertical Edge";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlSensingRegionRightVerticalEdge>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlSensingRegionRightVerticalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>::s_keyword =
    Keyword::ExposureControlSensingRegionUpperHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>::s_element = 0x9438;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>::s_name =
    "Exposure Control Sensing Region Upper Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>::s_keyword =
    Keyword::ExposureControlSensingRegionLowerHorizontalEdge;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>::s_element = 0x9439;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>::s_name =
    "Exposure Control Sensing Region Lower Horizontal Edge";
template<>
DATA_API const VR Attribute<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CenterOfCircularExposureControlSensingRegion>::s_keyword =
    Keyword::CenterOfCircularExposureControlSensingRegion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularExposureControlSensingRegion>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfCircularExposureControlSensingRegion>::s_element = 0x9440;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterOfCircularExposureControlSensingRegion>::s_name =
    "Center of Circular Exposure Control Sensing Region";
template<>
DATA_API const VR Attribute<Keyword::CenterOfCircularExposureControlSensingRegion>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::CenterOfCircularExposureControlSensingRegion>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RadiusOfCircularExposureControlSensingRegion>::s_keyword =
    Keyword::RadiusOfCircularExposureControlSensingRegion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCircularExposureControlSensingRegion>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCircularExposureControlSensingRegion>::s_element = 0x9441;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiusOfCircularExposureControlSensingRegion>::s_name =
    "Radius of Circular Exposure Control Sensing Region";
template<>
DATA_API const VR Attribute<Keyword::RadiusOfCircularExposureControlSensingRegion>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RadiusOfCircularExposureControlSensingRegion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>::s_keyword =
    Keyword::VerticesOfThePolygonalExposureControlSensingRegion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>::s_element = 0x9442;
template<>
DATA_API const std::string_view Attribute<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>::s_name =
    "Vertices of the Polygonal Exposure Control Sensing Region";
template<>
DATA_API const VR Attribute<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ColumnAngulationPatient>::s_keyword = Keyword::ColumnAngulationPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColumnAngulationPatient>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColumnAngulationPatient>::s_element = 0x9447;
template<>
DATA_API const std::string_view Attribute<Keyword::ColumnAngulationPatient>::s_name = "Column Angulation (Patient)";
template<>
DATA_API const VR Attribute<Keyword::ColumnAngulationPatient>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ColumnAngulationPatient>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeamAngle>::s_keyword = Keyword::BeamAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamAngle>::s_element = 0x9449;
template<>
DATA_API const std::string_view Attribute<Keyword::BeamAngle>::s_name = "Beam Angle";
template<>
DATA_API const VR Attribute<Keyword::BeamAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::BeamAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameDetectorParametersSequence>::s_keyword =
    Keyword::FrameDetectorParametersSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDetectorParametersSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDetectorParametersSequence>::s_element = 0x9451;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameDetectorParametersSequence>::s_name =
    "Frame Detector Parameters Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameDetectorParametersSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameDetectorParametersSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CalculatedAnatomyThickness>::s_keyword = Keyword::CalculatedAnatomyThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalculatedAnatomyThickness>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalculatedAnatomyThickness>::s_element = 0x9452;
template<>
DATA_API const std::string_view Attribute<Keyword::CalculatedAnatomyThickness>::s_name = "Calculated Anatomy Thickness";
template<>
DATA_API const VR Attribute<Keyword::CalculatedAnatomyThickness>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CalculatedAnatomyThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CalibrationSequence>::s_keyword = Keyword::CalibrationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalibrationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalibrationSequence>::s_element = 0x9455;
template<>
DATA_API const std::string_view Attribute<Keyword::CalibrationSequence>::s_name = "Calibration Sequence";
template<>
DATA_API const VR Attribute<Keyword::CalibrationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CalibrationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObjectThicknessSequence>::s_keyword = Keyword::ObjectThicknessSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectThicknessSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectThicknessSequence>::s_element = 0x9456;
template<>
DATA_API const std::string_view Attribute<Keyword::ObjectThicknessSequence>::s_name = "Object Thickness Sequence";
template<>
DATA_API const VR Attribute<Keyword::ObjectThicknessSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ObjectThicknessSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlaneIdentification>::s_keyword = Keyword::PlaneIdentification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlaneIdentification>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlaneIdentification>::s_element = 0x9457;
template<>
DATA_API const std::string_view Attribute<Keyword::PlaneIdentification>::s_name = "Plane Identification";
template<>
DATA_API const VR Attribute<Keyword::PlaneIdentification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PlaneIdentification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FieldOfViewDimensionsInFloat>::s_keyword =
    Keyword::FieldOfViewDimensionsInFloat;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewDimensionsInFloat>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FieldOfViewDimensionsInFloat>::s_element = 0x9461;
template<>
DATA_API const std::string_view Attribute<Keyword::FieldOfViewDimensionsInFloat>::s_name =
    "field of view Dimension(s) in Float";
template<>
DATA_API const VR Attribute<Keyword::FieldOfViewDimensionsInFloat>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::FieldOfViewDimensionsInFloat>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::IsocenterReferenceSystemSequence>::s_keyword =
    Keyword::IsocenterReferenceSystemSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IsocenterReferenceSystemSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IsocenterReferenceSystemSequence>::s_element = 0x9462;
template<>
DATA_API const std::string_view Attribute<Keyword::IsocenterReferenceSystemSequence>::s_name =
    "Isocenter Reference System Sequence";
template<>
DATA_API const VR Attribute<Keyword::IsocenterReferenceSystemSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IsocenterReferenceSystemSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerIsocenterPrimaryAngle>::s_keyword =
    Keyword::PositionerIsocenterPrimaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerIsocenterPrimaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerIsocenterPrimaryAngle>::s_element = 0x9463;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerIsocenterPrimaryAngle>::s_name =
    "Positioner Isocenter Primary Angle";
template<>
DATA_API const VR Attribute<Keyword::PositionerIsocenterPrimaryAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PositionerIsocenterPrimaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerIsocenterSecondaryAngle>::s_keyword =
    Keyword::PositionerIsocenterSecondaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerIsocenterSecondaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerIsocenterSecondaryAngle>::s_element = 0x9464;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerIsocenterSecondaryAngle>::s_name =
    "Positioner Isocenter Secondary Angle";
template<>
DATA_API const VR Attribute<Keyword::PositionerIsocenterSecondaryAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PositionerIsocenterSecondaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerIsocenterDetectorRotationAngle>::s_keyword =
    Keyword::PositionerIsocenterDetectorRotationAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerIsocenterDetectorRotationAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerIsocenterDetectorRotationAngle>::s_element = 0x9465;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerIsocenterDetectorRotationAngle>::s_name =
    "Positioner Isocenter Detector Rotation Angle";
template<>
DATA_API const VR Attribute<Keyword::PositionerIsocenterDetectorRotationAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PositionerIsocenterDetectorRotationAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableXPositionToIsocenter>::s_keyword = Keyword::TableXPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableXPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableXPositionToIsocenter>::s_element = 0x9466;
template<>
DATA_API const std::string_view Attribute<Keyword::TableXPositionToIsocenter>::s_name = "Table X Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::TableXPositionToIsocenter>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableXPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableYPositionToIsocenter>::s_keyword = Keyword::TableYPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableYPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableYPositionToIsocenter>::s_element = 0x9467;
template<>
DATA_API const std::string_view Attribute<Keyword::TableYPositionToIsocenter>::s_name = "Table Y Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::TableYPositionToIsocenter>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableYPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableZPositionToIsocenter>::s_keyword = Keyword::TableZPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableZPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableZPositionToIsocenter>::s_element = 0x9468;
template<>
DATA_API const std::string_view Attribute<Keyword::TableZPositionToIsocenter>::s_name = "Table Z Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::TableZPositionToIsocenter>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableZPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableHorizontalRotationAngle>::s_keyword =
    Keyword::TableHorizontalRotationAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableHorizontalRotationAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableHorizontalRotationAngle>::s_element = 0x9469;
template<>
DATA_API const std::string_view Attribute<Keyword::TableHorizontalRotationAngle>::s_name =
    "Table Horizontal Rotation Angle";
template<>
DATA_API const VR Attribute<Keyword::TableHorizontalRotationAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableHorizontalRotationAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableHeadTiltAngle>::s_keyword = Keyword::TableHeadTiltAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableHeadTiltAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableHeadTiltAngle>::s_element = 0x9470;
template<>
DATA_API const std::string_view Attribute<Keyword::TableHeadTiltAngle>::s_name = "Table Head Tilt Angle";
template<>
DATA_API const VR Attribute<Keyword::TableHeadTiltAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableHeadTiltAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableCradleTiltAngle>::s_keyword = Keyword::TableCradleTiltAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableCradleTiltAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableCradleTiltAngle>::s_element = 0x9471;
template<>
DATA_API const std::string_view Attribute<Keyword::TableCradleTiltAngle>::s_name = "Table Cradle Tilt Angle";
template<>
DATA_API const VR Attribute<Keyword::TableCradleTiltAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableCradleTiltAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameDisplayShutterSequence>::s_keyword =
    Keyword::FrameDisplayShutterSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDisplayShutterSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDisplayShutterSequence>::s_element = 0x9472;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameDisplayShutterSequence>::s_name =
    "Frame Display Shutter Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameDisplayShutterSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameDisplayShutterSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquiredImageAreaDoseProduct>::s_keyword =
    Keyword::AcquiredImageAreaDoseProduct;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquiredImageAreaDoseProduct>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquiredImageAreaDoseProduct>::s_element = 0x9473;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquiredImageAreaDoseProduct>::s_name =
    "Acquired Image Area Dose Product";
template<>
DATA_API const VR Attribute<Keyword::AcquiredImageAreaDoseProduct>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AcquiredImageAreaDoseProduct>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CArmPositionerTabletopRelationship>::s_keyword =
    Keyword::CArmPositionerTabletopRelationship;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CArmPositionerTabletopRelationship>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CArmPositionerTabletopRelationship>::s_element = 0x9474;
template<>
DATA_API const std::string_view Attribute<Keyword::CArmPositionerTabletopRelationship>::s_name =
    "C-arm Positioner Tabletop Relationship";
template<>
DATA_API const VR Attribute<Keyword::CArmPositionerTabletopRelationship>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CArmPositionerTabletopRelationship>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayGeometrySequence>::s_keyword = Keyword::XRayGeometrySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayGeometrySequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayGeometrySequence>::s_element = 0x9476;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayGeometrySequence>::s_name = "X-Ray Geometry Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRayGeometrySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRayGeometrySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IrradiationEventIdentificationSequence>::s_keyword =
    Keyword::IrradiationEventIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IrradiationEventIdentificationSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IrradiationEventIdentificationSequence>::s_element = 0x9477;
template<>
DATA_API const std::string_view Attribute<Keyword::IrradiationEventIdentificationSequence>::s_name =
    "Irradiation Event Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::IrradiationEventIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IrradiationEventIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRay3DFrameTypeSequence>::s_keyword = Keyword::XRay3DFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRay3DFrameTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRay3DFrameTypeSequence>::s_element = 0x9504;
template<>
DATA_API const std::string_view Attribute<Keyword::XRay3DFrameTypeSequence>::s_name = "X-Ray 3D Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRay3DFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRay3DFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContributingSourcesSequence>::s_keyword =
    Keyword::ContributingSourcesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributingSourcesSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributingSourcesSequence>::s_element = 0x9506;
template<>
DATA_API const std::string_view Attribute<Keyword::ContributingSourcesSequence>::s_name =
    "Contributing Sources Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContributingSourcesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContributingSourcesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRay3DAcquisitionSequence>::s_keyword = Keyword::XRay3DAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRay3DAcquisitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRay3DAcquisitionSequence>::s_element = 0x9507;
template<>
DATA_API const std::string_view Attribute<Keyword::XRay3DAcquisitionSequence>::s_name = "X-Ray 3D Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRay3DAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRay3DAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryPositionerScanArc>::s_keyword = Keyword::PrimaryPositionerScanArc;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerScanArc>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerScanArc>::s_element = 0x9508;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryPositionerScanArc>::s_name = "Primary Positioner Scan Arc";
template<>
DATA_API const VR Attribute<Keyword::PrimaryPositionerScanArc>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PrimaryPositionerScanArc>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryPositionerScanArc>::s_keyword = Keyword::SecondaryPositionerScanArc;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerScanArc>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerScanArc>::s_element = 0x9509;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryPositionerScanArc>::s_name =
    "Secondary Positioner Scan Arc";
template<>
DATA_API const VR Attribute<Keyword::SecondaryPositionerScanArc>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SecondaryPositionerScanArc>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryPositionerScanStartAngle>::s_keyword =
    Keyword::PrimaryPositionerScanStartAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerScanStartAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerScanStartAngle>::s_element = 0x9510;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryPositionerScanStartAngle>::s_name =
    "Primary Positioner Scan Start Angle";
template<>
DATA_API const VR Attribute<Keyword::PrimaryPositionerScanStartAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PrimaryPositionerScanStartAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryPositionerScanStartAngle>::s_keyword =
    Keyword::SecondaryPositionerScanStartAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerScanStartAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerScanStartAngle>::s_element = 0x9511;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryPositionerScanStartAngle>::s_name =
    "Secondary Positioner Scan Start Angle";
template<>
DATA_API const VR Attribute<Keyword::SecondaryPositionerScanStartAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SecondaryPositionerScanStartAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryPositionerIncrement>::s_keyword = Keyword::PrimaryPositionerIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerIncrement>::s_element = 0x9514;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryPositionerIncrement>::s_name = "Primary Positioner Increment";
template<>
DATA_API const VR Attribute<Keyword::PrimaryPositionerIncrement>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PrimaryPositionerIncrement>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryPositionerIncrement>::s_keyword =
    Keyword::SecondaryPositionerIncrement;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerIncrement>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerIncrement>::s_element = 0x9515;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryPositionerIncrement>::s_name =
    "Secondary Positioner Increment";
template<>
DATA_API const VR Attribute<Keyword::SecondaryPositionerIncrement>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SecondaryPositionerIncrement>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartAcquisitionDateTime>::s_keyword = Keyword::StartAcquisitionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartAcquisitionDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartAcquisitionDateTime>::s_element = 0x9516;
template<>
DATA_API const std::string_view Attribute<Keyword::StartAcquisitionDateTime>::s_name = "Start Acquisition DateTime";
template<>
DATA_API const VR Attribute<Keyword::StartAcquisitionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::StartAcquisitionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EndAcquisitionDateTime>::s_keyword = Keyword::EndAcquisitionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndAcquisitionDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndAcquisitionDateTime>::s_element = 0x9517;
template<>
DATA_API const std::string_view Attribute<Keyword::EndAcquisitionDateTime>::s_name = "End Acquisition DateTime";
template<>
DATA_API const VR Attribute<Keyword::EndAcquisitionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::EndAcquisitionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryPositionerIncrementSign>::s_keyword =
    Keyword::PrimaryPositionerIncrementSign;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerIncrementSign>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPositionerIncrementSign>::s_element = 0x9518;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryPositionerIncrementSign>::s_name =
    "Primary Positioner Increment Sign";
template<>
DATA_API const VR Attribute<Keyword::PrimaryPositionerIncrementSign>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::PrimaryPositionerIncrementSign>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryPositionerIncrementSign>::s_keyword =
    Keyword::SecondaryPositionerIncrementSign;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerIncrementSign>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryPositionerIncrementSign>::s_element = 0x9519;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryPositionerIncrementSign>::s_name =
    "Secondary Positioner Increment Sign";
template<>
DATA_API const VR Attribute<Keyword::SecondaryPositionerIncrementSign>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::SecondaryPositionerIncrementSign>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicationName>::s_keyword = Keyword::ApplicationName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationName>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationName>::s_element = 0x9524;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicationName>::s_name = "application Name";
template<>
DATA_API const VR Attribute<Keyword::ApplicationName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ApplicationName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicationVersion>::s_keyword = Keyword::ApplicationVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationVersion>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationVersion>::s_element = 0x9525;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicationVersion>::s_name = "application Version";
template<>
DATA_API const VR Attribute<Keyword::ApplicationVersion>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ApplicationVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicationManufacturer>::s_keyword = Keyword::ApplicationManufacturer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationManufacturer>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationManufacturer>::s_element = 0x9526;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicationManufacturer>::s_name = "application Manufacturer";
template<>
DATA_API const VR Attribute<Keyword::ApplicationManufacturer>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ApplicationManufacturer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmType>::s_keyword = Keyword::AlgorithmType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmType>::s_element = 0x9527;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmType>::s_name = "Algorithm Type";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmDescription>::s_keyword = Keyword::AlgorithmDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmDescription>::s_element = 0x9528;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmDescription>::s_name = "Algorithm Description";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRay3DReconstructionSequence>::s_keyword =
    Keyword::XRay3DReconstructionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRay3DReconstructionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRay3DReconstructionSequence>::s_element = 0x9530;
template<>
DATA_API const std::string_view Attribute<Keyword::XRay3DReconstructionSequence>::s_name =
    "X-Ray 3D Reconstruction Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRay3DReconstructionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRay3DReconstructionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionDescription>::s_keyword = Keyword::ReconstructionDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionDescription>::s_element = 0x9531;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionDescription>::s_name = "Reconstruction Description";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerProjectionAcquisitionSequence>::s_keyword =
    Keyword::PerProjectionAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerProjectionAcquisitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerProjectionAcquisitionSequence>::s_element = 0x9538;
template<>
DATA_API const std::string_view Attribute<Keyword::PerProjectionAcquisitionSequence>::s_name =
    "Per Projection Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::PerProjectionAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PerProjectionAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorPositionSequence>::s_keyword = Keyword::DetectorPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorPositionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorPositionSequence>::s_element = 0x9541;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorPositionSequence>::s_name = "Detector Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::DetectorPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DetectorPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayAcquisitionDoseSequence>::s_keyword =
    Keyword::XRayAcquisitionDoseSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayAcquisitionDoseSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayAcquisitionDoseSequence>::s_element = 0x9542;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayAcquisitionDoseSequence>::s_name =
    "X-Ray Acquisition Dose Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRayAcquisitionDoseSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRayAcquisitionDoseSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRaySourceIsocenterPrimaryAngle>::s_keyword =
    Keyword::XRaySourceIsocenterPrimaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceIsocenterPrimaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceIsocenterPrimaryAngle>::s_element = 0x9543;
template<>
DATA_API const std::string_view Attribute<Keyword::XRaySourceIsocenterPrimaryAngle>::s_name =
    "X-Ray Source Isocenter Primary Angle";
template<>
DATA_API const VR Attribute<Keyword::XRaySourceIsocenterPrimaryAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::XRaySourceIsocenterPrimaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRaySourceIsocenterSecondaryAngle>::s_keyword =
    Keyword::XRaySourceIsocenterSecondaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceIsocenterSecondaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRaySourceIsocenterSecondaryAngle>::s_element = 0x9544;
template<>
DATA_API const std::string_view Attribute<Keyword::XRaySourceIsocenterSecondaryAngle>::s_name =
    "X-Ray Source Isocenter Secondary Angle";
template<>
DATA_API const VR Attribute<Keyword::XRaySourceIsocenterSecondaryAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::XRaySourceIsocenterSecondaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreastSupportIsocenterPrimaryAngle>::s_keyword =
    Keyword::BreastSupportIsocenterPrimaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportIsocenterPrimaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportIsocenterPrimaryAngle>::s_element = 0x9545;
template<>
DATA_API const std::string_view Attribute<Keyword::BreastSupportIsocenterPrimaryAngle>::s_name =
    "Breast Support Isocenter Primary Angle";
template<>
DATA_API const VR Attribute<Keyword::BreastSupportIsocenterPrimaryAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BreastSupportIsocenterPrimaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreastSupportIsocenterSecondaryAngle>::s_keyword =
    Keyword::BreastSupportIsocenterSecondaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportIsocenterSecondaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportIsocenterSecondaryAngle>::s_element = 0x9546;
template<>
DATA_API const std::string_view Attribute<Keyword::BreastSupportIsocenterSecondaryAngle>::s_name =
    "Breast Support Isocenter Secondary Angle";
template<>
DATA_API const VR Attribute<Keyword::BreastSupportIsocenterSecondaryAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BreastSupportIsocenterSecondaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreastSupportXPositionToIsocenter>::s_keyword =
    Keyword::BreastSupportXPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportXPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportXPositionToIsocenter>::s_element = 0x9547;
template<>
DATA_API const std::string_view Attribute<Keyword::BreastSupportXPositionToIsocenter>::s_name =
    "Breast Support X Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::BreastSupportXPositionToIsocenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BreastSupportXPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreastSupportYPositionToIsocenter>::s_keyword =
    Keyword::BreastSupportYPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportYPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportYPositionToIsocenter>::s_element = 0x9548;
template<>
DATA_API const std::string_view Attribute<Keyword::BreastSupportYPositionToIsocenter>::s_name =
    "Breast Support Y Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::BreastSupportYPositionToIsocenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BreastSupportYPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreastSupportZPositionToIsocenter>::s_keyword =
    Keyword::BreastSupportZPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportZPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastSupportZPositionToIsocenter>::s_element = 0x9549;
template<>
DATA_API const std::string_view Attribute<Keyword::BreastSupportZPositionToIsocenter>::s_name =
    "Breast Support Z Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::BreastSupportZPositionToIsocenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BreastSupportZPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorIsocenterPrimaryAngle>::s_keyword =
    Keyword::DetectorIsocenterPrimaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorIsocenterPrimaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorIsocenterPrimaryAngle>::s_element = 0x9550;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorIsocenterPrimaryAngle>::s_name =
    "Detector Isocenter Primary Angle";
template<>
DATA_API const VR Attribute<Keyword::DetectorIsocenterPrimaryAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorIsocenterPrimaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorIsocenterSecondaryAngle>::s_keyword =
    Keyword::DetectorIsocenterSecondaryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorIsocenterSecondaryAngle>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorIsocenterSecondaryAngle>::s_element = 0x9551;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorIsocenterSecondaryAngle>::s_name =
    "Detector Isocenter Secondary Angle";
template<>
DATA_API const VR Attribute<Keyword::DetectorIsocenterSecondaryAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorIsocenterSecondaryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorXPositionToIsocenter>::s_keyword =
    Keyword::DetectorXPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorXPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorXPositionToIsocenter>::s_element = 0x9552;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorXPositionToIsocenter>::s_name =
    "Detector X Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::DetectorXPositionToIsocenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorXPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorYPositionToIsocenter>::s_keyword =
    Keyword::DetectorYPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorYPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorYPositionToIsocenter>::s_element = 0x9553;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorYPositionToIsocenter>::s_name =
    "Detector Y Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::DetectorYPositionToIsocenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorYPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorZPositionToIsocenter>::s_keyword =
    Keyword::DetectorZPositionToIsocenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorZPositionToIsocenter>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorZPositionToIsocenter>::s_element = 0x9554;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorZPositionToIsocenter>::s_name =
    "Detector Z Position to Isocenter";
template<>
DATA_API const VR Attribute<Keyword::DetectorZPositionToIsocenter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorZPositionToIsocenter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayGridSequence>::s_keyword = Keyword::XRayGridSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayGridSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayGridSequence>::s_element = 0x9555;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayGridSequence>::s_name = "X-Ray Grid Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRayGridSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRayGridSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayFilterSequence>::s_keyword = Keyword::XRayFilterSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayFilterSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayFilterSequence>::s_element = 0x9556;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayFilterSequence>::s_name = "X-Ray Filter Sequence";
template<>
DATA_API const VR Attribute<Keyword::XRayFilterSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XRayFilterSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActiveAreaTLHCPosition>::s_keyword =
    Keyword::DetectorActiveAreaTLHCPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveAreaTLHCPosition>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveAreaTLHCPosition>::s_element = 0x9557;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActiveAreaTLHCPosition>::s_name =
    "Detector Active Area TLHC Position";
template<>
DATA_API const VR Attribute<Keyword::DetectorActiveAreaTLHCPosition>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorActiveAreaTLHCPosition>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorActiveAreaOrientation>::s_keyword =
    Keyword::DetectorActiveAreaOrientation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveAreaOrientation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorActiveAreaOrientation>::s_element = 0x9558;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorActiveAreaOrientation>::s_name =
    "Detector Active Area Orientation";
template<>
DATA_API const VR Attribute<Keyword::DetectorActiveAreaOrientation>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DetectorActiveAreaOrientation>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::PositionerPrimaryAngleDirection>::s_keyword =
    Keyword::PositionerPrimaryAngleDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPrimaryAngleDirection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionerPrimaryAngleDirection>::s_element = 0x9559;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionerPrimaryAngleDirection>::s_name =
    "Positioner Primary Angle Direction";
template<>
DATA_API const VR Attribute<Keyword::PositionerPrimaryAngleDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PositionerPrimaryAngleDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DiffusionBMatrixSequence>::s_keyword = Keyword::DiffusionBMatrixSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionBMatrixSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiffusionBMatrixSequence>::s_element = 0x9601;
template<>
DATA_API const std::string_view Attribute<Keyword::DiffusionBMatrixSequence>::s_name = "Diffusion b-matrix Sequence";
template<>
DATA_API const VR Attribute<Keyword::DiffusionBMatrixSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DiffusionBMatrixSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FunctionalMRSequence>::s_keyword = Keyword::FunctionalMRSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalMRSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalMRSequence>::s_element = 0x9621;
template<>
DATA_API const std::string_view Attribute<Keyword::FunctionalMRSequence>::s_name = "Functional MR Sequence";
template<>
DATA_API const VR Attribute<Keyword::FunctionalMRSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FunctionalMRSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FunctionalSettlingPhaseFramesPresent>::s_keyword =
    Keyword::FunctionalSettlingPhaseFramesPresent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalSettlingPhaseFramesPresent>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalSettlingPhaseFramesPresent>::s_element = 0x9622;
template<>
DATA_API const std::string_view Attribute<Keyword::FunctionalSettlingPhaseFramesPresent>::s_name =
    "Functional Settling Phase Frames Present";
template<>
DATA_API const VR Attribute<Keyword::FunctionalSettlingPhaseFramesPresent>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FunctionalSettlingPhaseFramesPresent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FunctionalSyncPulse>::s_keyword = Keyword::FunctionalSyncPulse;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalSyncPulse>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalSyncPulse>::s_element = 0x9623;
template<>
DATA_API const std::string_view Attribute<Keyword::FunctionalSyncPulse>::s_name = "Functional Sync Pulse";
template<>
DATA_API const VR Attribute<Keyword::FunctionalSyncPulse>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::FunctionalSyncPulse>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SettlingPhaseFrame>::s_keyword = Keyword::SettlingPhaseFrame;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SettlingPhaseFrame>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SettlingPhaseFrame>::s_element = 0x9624;
template<>
DATA_API const std::string_view Attribute<Keyword::SettlingPhaseFrame>::s_name = "Settling Phase Frame";
template<>
DATA_API const VR Attribute<Keyword::SettlingPhaseFrame>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SettlingPhaseFrame>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecayCorrectionDateTime>::s_keyword = Keyword::DecayCorrectionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayCorrectionDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayCorrectionDateTime>::s_element = 0x9701;
template<>
DATA_API const std::string_view Attribute<Keyword::DecayCorrectionDateTime>::s_name = "Decay Correction DateTime";
template<>
DATA_API const VR Attribute<Keyword::DecayCorrectionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::DecayCorrectionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartDensityThreshold>::s_keyword = Keyword::StartDensityThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartDensityThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartDensityThreshold>::s_element = 0x9715;
template<>
DATA_API const std::string_view Attribute<Keyword::StartDensityThreshold>::s_name = "Start Density Threshold";
template<>
DATA_API const VR Attribute<Keyword::StartDensityThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::StartDensityThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartRelativeDensityDifferenceThreshold>::s_keyword =
    Keyword::StartRelativeDensityDifferenceThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartRelativeDensityDifferenceThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartRelativeDensityDifferenceThreshold>::s_element = 0x9716;
template<>
DATA_API const std::string_view Attribute<Keyword::StartRelativeDensityDifferenceThreshold>::s_name =
    "Start Relative Density Difference Threshold";
template<>
DATA_API const VR Attribute<Keyword::StartRelativeDensityDifferenceThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::StartRelativeDensityDifferenceThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartCardiacTriggerCountThreshold>::s_keyword =
    Keyword::StartCardiacTriggerCountThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartCardiacTriggerCountThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartCardiacTriggerCountThreshold>::s_element = 0x9717;
template<>
DATA_API const std::string_view Attribute<Keyword::StartCardiacTriggerCountThreshold>::s_name =
    "Start Cardiac Trigger Count Threshold";
template<>
DATA_API const VR Attribute<Keyword::StartCardiacTriggerCountThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::StartCardiacTriggerCountThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartRespiratoryTriggerCountThreshold>::s_keyword =
    Keyword::StartRespiratoryTriggerCountThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartRespiratoryTriggerCountThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartRespiratoryTriggerCountThreshold>::s_element = 0x9718;
template<>
DATA_API const std::string_view Attribute<Keyword::StartRespiratoryTriggerCountThreshold>::s_name =
    "Start Respiratory Trigger Count Threshold";
template<>
DATA_API const VR Attribute<Keyword::StartRespiratoryTriggerCountThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::StartRespiratoryTriggerCountThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TerminationCountsThreshold>::s_keyword = Keyword::TerminationCountsThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationCountsThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationCountsThreshold>::s_element = 0x9719;
template<>
DATA_API const std::string_view Attribute<Keyword::TerminationCountsThreshold>::s_name = "Termination Counts Threshold";
template<>
DATA_API const VR Attribute<Keyword::TerminationCountsThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TerminationCountsThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TerminationDensityThreshold>::s_keyword =
    Keyword::TerminationDensityThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationDensityThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationDensityThreshold>::s_element = 0x9720;
template<>
DATA_API const std::string_view Attribute<Keyword::TerminationDensityThreshold>::s_name =
    "Termination Density Threshold";
template<>
DATA_API const VR Attribute<Keyword::TerminationDensityThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TerminationDensityThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TerminationRelativeDensityThreshold>::s_keyword =
    Keyword::TerminationRelativeDensityThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationRelativeDensityThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationRelativeDensityThreshold>::s_element = 0x9721;
template<>
DATA_API const std::string_view Attribute<Keyword::TerminationRelativeDensityThreshold>::s_name =
    "Termination Relative Density Threshold";
template<>
DATA_API const VR Attribute<Keyword::TerminationRelativeDensityThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TerminationRelativeDensityThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TerminationTimeThreshold>::s_keyword = Keyword::TerminationTimeThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationTimeThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationTimeThreshold>::s_element = 0x9722;
template<>
DATA_API const std::string_view Attribute<Keyword::TerminationTimeThreshold>::s_name = "Termination Time Threshold";
template<>
DATA_API const VR Attribute<Keyword::TerminationTimeThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TerminationTimeThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TerminationCardiacTriggerCountThreshold>::s_keyword =
    Keyword::TerminationCardiacTriggerCountThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationCardiacTriggerCountThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationCardiacTriggerCountThreshold>::s_element = 0x9723;
template<>
DATA_API const std::string_view Attribute<Keyword::TerminationCardiacTriggerCountThreshold>::s_name =
    "Termination Cardiac Trigger Count Threshold";
template<>
DATA_API const VR Attribute<Keyword::TerminationCardiacTriggerCountThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TerminationCardiacTriggerCountThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TerminationRespiratoryTriggerCountThreshold>::s_keyword =
    Keyword::TerminationRespiratoryTriggerCountThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationRespiratoryTriggerCountThreshold>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TerminationRespiratoryTriggerCountThreshold>::s_element = 0x9724;
template<>
DATA_API const std::string_view Attribute<Keyword::TerminationRespiratoryTriggerCountThreshold>::s_name =
    "Termination Respiratory Trigger Count Threshold";
template<>
DATA_API const VR Attribute<Keyword::TerminationRespiratoryTriggerCountThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TerminationRespiratoryTriggerCountThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorGeometry>::s_keyword = Keyword::DetectorGeometry;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorGeometry>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorGeometry>::s_element = 0x9725;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorGeometry>::s_name = "Detector Geometry";
template<>
DATA_API const VR Attribute<Keyword::DetectorGeometry>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DetectorGeometry>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransverseDetectorSeparation>::s_keyword =
    Keyword::TransverseDetectorSeparation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransverseDetectorSeparation>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransverseDetectorSeparation>::s_element = 0x9726;
template<>
DATA_API const std::string_view Attribute<Keyword::TransverseDetectorSeparation>::s_name =
    "Transverse Detector Separation";
template<>
DATA_API const VR Attribute<Keyword::TransverseDetectorSeparation>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TransverseDetectorSeparation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AxialDetectorDimension>::s_keyword = Keyword::AxialDetectorDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialDetectorDimension>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialDetectorDimension>::s_element = 0x9727;
template<>
DATA_API const std::string_view Attribute<Keyword::AxialDetectorDimension>::s_name = "Axial Detector Dimension";
template<>
DATA_API const VR Attribute<Keyword::AxialDetectorDimension>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::AxialDetectorDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalAgentNumber>::s_keyword =
    Keyword::RadiopharmaceuticalAgentNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalAgentNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalAgentNumber>::s_element = 0x9729;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalAgentNumber>::s_name =
    "Radiopharmaceutical Agent Number";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalAgentNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalAgentNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETFrameAcquisitionSequence>::s_keyword =
    Keyword::PETFrameAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETFrameAcquisitionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETFrameAcquisitionSequence>::s_element = 0x9732;
template<>
DATA_API const std::string_view Attribute<Keyword::PETFrameAcquisitionSequence>::s_name =
    "PET Frame Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETFrameAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETFrameAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETDetectorMotionDetailsSequence>::s_keyword =
    Keyword::PETDetectorMotionDetailsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETDetectorMotionDetailsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETDetectorMotionDetailsSequence>::s_element = 0x9733;
template<>
DATA_API const std::string_view Attribute<Keyword::PETDetectorMotionDetailsSequence>::s_name =
    "PET Detector Motion Details Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETDetectorMotionDetailsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETDetectorMotionDetailsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETTableDynamicsSequence>::s_keyword = Keyword::PETTableDynamicsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETTableDynamicsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETTableDynamicsSequence>::s_element = 0x9734;
template<>
DATA_API const std::string_view Attribute<Keyword::PETTableDynamicsSequence>::s_name = "PET Table Dynamics Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETTableDynamicsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETTableDynamicsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETPositionSequence>::s_keyword = Keyword::PETPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETPositionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETPositionSequence>::s_element = 0x9735;
template<>
DATA_API const std::string_view Attribute<Keyword::PETPositionSequence>::s_name = "PET Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETFrameCorrectionFactorsSequence>::s_keyword =
    Keyword::PETFrameCorrectionFactorsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETFrameCorrectionFactorsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETFrameCorrectionFactorsSequence>::s_element = 0x9736;
template<>
DATA_API const std::string_view Attribute<Keyword::PETFrameCorrectionFactorsSequence>::s_name =
    "PET Frame Correction Factors Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETFrameCorrectionFactorsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETFrameCorrectionFactorsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalUsageSequence>::s_keyword =
    Keyword::RadiopharmaceuticalUsageSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalUsageSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalUsageSequence>::s_element = 0x9737;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalUsageSequence>::s_name =
    "Radiopharmaceutical Usage Sequence";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalUsageSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalUsageSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AttenuationCorrectionSource>::s_keyword =
    Keyword::AttenuationCorrectionSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrectionSource>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrectionSource>::s_element = 0x9738;
template<>
DATA_API const std::string_view Attribute<Keyword::AttenuationCorrectionSource>::s_name =
    "Attenuation Correction Source";
template<>
DATA_API const VR Attribute<Keyword::AttenuationCorrectionSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AttenuationCorrectionSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfIterations>::s_keyword = Keyword::NumberOfIterations;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfIterations>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfIterations>::s_element = 0x9739;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfIterations>::s_name = "Number of Iterations";
template<>
DATA_API const VR Attribute<Keyword::NumberOfIterations>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfIterations>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfSubsets>::s_keyword = Keyword::NumberOfSubsets;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSubsets>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSubsets>::s_element = 0x9740;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfSubsets>::s_name = "Number of Subsets";
template<>
DATA_API const VR Attribute<Keyword::NumberOfSubsets>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfSubsets>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETReconstructionSequence>::s_keyword = Keyword::PETReconstructionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETReconstructionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETReconstructionSequence>::s_element = 0x9749;
template<>
DATA_API const std::string_view Attribute<Keyword::PETReconstructionSequence>::s_name = "PET Reconstruction Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETReconstructionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETReconstructionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PETFrameTypeSequence>::s_keyword = Keyword::PETFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETFrameTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PETFrameTypeSequence>::s_element = 0x9751;
template<>
DATA_API const std::string_view Attribute<Keyword::PETFrameTypeSequence>::s_name = "PET Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::PETFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PETFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeOfFlightInformationUsed>::s_keyword =
    Keyword::TimeOfFlightInformationUsed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfFlightInformationUsed>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfFlightInformationUsed>::s_element = 0x9755;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeOfFlightInformationUsed>::s_name =
    "Time of Flight Information Used";
template<>
DATA_API const VR Attribute<Keyword::TimeOfFlightInformationUsed>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TimeOfFlightInformationUsed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionType>::s_keyword = Keyword::ReconstructionType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionType>::s_element = 0x9756;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionType>::s_name = "Reconstruction Type";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecayCorrected>::s_keyword = Keyword::DecayCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayCorrected>::s_element = 0x9758;
template<>
DATA_API const std::string_view Attribute<Keyword::DecayCorrected>::s_name = "Decay Corrected";
template<>
DATA_API const VR Attribute<Keyword::DecayCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DecayCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AttenuationCorrected>::s_keyword = Keyword::AttenuationCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrected>::s_element = 0x9759;
template<>
DATA_API const std::string_view Attribute<Keyword::AttenuationCorrected>::s_name = "Attenuation Corrected";
template<>
DATA_API const VR Attribute<Keyword::AttenuationCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AttenuationCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScatterCorrected>::s_keyword = Keyword::ScatterCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScatterCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScatterCorrected>::s_element = 0x9760;
template<>
DATA_API const std::string_view Attribute<Keyword::ScatterCorrected>::s_name = "Scatter Corrected";
template<>
DATA_API const VR Attribute<Keyword::ScatterCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ScatterCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeadTimeCorrected>::s_keyword = Keyword::DeadTimeCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeadTimeCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeadTimeCorrected>::s_element = 0x9761;
template<>
DATA_API const std::string_view Attribute<Keyword::DeadTimeCorrected>::s_name = "Dead Time Corrected";
template<>
DATA_API const VR Attribute<Keyword::DeadTimeCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DeadTimeCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GantryMotionCorrected>::s_keyword = Keyword::GantryMotionCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryMotionCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryMotionCorrected>::s_element = 0x9762;
template<>
DATA_API const std::string_view Attribute<Keyword::GantryMotionCorrected>::s_name = "Gantry Motion Corrected";
template<>
DATA_API const VR Attribute<Keyword::GantryMotionCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GantryMotionCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientMotionCorrected>::s_keyword = Keyword::PatientMotionCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientMotionCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientMotionCorrected>::s_element = 0x9763;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientMotionCorrected>::s_name = "Patient Motion Corrected";
template<>
DATA_API const VR Attribute<Keyword::PatientMotionCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientMotionCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CountLossNormalizationCorrected>::s_keyword =
    Keyword::CountLossNormalizationCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountLossNormalizationCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountLossNormalizationCorrected>::s_element = 0x9764;
template<>
DATA_API const std::string_view Attribute<Keyword::CountLossNormalizationCorrected>::s_name =
    "Count Loss Normalization Corrected";
template<>
DATA_API const VR Attribute<Keyword::CountLossNormalizationCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CountLossNormalizationCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RandomsCorrected>::s_keyword = Keyword::RandomsCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RandomsCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RandomsCorrected>::s_element = 0x9765;
template<>
DATA_API const std::string_view Attribute<Keyword::RandomsCorrected>::s_name = "Randoms Corrected";
template<>
DATA_API const VR Attribute<Keyword::RandomsCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RandomsCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NonUniformRadialSamplingCorrected>::s_keyword =
    Keyword::NonUniformRadialSamplingCorrected;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NonUniformRadialSamplingCorrected>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NonUniformRadialSamplingCorrected>::s_element = 0x9766;
template<>
DATA_API const std::string_view Attribute<Keyword::NonUniformRadialSamplingCorrected>::s_name =
    "Non-uniform Radial Sampling Corrected";
template<>
DATA_API const VR Attribute<Keyword::NonUniformRadialSamplingCorrected>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::NonUniformRadialSamplingCorrected>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SensitivityCalibrated>::s_keyword = Keyword::SensitivityCalibrated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SensitivityCalibrated>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SensitivityCalibrated>::s_element = 0x9767;
template<>
DATA_API const std::string_view Attribute<Keyword::SensitivityCalibrated>::s_name = "Sensitivity Calibrated";
template<>
DATA_API const VR Attribute<Keyword::SensitivityCalibrated>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SensitivityCalibrated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorNormalizationCorrection>::s_keyword =
    Keyword::DetectorNormalizationCorrection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorNormalizationCorrection>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorNormalizationCorrection>::s_element = 0x9768;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorNormalizationCorrection>::s_name =
    "Detector Normalization Correction";
template<>
DATA_API const VR Attribute<Keyword::DetectorNormalizationCorrection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DetectorNormalizationCorrection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IterativeReconstructionMethod>::s_keyword =
    Keyword::IterativeReconstructionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IterativeReconstructionMethod>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IterativeReconstructionMethod>::s_element = 0x9769;
template<>
DATA_API const std::string_view Attribute<Keyword::IterativeReconstructionMethod>::s_name =
    "Iterative Reconstruction Method";
template<>
DATA_API const VR Attribute<Keyword::IterativeReconstructionMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IterativeReconstructionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AttenuationCorrectionTemporalRelationship>::s_keyword =
    Keyword::AttenuationCorrectionTemporalRelationship;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrectionTemporalRelationship>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrectionTemporalRelationship>::s_element = 0x9770;
template<>
DATA_API const std::string_view Attribute<Keyword::AttenuationCorrectionTemporalRelationship>::s_name =
    "Attenuation Correction Temporal Relationship";
template<>
DATA_API const VR Attribute<Keyword::AttenuationCorrectionTemporalRelationship>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AttenuationCorrectionTemporalRelationship>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientPhysiologicalStateSequence>::s_keyword =
    Keyword::PatientPhysiologicalStateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientPhysiologicalStateSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientPhysiologicalStateSequence>::s_element = 0x9771;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientPhysiologicalStateSequence>::s_name =
    "Patient Physiological State Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientPhysiologicalStateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientPhysiologicalStateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientPhysiologicalStateCodeSequence>::s_keyword =
    Keyword::PatientPhysiologicalStateCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientPhysiologicalStateCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientPhysiologicalStateCodeSequence>::s_element = 0x9772;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientPhysiologicalStateCodeSequence>::s_name =
    "Patient Physiological State Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientPhysiologicalStateCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientPhysiologicalStateCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DepthsOfFocus>::s_keyword = Keyword::DepthsOfFocus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthsOfFocus>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthsOfFocus>::s_element = 0x9801;
template<>
DATA_API const std::string_view Attribute<Keyword::DepthsOfFocus>::s_name = "Depth(s) of Focus";
template<>
DATA_API const VR Attribute<Keyword::DepthsOfFocus>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DepthsOfFocus>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ExcludedIntervalsSequence>::s_keyword = Keyword::ExcludedIntervalsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcludedIntervalsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcludedIntervalsSequence>::s_element = 0x9803;
template<>
DATA_API const std::string_view Attribute<Keyword::ExcludedIntervalsSequence>::s_name = "Excluded Intervals Sequence";
template<>
DATA_API const VR Attribute<Keyword::ExcludedIntervalsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ExcludedIntervalsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExclusionStartDateTime>::s_keyword = Keyword::ExclusionStartDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExclusionStartDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExclusionStartDateTime>::s_element = 0x9804;
template<>
DATA_API const std::string_view Attribute<Keyword::ExclusionStartDateTime>::s_name = "Exclusion Start DateTime";
template<>
DATA_API const VR Attribute<Keyword::ExclusionStartDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ExclusionStartDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExclusionDuration>::s_keyword = Keyword::ExclusionDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExclusionDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExclusionDuration>::s_element = 0x9805;
template<>
DATA_API const std::string_view Attribute<Keyword::ExclusionDuration>::s_name = "Exclusion Duration";
template<>
DATA_API const VR Attribute<Keyword::ExclusionDuration>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExclusionDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::USImageDescriptionSequence>::s_keyword = Keyword::USImageDescriptionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::USImageDescriptionSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::USImageDescriptionSequence>::s_element = 0x9806;
template<>
DATA_API const std::string_view Attribute<Keyword::USImageDescriptionSequence>::s_name =
    "US Image Description Sequence";
template<>
DATA_API const VR Attribute<Keyword::USImageDescriptionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::USImageDescriptionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageDataTypeSequence>::s_keyword = Keyword::ImageDataTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageDataTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageDataTypeSequence>::s_element = 0x9807;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageDataTypeSequence>::s_name = "Image Data Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImageDataTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImageDataTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataType>::s_keyword = Keyword::DataType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataType>::s_element = 0x9808;
template<>
DATA_API const std::string_view Attribute<Keyword::DataType>::s_name = "Data Type";
template<>
DATA_API const VR Attribute<Keyword::DataType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DataType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerScanPatternCodeSequence>::s_keyword =
    Keyword::TransducerScanPatternCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerScanPatternCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerScanPatternCodeSequence>::s_element = 0x9809;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerScanPatternCodeSequence>::s_name =
    "Transducer Scan Pattern Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerScanPatternCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerScanPatternCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AliasedDataType>::s_keyword = Keyword::AliasedDataType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AliasedDataType>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AliasedDataType>::s_element = 0x980B;
template<>
DATA_API const std::string_view Attribute<Keyword::AliasedDataType>::s_name = "Aliased Data Type";
template<>
DATA_API const VR Attribute<Keyword::AliasedDataType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AliasedDataType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionMeasuringDeviceUsed>::s_keyword =
    Keyword::PositionMeasuringDeviceUsed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionMeasuringDeviceUsed>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionMeasuringDeviceUsed>::s_element = 0x980C;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionMeasuringDeviceUsed>::s_name =
    "Position Measuring Device Used";
template<>
DATA_API const VR Attribute<Keyword::PositionMeasuringDeviceUsed>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PositionMeasuringDeviceUsed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerGeometryCodeSequence>::s_keyword =
    Keyword::TransducerGeometryCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerGeometryCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerGeometryCodeSequence>::s_element = 0x980D;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerGeometryCodeSequence>::s_name =
    "Transducer Geometry Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerGeometryCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerGeometryCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerBeamSteeringCodeSequence>::s_keyword =
    Keyword::TransducerBeamSteeringCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerBeamSteeringCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerBeamSteeringCodeSequence>::s_element = 0x980E;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerBeamSteeringCodeSequence>::s_name =
    "Transducer Beam Steering Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerBeamSteeringCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerBeamSteeringCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerApplicationCodeSequence>::s_keyword =
    Keyword::TransducerApplicationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerApplicationCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerApplicationCodeSequence>::s_element = 0x980F;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerApplicationCodeSequence>::s_name =
    "Transducer application Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerApplicationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerApplicationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ZeroVelocityPixelValue>::s_keyword = Keyword::ZeroVelocityPixelValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZeroVelocityPixelValue>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZeroVelocityPixelValue>::s_element = 0x9810;
template<>
DATA_API const std::string_view Attribute<Keyword::ZeroVelocityPixelValue>::s_name = "Zero Velocity Pixel Value";
template<>
DATA_API const VR Attribute<Keyword::ZeroVelocityPixelValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::ZeroVelocityPixelValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhotoacousticExcitationCharacteristicsSequence>::s_keyword =
    Keyword::PhotoacousticExcitationCharacteristicsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotoacousticExcitationCharacteristicsSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotoacousticExcitationCharacteristicsSequence>::s_element = 0x9821;
template<>
DATA_API const std::string_view Attribute<Keyword::PhotoacousticExcitationCharacteristicsSequence>::s_name =
    "Photoacoustic Excitation Characteristics Sequence";
template<>
DATA_API const VR Attribute<Keyword::PhotoacousticExcitationCharacteristicsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PhotoacousticExcitationCharacteristicsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExcitationSpectralWidth>::s_keyword = Keyword::ExcitationSpectralWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationSpectralWidth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationSpectralWidth>::s_element = 0x9822;
template<>
DATA_API const std::string_view Attribute<Keyword::ExcitationSpectralWidth>::s_name = "Excitation Spectral Width";
template<>
DATA_API const VR Attribute<Keyword::ExcitationSpectralWidth>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExcitationSpectralWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExcitationEnergy>::s_keyword = Keyword::ExcitationEnergy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationEnergy>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationEnergy>::s_element = 0x9823;
template<>
DATA_API const std::string_view Attribute<Keyword::ExcitationEnergy>::s_name = "Excitation Energy";
template<>
DATA_API const VR Attribute<Keyword::ExcitationEnergy>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExcitationEnergy>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExcitationPulseDuration>::s_keyword = Keyword::ExcitationPulseDuration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationPulseDuration>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationPulseDuration>::s_element = 0x9824;
template<>
DATA_API const std::string_view Attribute<Keyword::ExcitationPulseDuration>::s_name = "Excitation Pulse Duration";
template<>
DATA_API const VR Attribute<Keyword::ExcitationPulseDuration>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExcitationPulseDuration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExcitationWavelengthSequence>::s_keyword =
    Keyword::ExcitationWavelengthSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationWavelengthSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationWavelengthSequence>::s_element = 0x9825;
template<>
DATA_API const std::string_view Attribute<Keyword::ExcitationWavelengthSequence>::s_name =
    "Excitation Wavelength Sequence";
template<>
DATA_API const VR Attribute<Keyword::ExcitationWavelengthSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ExcitationWavelengthSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExcitationWavelength>::s_keyword = Keyword::ExcitationWavelength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationWavelength>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExcitationWavelength>::s_element = 0x9826;
template<>
DATA_API const std::string_view Attribute<Keyword::ExcitationWavelength>::s_name = "Excitation Wavelength";
template<>
DATA_API const VR Attribute<Keyword::ExcitationWavelength>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ExcitationWavelength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminationTranslationFlag>::s_keyword =
    Keyword::IlluminationTranslationFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationTranslationFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationTranslationFlag>::s_element = 0x9828;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminationTranslationFlag>::s_name =
    "Illumination Translation Flag";
template<>
DATA_API const VR Attribute<Keyword::IlluminationTranslationFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IlluminationTranslationFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcousticCouplingMediumFlag>::s_keyword = Keyword::AcousticCouplingMediumFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumFlag>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumFlag>::s_element = 0x9829;
template<>
DATA_API const std::string_view Attribute<Keyword::AcousticCouplingMediumFlag>::s_name =
    "Acoustic Coupling Medium Flag";
template<>
DATA_API const VR Attribute<Keyword::AcousticCouplingMediumFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AcousticCouplingMediumFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcousticCouplingMediumCodeSequence>::s_keyword =
    Keyword::AcousticCouplingMediumCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumCodeSequence>::s_element = 0x982A;
template<>
DATA_API const std::string_view Attribute<Keyword::AcousticCouplingMediumCodeSequence>::s_name =
    "Acoustic Coupling Medium Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AcousticCouplingMediumCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AcousticCouplingMediumCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcousticCouplingMediumTemperature>::s_keyword =
    Keyword::AcousticCouplingMediumTemperature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumTemperature>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumTemperature>::s_element = 0x982B;
template<>
DATA_API const std::string_view Attribute<Keyword::AcousticCouplingMediumTemperature>::s_name =
    "Acoustic Coupling Medium Temperature";
template<>
DATA_API const VR Attribute<Keyword::AcousticCouplingMediumTemperature>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::AcousticCouplingMediumTemperature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerResponseSequence>::s_keyword = Keyword::TransducerResponseSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerResponseSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerResponseSequence>::s_element = 0x982C;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerResponseSequence>::s_name = "Transducer Response Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerResponseSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerResponseSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CenterFrequency>::s_keyword = Keyword::CenterFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterFrequency>::s_element = 0x982D;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterFrequency>::s_name = "Center Frequency";
template<>
DATA_API const VR Attribute<Keyword::CenterFrequency>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::CenterFrequency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FractionalBandwidth>::s_keyword = Keyword::FractionalBandwidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FractionalBandwidth>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FractionalBandwidth>::s_element = 0x982E;
template<>
DATA_API const std::string_view Attribute<Keyword::FractionalBandwidth>::s_name = "Fractional Bandwidth";
template<>
DATA_API const VR Attribute<Keyword::FractionalBandwidth>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::FractionalBandwidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LowerCutoffFrequency>::s_keyword = Keyword::LowerCutoffFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LowerCutoffFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LowerCutoffFrequency>::s_element = 0x982F;
template<>
DATA_API const std::string_view Attribute<Keyword::LowerCutoffFrequency>::s_name = "Lower Cutoff Frequency";
template<>
DATA_API const VR Attribute<Keyword::LowerCutoffFrequency>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::LowerCutoffFrequency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UpperCutoffFrequency>::s_keyword = Keyword::UpperCutoffFrequency;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UpperCutoffFrequency>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UpperCutoffFrequency>::s_element = 0x9830;
template<>
DATA_API const std::string_view Attribute<Keyword::UpperCutoffFrequency>::s_name = "Upper Cutoff Frequency";
template<>
DATA_API const VR Attribute<Keyword::UpperCutoffFrequency>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::UpperCutoffFrequency>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransducerTechnologySequence>::s_keyword =
    Keyword::TransducerTechnologySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerTechnologySequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransducerTechnologySequence>::s_element = 0x9831;
template<>
DATA_API const std::string_view Attribute<Keyword::TransducerTechnologySequence>::s_name =
    "Transducer Technology Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransducerTechnologySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransducerTechnologySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SoundSpeedCorrectionMechanismCodeSequence>::s_keyword =
    Keyword::SoundSpeedCorrectionMechanismCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoundSpeedCorrectionMechanismCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SoundSpeedCorrectionMechanismCodeSequence>::s_element = 0x9832;
template<>
DATA_API const std::string_view Attribute<Keyword::SoundSpeedCorrectionMechanismCodeSequence>::s_name =
    "Sound Speed Correction Mechanism Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SoundSpeedCorrectionMechanismCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SoundSpeedCorrectionMechanismCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObjectSoundSpeed>::s_keyword = Keyword::ObjectSoundSpeed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectSoundSpeed>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectSoundSpeed>::s_element = 0x9833;
template<>
DATA_API const std::string_view Attribute<Keyword::ObjectSoundSpeed>::s_name = "Object Sound Speed";
template<>
DATA_API const VR Attribute<Keyword::ObjectSoundSpeed>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ObjectSoundSpeed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcousticCouplingMediumSoundSpeed>::s_keyword =
    Keyword::AcousticCouplingMediumSoundSpeed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumSoundSpeed>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcousticCouplingMediumSoundSpeed>::s_element = 0x9834;
template<>
DATA_API const std::string_view Attribute<Keyword::AcousticCouplingMediumSoundSpeed>::s_name =
    "Acoustic Coupling Medium Sound Speed";
template<>
DATA_API const VR Attribute<Keyword::AcousticCouplingMediumSoundSpeed>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::AcousticCouplingMediumSoundSpeed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhotoacousticImageFrameTypeSequence>::s_keyword =
    Keyword::PhotoacousticImageFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotoacousticImageFrameTypeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotoacousticImageFrameTypeSequence>::s_element = 0x9835;
template<>
DATA_API const std::string_view Attribute<Keyword::PhotoacousticImageFrameTypeSequence>::s_name =
    "Photoacoustic Image Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::PhotoacousticImageFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PhotoacousticImageFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageDataTypeCodeSequence>::s_keyword = Keyword::ImageDataTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageDataTypeCodeSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageDataTypeCodeSequence>::s_element = 0x9836;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageDataTypeCodeSequence>::s_name = "Image Data Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImageDataTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImageDataTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedDefinedProtocolSequence>::s_keyword =
    Keyword::ReferencedDefinedProtocolSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDefinedProtocolSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDefinedProtocolSequence>::s_element = 0x990C;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedDefinedProtocolSequence>::s_name =
    "Referenced Defined Protocol Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedDefinedProtocolSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedDefinedProtocolSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPerformedProtocolSequence>::s_keyword =
    Keyword::ReferencedPerformedProtocolSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPerformedProtocolSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPerformedProtocolSequence>::s_element = 0x990D;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPerformedProtocolSequence>::s_name =
    "Referenced Performed Protocol Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPerformedProtocolSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPerformedProtocolSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceAcquisitionProtocolElementNumber>::s_keyword =
    Keyword::SourceAcquisitionProtocolElementNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceAcquisitionProtocolElementNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceAcquisitionProtocolElementNumber>::s_element = 0x9938;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceAcquisitionProtocolElementNumber>::s_name =
    "Source Acquisition Protocol Element Number";
template<>
DATA_API const VR Attribute<Keyword::SourceAcquisitionProtocolElementNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SourceAcquisitionProtocolElementNumber>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SourceReconstructionProtocolElementNumber>::s_keyword =
    Keyword::SourceReconstructionProtocolElementNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceReconstructionProtocolElementNumber>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceReconstructionProtocolElementNumber>::s_element = 0x993A;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceReconstructionProtocolElementNumber>::s_name =
    "Source Reconstruction Protocol Element Number";
template<>
DATA_API const VR Attribute<Keyword::SourceReconstructionProtocolElementNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SourceReconstructionProtocolElementNumber>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionAlgorithmSequence>::s_keyword =
    Keyword::ReconstructionAlgorithmSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionAlgorithmSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionAlgorithmSequence>::s_element = 0x993D;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionAlgorithmSequence>::s_name =
    "Reconstruction Algorithm Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionAlgorithmSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionAlgorithmSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContributingEquipmentSequence>::s_keyword =
    Keyword::ContributingEquipmentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributingEquipmentSequence>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributingEquipmentSequence>::s_element = 0xA001;
template<>
DATA_API const std::string_view Attribute<Keyword::ContributingEquipmentSequence>::s_name =
    "Contributing Equipment Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContributingEquipmentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContributingEquipmentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContributionDateTime>::s_keyword = Keyword::ContributionDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributionDateTime>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributionDateTime>::s_element = 0xA002;
template<>
DATA_API const std::string_view Attribute<Keyword::ContributionDateTime>::s_name = "Contribution DateTime";
template<>
DATA_API const VR Attribute<Keyword::ContributionDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ContributionDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContributionDescription>::s_keyword = Keyword::ContributionDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributionDescription>::s_group = 0x0018;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributionDescription>::s_element = 0xA003;
template<>
DATA_API const std::string_view Attribute<Keyword::ContributionDescription>::s_name = "Contribution Description";
template<>
DATA_API const VR Attribute<Keyword::ContributionDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::ContributionDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StudyInstanceUID>::s_keyword = Keyword::StudyInstanceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyInstanceUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyInstanceUID>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::StudyInstanceUID>::s_name = "Study Instance UID";
template<>
DATA_API const VR Attribute<Keyword::StudyInstanceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::StudyInstanceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesInstanceUID>::s_keyword = Keyword::SeriesInstanceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesInstanceUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesInstanceUID>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesInstanceUID>::s_name = "Series Instance UID";
template<>
DATA_API const VR Attribute<Keyword::SeriesInstanceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::SeriesInstanceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StudyID>::s_keyword = Keyword::StudyID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StudyID>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::StudyID>::s_name = "Study ID";
template<>
DATA_API const VR Attribute<Keyword::StudyID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::StudyID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesNumber>::s_keyword = Keyword::SeriesNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesNumber>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesNumber>::s_name = "Series Number";
template<>
DATA_API const VR Attribute<Keyword::SeriesNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SeriesNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionNumber>::s_keyword = Keyword::AcquisitionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionNumber>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionNumber>::s_name = "Acquisition Number";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceNumber>::s_keyword = Keyword::InstanceNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceNumber>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceNumber>::s_name = "Instance Number";
template<>
DATA_API const VR Attribute<Keyword::InstanceNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::InstanceNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientOrientation>::s_keyword = Keyword::PatientOrientation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientation>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientation>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientOrientation>::s_name = "Patient Orientation";
template<>
DATA_API const VR Attribute<Keyword::PatientOrientation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientOrientation>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PyramidLabel>::s_keyword = Keyword::PyramidLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PyramidLabel>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PyramidLabel>::s_element = 0x0027;
template<>
DATA_API const std::string_view Attribute<Keyword::PyramidLabel>::s_name = "Pyramid Label";
template<>
DATA_API const VR Attribute<Keyword::PyramidLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PyramidLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagePositionPatient>::s_keyword = Keyword::ImagePositionPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePositionPatient>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePositionPatient>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagePositionPatient>::s_name = "Image Position (Patient)";
template<>
DATA_API const VR Attribute<Keyword::ImagePositionPatient>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImagePositionPatient>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ImageOrientationPatient>::s_keyword = Keyword::ImageOrientationPatient;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageOrientationPatient>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageOrientationPatient>::s_element = 0x0037;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageOrientationPatient>::s_name = "Image Orientation (Patient)";
template<>
DATA_API const VR Attribute<Keyword::ImageOrientationPatient>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImageOrientationPatient>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::FrameOfReferenceUID>::s_keyword = Keyword::FrameOfReferenceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfReferenceUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfReferenceUID>::s_element = 0x0052;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameOfReferenceUID>::s_name = "Frame of Reference UID";
template<>
DATA_API const VR Attribute<Keyword::FrameOfReferenceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::FrameOfReferenceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Laterality>::s_keyword = Keyword::Laterality;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Laterality>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Laterality>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::Laterality>::s_name = "Laterality";
template<>
DATA_API const VR Attribute<Keyword::Laterality>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Laterality>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageLaterality>::s_keyword = Keyword::ImageLaterality;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageLaterality>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageLaterality>::s_element = 0x0062;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageLaterality>::s_name = "Image Laterality";
template<>
DATA_API const VR Attribute<Keyword::ImageLaterality>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ImageLaterality>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemporalPositionIdentifier>::s_keyword = Keyword::TemporalPositionIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionIdentifier>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionIdentifier>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::TemporalPositionIdentifier>::s_name = "Temporal Position Identifier";
template<>
DATA_API const VR Attribute<Keyword::TemporalPositionIdentifier>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::TemporalPositionIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTemporalPositions>::s_keyword = Keyword::NumberOfTemporalPositions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTemporalPositions>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTemporalPositions>::s_element = 0x0105;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTemporalPositions>::s_name = "Number of Temporal Positions";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTemporalPositions>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTemporalPositions>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemporalResolution>::s_keyword = Keyword::TemporalResolution;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalResolution>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalResolution>::s_element = 0x0110;
template<>
DATA_API const std::string_view Attribute<Keyword::TemporalResolution>::s_name = "Temporal Resolution";
template<>
DATA_API const VR Attribute<Keyword::TemporalResolution>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TemporalResolution>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SynchronizationFrameOfReferenceUID>::s_keyword =
    Keyword::SynchronizationFrameOfReferenceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizationFrameOfReferenceUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizationFrameOfReferenceUID>::s_element = 0x0200;
template<>
DATA_API const std::string_view Attribute<Keyword::SynchronizationFrameOfReferenceUID>::s_name =
    "Synchronization Frame of Reference UID";
template<>
DATA_API const VR Attribute<Keyword::SynchronizationFrameOfReferenceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::SynchronizationFrameOfReferenceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SOPInstanceUIDOfConcatenationSource>::s_keyword =
    Keyword::SOPInstanceUIDOfConcatenationSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPInstanceUIDOfConcatenationSource>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPInstanceUIDOfConcatenationSource>::s_element = 0x0242;
template<>
DATA_API const std::string_view Attribute<Keyword::SOPInstanceUIDOfConcatenationSource>::s_name =
    "SOP Instance UID of Concatenation Source";
template<>
DATA_API const VR Attribute<Keyword::SOPInstanceUIDOfConcatenationSource>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::SOPInstanceUIDOfConcatenationSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagesInAcquisition>::s_keyword = Keyword::ImagesInAcquisition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagesInAcquisition>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagesInAcquisition>::s_element = 0x1002;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagesInAcquisition>::s_name = "Images in Acquisition";
template<>
DATA_API const VR Attribute<Keyword::ImagesInAcquisition>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ImagesInAcquisition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PositionReferenceIndicator>::s_keyword = Keyword::PositionReferenceIndicator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionReferenceIndicator>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PositionReferenceIndicator>::s_element = 0x1040;
template<>
DATA_API const std::string_view Attribute<Keyword::PositionReferenceIndicator>::s_name = "Position Reference Indicator";
template<>
DATA_API const VR Attribute<Keyword::PositionReferenceIndicator>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PositionReferenceIndicator>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SliceLocation>::s_keyword = Keyword::SliceLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceLocation>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceLocation>::s_element = 0x1041;
template<>
DATA_API const std::string_view Attribute<Keyword::SliceLocation>::s_name = "Slice Location";
template<>
DATA_API const VR Attribute<Keyword::SliceLocation>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SliceLocation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageComments>::s_keyword = Keyword::ImageComments;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageComments>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageComments>::s_element = 0x4000;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageComments>::s_name = "Image Comments";
template<>
DATA_API const VR Attribute<Keyword::ImageComments>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::ImageComments>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StackID>::s_keyword = Keyword::StackID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StackID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StackID>::s_element = 0x9056;
template<>
DATA_API const std::string_view Attribute<Keyword::StackID>::s_name = "Stack ID";
template<>
DATA_API const VR Attribute<Keyword::StackID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::StackID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InStackPositionNumber>::s_keyword = Keyword::InStackPositionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InStackPositionNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InStackPositionNumber>::s_element = 0x9057;
template<>
DATA_API const std::string_view Attribute<Keyword::InStackPositionNumber>::s_name = "In-Stack Position Number";
template<>
DATA_API const VR Attribute<Keyword::InStackPositionNumber>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::InStackPositionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameAnatomySequence>::s_keyword = Keyword::FrameAnatomySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAnatomySequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAnatomySequence>::s_element = 0x9071;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameAnatomySequence>::s_name = "Frame Anatomy Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameAnatomySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameAnatomySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameLaterality>::s_keyword = Keyword::FrameLaterality;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameLaterality>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameLaterality>::s_element = 0x9072;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameLaterality>::s_name = "Frame Laterality";
template<>
DATA_API const VR Attribute<Keyword::FrameLaterality>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FrameLaterality>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameContentSequence>::s_keyword = Keyword::FrameContentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameContentSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameContentSequence>::s_element = 0x9111;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameContentSequence>::s_name = "Frame Content Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameContentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameContentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanePositionSequence>::s_keyword = Keyword::PlanePositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanePositionSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanePositionSequence>::s_element = 0x9113;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanePositionSequence>::s_name = "Plane Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanePositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanePositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlaneOrientationSequence>::s_keyword = Keyword::PlaneOrientationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlaneOrientationSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlaneOrientationSequence>::s_element = 0x9116;
template<>
DATA_API const std::string_view Attribute<Keyword::PlaneOrientationSequence>::s_name = "Plane Orientation Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlaneOrientationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlaneOrientationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemporalPositionIndex>::s_keyword = Keyword::TemporalPositionIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionIndex>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionIndex>::s_element = 0x9128;
template<>
DATA_API const std::string_view Attribute<Keyword::TemporalPositionIndex>::s_name = "Temporal Position Index";
template<>
DATA_API const VR Attribute<Keyword::TemporalPositionIndex>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TemporalPositionIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalCardiacTriggerDelayTime>::s_keyword =
    Keyword::NominalCardiacTriggerDelayTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalCardiacTriggerDelayTime>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalCardiacTriggerDelayTime>::s_element = 0x9153;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalCardiacTriggerDelayTime>::s_name =
    "Nominal Cardiac Trigger Delay Time";
template<>
DATA_API const VR Attribute<Keyword::NominalCardiacTriggerDelayTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::NominalCardiacTriggerDelayTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalCardiacTriggerTimePriorToRPeak>::s_keyword =
    Keyword::NominalCardiacTriggerTimePriorToRPeak;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalCardiacTriggerTimePriorToRPeak>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalCardiacTriggerTimePriorToRPeak>::s_element = 0x9154;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalCardiacTriggerTimePriorToRPeak>::s_name =
    "Nominal Cardiac Trigger Time Prior To R-Peak";
template<>
DATA_API const VR Attribute<Keyword::NominalCardiacTriggerTimePriorToRPeak>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::NominalCardiacTriggerTimePriorToRPeak>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ActualCardiacTriggerTimePriorToRPeak>::s_keyword =
    Keyword::ActualCardiacTriggerTimePriorToRPeak;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualCardiacTriggerTimePriorToRPeak>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualCardiacTriggerTimePriorToRPeak>::s_element = 0x9155;
template<>
DATA_API const std::string_view Attribute<Keyword::ActualCardiacTriggerTimePriorToRPeak>::s_name =
    "Actual Cardiac Trigger Time Prior To R-Peak";
template<>
DATA_API const VR Attribute<Keyword::ActualCardiacTriggerTimePriorToRPeak>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ActualCardiacTriggerTimePriorToRPeak>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameAcquisitionNumber>::s_keyword = Keyword::FrameAcquisitionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameAcquisitionNumber>::s_element = 0x9156;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameAcquisitionNumber>::s_name = "Frame Acquisition Number";
template<>
DATA_API const VR Attribute<Keyword::FrameAcquisitionNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FrameAcquisitionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionIndexValues>::s_keyword = Keyword::DimensionIndexValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexValues>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexValues>::s_element = 0x9157;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionIndexValues>::s_name = "Dimension Index Values";
template<>
DATA_API const VR Attribute<Keyword::DimensionIndexValues>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::DimensionIndexValues>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameComments>::s_keyword = Keyword::FrameComments;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameComments>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameComments>::s_element = 0x9158;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameComments>::s_name = "Frame Comments";
template<>
DATA_API const VR Attribute<Keyword::FrameComments>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::FrameComments>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConcatenationUID>::s_keyword = Keyword::ConcatenationUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConcatenationUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConcatenationUID>::s_element = 0x9161;
template<>
DATA_API const std::string_view Attribute<Keyword::ConcatenationUID>::s_name = "Concatenation UID";
template<>
DATA_API const VR Attribute<Keyword::ConcatenationUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ConcatenationUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InConcatenationNumber>::s_keyword = Keyword::InConcatenationNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InConcatenationNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InConcatenationNumber>::s_element = 0x9162;
template<>
DATA_API const std::string_view Attribute<Keyword::InConcatenationNumber>::s_name = "In-concatenation Number";
template<>
DATA_API const VR Attribute<Keyword::InConcatenationNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::InConcatenationNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InConcatenationTotalNumber>::s_keyword = Keyword::InConcatenationTotalNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InConcatenationTotalNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InConcatenationTotalNumber>::s_element = 0x9163;
template<>
DATA_API const std::string_view Attribute<Keyword::InConcatenationTotalNumber>::s_name =
    "In-concatenation Total Number";
template<>
DATA_API const VR Attribute<Keyword::InConcatenationTotalNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::InConcatenationTotalNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionOrganizationUID>::s_keyword = Keyword::DimensionOrganizationUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionOrganizationUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionOrganizationUID>::s_element = 0x9164;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionOrganizationUID>::s_name = "Dimension Organization UID";
template<>
DATA_API const VR Attribute<Keyword::DimensionOrganizationUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::DimensionOrganizationUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionIndexPointer>::s_keyword = Keyword::DimensionIndexPointer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexPointer>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexPointer>::s_element = 0x9165;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionIndexPointer>::s_name = "Dimension Index Pointer";
template<>
DATA_API const VR Attribute<Keyword::DimensionIndexPointer>::s_vr = VR::AT;
template<>
DATA_API const VM Attribute<Keyword::DimensionIndexPointer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FunctionalGroupPointer>::s_keyword = Keyword::FunctionalGroupPointer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalGroupPointer>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalGroupPointer>::s_element = 0x9167;
template<>
DATA_API const std::string_view Attribute<Keyword::FunctionalGroupPointer>::s_name = "Functional Group Pointer";
template<>
DATA_API const VR Attribute<Keyword::FunctionalGroupPointer>::s_vr = VR::AT;
template<>
DATA_API const VM Attribute<Keyword::FunctionalGroupPointer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UnassignedSharedConvertedAttributesSequence>::s_keyword =
    Keyword::UnassignedSharedConvertedAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UnassignedSharedConvertedAttributesSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UnassignedSharedConvertedAttributesSequence>::s_element = 0x9170;
template<>
DATA_API const std::string_view Attribute<Keyword::UnassignedSharedConvertedAttributesSequence>::s_name =
    "Unassigned Shared Converted Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::UnassignedSharedConvertedAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::UnassignedSharedConvertedAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UnassignedPerFrameConvertedAttributesSequence>::s_keyword =
    Keyword::UnassignedPerFrameConvertedAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UnassignedPerFrameConvertedAttributesSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UnassignedPerFrameConvertedAttributesSequence>::s_element = 0x9171;
template<>
DATA_API const std::string_view Attribute<Keyword::UnassignedPerFrameConvertedAttributesSequence>::s_name =
    "Unassigned Per-Frame Converted Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::UnassignedPerFrameConvertedAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::UnassignedPerFrameConvertedAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConversionSourceAttributesSequence>::s_keyword =
    Keyword::ConversionSourceAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConversionSourceAttributesSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConversionSourceAttributesSequence>::s_element = 0x9172;
template<>
DATA_API const std::string_view Attribute<Keyword::ConversionSourceAttributesSequence>::s_name =
    "Conversion Source Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::ConversionSourceAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ConversionSourceAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionIndexPrivateCreator>::s_keyword =
    Keyword::DimensionIndexPrivateCreator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexPrivateCreator>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexPrivateCreator>::s_element = 0x9213;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionIndexPrivateCreator>::s_name =
    "Dimension Index Private Creator";
template<>
DATA_API const VR Attribute<Keyword::DimensionIndexPrivateCreator>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DimensionIndexPrivateCreator>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionOrganizationSequence>::s_keyword =
    Keyword::DimensionOrganizationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionOrganizationSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionOrganizationSequence>::s_element = 0x9221;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionOrganizationSequence>::s_name =
    "Dimension Organization Sequence";
template<>
DATA_API const VR Attribute<Keyword::DimensionOrganizationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DimensionOrganizationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionIndexSequence>::s_keyword = Keyword::DimensionIndexSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionIndexSequence>::s_element = 0x9222;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionIndexSequence>::s_name = "Dimension Index Sequence";
template<>
DATA_API const VR Attribute<Keyword::DimensionIndexSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DimensionIndexSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConcatenationFrameOffsetNumber>::s_keyword =
    Keyword::ConcatenationFrameOffsetNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConcatenationFrameOffsetNumber>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConcatenationFrameOffsetNumber>::s_element = 0x9228;
template<>
DATA_API const std::string_view Attribute<Keyword::ConcatenationFrameOffsetNumber>::s_name =
    "Concatenation Frame Offset Number";
template<>
DATA_API const VR Attribute<Keyword::ConcatenationFrameOffsetNumber>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::ConcatenationFrameOffsetNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FunctionalGroupPrivateCreator>::s_keyword =
    Keyword::FunctionalGroupPrivateCreator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalGroupPrivateCreator>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FunctionalGroupPrivateCreator>::s_element = 0x9238;
template<>
DATA_API const std::string_view Attribute<Keyword::FunctionalGroupPrivateCreator>::s_name =
    "Functional Group Private Creator";
template<>
DATA_API const VR Attribute<Keyword::FunctionalGroupPrivateCreator>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::FunctionalGroupPrivateCreator>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalPercentageOfCardiacPhase>::s_keyword =
    Keyword::NominalPercentageOfCardiacPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalPercentageOfCardiacPhase>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalPercentageOfCardiacPhase>::s_element = 0x9241;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalPercentageOfCardiacPhase>::s_name =
    "Nominal Percentage of Cardiac Phase";
template<>
DATA_API const VR Attribute<Keyword::NominalPercentageOfCardiacPhase>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::NominalPercentageOfCardiacPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalPercentageOfRespiratoryPhase>::s_keyword =
    Keyword::NominalPercentageOfRespiratoryPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalPercentageOfRespiratoryPhase>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalPercentageOfRespiratoryPhase>::s_element = 0x9245;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalPercentageOfRespiratoryPhase>::s_name =
    "Nominal Percentage of Respiratory Phase";
template<>
DATA_API const VR Attribute<Keyword::NominalPercentageOfRespiratoryPhase>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::NominalPercentageOfRespiratoryPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartingRespiratoryAmplitude>::s_keyword =
    Keyword::StartingRespiratoryAmplitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartingRespiratoryAmplitude>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartingRespiratoryAmplitude>::s_element = 0x9246;
template<>
DATA_API const std::string_view Attribute<Keyword::StartingRespiratoryAmplitude>::s_name =
    "Starting Respiratory Amplitude";
template<>
DATA_API const VR Attribute<Keyword::StartingRespiratoryAmplitude>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::StartingRespiratoryAmplitude>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartingRespiratoryPhase>::s_keyword = Keyword::StartingRespiratoryPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartingRespiratoryPhase>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartingRespiratoryPhase>::s_element = 0x9247;
template<>
DATA_API const std::string_view Attribute<Keyword::StartingRespiratoryPhase>::s_name = "Starting Respiratory Phase";
template<>
DATA_API const VR Attribute<Keyword::StartingRespiratoryPhase>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::StartingRespiratoryPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EndingRespiratoryAmplitude>::s_keyword = Keyword::EndingRespiratoryAmplitude;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndingRespiratoryAmplitude>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndingRespiratoryAmplitude>::s_element = 0x9248;
template<>
DATA_API const std::string_view Attribute<Keyword::EndingRespiratoryAmplitude>::s_name = "Ending Respiratory Amplitude";
template<>
DATA_API const VR Attribute<Keyword::EndingRespiratoryAmplitude>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::EndingRespiratoryAmplitude>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EndingRespiratoryPhase>::s_keyword = Keyword::EndingRespiratoryPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndingRespiratoryPhase>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndingRespiratoryPhase>::s_element = 0x9249;
template<>
DATA_API const std::string_view Attribute<Keyword::EndingRespiratoryPhase>::s_name = "Ending Respiratory Phase";
template<>
DATA_API const VR Attribute<Keyword::EndingRespiratoryPhase>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::EndingRespiratoryPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratoryTriggerType>::s_keyword = Keyword::RespiratoryTriggerType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryTriggerType>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryTriggerType>::s_element = 0x9250;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratoryTriggerType>::s_name = "Respiratory Trigger Type";
template<>
DATA_API const VR Attribute<Keyword::RespiratoryTriggerType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RespiratoryTriggerType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RRIntervalTimeNominal>::s_keyword = Keyword::RRIntervalTimeNominal;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RRIntervalTimeNominal>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RRIntervalTimeNominal>::s_element = 0x9251;
template<>
DATA_API const std::string_view Attribute<Keyword::RRIntervalTimeNominal>::s_name = "R-R Interval Time Nominal";
template<>
DATA_API const VR Attribute<Keyword::RRIntervalTimeNominal>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RRIntervalTimeNominal>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ActualCardiacTriggerDelayTime>::s_keyword =
    Keyword::ActualCardiacTriggerDelayTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualCardiacTriggerDelayTime>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualCardiacTriggerDelayTime>::s_element = 0x9252;
template<>
DATA_API const std::string_view Attribute<Keyword::ActualCardiacTriggerDelayTime>::s_name =
    "Actual Cardiac Trigger Delay Time";
template<>
DATA_API const VR Attribute<Keyword::ActualCardiacTriggerDelayTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ActualCardiacTriggerDelayTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratorySynchronizationSequence>::s_keyword =
    Keyword::RespiratorySynchronizationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratorySynchronizationSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratorySynchronizationSequence>::s_element = 0x9253;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratorySynchronizationSequence>::s_name =
    "Respiratory Synchronization Sequence";
template<>
DATA_API const VR Attribute<Keyword::RespiratorySynchronizationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RespiratorySynchronizationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratoryIntervalTime>::s_keyword = Keyword::RespiratoryIntervalTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryIntervalTime>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryIntervalTime>::s_element = 0x9254;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratoryIntervalTime>::s_name = "Respiratory Interval Time";
template<>
DATA_API const VR Attribute<Keyword::RespiratoryIntervalTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RespiratoryIntervalTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalRespiratoryTriggerDelayTime>::s_keyword =
    Keyword::NominalRespiratoryTriggerDelayTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalRespiratoryTriggerDelayTime>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalRespiratoryTriggerDelayTime>::s_element = 0x9255;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalRespiratoryTriggerDelayTime>::s_name =
    "Nominal Respiratory Trigger Delay Time";
template<>
DATA_API const VR Attribute<Keyword::NominalRespiratoryTriggerDelayTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::NominalRespiratoryTriggerDelayTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RespiratoryTriggerDelayThreshold>::s_keyword =
    Keyword::RespiratoryTriggerDelayThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryTriggerDelayThreshold>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RespiratoryTriggerDelayThreshold>::s_element = 0x9256;
template<>
DATA_API const std::string_view Attribute<Keyword::RespiratoryTriggerDelayThreshold>::s_name =
    "Respiratory Trigger Delay Threshold";
template<>
DATA_API const VR Attribute<Keyword::RespiratoryTriggerDelayThreshold>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RespiratoryTriggerDelayThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ActualRespiratoryTriggerDelayTime>::s_keyword =
    Keyword::ActualRespiratoryTriggerDelayTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualRespiratoryTriggerDelayTime>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ActualRespiratoryTriggerDelayTime>::s_element = 0x9257;
template<>
DATA_API const std::string_view Attribute<Keyword::ActualRespiratoryTriggerDelayTime>::s_name =
    "Actual Respiratory Trigger Delay Time";
template<>
DATA_API const VR Attribute<Keyword::ActualRespiratoryTriggerDelayTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ActualRespiratoryTriggerDelayTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagePositionVolume>::s_keyword = Keyword::ImagePositionVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePositionVolume>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePositionVolume>::s_element = 0x9301;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagePositionVolume>::s_name = "Image Position (Volume)";
template<>
DATA_API const VR Attribute<Keyword::ImagePositionVolume>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ImagePositionVolume>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ImageOrientationVolume>::s_keyword = Keyword::ImageOrientationVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageOrientationVolume>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageOrientationVolume>::s_element = 0x9302;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageOrientationVolume>::s_name = "Image Orientation (Volume)";
template<>
DATA_API const VR Attribute<Keyword::ImageOrientationVolume>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ImageOrientationVolume>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::UltrasoundAcquisitionGeometry>::s_keyword =
    Keyword::UltrasoundAcquisitionGeometry;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UltrasoundAcquisitionGeometry>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UltrasoundAcquisitionGeometry>::s_element = 0x9307;
template<>
DATA_API const std::string_view Attribute<Keyword::UltrasoundAcquisitionGeometry>::s_name =
    "Ultrasound Acquisition Geometry";
template<>
DATA_API const VR Attribute<Keyword::UltrasoundAcquisitionGeometry>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::UltrasoundAcquisitionGeometry>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApexPosition>::s_keyword = Keyword::ApexPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApexPosition>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApexPosition>::s_element = 0x9308;
template<>
DATA_API const std::string_view Attribute<Keyword::ApexPosition>::s_name = "Apex Position";
template<>
DATA_API const VR Attribute<Keyword::ApexPosition>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ApexPosition>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::VolumeToTransducerMappingMatrix>::s_keyword =
    Keyword::VolumeToTransducerMappingMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeToTransducerMappingMatrix>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeToTransducerMappingMatrix>::s_element = 0x9309;
template<>
DATA_API const std::string_view Attribute<Keyword::VolumeToTransducerMappingMatrix>::s_name =
    "Volume to Transducer Mapping Matrix";
template<>
DATA_API const VR Attribute<Keyword::VolumeToTransducerMappingMatrix>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::VolumeToTransducerMappingMatrix>::s_vm = VM::MIN_16_MAX_16;
template<>
DATA_API const Keyword Attribute<Keyword::VolumeToTableMappingMatrix>::s_keyword = Keyword::VolumeToTableMappingMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeToTableMappingMatrix>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeToTableMappingMatrix>::s_element = 0x930A;
template<>
DATA_API const std::string_view Attribute<Keyword::VolumeToTableMappingMatrix>::s_name =
    "Volume to Table Mapping Matrix";
template<>
DATA_API const VR Attribute<Keyword::VolumeToTableMappingMatrix>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::VolumeToTableMappingMatrix>::s_vm = VM::MIN_16_MAX_16;
template<>
DATA_API const Keyword Attribute<Keyword::VolumeToTransducerRelationship>::s_keyword =
    Keyword::VolumeToTransducerRelationship;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeToTransducerRelationship>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeToTransducerRelationship>::s_element = 0x930B;
template<>
DATA_API const std::string_view Attribute<Keyword::VolumeToTransducerRelationship>::s_name =
    "Volume to Transducer Relationship";
template<>
DATA_API const VR Attribute<Keyword::VolumeToTransducerRelationship>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::VolumeToTransducerRelationship>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientFrameOfReferenceSource>::s_keyword =
    Keyword::PatientFrameOfReferenceSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientFrameOfReferenceSource>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientFrameOfReferenceSource>::s_element = 0x930C;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientFrameOfReferenceSource>::s_name =
    "Patient Frame of Reference Source";
template<>
DATA_API const VR Attribute<Keyword::PatientFrameOfReferenceSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientFrameOfReferenceSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemporalPositionTimeOffset>::s_keyword = Keyword::TemporalPositionTimeOffset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionTimeOffset>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionTimeOffset>::s_element = 0x930D;
template<>
DATA_API const std::string_view Attribute<Keyword::TemporalPositionTimeOffset>::s_name =
    "Temporal Position Time Offset";
template<>
DATA_API const VR Attribute<Keyword::TemporalPositionTimeOffset>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TemporalPositionTimeOffset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanePositionVolumeSequence>::s_keyword =
    Keyword::PlanePositionVolumeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanePositionVolumeSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanePositionVolumeSequence>::s_element = 0x930E;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanePositionVolumeSequence>::s_name =
    "Plane Position (Volume) Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanePositionVolumeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanePositionVolumeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlaneOrientationVolumeSequence>::s_keyword =
    Keyword::PlaneOrientationVolumeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlaneOrientationVolumeSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlaneOrientationVolumeSequence>::s_element = 0x930F;
template<>
DATA_API const std::string_view Attribute<Keyword::PlaneOrientationVolumeSequence>::s_name =
    "Plane Orientation (Volume) Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlaneOrientationVolumeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlaneOrientationVolumeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemporalPositionSequence>::s_keyword = Keyword::TemporalPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalPositionSequence>::s_element = 0x9310;
template<>
DATA_API const std::string_view Attribute<Keyword::TemporalPositionSequence>::s_name = "Temporal Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::TemporalPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TemporalPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionOrganizationType>::s_keyword = Keyword::DimensionOrganizationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionOrganizationType>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionOrganizationType>::s_element = 0x9311;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionOrganizationType>::s_name = "Dimension Organization Type";
template<>
DATA_API const VR Attribute<Keyword::DimensionOrganizationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DimensionOrganizationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VolumeFrameOfReferenceUID>::s_keyword = Keyword::VolumeFrameOfReferenceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeFrameOfReferenceUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VolumeFrameOfReferenceUID>::s_element = 0x9312;
template<>
DATA_API const std::string_view Attribute<Keyword::VolumeFrameOfReferenceUID>::s_name = "Volume Frame of Reference UID";
template<>
DATA_API const VR Attribute<Keyword::VolumeFrameOfReferenceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::VolumeFrameOfReferenceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableFrameOfReferenceUID>::s_keyword = Keyword::TableFrameOfReferenceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableFrameOfReferenceUID>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableFrameOfReferenceUID>::s_element = 0x9313;
template<>
DATA_API const std::string_view Attribute<Keyword::TableFrameOfReferenceUID>::s_name = "Table Frame of Reference UID";
template<>
DATA_API const VR Attribute<Keyword::TableFrameOfReferenceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::TableFrameOfReferenceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DimensionDescriptionLabel>::s_keyword = Keyword::DimensionDescriptionLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionDescriptionLabel>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DimensionDescriptionLabel>::s_element = 0x9421;
template<>
DATA_API const std::string_view Attribute<Keyword::DimensionDescriptionLabel>::s_name = "Dimension Description Label";
template<>
DATA_API const VR Attribute<Keyword::DimensionDescriptionLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DimensionDescriptionLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientOrientationInFrameSequence>::s_keyword =
    Keyword::PatientOrientationInFrameSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientationInFrameSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientationInFrameSequence>::s_element = 0x9450;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientOrientationInFrameSequence>::s_name =
    "Patient Orientation in Frame Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientOrientationInFrameSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientOrientationInFrameSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameLabel>::s_keyword = Keyword::FrameLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameLabel>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameLabel>::s_element = 0x9453;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameLabel>::s_name = "Frame Label";
template<>
DATA_API const VR Attribute<Keyword::FrameLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::FrameLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionIndex>::s_keyword = Keyword::AcquisitionIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionIndex>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionIndex>::s_element = 0x9518;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionIndex>::s_name = "Acquisition Index";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionIndex>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ContributingSOPInstancesReferenceSequence>::s_keyword =
    Keyword::ContributingSOPInstancesReferenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributingSOPInstancesReferenceSequence>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContributingSOPInstancesReferenceSequence>::s_element = 0x9529;
template<>
DATA_API const std::string_view Attribute<Keyword::ContributingSOPInstancesReferenceSequence>::s_name =
    "Contributing SOP Instances Reference Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContributingSOPInstancesReferenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContributingSOPInstancesReferenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionIndex>::s_keyword = Keyword::ReconstructionIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionIndex>::s_group = 0x0020;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionIndex>::s_element = 0x9536;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionIndex>::s_name = "Reconstruction Index";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LightPathFilterPassThroughWavelength>::s_keyword =
    Keyword::LightPathFilterPassThroughWavelength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightPathFilterPassThroughWavelength>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightPathFilterPassThroughWavelength>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::LightPathFilterPassThroughWavelength>::s_name =
    "Light Path Filter Pass-Through Wavelength";
template<>
DATA_API const VR Attribute<Keyword::LightPathFilterPassThroughWavelength>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::LightPathFilterPassThroughWavelength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LightPathFilterPassBand>::s_keyword = Keyword::LightPathFilterPassBand;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightPathFilterPassBand>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightPathFilterPassBand>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::LightPathFilterPassBand>::s_name = "Light Path Filter Pass Band";
template<>
DATA_API const VR Attribute<Keyword::LightPathFilterPassBand>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::LightPathFilterPassBand>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ImagePathFilterPassThroughWavelength>::s_keyword =
    Keyword::ImagePathFilterPassThroughWavelength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePathFilterPassThroughWavelength>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePathFilterPassThroughWavelength>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagePathFilterPassThroughWavelength>::s_name =
    "Image Path Filter Pass-Through Wavelength";
template<>
DATA_API const VR Attribute<Keyword::ImagePathFilterPassThroughWavelength>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImagePathFilterPassThroughWavelength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagePathFilterPassBand>::s_keyword = Keyword::ImagePathFilterPassBand;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePathFilterPassBand>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePathFilterPassBand>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagePathFilterPassBand>::s_name = "Image Path Filter Pass Band";
template<>
DATA_API const VR Attribute<Keyword::ImagePathFilterPassBand>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImagePathFilterPassBand>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PatientEyeMovementCommanded>::s_keyword =
    Keyword::PatientEyeMovementCommanded;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientEyeMovementCommanded>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientEyeMovementCommanded>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientEyeMovementCommanded>::s_name =
    "Patient Eye Movement Commanded";
template<>
DATA_API const VR Attribute<Keyword::PatientEyeMovementCommanded>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientEyeMovementCommanded>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientEyeMovementCommandCodeSequence>::s_keyword =
    Keyword::PatientEyeMovementCommandCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientEyeMovementCommandCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientEyeMovementCommandCodeSequence>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientEyeMovementCommandCodeSequence>::s_name =
    "Patient Eye Movement Command Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientEyeMovementCommandCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientEyeMovementCommandCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SphericalLensPower>::s_keyword = Keyword::SphericalLensPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SphericalLensPower>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SphericalLensPower>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::SphericalLensPower>::s_name = "Spherical Lens Power";
template<>
DATA_API const VR Attribute<Keyword::SphericalLensPower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SphericalLensPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CylinderLensPower>::s_keyword = Keyword::CylinderLensPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CylinderLensPower>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CylinderLensPower>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::CylinderLensPower>::s_name = "Cylinder Lens Power";
template<>
DATA_API const VR Attribute<Keyword::CylinderLensPower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CylinderLensPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CylinderAxis>::s_keyword = Keyword::CylinderAxis;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CylinderAxis>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CylinderAxis>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::CylinderAxis>::s_name = "Cylinder Axis";
template<>
DATA_API const VR Attribute<Keyword::CylinderAxis>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CylinderAxis>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EmmetropicMagnification>::s_keyword = Keyword::EmmetropicMagnification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EmmetropicMagnification>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EmmetropicMagnification>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::EmmetropicMagnification>::s_name = "Emmetropic Magnification";
template<>
DATA_API const VR Attribute<Keyword::EmmetropicMagnification>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::EmmetropicMagnification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntraOcularPressure>::s_keyword = Keyword::IntraOcularPressure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntraOcularPressure>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntraOcularPressure>::s_element = 0x000B;
template<>
DATA_API const std::string_view Attribute<Keyword::IntraOcularPressure>::s_name = "Intra Ocular Pressure";
template<>
DATA_API const VR Attribute<Keyword::IntraOcularPressure>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::IntraOcularPressure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HorizontalFieldOfView>::s_keyword = Keyword::HorizontalFieldOfView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HorizontalFieldOfView>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HorizontalFieldOfView>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::HorizontalFieldOfView>::s_name = "Horizontal field of view";
template<>
DATA_API const VR Attribute<Keyword::HorizontalFieldOfView>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::HorizontalFieldOfView>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PupilDilated>::s_keyword = Keyword::PupilDilated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PupilDilated>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PupilDilated>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::PupilDilated>::s_name = "Pupil Dilated";
template<>
DATA_API const VR Attribute<Keyword::PupilDilated>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PupilDilated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DegreeOfDilation>::s_keyword = Keyword::DegreeOfDilation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DegreeOfDilation>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DegreeOfDilation>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::DegreeOfDilation>::s_name = "Degree of Dilation";
template<>
DATA_API const VR Attribute<Keyword::DegreeOfDilation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DegreeOfDilation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDeviceTypeCodeSequence>::s_keyword =
    Keyword::AcquisitionDeviceTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceTypeCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceTypeCodeSequence>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDeviceTypeCodeSequence>::s_name =
    "Acquisition Device Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDeviceTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDeviceTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminationTypeCodeSequence>::s_keyword =
    Keyword::IlluminationTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationTypeCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationTypeCodeSequence>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminationTypeCodeSequence>::s_name =
    "Illumination Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::IlluminationTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IlluminationTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LightPathFilterTypeStackCodeSequence>::s_keyword =
    Keyword::LightPathFilterTypeStackCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightPathFilterTypeStackCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LightPathFilterTypeStackCodeSequence>::s_element = 0x0017;
template<>
DATA_API const std::string_view Attribute<Keyword::LightPathFilterTypeStackCodeSequence>::s_name =
    "Light Path Filter Type Stack Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::LightPathFilterTypeStackCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::LightPathFilterTypeStackCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagePathFilterTypeStackCodeSequence>::s_keyword =
    Keyword::ImagePathFilterTypeStackCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePathFilterTypeStackCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePathFilterTypeStackCodeSequence>::s_element = 0x0018;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagePathFilterTypeStackCodeSequence>::s_name =
    "Image Path Filter Type Stack Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImagePathFilterTypeStackCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImagePathFilterTypeStackCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LensesCodeSequence>::s_keyword = Keyword::LensesCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensesCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LensesCodeSequence>::s_element = 0x0019;
template<>
DATA_API const std::string_view Attribute<Keyword::LensesCodeSequence>::s_name = "Lenses Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::LensesCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::LensesCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ChannelDescriptionCodeSequence>::s_keyword =
    Keyword::ChannelDescriptionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelDescriptionCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelDescriptionCodeSequence>::s_element = 0x001A;
template<>
DATA_API const std::string_view Attribute<Keyword::ChannelDescriptionCodeSequence>::s_name =
    "Channel Description Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ChannelDescriptionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ChannelDescriptionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RefractiveStateSequence>::s_keyword = Keyword::RefractiveStateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RefractiveStateSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RefractiveStateSequence>::s_element = 0x001B;
template<>
DATA_API const std::string_view Attribute<Keyword::RefractiveStateSequence>::s_name = "Refractive State Sequence";
template<>
DATA_API const VR Attribute<Keyword::RefractiveStateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RefractiveStateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MydriaticAgentCodeSequence>::s_keyword = Keyword::MydriaticAgentCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentCodeSequence>::s_element = 0x001C;
template<>
DATA_API const std::string_view Attribute<Keyword::MydriaticAgentCodeSequence>::s_name =
    "Mydriatic Agent Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::MydriaticAgentCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MydriaticAgentCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelativeImagePositionCodeSequence>::s_keyword =
    Keyword::RelativeImagePositionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeImagePositionCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeImagePositionCodeSequence>::s_element = 0x001D;
template<>
DATA_API const std::string_view Attribute<Keyword::RelativeImagePositionCodeSequence>::s_name =
    "Relative Image Position Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RelativeImagePositionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RelativeImagePositionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CameraAngleOfView>::s_keyword = Keyword::CameraAngleOfView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraAngleOfView>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraAngleOfView>::s_element = 0x001E;
template<>
DATA_API const std::string_view Attribute<Keyword::CameraAngleOfView>::s_name = "Camera Angle of view";
template<>
DATA_API const VR Attribute<Keyword::CameraAngleOfView>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CameraAngleOfView>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StereoPairsPresent>::s_keyword = Keyword::StereoPairsPresent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StereoPairsPresent>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StereoPairsPresent>::s_element = 0x0028;
template<>
DATA_API const std::string_view Attribute<Keyword::StereoPairsPresent>::s_name = "Stereo Pairs Present";
template<>
DATA_API const VR Attribute<Keyword::StereoPairsPresent>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::StereoPairsPresent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AxialLengthOfTheEye>::s_keyword = Keyword::AxialLengthOfTheEye;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialLengthOfTheEye>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialLengthOfTheEye>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::AxialLengthOfTheEye>::s_name = "Axial Length of the Eye";
template<>
DATA_API const VR Attribute<Keyword::AxialLengthOfTheEye>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AxialLengthOfTheEye>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicFrameLocationSequence>::s_keyword =
    Keyword::OphthalmicFrameLocationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicFrameLocationSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicFrameLocationSequence>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicFrameLocationSequence>::s_name =
    "Ophthalmic Frame Location Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicFrameLocationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicFrameLocationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferenceCoordinates>::s_keyword = Keyword::ReferenceCoordinates;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferenceCoordinates>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferenceCoordinates>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferenceCoordinates>::s_name = "Reference Coordinates";
template<>
DATA_API const VR Attribute<Keyword::ReferenceCoordinates>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ReferenceCoordinates>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::DepthSpatialResolution>::s_keyword = Keyword::DepthSpatialResolution;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthSpatialResolution>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthSpatialResolution>::s_element = 0x0035;
template<>
DATA_API const std::string_view Attribute<Keyword::DepthSpatialResolution>::s_name = "Depth Spatial Resolution";
template<>
DATA_API const VR Attribute<Keyword::DepthSpatialResolution>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DepthSpatialResolution>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumDepthDistortion>::s_keyword = Keyword::MaximumDepthDistortion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumDepthDistortion>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumDepthDistortion>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumDepthDistortion>::s_name = "Maximum Depth Distortion";
template<>
DATA_API const VR Attribute<Keyword::MaximumDepthDistortion>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaximumDepthDistortion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlongScanSpatialResolution>::s_keyword = Keyword::AlongScanSpatialResolution;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlongScanSpatialResolution>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlongScanSpatialResolution>::s_element = 0x0037;
template<>
DATA_API const std::string_view Attribute<Keyword::AlongScanSpatialResolution>::s_name =
    "Along-scan Spatial Resolution";
template<>
DATA_API const VR Attribute<Keyword::AlongScanSpatialResolution>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AlongScanSpatialResolution>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumAlongScanDistortion>::s_keyword = Keyword::MaximumAlongScanDistortion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumAlongScanDistortion>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumAlongScanDistortion>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumAlongScanDistortion>::s_name =
    "Maximum Along-scan Distortion";
template<>
DATA_API const VR Attribute<Keyword::MaximumAlongScanDistortion>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaximumAlongScanDistortion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicImageOrientation>::s_keyword = Keyword::OphthalmicImageOrientation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicImageOrientation>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicImageOrientation>::s_element = 0x0039;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicImageOrientation>::s_name = "Ophthalmic Image Orientation";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicImageOrientation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicImageOrientation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DepthOfTransverseImage>::s_keyword = Keyword::DepthOfTransverseImage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthOfTransverseImage>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DepthOfTransverseImage>::s_element = 0x0041;
template<>
DATA_API const std::string_view Attribute<Keyword::DepthOfTransverseImage>::s_name = "Depth of Transverse Image";
template<>
DATA_API const VR Attribute<Keyword::DepthOfTransverseImage>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DepthOfTransverseImage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MydriaticAgentConcentrationUnitsSequence>::s_keyword =
    Keyword::MydriaticAgentConcentrationUnitsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentConcentrationUnitsSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentConcentrationUnitsSequence>::s_element = 0x0042;
template<>
DATA_API const std::string_view Attribute<Keyword::MydriaticAgentConcentrationUnitsSequence>::s_name =
    "Mydriatic Agent Concentration Units Sequence";
template<>
DATA_API const VR Attribute<Keyword::MydriaticAgentConcentrationUnitsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MydriaticAgentConcentrationUnitsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcrossScanSpatialResolution>::s_keyword =
    Keyword::AcrossScanSpatialResolution;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcrossScanSpatialResolution>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcrossScanSpatialResolution>::s_element = 0x0048;
template<>
DATA_API const std::string_view Attribute<Keyword::AcrossScanSpatialResolution>::s_name =
    "Across-scan Spatial Resolution";
template<>
DATA_API const VR Attribute<Keyword::AcrossScanSpatialResolution>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AcrossScanSpatialResolution>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumAcrossScanDistortion>::s_keyword =
    Keyword::MaximumAcrossScanDistortion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumAcrossScanDistortion>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumAcrossScanDistortion>::s_element = 0x0049;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumAcrossScanDistortion>::s_name =
    "Maximum Across-scan Distortion";
template<>
DATA_API const VR Attribute<Keyword::MaximumAcrossScanDistortion>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaximumAcrossScanDistortion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MydriaticAgentConcentration>::s_keyword =
    Keyword::MydriaticAgentConcentration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentConcentration>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentConcentration>::s_element = 0x004E;
template<>
DATA_API const std::string_view Attribute<Keyword::MydriaticAgentConcentration>::s_name =
    "Mydriatic Agent Concentration";
template<>
DATA_API const VR Attribute<Keyword::MydriaticAgentConcentration>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MydriaticAgentConcentration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminationWaveLength>::s_keyword = Keyword::IlluminationWaveLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationWaveLength>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationWaveLength>::s_element = 0x0055;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminationWaveLength>::s_name = "Illumination Wave Length";
template<>
DATA_API const VR Attribute<Keyword::IlluminationWaveLength>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::IlluminationWaveLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminationPower>::s_keyword = Keyword::IlluminationPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationPower>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationPower>::s_element = 0x0056;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminationPower>::s_name = "Illumination Power";
template<>
DATA_API const VR Attribute<Keyword::IlluminationPower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::IlluminationPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminationBandwidth>::s_keyword = Keyword::IlluminationBandwidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationBandwidth>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationBandwidth>::s_element = 0x0057;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminationBandwidth>::s_name = "Illumination Bandwidth";
template<>
DATA_API const VR Attribute<Keyword::IlluminationBandwidth>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::IlluminationBandwidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MydriaticAgentSequence>::s_keyword = Keyword::MydriaticAgentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MydriaticAgentSequence>::s_element = 0x0058;
template<>
DATA_API const std::string_view Attribute<Keyword::MydriaticAgentSequence>::s_name = "Mydriatic Agent Sequence";
template<>
DATA_API const VR Attribute<Keyword::MydriaticAgentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MydriaticAgentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicAxialLength>::s_keyword = Keyword::OphthalmicAxialLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAxialLength>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAxialLength>::s_element = 0x1019;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicAxialLength>::s_name = "Ophthalmic Axial Length";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicAxialLength>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicAxialLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantName>::s_keyword = Keyword::ImplantName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantName>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantName>::s_element = 0x1095;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantName>::s_name = "Implant Name";
template<>
DATA_API const VR Attribute<Keyword::ImplantName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ImplantName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantPartNumber>::s_keyword = Keyword::ImplantPartNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantPartNumber>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantPartNumber>::s_element = 0x1097;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantPartNumber>::s_name = "Implant Part Number";
template<>
DATA_API const VR Attribute<Keyword::ImplantPartNumber>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ImplantPartNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicMappingDeviceType>::s_keyword =
    Keyword::OphthalmicMappingDeviceType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicMappingDeviceType>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicMappingDeviceType>::s_element = 0x1415;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicMappingDeviceType>::s_name =
    "Ophthalmic Mapping Device Type";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicMappingDeviceType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicMappingDeviceType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionMethodCodeSequence>::s_keyword =
    Keyword::AcquisitionMethodCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionMethodCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionMethodCodeSequence>::s_element = 0x1420;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionMethodCodeSequence>::s_name =
    "Acquisition Method Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionMethodCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionMethodCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionMethodAlgorithmSequence>::s_keyword =
    Keyword::AcquisitionMethodAlgorithmSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionMethodAlgorithmSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionMethodAlgorithmSequence>::s_element = 0x1423;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionMethodAlgorithmSequence>::s_name =
    "Acquisition Method Algorithm Sequence";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionMethodAlgorithmSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionMethodAlgorithmSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicThicknessMapTypeCodeSequence>::s_keyword =
    Keyword::OphthalmicThicknessMapTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMapTypeCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMapTypeCodeSequence>::s_element = 0x1436;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicThicknessMapTypeCodeSequence>::s_name =
    "Ophthalmic Thickness Map Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicThicknessMapTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicThicknessMapTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicThicknessMappingNormalsSequence>::s_keyword =
    Keyword::OphthalmicThicknessMappingNormalsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMappingNormalsSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMappingNormalsSequence>::s_element = 0x1443;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicThicknessMappingNormalsSequence>::s_name =
    "Ophthalmic Thickness Mapping Normals Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicThicknessMappingNormalsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicThicknessMappingNormalsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RetinalThicknessDefinitionCodeSequence>::s_keyword =
    Keyword::RetinalThicknessDefinitionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetinalThicknessDefinitionCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetinalThicknessDefinitionCodeSequence>::s_element = 0x1445;
template<>
DATA_API const std::string_view Attribute<Keyword::RetinalThicknessDefinitionCodeSequence>::s_name =
    "Retinal Thickness Definition Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RetinalThicknessDefinitionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RetinalThicknessDefinitionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelValueMappingToCodedConceptSequence>::s_keyword =
    Keyword::PixelValueMappingToCodedConceptSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueMappingToCodedConceptSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueMappingToCodedConceptSequence>::s_element = 0x1450;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelValueMappingToCodedConceptSequence>::s_name =
    "Pixel Value Mapping to Coded Concept Sequence";
template<>
DATA_API const VR Attribute<Keyword::PixelValueMappingToCodedConceptSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PixelValueMappingToCodedConceptSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MappedPixelValue>::s_keyword = Keyword::MappedPixelValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappedPixelValue>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MappedPixelValue>::s_element = 0x1452;
template<>
DATA_API const std::string_view Attribute<Keyword::MappedPixelValue>::s_name = "Mapped Pixel Value";
template<>
DATA_API const VR Attribute<Keyword::MappedPixelValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::MappedPixelValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelValueMappingExplanation>::s_keyword =
    Keyword::PixelValueMappingExplanation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueMappingExplanation>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueMappingExplanation>::s_element = 0x1454;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelValueMappingExplanation>::s_name =
    "Pixel Value Mapping Explanation";
template<>
DATA_API const VR Attribute<Keyword::PixelValueMappingExplanation>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PixelValueMappingExplanation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicThicknessMapQualityThresholdSequence>::s_keyword =
    Keyword::OphthalmicThicknessMapQualityThresholdSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMapQualityThresholdSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMapQualityThresholdSequence>::s_element = 0x1458;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicThicknessMapQualityThresholdSequence>::s_name =
    "Ophthalmic Thickness Map Quality Threshold Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicThicknessMapQualityThresholdSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicThicknessMapQualityThresholdSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AnatomicStructureReferencePoint>::s_keyword =
    Keyword::AnatomicStructureReferencePoint;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicStructureReferencePoint>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnatomicStructureReferencePoint>::s_element = 0x1463;
template<>
DATA_API const std::string_view Attribute<Keyword::AnatomicStructureReferencePoint>::s_name =
    "Anatomic Structure Reference Point";
template<>
DATA_API const VR Attribute<Keyword::AnatomicStructureReferencePoint>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AnatomicStructureReferencePoint>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RegistrationToLocalizerSequence>::s_keyword =
    Keyword::RegistrationToLocalizerSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegistrationToLocalizerSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegistrationToLocalizerSequence>::s_element = 0x1465;
template<>
DATA_API const std::string_view Attribute<Keyword::RegistrationToLocalizerSequence>::s_name =
    "Registration to Localizer Sequence";
template<>
DATA_API const VR Attribute<Keyword::RegistrationToLocalizerSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RegistrationToLocalizerSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegisteredLocalizerUnits>::s_keyword = Keyword::RegisteredLocalizerUnits;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegisteredLocalizerUnits>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegisteredLocalizerUnits>::s_element = 0x1466;
template<>
DATA_API const std::string_view Attribute<Keyword::RegisteredLocalizerUnits>::s_name = "Registered Localizer Units";
template<>
DATA_API const VR Attribute<Keyword::RegisteredLocalizerUnits>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RegisteredLocalizerUnits>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegisteredLocalizerTopLeftHandCorner>::s_keyword =
    Keyword::RegisteredLocalizerTopLeftHandCorner;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegisteredLocalizerTopLeftHandCorner>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegisteredLocalizerTopLeftHandCorner>::s_element = 0x1467;
template<>
DATA_API const std::string_view Attribute<Keyword::RegisteredLocalizerTopLeftHandCorner>::s_name =
    "Registered Localizer Top Left Hand Corner";
template<>
DATA_API const VR Attribute<Keyword::RegisteredLocalizerTopLeftHandCorner>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RegisteredLocalizerTopLeftHandCorner>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RegisteredLocalizerBottomRightHandCorner>::s_keyword =
    Keyword::RegisteredLocalizerBottomRightHandCorner;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegisteredLocalizerBottomRightHandCorner>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegisteredLocalizerBottomRightHandCorner>::s_element = 0x1468;
template<>
DATA_API const std::string_view Attribute<Keyword::RegisteredLocalizerBottomRightHandCorner>::s_name =
    "Registered Localizer Bottom Right Hand Corner";
template<>
DATA_API const VR Attribute<Keyword::RegisteredLocalizerBottomRightHandCorner>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RegisteredLocalizerBottomRightHandCorner>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicThicknessMapQualityRatingSequence>::s_keyword =
    Keyword::OphthalmicThicknessMapQualityRatingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMapQualityRatingSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicThicknessMapQualityRatingSequence>::s_element = 0x1470;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicThicknessMapQualityRatingSequence>::s_name =
    "Ophthalmic Thickness Map Quality Rating Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicThicknessMapQualityRatingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicThicknessMapQualityRatingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelevantOPTAttributesSequence>::s_keyword =
    Keyword::RelevantOPTAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelevantOPTAttributesSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelevantOPTAttributesSequence>::s_element = 0x1472;
template<>
DATA_API const std::string_view Attribute<Keyword::RelevantOPTAttributesSequence>::s_name =
    "Relevant OPT Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::RelevantOPTAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RelevantOPTAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransformationMethodCodeSequence>::s_keyword =
    Keyword::TransformationMethodCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransformationMethodCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransformationMethodCodeSequence>::s_element = 0x1512;
template<>
DATA_API const std::string_view Attribute<Keyword::TransformationMethodCodeSequence>::s_name =
    "Transformation Method Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransformationMethodCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransformationMethodCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TransformationAlgorithmSequence>::s_keyword =
    Keyword::TransformationAlgorithmSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransformationAlgorithmSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransformationAlgorithmSequence>::s_element = 0x1513;
template<>
DATA_API const std::string_view Attribute<Keyword::TransformationAlgorithmSequence>::s_name =
    "Transformation Algorithm Sequence";
template<>
DATA_API const VR Attribute<Keyword::TransformationAlgorithmSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TransformationAlgorithmSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicAxialLengthMethod>::s_keyword =
    Keyword::OphthalmicAxialLengthMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAxialLengthMethod>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAxialLengthMethod>::s_element = 0x1515;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicAxialLengthMethod>::s_name =
    "Ophthalmic Axial Length Method";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicAxialLengthMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicAxialLengthMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicFOV>::s_keyword = Keyword::OphthalmicFOV;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicFOV>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicFOV>::s_element = 0x1517;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicFOV>::s_name = "Ophthalmic FOV";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicFOV>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicFOV>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDimensionalToThreeDimensionalMapSequence>::s_keyword =
    Keyword::TwoDimensionalToThreeDimensionalMapSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDimensionalToThreeDimensionalMapSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDimensionalToThreeDimensionalMapSequence>::s_element = 0x1518;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDimensionalToThreeDimensionalMapSequence>::s_name =
    "Two Dimensional to Three Dimensional Map Sequence";
template<>
DATA_API const VR Attribute<Keyword::TwoDimensionalToThreeDimensionalMapSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TwoDimensionalToThreeDimensionalMapSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>::s_keyword =
    Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>::s_element =
    0x1525;
template<>
DATA_API const std::string_view Attribute<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>::s_name =
    "Wide field Ophthalmic Photography Quality Rating Sequence";
template<>
DATA_API const VR Attribute<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>::s_keyword =
    Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>::s_group =
    0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>::s_element =
    0x1526;
template<>
DATA_API const std::string_view Attribute<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>::s_name =
    "Wide field Ophthalmic Photography Quality Threshold Sequence";
template<>
DATA_API const VR Attribute<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XCoordinatesCenterPixelViewAngle>::s_keyword =
    Keyword::XCoordinatesCenterPixelViewAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XCoordinatesCenterPixelViewAngle>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XCoordinatesCenterPixelViewAngle>::s_element = 0x1528;
template<>
DATA_API const std::string_view Attribute<Keyword::XCoordinatesCenterPixelViewAngle>::s_name =
    "X Coordinates Center Pixel view Angle";
template<>
DATA_API const VR Attribute<Keyword::XCoordinatesCenterPixelViewAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::XCoordinatesCenterPixelViewAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::YCoordinatesCenterPixelViewAngle>::s_keyword =
    Keyword::YCoordinatesCenterPixelViewAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::YCoordinatesCenterPixelViewAngle>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::YCoordinatesCenterPixelViewAngle>::s_element = 0x1529;
template<>
DATA_API const std::string_view Attribute<Keyword::YCoordinatesCenterPixelViewAngle>::s_name =
    "Y Coordinates Center Pixel view Angle";
template<>
DATA_API const VR Attribute<Keyword::YCoordinatesCenterPixelViewAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::YCoordinatesCenterPixelViewAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfMapPoints>::s_keyword = Keyword::NumberOfMapPoints;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfMapPoints>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfMapPoints>::s_element = 0x1530;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfMapPoints>::s_name = "Number of Map Points";
template<>
DATA_API const VR Attribute<Keyword::NumberOfMapPoints>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfMapPoints>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDimensionalToThreeDimensionalMapData>::s_keyword =
    Keyword::TwoDimensionalToThreeDimensionalMapData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDimensionalToThreeDimensionalMapData>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDimensionalToThreeDimensionalMapData>::s_element = 0x1531;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDimensionalToThreeDimensionalMapData>::s_name =
    "Two Dimensional to Three Dimensional Map Data";
template<>
DATA_API const VR Attribute<Keyword::TwoDimensionalToThreeDimensionalMapData>::s_vr = VR::OF;
template<>
DATA_API const VM Attribute<Keyword::TwoDimensionalToThreeDimensionalMapData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DerivationAlgorithmSequence>::s_keyword =
    Keyword::DerivationAlgorithmSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationAlgorithmSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationAlgorithmSequence>::s_element = 0x1612;
template<>
DATA_API const std::string_view Attribute<Keyword::DerivationAlgorithmSequence>::s_name =
    "Derivation Algorithm Sequence";
template<>
DATA_API const VR Attribute<Keyword::DerivationAlgorithmSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DerivationAlgorithmSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicImageTypeCodeSequence>::s_keyword =
    Keyword::OphthalmicImageTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicImageTypeCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicImageTypeCodeSequence>::s_element = 0x1615;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicImageTypeCodeSequence>::s_name =
    "Ophthalmic Image Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicImageTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicImageTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicImageTypeDescription>::s_keyword =
    Keyword::OphthalmicImageTypeDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicImageTypeDescription>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicImageTypeDescription>::s_element = 0x1616;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicImageTypeDescription>::s_name =
    "Ophthalmic Image Type Description";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicImageTypeDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicImageTypeDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScanPatternTypeCodeSequence>::s_keyword =
    Keyword::ScanPatternTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanPatternTypeCodeSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanPatternTypeCodeSequence>::s_element = 0x1618;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanPatternTypeCodeSequence>::s_name =
    "Scan Pattern Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ScanPatternTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ScanPatternTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSurfaceMeshIdentificationSequence>::s_keyword =
    Keyword::ReferencedSurfaceMeshIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceMeshIdentificationSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceMeshIdentificationSequence>::s_element = 0x1620;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSurfaceMeshIdentificationSequence>::s_name =
    "Referenced Surface Mesh Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSurfaceMeshIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSurfaceMeshIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicVolumetricPropertiesFlag>::s_keyword =
    Keyword::OphthalmicVolumetricPropertiesFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicVolumetricPropertiesFlag>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicVolumetricPropertiesFlag>::s_element = 0x1622;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicVolumetricPropertiesFlag>::s_name =
    "Ophthalmic Volumetric Properties Flag";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicVolumetricPropertiesFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicVolumetricPropertiesFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicAnatomicReferencePointXCoordinate>::s_keyword =
    Keyword::OphthalmicAnatomicReferencePointXCoordinate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAnatomicReferencePointXCoordinate>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAnatomicReferencePointXCoordinate>::s_element = 0x1624;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicAnatomicReferencePointXCoordinate>::s_name =
    "Ophthalmic Anatomic Reference Point X-Coordinate";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicAnatomicReferencePointXCoordinate>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicAnatomicReferencePointXCoordinate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicAnatomicReferencePointYCoordinate>::s_keyword =
    Keyword::OphthalmicAnatomicReferencePointYCoordinate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAnatomicReferencePointYCoordinate>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicAnatomicReferencePointYCoordinate>::s_element = 0x1626;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicAnatomicReferencePointYCoordinate>::s_name =
    "Ophthalmic Anatomic Reference Point Y-Coordinate";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicAnatomicReferencePointYCoordinate>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicAnatomicReferencePointYCoordinate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OphthalmicEnFaceImageQualityRatingSequence>::s_keyword =
    Keyword::OphthalmicEnFaceImageQualityRatingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicEnFaceImageQualityRatingSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OphthalmicEnFaceImageQualityRatingSequence>::s_element = 0x1628;
template<>
DATA_API const std::string_view Attribute<Keyword::OphthalmicEnFaceImageQualityRatingSequence>::s_name =
    "Ophthalmic En Face Image Quality Rating Sequence";
template<>
DATA_API const VR Attribute<Keyword::OphthalmicEnFaceImageQualityRatingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OphthalmicEnFaceImageQualityRatingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::QualityThreshold>::s_keyword = Keyword::QualityThreshold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QualityThreshold>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QualityThreshold>::s_element = 0x1630;
template<>
DATA_API const std::string_view Attribute<Keyword::QualityThreshold>::s_name = "Quality Threshold";
template<>
DATA_API const VR Attribute<Keyword::QualityThreshold>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::QualityThreshold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>::s_keyword =
    Keyword::OCTBscanAnalysisAcquisitionParametersSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>::s_element = 0x1640;
template<>
DATA_API const std::string_view Attribute<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>::s_name =
    "OCT B-scan Analysis Acquisition Parameters Sequence";
template<>
DATA_API const VR Attribute<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfBscansPerFrame>::s_keyword = Keyword::NumberOfBscansPerFrame;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfBscansPerFrame>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfBscansPerFrame>::s_element = 0x1642;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfBscansPerFrame>::s_name = "Number of B-scans Per Frame";
template<>
DATA_API const VR Attribute<Keyword::NumberOfBscansPerFrame>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfBscansPerFrame>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BscanSlabThickness>::s_keyword = Keyword::BscanSlabThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanSlabThickness>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanSlabThickness>::s_element = 0x1643;
template<>
DATA_API const std::string_view Attribute<Keyword::BscanSlabThickness>::s_name = "B-scan Slab Thickness";
template<>
DATA_API const VR Attribute<Keyword::BscanSlabThickness>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::BscanSlabThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceBetweenBscanSlabs>::s_keyword = Keyword::DistanceBetweenBscanSlabs;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceBetweenBscanSlabs>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceBetweenBscanSlabs>::s_element = 0x1644;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceBetweenBscanSlabs>::s_name = "Distance Between B-scan Slabs";
template<>
DATA_API const VR Attribute<Keyword::DistanceBetweenBscanSlabs>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DistanceBetweenBscanSlabs>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BscanCycleTime>::s_keyword = Keyword::BscanCycleTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanCycleTime>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanCycleTime>::s_element = 0x1645;
template<>
DATA_API const std::string_view Attribute<Keyword::BscanCycleTime>::s_name = "B-scan Cycle Time";
template<>
DATA_API const VR Attribute<Keyword::BscanCycleTime>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::BscanCycleTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BscanCycleTimeVector>::s_keyword = Keyword::BscanCycleTimeVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanCycleTimeVector>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanCycleTimeVector>::s_element = 0x1646;
template<>
DATA_API const std::string_view Attribute<Keyword::BscanCycleTimeVector>::s_name = "B-scan Cycle Time Vector";
template<>
DATA_API const VR Attribute<Keyword::BscanCycleTimeVector>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::BscanCycleTimeVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::AscanRate>::s_keyword = Keyword::AscanRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AscanRate>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AscanRate>::s_element = 0x1649;
template<>
DATA_API const std::string_view Attribute<Keyword::AscanRate>::s_name = "A-scan Rate";
template<>
DATA_API const VR Attribute<Keyword::AscanRate>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AscanRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BscanRate>::s_keyword = Keyword::BscanRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanRate>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BscanRate>::s_element = 0x1650;
template<>
DATA_API const std::string_view Attribute<Keyword::BscanRate>::s_name = "B-scan Rate";
template<>
DATA_API const VR Attribute<Keyword::BscanRate>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::BscanRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceMeshZPixelOffset>::s_keyword = Keyword::SurfaceMeshZPixelOffset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceMeshZPixelOffset>::s_group = 0x0022;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceMeshZPixelOffset>::s_element = 0x1658;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceMeshZPixelOffset>::s_name = "Surface Mesh Z-Pixel Offset";
template<>
DATA_API const VR Attribute<Keyword::SurfaceMeshZPixelOffset>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::SurfaceMeshZPixelOffset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmSource>::s_keyword = Keyword::AlgorithmSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmSource>::s_group = 0x0024;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmSource>::s_element = 0x0202;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmSource>::s_name = "Algorithm Source";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmSource>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataSetName>::s_keyword = Keyword::DataSetName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetName>::s_group = 0x0024;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetName>::s_element = 0x0306;
template<>
DATA_API const std::string_view Attribute<Keyword::DataSetName>::s_name = "Data Set Name";
template<>
DATA_API const VR Attribute<Keyword::DataSetName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DataSetName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataSetVersion>::s_keyword = Keyword::DataSetVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetVersion>::s_group = 0x0024;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetVersion>::s_element = 0x0307;
template<>
DATA_API const std::string_view Attribute<Keyword::DataSetVersion>::s_name = "Data Set Version";
template<>
DATA_API const VR Attribute<Keyword::DataSetVersion>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DataSetVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataSetSource>::s_keyword = Keyword::DataSetSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetSource>::s_group = 0x0024;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetSource>::s_element = 0x0308;
template<>
DATA_API const std::string_view Attribute<Keyword::DataSetSource>::s_name = "Data Set Source";
template<>
DATA_API const VR Attribute<Keyword::DataSetSource>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DataSetSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataSetDescription>::s_keyword = Keyword::DataSetDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetDescription>::s_group = 0x0024;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataSetDescription>::s_element = 0x0309;
template<>
DATA_API const std::string_view Attribute<Keyword::DataSetDescription>::s_name = "Data Set Description";
template<>
DATA_API const VR Attribute<Keyword::DataSetDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DataSetDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SamplesPerPixel>::s_keyword = Keyword::SamplesPerPixel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SamplesPerPixel>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SamplesPerPixel>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::SamplesPerPixel>::s_name = "Samples per Pixel";
template<>
DATA_API const VR Attribute<Keyword::SamplesPerPixel>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SamplesPerPixel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SamplesPerPixelUsed>::s_keyword = Keyword::SamplesPerPixelUsed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SamplesPerPixelUsed>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SamplesPerPixelUsed>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::SamplesPerPixelUsed>::s_name = "Samples per Pixel Used";
template<>
DATA_API const VR Attribute<Keyword::SamplesPerPixelUsed>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SamplesPerPixelUsed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhotometricInterpretation>::s_keyword = Keyword::PhotometricInterpretation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotometricInterpretation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhotometricInterpretation>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::PhotometricInterpretation>::s_name = "Photometric Interpretation";
template<>
DATA_API const VR Attribute<Keyword::PhotometricInterpretation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PhotometricInterpretation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanarConfiguration>::s_keyword = Keyword::PlanarConfiguration;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanarConfiguration>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanarConfiguration>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanarConfiguration>::s_name = "Planar Configuration";
template<>
DATA_API const VR Attribute<Keyword::PlanarConfiguration>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PlanarConfiguration>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfFrames>::s_keyword = Keyword::NumberOfFrames;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFrames>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFrames>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfFrames>::s_name = "Number of Frames";
template<>
DATA_API const VR Attribute<Keyword::NumberOfFrames>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfFrames>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameIncrementPointer>::s_keyword = Keyword::FrameIncrementPointer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameIncrementPointer>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameIncrementPointer>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameIncrementPointer>::s_name = "Frame Increment Pointer";
template<>
DATA_API const VR Attribute<Keyword::FrameIncrementPointer>::s_vr = VR::AT;
template<>
DATA_API const VM Attribute<Keyword::FrameIncrementPointer>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameDimensionPointer>::s_keyword = Keyword::FrameDimensionPointer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDimensionPointer>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameDimensionPointer>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameDimensionPointer>::s_name = "Frame Dimension Pointer";
template<>
DATA_API const VR Attribute<Keyword::FrameDimensionPointer>::s_vr = VR::AT;
template<>
DATA_API const VM Attribute<Keyword::FrameDimensionPointer>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::Rows>::s_keyword = Keyword::Rows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Rows>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Rows>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::Rows>::s_name = "Rows";
template<>
DATA_API const VR Attribute<Keyword::Rows>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::Rows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Columns>::s_keyword = Keyword::Columns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Columns>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Columns>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::Columns>::s_name = "Columns";
template<>
DATA_API const VR Attribute<Keyword::Columns>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::Columns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UltrasoundColorDataPresent>::s_keyword = Keyword::UltrasoundColorDataPresent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UltrasoundColorDataPresent>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UltrasoundColorDataPresent>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::UltrasoundColorDataPresent>::s_name =
    "Ultrasound Color Data Present";
template<>
DATA_API const VR Attribute<Keyword::UltrasoundColorDataPresent>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::UltrasoundColorDataPresent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelSpacing>::s_keyword = Keyword::PixelSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelSpacing>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelSpacing>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelSpacing>::s_name = "Pixel Spacing";
template<>
DATA_API const VR Attribute<Keyword::PixelSpacing>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PixelSpacing>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ZoomFactor>::s_keyword = Keyword::ZoomFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZoomFactor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZoomFactor>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::ZoomFactor>::s_name = "Zoom Factor";
template<>
DATA_API const VR Attribute<Keyword::ZoomFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ZoomFactor>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ZoomCenter>::s_keyword = Keyword::ZoomCenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZoomCenter>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZoomCenter>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::ZoomCenter>::s_name = "Zoom Center";
template<>
DATA_API const VR Attribute<Keyword::ZoomCenter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ZoomCenter>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PixelAspectRatio>::s_keyword = Keyword::PixelAspectRatio;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelAspectRatio>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelAspectRatio>::s_element = 0x0034;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelAspectRatio>::s_name = "Pixel Aspect Ratio";
template<>
DATA_API const VR Attribute<Keyword::PixelAspectRatio>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::PixelAspectRatio>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::CorrectedImage>::s_keyword = Keyword::CorrectedImage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CorrectedImage>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CorrectedImage>::s_element = 0x0051;
template<>
DATA_API const std::string_view Attribute<Keyword::CorrectedImage>::s_name = "Corrected Image";
template<>
DATA_API const VR Attribute<Keyword::CorrectedImage>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CorrectedImage>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::BitsAllocated>::s_keyword = Keyword::BitsAllocated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BitsAllocated>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BitsAllocated>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::BitsAllocated>::s_name = "Bits Allocated";
template<>
DATA_API const VR Attribute<Keyword::BitsAllocated>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::BitsAllocated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BitsStored>::s_keyword = Keyword::BitsStored;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BitsStored>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BitsStored>::s_element = 0x0101;
template<>
DATA_API const std::string_view Attribute<Keyword::BitsStored>::s_name = "Bits Stored";
template<>
DATA_API const VR Attribute<Keyword::BitsStored>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::BitsStored>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HighBit>::s_keyword = Keyword::HighBit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HighBit>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HighBit>::s_element = 0x0102;
template<>
DATA_API const std::string_view Attribute<Keyword::HighBit>::s_name = "High Bit";
template<>
DATA_API const VR Attribute<Keyword::HighBit>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::HighBit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelRepresentation>::s_keyword = Keyword::PixelRepresentation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelRepresentation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelRepresentation>::s_element = 0x0103;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelRepresentation>::s_name = "Pixel Representation";
template<>
DATA_API const VR Attribute<Keyword::PixelRepresentation>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PixelRepresentation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SmallestImagePixelValue>::s_keyword = Keyword::SmallestImagePixelValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SmallestImagePixelValue>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SmallestImagePixelValue>::s_element = 0x0106;
template<>
DATA_API const std::string_view Attribute<Keyword::SmallestImagePixelValue>::s_name = "Smallest Image Pixel Value";
template<>
DATA_API const VR Attribute<Keyword::SmallestImagePixelValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::SmallestImagePixelValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LargestImagePixelValue>::s_keyword = Keyword::LargestImagePixelValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LargestImagePixelValue>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LargestImagePixelValue>::s_element = 0x0107;
template<>
DATA_API const std::string_view Attribute<Keyword::LargestImagePixelValue>::s_name = "Largest Image Pixel Value";
template<>
DATA_API const VR Attribute<Keyword::LargestImagePixelValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::LargestImagePixelValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SmallestPixelValueInSeries>::s_keyword = Keyword::SmallestPixelValueInSeries;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SmallestPixelValueInSeries>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SmallestPixelValueInSeries>::s_element = 0x0108;
template<>
DATA_API const std::string_view Attribute<Keyword::SmallestPixelValueInSeries>::s_name =
    "Smallest Pixel Value in Series";
template<>
DATA_API const VR Attribute<Keyword::SmallestPixelValueInSeries>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::SmallestPixelValueInSeries>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LargestPixelValueInSeries>::s_keyword = Keyword::LargestPixelValueInSeries;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LargestPixelValueInSeries>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LargestPixelValueInSeries>::s_element = 0x0109;
template<>
DATA_API const std::string_view Attribute<Keyword::LargestPixelValueInSeries>::s_name = "Largest Pixel Value in Series";
template<>
DATA_API const VR Attribute<Keyword::LargestPixelValueInSeries>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::LargestPixelValueInSeries>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelPaddingValue>::s_keyword = Keyword::PixelPaddingValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelPaddingValue>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelPaddingValue>::s_element = 0x0120;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelPaddingValue>::s_name = "Pixel Padding Value";
template<>
DATA_API const VR Attribute<Keyword::PixelPaddingValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::PixelPaddingValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelPaddingRangeLimit>::s_keyword = Keyword::PixelPaddingRangeLimit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelPaddingRangeLimit>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelPaddingRangeLimit>::s_element = 0x0121;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelPaddingRangeLimit>::s_name = "Pixel Padding Range Limit";
template<>
DATA_API const VR Attribute<Keyword::PixelPaddingRangeLimit>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::PixelPaddingRangeLimit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FloatPixelPaddingValue>::s_keyword = Keyword::FloatPixelPaddingValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatPixelPaddingValue>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatPixelPaddingValue>::s_element = 0x0122;
template<>
DATA_API const std::string_view Attribute<Keyword::FloatPixelPaddingValue>::s_name = "Float Pixel Padding Value";
template<>
DATA_API const VR Attribute<Keyword::FloatPixelPaddingValue>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::FloatPixelPaddingValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoubleFloatPixelPaddingValue>::s_keyword =
    Keyword::DoubleFloatPixelPaddingValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatPixelPaddingValue>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatPixelPaddingValue>::s_element = 0x0123;
template<>
DATA_API const std::string_view Attribute<Keyword::DoubleFloatPixelPaddingValue>::s_name =
    "Double Float Pixel Padding Value";
template<>
DATA_API const VR Attribute<Keyword::DoubleFloatPixelPaddingValue>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DoubleFloatPixelPaddingValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FloatPixelPaddingRangeLimit>::s_keyword =
    Keyword::FloatPixelPaddingRangeLimit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatPixelPaddingRangeLimit>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatPixelPaddingRangeLimit>::s_element = 0x0124;
template<>
DATA_API const std::string_view Attribute<Keyword::FloatPixelPaddingRangeLimit>::s_name =
    "Float Pixel Padding Range Limit";
template<>
DATA_API const VR Attribute<Keyword::FloatPixelPaddingRangeLimit>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::FloatPixelPaddingRangeLimit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoubleFloatPixelPaddingRangeLimit>::s_keyword =
    Keyword::DoubleFloatPixelPaddingRangeLimit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatPixelPaddingRangeLimit>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatPixelPaddingRangeLimit>::s_element = 0x0125;
template<>
DATA_API const std::string_view Attribute<Keyword::DoubleFloatPixelPaddingRangeLimit>::s_name =
    "Double Float Pixel Padding Range Limit";
template<>
DATA_API const VR Attribute<Keyword::DoubleFloatPixelPaddingRangeLimit>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DoubleFloatPixelPaddingRangeLimit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::QualityControlImage>::s_keyword = Keyword::QualityControlImage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QualityControlImage>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QualityControlImage>::s_element = 0x0300;
template<>
DATA_API const std::string_view Attribute<Keyword::QualityControlImage>::s_name = "Quality Control Image";
template<>
DATA_API const VR Attribute<Keyword::QualityControlImage>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::QualityControlImage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BurnedInAnnotation>::s_keyword = Keyword::BurnedInAnnotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BurnedInAnnotation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BurnedInAnnotation>::s_element = 0x0301;
template<>
DATA_API const std::string_view Attribute<Keyword::BurnedInAnnotation>::s_name = "Burned In Annotation";
template<>
DATA_API const VR Attribute<Keyword::BurnedInAnnotation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BurnedInAnnotation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecognizableVisualFeatures>::s_keyword = Keyword::RecognizableVisualFeatures;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecognizableVisualFeatures>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecognizableVisualFeatures>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::RecognizableVisualFeatures>::s_name = "Recognizable Visual Features";
template<>
DATA_API const VR Attribute<Keyword::RecognizableVisualFeatures>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RecognizableVisualFeatures>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LongitudinalTemporalInformationModified>::s_keyword =
    Keyword::LongitudinalTemporalInformationModified;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongitudinalTemporalInformationModified>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongitudinalTemporalInformationModified>::s_element = 0x0303;
template<>
DATA_API const std::string_view Attribute<Keyword::LongitudinalTemporalInformationModified>::s_name =
    "Longitudinal Temporal Information Modified";
template<>
DATA_API const VR Attribute<Keyword::LongitudinalTemporalInformationModified>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::LongitudinalTemporalInformationModified>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedColorPaletteInstanceUID>::s_keyword =
    Keyword::ReferencedColorPaletteInstanceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedColorPaletteInstanceUID>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedColorPaletteInstanceUID>::s_element = 0x0304;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedColorPaletteInstanceUID>::s_name =
    "Referenced Color Palette Instance UID";
template<>
DATA_API const VR Attribute<Keyword::ReferencedColorPaletteInstanceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ReferencedColorPaletteInstanceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelSpacingCalibrationType>::s_keyword =
    Keyword::PixelSpacingCalibrationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelSpacingCalibrationType>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelSpacingCalibrationType>::s_element = 0x0A02;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelSpacingCalibrationType>::s_name =
    "Pixel Spacing Calibration Type";
template<>
DATA_API const VR Attribute<Keyword::PixelSpacingCalibrationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PixelSpacingCalibrationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelSpacingCalibrationDescription>::s_keyword =
    Keyword::PixelSpacingCalibrationDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelSpacingCalibrationDescription>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelSpacingCalibrationDescription>::s_element = 0x0A04;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelSpacingCalibrationDescription>::s_name =
    "Pixel Spacing Calibration Description";
template<>
DATA_API const VR Attribute<Keyword::PixelSpacingCalibrationDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PixelSpacingCalibrationDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelIntensityRelationship>::s_keyword = Keyword::PixelIntensityRelationship;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelIntensityRelationship>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelIntensityRelationship>::s_element = 0x1040;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelIntensityRelationship>::s_name = "Pixel Intensity Relationship";
template<>
DATA_API const VR Attribute<Keyword::PixelIntensityRelationship>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PixelIntensityRelationship>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelIntensityRelationshipSign>::s_keyword =
    Keyword::PixelIntensityRelationshipSign;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelIntensityRelationshipSign>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelIntensityRelationshipSign>::s_element = 0x1041;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelIntensityRelationshipSign>::s_name =
    "Pixel Intensity Relationship Sign";
template<>
DATA_API const VR Attribute<Keyword::PixelIntensityRelationshipSign>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::PixelIntensityRelationshipSign>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WindowCenter>::s_keyword = Keyword::WindowCenter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WindowCenter>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WindowCenter>::s_element = 0x1050;
template<>
DATA_API const std::string_view Attribute<Keyword::WindowCenter>::s_name = "Window Center";
template<>
DATA_API const VR Attribute<Keyword::WindowCenter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::WindowCenter>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::WindowWidth>::s_keyword = Keyword::WindowWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WindowWidth>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WindowWidth>::s_element = 0x1051;
template<>
DATA_API const std::string_view Attribute<Keyword::WindowWidth>::s_name = "Window Width";
template<>
DATA_API const VR Attribute<Keyword::WindowWidth>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::WindowWidth>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RescaleIntercept>::s_keyword = Keyword::RescaleIntercept;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RescaleIntercept>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RescaleIntercept>::s_element = 0x1052;
template<>
DATA_API const std::string_view Attribute<Keyword::RescaleIntercept>::s_name = "Rescale Intercept";
template<>
DATA_API const VR Attribute<Keyword::RescaleIntercept>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RescaleIntercept>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RescaleSlope>::s_keyword = Keyword::RescaleSlope;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RescaleSlope>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RescaleSlope>::s_element = 0x1053;
template<>
DATA_API const std::string_view Attribute<Keyword::RescaleSlope>::s_name = "Rescale Slope";
template<>
DATA_API const VR Attribute<Keyword::RescaleSlope>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RescaleSlope>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RescaleType>::s_keyword = Keyword::RescaleType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RescaleType>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RescaleType>::s_element = 0x1054;
template<>
DATA_API const std::string_view Attribute<Keyword::RescaleType>::s_name = "Rescale Type";
template<>
DATA_API const VR Attribute<Keyword::RescaleType>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RescaleType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WindowCenterWidthExplanation>::s_keyword =
    Keyword::WindowCenterWidthExplanation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WindowCenterWidthExplanation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WindowCenterWidthExplanation>::s_element = 0x1055;
template<>
DATA_API const std::string_view Attribute<Keyword::WindowCenterWidthExplanation>::s_name =
    "Window Center & Width Explanation";
template<>
DATA_API const VR Attribute<Keyword::WindowCenterWidthExplanation>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::WindowCenterWidthExplanation>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::VOILUTFunction>::s_keyword = Keyword::VOILUTFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VOILUTFunction>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VOILUTFunction>::s_element = 0x1056;
template<>
DATA_API const std::string_view Attribute<Keyword::VOILUTFunction>::s_name = "VOI LUT Function";
template<>
DATA_API const VR Attribute<Keyword::VOILUTFunction>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::VOILUTFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedViewingMode>::s_keyword = Keyword::RecommendedViewingMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedViewingMode>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedViewingMode>::s_element = 0x1090;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedViewingMode>::s_name = "Recommended Viewing Mode";
template<>
DATA_API const VR Attribute<Keyword::RecommendedViewingMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RecommendedViewingMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RedPaletteColorLookupTableDescriptor>::s_keyword =
    Keyword::RedPaletteColorLookupTableDescriptor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RedPaletteColorLookupTableDescriptor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RedPaletteColorLookupTableDescriptor>::s_element = 0x1101;
template<>
DATA_API const std::string_view Attribute<Keyword::RedPaletteColorLookupTableDescriptor>::s_name =
    "Red Palette Color Lookup Table Descriptor";
template<>
DATA_API const VR Attribute<Keyword::RedPaletteColorLookupTableDescriptor>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::RedPaletteColorLookupTableDescriptor>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::GreenPaletteColorLookupTableDescriptor>::s_keyword =
    Keyword::GreenPaletteColorLookupTableDescriptor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GreenPaletteColorLookupTableDescriptor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GreenPaletteColorLookupTableDescriptor>::s_element = 0x1102;
template<>
DATA_API const std::string_view Attribute<Keyword::GreenPaletteColorLookupTableDescriptor>::s_name =
    "Green Palette Color Lookup Table Descriptor";
template<>
DATA_API const VR Attribute<Keyword::GreenPaletteColorLookupTableDescriptor>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::GreenPaletteColorLookupTableDescriptor>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::BluePaletteColorLookupTableDescriptor>::s_keyword =
    Keyword::BluePaletteColorLookupTableDescriptor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BluePaletteColorLookupTableDescriptor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BluePaletteColorLookupTableDescriptor>::s_element = 0x1103;
template<>
DATA_API const std::string_view Attribute<Keyword::BluePaletteColorLookupTableDescriptor>::s_name =
    "Blue Palette Color Lookup Table Descriptor";
template<>
DATA_API const VR Attribute<Keyword::BluePaletteColorLookupTableDescriptor>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::BluePaletteColorLookupTableDescriptor>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::AlphaPaletteColorLookupTableDescriptor>::s_keyword =
    Keyword::AlphaPaletteColorLookupTableDescriptor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlphaPaletteColorLookupTableDescriptor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlphaPaletteColorLookupTableDescriptor>::s_element = 0x1104;
template<>
DATA_API const std::string_view Attribute<Keyword::AlphaPaletteColorLookupTableDescriptor>::s_name =
    "Alpha Palette Color Lookup Table Descriptor";
template<>
DATA_API const VR Attribute<Keyword::AlphaPaletteColorLookupTableDescriptor>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::AlphaPaletteColorLookupTableDescriptor>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::PaletteColorLookupTableUID>::s_keyword = Keyword::PaletteColorLookupTableUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PaletteColorLookupTableUID>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PaletteColorLookupTableUID>::s_element = 0x1199;
template<>
DATA_API const std::string_view Attribute<Keyword::PaletteColorLookupTableUID>::s_name =
    "Palette Color Lookup Table UID";
template<>
DATA_API const VR Attribute<Keyword::PaletteColorLookupTableUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::PaletteColorLookupTableUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RedPaletteColorLookupTableData>::s_keyword =
    Keyword::RedPaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RedPaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RedPaletteColorLookupTableData>::s_element = 0x1201;
template<>
DATA_API const std::string_view Attribute<Keyword::RedPaletteColorLookupTableData>::s_name =
    "Red Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::RedPaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::RedPaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GreenPaletteColorLookupTableData>::s_keyword =
    Keyword::GreenPaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GreenPaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GreenPaletteColorLookupTableData>::s_element = 0x1202;
template<>
DATA_API const std::string_view Attribute<Keyword::GreenPaletteColorLookupTableData>::s_name =
    "Green Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::GreenPaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::GreenPaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BluePaletteColorLookupTableData>::s_keyword =
    Keyword::BluePaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BluePaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BluePaletteColorLookupTableData>::s_element = 0x1203;
template<>
DATA_API const std::string_view Attribute<Keyword::BluePaletteColorLookupTableData>::s_name =
    "Blue Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::BluePaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::BluePaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlphaPaletteColorLookupTableData>::s_keyword =
    Keyword::AlphaPaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlphaPaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlphaPaletteColorLookupTableData>::s_element = 0x1204;
template<>
DATA_API const std::string_view Attribute<Keyword::AlphaPaletteColorLookupTableData>::s_name =
    "Alpha Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::AlphaPaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::AlphaPaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedRedPaletteColorLookupTableData>::s_keyword =
    Keyword::SegmentedRedPaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedRedPaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedRedPaletteColorLookupTableData>::s_element = 0x1221;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedRedPaletteColorLookupTableData>::s_name =
    "Segmented Red Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::SegmentedRedPaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::SegmentedRedPaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedGreenPaletteColorLookupTableData>::s_keyword =
    Keyword::SegmentedGreenPaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedGreenPaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedGreenPaletteColorLookupTableData>::s_element = 0x1222;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedGreenPaletteColorLookupTableData>::s_name =
    "Segmented Green Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::SegmentedGreenPaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::SegmentedGreenPaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedBluePaletteColorLookupTableData>::s_keyword =
    Keyword::SegmentedBluePaletteColorLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedBluePaletteColorLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedBluePaletteColorLookupTableData>::s_element = 0x1223;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedBluePaletteColorLookupTableData>::s_name =
    "Segmented Blue Palette Color Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::SegmentedBluePaletteColorLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::SegmentedBluePaletteColorLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StoredValueColorRangeSequence>::s_keyword =
    Keyword::StoredValueColorRangeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StoredValueColorRangeSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StoredValueColorRangeSequence>::s_element = 0x1230;
template<>
DATA_API const std::string_view Attribute<Keyword::StoredValueColorRangeSequence>::s_name =
    "Stored Value Color Range Sequence";
template<>
DATA_API const VR Attribute<Keyword::StoredValueColorRangeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StoredValueColorRangeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MinimumStoredValueMapped>::s_keyword = Keyword::MinimumStoredValueMapped;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MinimumStoredValueMapped>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MinimumStoredValueMapped>::s_element = 0x1231;
template<>
DATA_API const std::string_view Attribute<Keyword::MinimumStoredValueMapped>::s_name = "Minimum Stored Value Mapped";
template<>
DATA_API const VR Attribute<Keyword::MinimumStoredValueMapped>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::MinimumStoredValueMapped>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumStoredValueMapped>::s_keyword = Keyword::MaximumStoredValueMapped;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumStoredValueMapped>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumStoredValueMapped>::s_element = 0x1232;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumStoredValueMapped>::s_name = "Maximum Stored Value Mapped";
template<>
DATA_API const VR Attribute<Keyword::MaximumStoredValueMapped>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::MaximumStoredValueMapped>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BreastImplantPresent>::s_keyword = Keyword::BreastImplantPresent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastImplantPresent>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BreastImplantPresent>::s_element = 0x1300;
template<>
DATA_API const std::string_view Attribute<Keyword::BreastImplantPresent>::s_name = "Breast Implant Present";
template<>
DATA_API const VR Attribute<Keyword::BreastImplantPresent>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BreastImplantPresent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PartialView>::s_keyword = Keyword::PartialView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialView>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialView>::s_element = 0x1350;
template<>
DATA_API const std::string_view Attribute<Keyword::PartialView>::s_name = "Partial view";
template<>
DATA_API const VR Attribute<Keyword::PartialView>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PartialView>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PartialViewDescription>::s_keyword = Keyword::PartialViewDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialViewDescription>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialViewDescription>::s_element = 0x1351;
template<>
DATA_API const std::string_view Attribute<Keyword::PartialViewDescription>::s_name = "Partial view Description";
template<>
DATA_API const VR Attribute<Keyword::PartialViewDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::PartialViewDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PartialViewCodeSequence>::s_keyword = Keyword::PartialViewCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialViewCodeSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PartialViewCodeSequence>::s_element = 0x1352;
template<>
DATA_API const std::string_view Attribute<Keyword::PartialViewCodeSequence>::s_name = "Partial view Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PartialViewCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PartialViewCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialLocationsPreserved>::s_keyword = Keyword::SpatialLocationsPreserved;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialLocationsPreserved>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialLocationsPreserved>::s_element = 0x135A;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialLocationsPreserved>::s_name = "Spatial Locations Preserved";
template<>
DATA_API const VR Attribute<Keyword::SpatialLocationsPreserved>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpatialLocationsPreserved>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataFrameAssignmentSequence>::s_keyword =
    Keyword::DataFrameAssignmentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataFrameAssignmentSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataFrameAssignmentSequence>::s_element = 0x1401;
template<>
DATA_API const std::string_view Attribute<Keyword::DataFrameAssignmentSequence>::s_name =
    "Data Frame Assignment Sequence";
template<>
DATA_API const VR Attribute<Keyword::DataFrameAssignmentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DataFrameAssignmentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataPathAssignment>::s_keyword = Keyword::DataPathAssignment;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataPathAssignment>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataPathAssignment>::s_element = 0x1402;
template<>
DATA_API const std::string_view Attribute<Keyword::DataPathAssignment>::s_name = "Data Path Assignment";
template<>
DATA_API const VR Attribute<Keyword::DataPathAssignment>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DataPathAssignment>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BitsMappedToColorLookupTable>::s_keyword =
    Keyword::BitsMappedToColorLookupTable;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BitsMappedToColorLookupTable>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BitsMappedToColorLookupTable>::s_element = 0x1403;
template<>
DATA_API const std::string_view Attribute<Keyword::BitsMappedToColorLookupTable>::s_name =
    "Bits Mapped to Color Lookup Table";
template<>
DATA_API const VR Attribute<Keyword::BitsMappedToColorLookupTable>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::BitsMappedToColorLookupTable>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingLUT1Sequence>::s_keyword = Keyword::BlendingLUT1Sequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT1Sequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT1Sequence>::s_element = 0x1404;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingLUT1Sequence>::s_name = "Blending LUT 1 Sequence";
template<>
DATA_API const VR Attribute<Keyword::BlendingLUT1Sequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BlendingLUT1Sequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingLUT1TransferFunction>::s_keyword =
    Keyword::BlendingLUT1TransferFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT1TransferFunction>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT1TransferFunction>::s_element = 0x1405;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingLUT1TransferFunction>::s_name =
    "Blending LUT 1 Transfer Function";
template<>
DATA_API const VR Attribute<Keyword::BlendingLUT1TransferFunction>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BlendingLUT1TransferFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingWeightConstant>::s_keyword = Keyword::BlendingWeightConstant;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingWeightConstant>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingWeightConstant>::s_element = 0x1406;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingWeightConstant>::s_name = "Blending Weight Constant";
template<>
DATA_API const VR Attribute<Keyword::BlendingWeightConstant>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BlendingWeightConstant>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingLookupTableDescriptor>::s_keyword =
    Keyword::BlendingLookupTableDescriptor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLookupTableDescriptor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLookupTableDescriptor>::s_element = 0x1407;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingLookupTableDescriptor>::s_name =
    "Blending Lookup Table Descriptor";
template<>
DATA_API const VR Attribute<Keyword::BlendingLookupTableDescriptor>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::BlendingLookupTableDescriptor>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingLookupTableData>::s_keyword = Keyword::BlendingLookupTableData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLookupTableData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLookupTableData>::s_element = 0x1408;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingLookupTableData>::s_name = "Blending Lookup Table Data";
template<>
DATA_API const VR Attribute<Keyword::BlendingLookupTableData>::s_vr = VR::OW;
template<>
DATA_API const VM Attribute<Keyword::BlendingLookupTableData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnhancedPaletteColorLookupTableSequence>::s_keyword =
    Keyword::EnhancedPaletteColorLookupTableSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedPaletteColorLookupTableSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedPaletteColorLookupTableSequence>::s_element = 0x140B;
template<>
DATA_API const std::string_view Attribute<Keyword::EnhancedPaletteColorLookupTableSequence>::s_name =
    "Enhanced Palette Color Lookup Table Sequence";
template<>
DATA_API const VR Attribute<Keyword::EnhancedPaletteColorLookupTableSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EnhancedPaletteColorLookupTableSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingLUT2Sequence>::s_keyword = Keyword::BlendingLUT2Sequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT2Sequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT2Sequence>::s_element = 0x140C;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingLUT2Sequence>::s_name = "Blending LUT 2 Sequence";
template<>
DATA_API const VR Attribute<Keyword::BlendingLUT2Sequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BlendingLUT2Sequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlendingLUT2TransferFunction>::s_keyword =
    Keyword::BlendingLUT2TransferFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT2TransferFunction>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlendingLUT2TransferFunction>::s_element = 0x140D;
template<>
DATA_API const std::string_view Attribute<Keyword::BlendingLUT2TransferFunction>::s_name =
    "Blending LUT 2 Transfer Function";
template<>
DATA_API const VR Attribute<Keyword::BlendingLUT2TransferFunction>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BlendingLUT2TransferFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataPathID>::s_keyword = Keyword::DataPathID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataPathID>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataPathID>::s_element = 0x140E;
template<>
DATA_API const std::string_view Attribute<Keyword::DataPathID>::s_name = "Data Path ID";
template<>
DATA_API const VR Attribute<Keyword::DataPathID>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DataPathID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RGBLUTTransferFunction>::s_keyword = Keyword::RGBLUTTransferFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RGBLUTTransferFunction>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RGBLUTTransferFunction>::s_element = 0x140F;
template<>
DATA_API const std::string_view Attribute<Keyword::RGBLUTTransferFunction>::s_name = "RGB LUT Transfer Function";
template<>
DATA_API const VR Attribute<Keyword::RGBLUTTransferFunction>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RGBLUTTransferFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlphaLUTTransferFunction>::s_keyword = Keyword::AlphaLUTTransferFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlphaLUTTransferFunction>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlphaLUTTransferFunction>::s_element = 0x1410;
template<>
DATA_API const std::string_view Attribute<Keyword::AlphaLUTTransferFunction>::s_name = "Alpha LUT Transfer Function";
template<>
DATA_API const VR Attribute<Keyword::AlphaLUTTransferFunction>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::AlphaLUTTransferFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ICCProfile>::s_keyword = Keyword::ICCProfile;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ICCProfile>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ICCProfile>::s_element = 0x2000;
template<>
DATA_API const std::string_view Attribute<Keyword::ICCProfile>::s_name = "ICC Profile";
template<>
DATA_API const VR Attribute<Keyword::ICCProfile>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::ICCProfile>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ColorSpace>::s_keyword = Keyword::ColorSpace;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorSpace>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColorSpace>::s_element = 0x2002;
template<>
DATA_API const std::string_view Attribute<Keyword::ColorSpace>::s_name = "Color Space";
template<>
DATA_API const VR Attribute<Keyword::ColorSpace>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ColorSpace>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LossyImageCompression>::s_keyword = Keyword::LossyImageCompression;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LossyImageCompression>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LossyImageCompression>::s_element = 0x2110;
template<>
DATA_API const std::string_view Attribute<Keyword::LossyImageCompression>::s_name = "Lossy Image Compression";
template<>
DATA_API const VR Attribute<Keyword::LossyImageCompression>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::LossyImageCompression>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LossyImageCompressionRatio>::s_keyword = Keyword::LossyImageCompressionRatio;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LossyImageCompressionRatio>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LossyImageCompressionRatio>::s_element = 0x2112;
template<>
DATA_API const std::string_view Attribute<Keyword::LossyImageCompressionRatio>::s_name =
    "Lossy Image Compression Ratio";
template<>
DATA_API const VR Attribute<Keyword::LossyImageCompressionRatio>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::LossyImageCompressionRatio>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::LossyImageCompressionMethod>::s_keyword =
    Keyword::LossyImageCompressionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LossyImageCompressionMethod>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LossyImageCompressionMethod>::s_element = 0x2114;
template<>
DATA_API const std::string_view Attribute<Keyword::LossyImageCompressionMethod>::s_name =
    "Lossy Image Compression Method";
template<>
DATA_API const VR Attribute<Keyword::LossyImageCompressionMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::LossyImageCompressionMethod>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ModalityLUTSequence>::s_keyword = Keyword::ModalityLUTSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModalityLUTSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModalityLUTSequence>::s_element = 0x3000;
template<>
DATA_API const std::string_view Attribute<Keyword::ModalityLUTSequence>::s_name = "Modality LUT Sequence";
template<>
DATA_API const VR Attribute<Keyword::ModalityLUTSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ModalityLUTSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LUTDescriptor>::s_keyword = Keyword::LUTDescriptor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTDescriptor>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTDescriptor>::s_element = 0x3002;
template<>
DATA_API const std::string_view Attribute<Keyword::LUTDescriptor>::s_name = "LUT Descriptor";
template<>
DATA_API const VR Attribute<Keyword::LUTDescriptor>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::LUTDescriptor>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::LUTExplanation>::s_keyword = Keyword::LUTExplanation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTExplanation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTExplanation>::s_element = 0x3003;
template<>
DATA_API const std::string_view Attribute<Keyword::LUTExplanation>::s_name = "LUT Explanation";
template<>
DATA_API const VR Attribute<Keyword::LUTExplanation>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::LUTExplanation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModalityLUTType>::s_keyword = Keyword::ModalityLUTType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModalityLUTType>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModalityLUTType>::s_element = 0x3004;
template<>
DATA_API const std::string_view Attribute<Keyword::ModalityLUTType>::s_name = "Modality LUT Type";
template<>
DATA_API const VR Attribute<Keyword::ModalityLUTType>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ModalityLUTType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LUTData>::s_keyword = Keyword::LUTData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTData>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTData>::s_element = 0x3006;
template<>
DATA_API const std::string_view Attribute<Keyword::LUTData>::s_name = "LUT Data";
template<>
DATA_API const VR Attribute<Keyword::LUTData>::s_vr = VR::OW_US;
template<>
DATA_API const VM Attribute<Keyword::LUTData>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::VOILUTSequence>::s_keyword = Keyword::VOILUTSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VOILUTSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VOILUTSequence>::s_element = 0x3010;
template<>
DATA_API const std::string_view Attribute<Keyword::VOILUTSequence>::s_name = "VOI LUT Sequence";
template<>
DATA_API const VR Attribute<Keyword::VOILUTSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::VOILUTSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RepresentativeFrameNumber>::s_keyword = Keyword::RepresentativeFrameNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RepresentativeFrameNumber>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RepresentativeFrameNumber>::s_element = 0x6010;
template<>
DATA_API const std::string_view Attribute<Keyword::RepresentativeFrameNumber>::s_name = "Representative Frame Number";
template<>
DATA_API const VR Attribute<Keyword::RepresentativeFrameNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RepresentativeFrameNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameNumbersOfInterest>::s_keyword = Keyword::FrameNumbersOfInterest;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameNumbersOfInterest>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameNumbersOfInterest>::s_element = 0x6020;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameNumbersOfInterest>::s_name = "Frame Numbers of Interest (FOI)";
template<>
DATA_API const VR Attribute<Keyword::FrameNumbersOfInterest>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::FrameNumbersOfInterest>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameOfInterestDescription>::s_keyword = Keyword::FrameOfInterestDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfInterestDescription>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfInterestDescription>::s_element = 0x6022;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameOfInterestDescription>::s_name =
    "Frame of Interest Description";
template<>
DATA_API const VR Attribute<Keyword::FrameOfInterestDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::FrameOfInterestDescription>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameOfInterestType>::s_keyword = Keyword::FrameOfInterestType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfInterestType>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfInterestType>::s_element = 0x6023;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameOfInterestType>::s_name = "Frame of Interest Type";
template<>
DATA_API const VR Attribute<Keyword::FrameOfInterestType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FrameOfInterestType>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RWavePointer>::s_keyword = Keyword::RWavePointer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RWavePointer>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RWavePointer>::s_element = 0x6040;
template<>
DATA_API const std::string_view Attribute<Keyword::RWavePointer>::s_name = "R Wave Pointer";
template<>
DATA_API const VR Attribute<Keyword::RWavePointer>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RWavePointer>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::MaskSubtractionSequence>::s_keyword = Keyword::MaskSubtractionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskSubtractionSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskSubtractionSequence>::s_element = 0x6100;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskSubtractionSequence>::s_name = "Mask Subtraction Sequence";
template<>
DATA_API const VR Attribute<Keyword::MaskSubtractionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MaskSubtractionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaskOperation>::s_keyword = Keyword::MaskOperation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskOperation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskOperation>::s_element = 0x6101;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskOperation>::s_name = "Mask Operation";
template<>
DATA_API const VR Attribute<Keyword::MaskOperation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MaskOperation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicableFrameRange>::s_keyword = Keyword::ApplicableFrameRange;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicableFrameRange>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicableFrameRange>::s_element = 0x6102;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicableFrameRange>::s_name = "Applicable Frame Range";
template<>
DATA_API const VR Attribute<Keyword::ApplicableFrameRange>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ApplicableFrameRange>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::MaskFrameNumbers>::s_keyword = Keyword::MaskFrameNumbers;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskFrameNumbers>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskFrameNumbers>::s_element = 0x6110;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskFrameNumbers>::s_name = "Mask Frame Numbers";
template<>
DATA_API const VR Attribute<Keyword::MaskFrameNumbers>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MaskFrameNumbers>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastFrameAveraging>::s_keyword = Keyword::ContrastFrameAveraging;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastFrameAveraging>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastFrameAveraging>::s_element = 0x6112;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastFrameAveraging>::s_name = "Contrast Frame Averaging";
template<>
DATA_API const VR Attribute<Keyword::ContrastFrameAveraging>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ContrastFrameAveraging>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaskSubPixelShift>::s_keyword = Keyword::MaskSubPixelShift;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskSubPixelShift>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskSubPixelShift>::s_element = 0x6114;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskSubPixelShift>::s_name = "Mask Sub-pixel Shift";
template<>
DATA_API const VR Attribute<Keyword::MaskSubPixelShift>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaskSubPixelShift>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::TIDOffset>::s_keyword = Keyword::TIDOffset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TIDOffset>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TIDOffset>::s_element = 0x6120;
template<>
DATA_API const std::string_view Attribute<Keyword::TIDOffset>::s_name = "TID Offset";
template<>
DATA_API const VR Attribute<Keyword::TIDOffset>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::TIDOffset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaskOperationExplanation>::s_keyword = Keyword::MaskOperationExplanation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskOperationExplanation>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskOperationExplanation>::s_element = 0x6190;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskOperationExplanation>::s_name = "Mask Operation Explanation";
template<>
DATA_API const VR Attribute<Keyword::MaskOperationExplanation>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::MaskOperationExplanation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelDataProviderURL>::s_keyword = Keyword::PixelDataProviderURL;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelDataProviderURL>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelDataProviderURL>::s_element = 0x7FE0;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelDataProviderURL>::s_name = "Pixel Data Provider URL";
template<>
DATA_API const VR Attribute<Keyword::PixelDataProviderURL>::s_vr = VR::UR;
template<>
DATA_API const VM Attribute<Keyword::PixelDataProviderURL>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelMeasuresSequence>::s_keyword = Keyword::PixelMeasuresSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelMeasuresSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelMeasuresSequence>::s_element = 0x9110;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelMeasuresSequence>::s_name = "Pixel Measures Sequence";
template<>
DATA_API const VR Attribute<Keyword::PixelMeasuresSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PixelMeasuresSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameVOILUTSequence>::s_keyword = Keyword::FrameVOILUTSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameVOILUTSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameVOILUTSequence>::s_element = 0x9132;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameVOILUTSequence>::s_name = "Frame VOI LUT Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameVOILUTSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameVOILUTSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelValueTransformationSequence>::s_keyword =
    Keyword::PixelValueTransformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueTransformationSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueTransformationSequence>::s_element = 0x9145;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelValueTransformationSequence>::s_name =
    "Pixel Value Transformation Sequence";
template<>
DATA_API const VR Attribute<Keyword::PixelValueTransformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PixelValueTransformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DisplayFilterPercentage>::s_keyword = Keyword::DisplayFilterPercentage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayFilterPercentage>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayFilterPercentage>::s_element = 0x9411;
template<>
DATA_API const std::string_view Attribute<Keyword::DisplayFilterPercentage>::s_name = "Display Filter Percentage";
template<>
DATA_API const VR Attribute<Keyword::DisplayFilterPercentage>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DisplayFilterPercentage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FramePixelShiftSequence>::s_keyword = Keyword::FramePixelShiftSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FramePixelShiftSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FramePixelShiftSequence>::s_element = 0x9415;
template<>
DATA_API const std::string_view Attribute<Keyword::FramePixelShiftSequence>::s_name = "Frame Pixel Shift Sequence";
template<>
DATA_API const VR Attribute<Keyword::FramePixelShiftSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FramePixelShiftSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SubtractionItemID>::s_keyword = Keyword::SubtractionItemID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubtractionItemID>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SubtractionItemID>::s_element = 0x9416;
template<>
DATA_API const std::string_view Attribute<Keyword::SubtractionItemID>::s_name = "Subtraction Item ID";
template<>
DATA_API const VR Attribute<Keyword::SubtractionItemID>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SubtractionItemID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelIntensityRelationshipLUTSequence>::s_keyword =
    Keyword::PixelIntensityRelationshipLUTSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelIntensityRelationshipLUTSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelIntensityRelationshipLUTSequence>::s_element = 0x9422;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelIntensityRelationshipLUTSequence>::s_name =
    "Pixel Intensity Relationship LUT Sequence";
template<>
DATA_API const VR Attribute<Keyword::PixelIntensityRelationshipLUTSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PixelIntensityRelationshipLUTSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FramePixelDataPropertiesSequence>::s_keyword =
    Keyword::FramePixelDataPropertiesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FramePixelDataPropertiesSequence>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FramePixelDataPropertiesSequence>::s_element = 0x9443;
template<>
DATA_API const std::string_view Attribute<Keyword::FramePixelDataPropertiesSequence>::s_name =
    "Frame Pixel Data Properties Sequence";
template<>
DATA_API const VR Attribute<Keyword::FramePixelDataPropertiesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FramePixelDataPropertiesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeometricalProperties>::s_keyword = Keyword::GeometricalProperties;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeometricalProperties>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeometricalProperties>::s_element = 0x9444;
template<>
DATA_API const std::string_view Attribute<Keyword::GeometricalProperties>::s_name = "Geometrical Properties";
template<>
DATA_API const VR Attribute<Keyword::GeometricalProperties>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GeometricalProperties>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeometricMaximumDistortion>::s_keyword = Keyword::GeometricMaximumDistortion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeometricMaximumDistortion>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeometricMaximumDistortion>::s_element = 0x9445;
template<>
DATA_API const std::string_view Attribute<Keyword::GeometricMaximumDistortion>::s_name = "Geometric Maximum Distortion";
template<>
DATA_API const VR Attribute<Keyword::GeometricMaximumDistortion>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::GeometricMaximumDistortion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageProcessingApplied>::s_keyword = Keyword::ImageProcessingApplied;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageProcessingApplied>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageProcessingApplied>::s_element = 0x9446;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageProcessingApplied>::s_name = "Image Processing Applied";
template<>
DATA_API const VR Attribute<Keyword::ImageProcessingApplied>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ImageProcessingApplied>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::MaskSelectionMode>::s_keyword = Keyword::MaskSelectionMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskSelectionMode>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskSelectionMode>::s_element = 0x9454;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskSelectionMode>::s_name = "Mask Selection Mode";
template<>
DATA_API const VR Attribute<Keyword::MaskSelectionMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MaskSelectionMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LUTFunction>::s_keyword = Keyword::LUTFunction;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTFunction>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTFunction>::s_element = 0x9474;
template<>
DATA_API const std::string_view Attribute<Keyword::LUTFunction>::s_name = "LUT Function";
template<>
DATA_API const VR Attribute<Keyword::LUTFunction>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::LUTFunction>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaskVisibilityPercentage>::s_keyword = Keyword::MaskVisibilityPercentage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskVisibilityPercentage>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaskVisibilityPercentage>::s_element = 0x9478;
template<>
DATA_API const std::string_view Attribute<Keyword::MaskVisibilityPercentage>::s_name = "Mask Visibility Percentage";
template<>
DATA_API const VR Attribute<Keyword::MaskVisibilityPercentage>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaskVisibilityPercentage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageToEquipmentMappingMatrix>::s_keyword =
    Keyword::ImageToEquipmentMappingMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageToEquipmentMappingMatrix>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageToEquipmentMappingMatrix>::s_element = 0x9520;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageToEquipmentMappingMatrix>::s_name =
    "Image to Equipment Mapping Matrix";
template<>
DATA_API const VR Attribute<Keyword::ImageToEquipmentMappingMatrix>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImageToEquipmentMappingMatrix>::s_vm = VM::MIN_16_MAX_16;
template<>
DATA_API const Keyword Attribute<Keyword::EquipmentCoordinateSystemIdentification>::s_keyword =
    Keyword::EquipmentCoordinateSystemIdentification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquipmentCoordinateSystemIdentification>::s_group = 0x0028;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquipmentCoordinateSystemIdentification>::s_element = 0x9537;
template<>
DATA_API const std::string_view Attribute<Keyword::EquipmentCoordinateSystemIdentification>::s_name =
    "Equipment Coordinate System Identification";
template<>
DATA_API const VR Attribute<Keyword::EquipmentCoordinateSystemIdentification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::EquipmentCoordinateSystemIdentification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RequestingService>::s_keyword = Keyword::RequestingService;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestingService>::s_group = 0x0032;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestingService>::s_element = 0x1033;
template<>
DATA_API const std::string_view Attribute<Keyword::RequestingService>::s_name = "Requesting Service";
template<>
DATA_API const VR Attribute<Keyword::RequestingService>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RequestingService>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RequestingServiceCodeSequence>::s_keyword =
    Keyword::RequestingServiceCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestingServiceCodeSequence>::s_group = 0x0032;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestingServiceCodeSequence>::s_element = 0x1034;
template<>
DATA_API const std::string_view Attribute<Keyword::RequestingServiceCodeSequence>::s_name =
    "Requesting Service Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RequestingServiceCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RequestingServiceCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RequestedProcedureDescription>::s_keyword =
    Keyword::RequestedProcedureDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestedProcedureDescription>::s_group = 0x0032;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestedProcedureDescription>::s_element = 0x1060;
template<>
DATA_API const std::string_view Attribute<Keyword::RequestedProcedureDescription>::s_name =
    "Requested Procedure Description";
template<>
DATA_API const VR Attribute<Keyword::RequestedProcedureDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RequestedProcedureDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RequestedProcedureCodeSequence>::s_keyword =
    Keyword::RequestedProcedureCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestedProcedureCodeSequence>::s_group = 0x0032;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestedProcedureCodeSequence>::s_element = 0x1064;
template<>
DATA_API const std::string_view Attribute<Keyword::RequestedProcedureCodeSequence>::s_name =
    "Requested Procedure Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RequestedProcedureCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RequestedProcedureCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReasonForVisit>::s_keyword = Keyword::ReasonForVisit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForVisit>::s_group = 0x0032;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForVisit>::s_element = 0x1066;
template<>
DATA_API const std::string_view Attribute<Keyword::ReasonForVisit>::s_name = "Reason for Visit";
template<>
DATA_API const VR Attribute<Keyword::ReasonForVisit>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::ReasonForVisit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReasonForVisitCodeSequence>::s_keyword = Keyword::ReasonForVisitCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForVisitCodeSequence>::s_group = 0x0032;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForVisitCodeSequence>::s_element = 0x1067;
template<>
DATA_API const std::string_view Attribute<Keyword::ReasonForVisitCodeSequence>::s_name =
    "Reason for Visit Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReasonForVisitCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReasonForVisitCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameOriginTimestamp>::s_keyword = Keyword::FrameOriginTimestamp;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOriginTimestamp>::s_group = 0x0034;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOriginTimestamp>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameOriginTimestamp>::s_name = "Frame Origin Timestamp";
template<>
DATA_API const VR Attribute<Keyword::FrameOriginTimestamp>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::FrameOriginTimestamp>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IncludesImagingSubject>::s_keyword = Keyword::IncludesImagingSubject;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IncludesImagingSubject>::s_group = 0x0034;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IncludesImagingSubject>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::IncludesImagingSubject>::s_name = "Includes Imaging Subject";
template<>
DATA_API const VR Attribute<Keyword::IncludesImagingSubject>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IncludesImagingSubject>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameUsefulnessGroupSequence>::s_keyword =
    Keyword::FrameUsefulnessGroupSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameUsefulnessGroupSequence>::s_group = 0x0034;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameUsefulnessGroupSequence>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameUsefulnessGroupSequence>::s_name =
    "Frame Usefulness Group Sequence";
template<>
DATA_API const VR Attribute<Keyword::FrameUsefulnessGroupSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FrameUsefulnessGroupSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CameraPositionGroupSequence>::s_keyword =
    Keyword::CameraPositionGroupSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraPositionGroupSequence>::s_group = 0x0034;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CameraPositionGroupSequence>::s_element = 0x000B;
template<>
DATA_API const std::string_view Attribute<Keyword::CameraPositionGroupSequence>::s_name =
    "Camera Position Group Sequence";
template<>
DATA_API const VR Attribute<Keyword::CameraPositionGroupSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CameraPositionGroupSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IncludesInformation>::s_keyword = Keyword::IncludesInformation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IncludesInformation>::s_group = 0x0034;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IncludesInformation>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::IncludesInformation>::s_name = "Includes Information";
template<>
DATA_API const VR Attribute<Keyword::IncludesInformation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IncludesInformation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeOfFrameGroupSequence>::s_keyword = Keyword::TimeOfFrameGroupSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfFrameGroupSequence>::s_group = 0x0034;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeOfFrameGroupSequence>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeOfFrameGroupSequence>::s_name = "Time of Frame Group Sequence";
template<>
DATA_API const VR Attribute<Keyword::TimeOfFrameGroupSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TimeOfFrameGroupSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AdmissionID>::s_keyword = Keyword::AdmissionID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdmissionID>::s_group = 0x0038;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdmissionID>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::AdmissionID>::s_name = "Admission ID";
template<>
DATA_API const VR Attribute<Keyword::AdmissionID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AdmissionID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfAdmissionIDSequence>::s_keyword =
    Keyword::IssuerOfAdmissionIDSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfAdmissionIDSequence>::s_group = 0x0038;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfAdmissionIDSequence>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfAdmissionIDSequence>::s_name =
    "Issuer of Admission ID Sequence";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfAdmissionIDSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfAdmissionIDSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ServiceEpisodeID>::s_keyword = Keyword::ServiceEpisodeID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ServiceEpisodeID>::s_group = 0x0038;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ServiceEpisodeID>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::ServiceEpisodeID>::s_name = "Service Episode ID";
template<>
DATA_API const VR Attribute<Keyword::ServiceEpisodeID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ServiceEpisodeID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ServiceEpisodeDescription>::s_keyword = Keyword::ServiceEpisodeDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ServiceEpisodeDescription>::s_group = 0x0038;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ServiceEpisodeDescription>::s_element = 0x0062;
template<>
DATA_API const std::string_view Attribute<Keyword::ServiceEpisodeDescription>::s_name = "Service Episode Description";
template<>
DATA_API const VR Attribute<Keyword::ServiceEpisodeDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ServiceEpisodeDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfServiceEpisodeIDSequence>::s_keyword =
    Keyword::IssuerOfServiceEpisodeIDSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfServiceEpisodeIDSequence>::s_group = 0x0038;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfServiceEpisodeIDSequence>::s_element = 0x0064;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfServiceEpisodeIDSequence>::s_name =
    "Issuer of Service Episode ID Sequence";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfServiceEpisodeIDSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfServiceEpisodeIDSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientState>::s_keyword = Keyword::PatientState;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientState>::s_group = 0x0038;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientState>::s_element = 0x0500;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientState>::s_name = "Patient State";
template<>
DATA_API const VR Attribute<Keyword::PatientState>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PatientState>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ChannelSourceSequence>::s_keyword = Keyword::ChannelSourceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelSourceSequence>::s_group = 0x003A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelSourceSequence>::s_element = 0x0208;
template<>
DATA_API const std::string_view Attribute<Keyword::ChannelSourceSequence>::s_name = "Channel Source Sequence";
template<>
DATA_API const VR Attribute<Keyword::ChannelSourceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ChannelSourceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>::s_keyword =
    Keyword::MultiplexedAudioChannelsDescriptionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>::s_group = 0x003A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>::s_element = 0x0300;
template<>
DATA_API const std::string_view Attribute<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>::s_name =
    "Multiplexed Audio Channels Description Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ChannelIdentificationCode>::s_keyword = Keyword::ChannelIdentificationCode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelIdentificationCode>::s_group = 0x003A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelIdentificationCode>::s_element = 0x0301;
template<>
DATA_API const std::string_view Attribute<Keyword::ChannelIdentificationCode>::s_name = "Channel Identification Code";
template<>
DATA_API const VR Attribute<Keyword::ChannelIdentificationCode>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ChannelIdentificationCode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ChannelMode>::s_keyword = Keyword::ChannelMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelMode>::s_group = 0x003A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ChannelMode>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::ChannelMode>::s_name = "Channel Mode";
template<>
DATA_API const VR Attribute<Keyword::ChannelMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ChannelMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScheduledProcedureStepDescription>::s_keyword =
    Keyword::ScheduledProcedureStepDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScheduledProcedureStepDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScheduledProcedureStepDescription>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::ScheduledProcedureStepDescription>::s_name =
    "Scheduled Procedure Step Description";
template<>
DATA_API const VR Attribute<Keyword::ScheduledProcedureStepDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ScheduledProcedureStepDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScheduledProtocolCodeSequence>::s_keyword =
    Keyword::ScheduledProtocolCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScheduledProtocolCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScheduledProtocolCodeSequence>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::ScheduledProtocolCodeSequence>::s_name =
    "Scheduled Protocol Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ScheduledProtocolCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ScheduledProtocolCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScheduledProcedureStepID>::s_keyword = Keyword::ScheduledProcedureStepID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScheduledProcedureStepID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScheduledProcedureStepID>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::ScheduledProcedureStepID>::s_name = "Scheduled Procedure Step ID";
template<>
DATA_API const VR Attribute<Keyword::ScheduledProcedureStepID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ScheduledProcedureStepID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StageCodeSequence>::s_keyword = Keyword::StageCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StageCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StageCodeSequence>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::StageCodeSequence>::s_name = "Stage Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::StageCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StageCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OrderPlacerIdentifierSequence>::s_keyword =
    Keyword::OrderPlacerIdentifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrderPlacerIdentifierSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrderPlacerIdentifierSequence>::s_element = 0x0026;
template<>
DATA_API const std::string_view Attribute<Keyword::OrderPlacerIdentifierSequence>::s_name =
    "Order Placer Identifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::OrderPlacerIdentifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OrderPlacerIdentifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OrderFillerIdentifierSequence>::s_keyword =
    Keyword::OrderFillerIdentifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrderFillerIdentifierSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrderFillerIdentifierSequence>::s_element = 0x0027;
template<>
DATA_API const std::string_view Attribute<Keyword::OrderFillerIdentifierSequence>::s_name =
    "Order Filler Identifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::OrderFillerIdentifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OrderFillerIdentifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LocalNamespaceEntityID>::s_keyword = Keyword::LocalNamespaceEntityID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LocalNamespaceEntityID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LocalNamespaceEntityID>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::LocalNamespaceEntityID>::s_name = "Local Namespace Entity ID";
template<>
DATA_API const VR Attribute<Keyword::LocalNamespaceEntityID>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::LocalNamespaceEntityID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UniversalEntityID>::s_keyword = Keyword::UniversalEntityID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UniversalEntityID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UniversalEntityID>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::UniversalEntityID>::s_name = "Universal Entity ID";
template<>
DATA_API const VR Attribute<Keyword::UniversalEntityID>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::UniversalEntityID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UniversalEntityIDType>::s_keyword = Keyword::UniversalEntityIDType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UniversalEntityIDType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UniversalEntityIDType>::s_element = 0x0033;
template<>
DATA_API const std::string_view Attribute<Keyword::UniversalEntityIDType>::s_name = "Universal Entity ID Type";
template<>
DATA_API const VR Attribute<Keyword::UniversalEntityIDType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::UniversalEntityIDType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IdentifierTypeCode>::s_keyword = Keyword::IdentifierTypeCode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IdentifierTypeCode>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IdentifierTypeCode>::s_element = 0x0035;
template<>
DATA_API const std::string_view Attribute<Keyword::IdentifierTypeCode>::s_name = "Identifier Type Code";
template<>
DATA_API const VR Attribute<Keyword::IdentifierTypeCode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::IdentifierTypeCode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AssigningFacilitySequence>::s_keyword = Keyword::AssigningFacilitySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AssigningFacilitySequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AssigningFacilitySequence>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::AssigningFacilitySequence>::s_name = "Assigning Facility Sequence";
template<>
DATA_API const VR Attribute<Keyword::AssigningFacilitySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AssigningFacilitySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AssigningJurisdictionCodeSequence>::s_keyword =
    Keyword::AssigningJurisdictionCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AssigningJurisdictionCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AssigningJurisdictionCodeSequence>::s_element = 0x0039;
template<>
DATA_API const std::string_view Attribute<Keyword::AssigningJurisdictionCodeSequence>::s_name =
    "Assigning Jurisdiction Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AssigningJurisdictionCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AssigningJurisdictionCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AssigningAgencyOrDepartmentCodeSequence>::s_keyword =
    Keyword::AssigningAgencyOrDepartmentCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AssigningAgencyOrDepartmentCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AssigningAgencyOrDepartmentCodeSequence>::s_element = 0x003A;
template<>
DATA_API const std::string_view Attribute<Keyword::AssigningAgencyOrDepartmentCodeSequence>::s_name =
    "Assigning Agency or Department Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AssigningAgencyOrDepartmentCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AssigningAgencyOrDepartmentCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureStepStartDate>::s_keyword =
    Keyword::PerformedProcedureStepStartDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepStartDate>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepStartDate>::s_element = 0x0244;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureStepStartDate>::s_name =
    "Performed Procedure Step Start Date";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureStepStartDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureStepStartDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureStepStartTime>::s_keyword =
    Keyword::PerformedProcedureStepStartTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepStartTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepStartTime>::s_element = 0x0245;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureStepStartTime>::s_name =
    "Performed Procedure Step Start Time";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureStepStartTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureStepStartTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureStepEndDate>::s_keyword =
    Keyword::PerformedProcedureStepEndDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepEndDate>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepEndDate>::s_element = 0x0250;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureStepEndDate>::s_name =
    "Performed Procedure Step End Date";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureStepEndDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureStepEndDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureStepEndTime>::s_keyword =
    Keyword::PerformedProcedureStepEndTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepEndTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepEndTime>::s_element = 0x0251;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureStepEndTime>::s_name =
    "Performed Procedure Step End Time";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureStepEndTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureStepEndTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureStepID>::s_keyword = Keyword::PerformedProcedureStepID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepID>::s_element = 0x0253;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureStepID>::s_name = "Performed Procedure Step ID";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureStepID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureStepID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureStepDescription>::s_keyword =
    Keyword::PerformedProcedureStepDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureStepDescription>::s_element = 0x0254;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureStepDescription>::s_name =
    "Performed Procedure Step Description";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureStepDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureStepDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProtocolCodeSequence>::s_keyword =
    Keyword::PerformedProtocolCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProtocolCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProtocolCodeSequence>::s_element = 0x0260;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProtocolCodeSequence>::s_name =
    "Performed Protocol Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PerformedProtocolCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PerformedProtocolCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProtocolType>::s_keyword = Keyword::PerformedProtocolType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProtocolType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProtocolType>::s_element = 0x0261;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProtocolType>::s_name = "Performed Protocol Type";
template<>
DATA_API const VR Attribute<Keyword::PerformedProtocolType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PerformedProtocolType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RequestAttributesSequence>::s_keyword = Keyword::RequestAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestAttributesSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestAttributesSequence>::s_element = 0x0275;
template<>
DATA_API const std::string_view Attribute<Keyword::RequestAttributesSequence>::s_name = "Request Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::RequestAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RequestAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CommentsOnThePerformedProcedureStep>::s_keyword =
    Keyword::CommentsOnThePerformedProcedureStep;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CommentsOnThePerformedProcedureStep>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CommentsOnThePerformedProcedureStep>::s_element = 0x0280;
template<>
DATA_API const std::string_view Attribute<Keyword::CommentsOnThePerformedProcedureStep>::s_name =
    "Comments on the Performed Procedure Step";
template<>
DATA_API const VR Attribute<Keyword::CommentsOnThePerformedProcedureStep>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::CommentsOnThePerformedProcedureStep>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EntranceDose>::s_keyword = Keyword::EntranceDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntranceDose>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntranceDose>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::EntranceDose>::s_name = "Entrance Dose";
template<>
DATA_API const VR Attribute<Keyword::EntranceDose>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::EntranceDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposedArea>::s_keyword = Keyword::ExposedArea;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposedArea>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposedArea>::s_element = 0x0303;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposedArea>::s_name = "Exposed Area";
template<>
DATA_API const VR Attribute<Keyword::ExposedArea>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ExposedArea>::s_vm = VM::MIN_1_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceSourceToEntrance>::s_keyword = Keyword::DistanceSourceToEntrance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToEntrance>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceSourceToEntrance>::s_element = 0x0306;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceSourceToEntrance>::s_name = "Distance Source to Entrance";
template<>
DATA_API const VR Attribute<Keyword::DistanceSourceToEntrance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DistanceSourceToEntrance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CommentsOnRadiationDose>::s_keyword = Keyword::CommentsOnRadiationDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CommentsOnRadiationDose>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CommentsOnRadiationDose>::s_element = 0x0310;
template<>
DATA_API const std::string_view Attribute<Keyword::CommentsOnRadiationDose>::s_name = "Comments on Radiation Dose";
template<>
DATA_API const VR Attribute<Keyword::CommentsOnRadiationDose>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::CommentsOnRadiationDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayOutput>::s_keyword = Keyword::XRayOutput;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayOutput>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayOutput>::s_element = 0x0312;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayOutput>::s_name = "X-Ray Output";
template<>
DATA_API const VR Attribute<Keyword::XRayOutput>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::XRayOutput>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HalfValueLayer>::s_keyword = Keyword::HalfValueLayer;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HalfValueLayer>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HalfValueLayer>::s_element = 0x0314;
template<>
DATA_API const std::string_view Attribute<Keyword::HalfValueLayer>::s_name = "Half Value Layer";
template<>
DATA_API const VR Attribute<Keyword::HalfValueLayer>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::HalfValueLayer>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OrganDose>::s_keyword = Keyword::OrganDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrganDose>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrganDose>::s_element = 0x0316;
template<>
DATA_API const std::string_view Attribute<Keyword::OrganDose>::s_name = "Organ Dose";
template<>
DATA_API const VR Attribute<Keyword::OrganDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::OrganDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OrganExposed>::s_keyword = Keyword::OrganExposed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrganExposed>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrganExposed>::s_element = 0x0318;
template<>
DATA_API const std::string_view Attribute<Keyword::OrganExposed>::s_name = "Organ Exposed";
template<>
DATA_API const VR Attribute<Keyword::OrganExposed>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OrganExposed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ProtocolContextSequence>::s_keyword = Keyword::ProtocolContextSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProtocolContextSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ProtocolContextSequence>::s_element = 0x0440;
template<>
DATA_API const std::string_view Attribute<Keyword::ProtocolContextSequence>::s_name = "Protocol Context Sequence";
template<>
DATA_API const VR Attribute<Keyword::ProtocolContextSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ProtocolContextSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentItemModifierSequence>::s_keyword =
    Keyword::ContentItemModifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentItemModifierSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentItemModifierSequence>::s_element = 0x0441;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentItemModifierSequence>::s_name =
    "Content Item Modifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContentItemModifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContentItemModifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerIdentifier>::s_keyword = Keyword::ContainerIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerIdentifier>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerIdentifier>::s_element = 0x0512;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerIdentifier>::s_name = "Container Identifier";
template<>
DATA_API const VR Attribute<Keyword::ContainerIdentifier>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContainerIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfTheContainerIdentifierSequence>::s_keyword =
    Keyword::IssuerOfTheContainerIdentifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfTheContainerIdentifierSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfTheContainerIdentifierSequence>::s_element = 0x0513;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfTheContainerIdentifierSequence>::s_name =
    "Issuer of the Container Identifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfTheContainerIdentifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfTheContainerIdentifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlternateContainerIdentifierSequence>::s_keyword =
    Keyword::AlternateContainerIdentifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlternateContainerIdentifierSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlternateContainerIdentifierSequence>::s_element = 0x0515;
template<>
DATA_API const std::string_view Attribute<Keyword::AlternateContainerIdentifierSequence>::s_name =
    "Alternate Container Identifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::AlternateContainerIdentifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AlternateContainerIdentifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerTypeCodeSequence>::s_keyword = Keyword::ContainerTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerTypeCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerTypeCodeSequence>::s_element = 0x0518;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerTypeCodeSequence>::s_name = "Container Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContainerTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContainerTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerDescription>::s_keyword = Keyword::ContainerDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerDescription>::s_element = 0x051A;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerDescription>::s_name = "Container Description";
template<>
DATA_API const VR Attribute<Keyword::ContainerDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContainerDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentSequence>::s_keyword = Keyword::ContainerComponentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentSequence>::s_element = 0x0520;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentSequence>::s_name = "Container Component Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenIdentifier>::s_keyword = Keyword::SpecimenIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenIdentifier>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenIdentifier>::s_element = 0x0551;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenIdentifier>::s_name = "Specimen Identifier";
template<>
DATA_API const VR Attribute<Keyword::SpecimenIdentifier>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SpecimenIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenUID>::s_keyword = Keyword::SpecimenUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenUID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenUID>::s_element = 0x0554;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenUID>::s_name = "Specimen UID";
template<>
DATA_API const VR Attribute<Keyword::SpecimenUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::SpecimenUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionContextSequence>::s_keyword = Keyword::AcquisitionContextSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionContextSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionContextSequence>::s_element = 0x0555;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionContextSequence>::s_name = "Acquisition Context Sequence";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionContextSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionContextSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionContextDescription>::s_keyword =
    Keyword::AcquisitionContextDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionContextDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionContextDescription>::s_element = 0x0556;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionContextDescription>::s_name =
    "Acquisition Context Description";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionContextDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionContextDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenDescriptionSequence>::s_keyword =
    Keyword::SpecimenDescriptionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenDescriptionSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenDescriptionSequence>::s_element = 0x0560;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenDescriptionSequence>::s_name =
    "Specimen Description Sequence";
template<>
DATA_API const VR Attribute<Keyword::SpecimenDescriptionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SpecimenDescriptionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IssuerOfTheSpecimenIdentifierSequence>::s_keyword =
    Keyword::IssuerOfTheSpecimenIdentifierSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfTheSpecimenIdentifierSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IssuerOfTheSpecimenIdentifierSequence>::s_element = 0x0562;
template<>
DATA_API const std::string_view Attribute<Keyword::IssuerOfTheSpecimenIdentifierSequence>::s_name =
    "Issuer of the Specimen Identifier Sequence";
template<>
DATA_API const VR Attribute<Keyword::IssuerOfTheSpecimenIdentifierSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IssuerOfTheSpecimenIdentifierSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenTypeCodeSequence>::s_keyword = Keyword::SpecimenTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenTypeCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenTypeCodeSequence>::s_element = 0x059A;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenTypeCodeSequence>::s_name = "Specimen Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SpecimenTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SpecimenTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenShortDescription>::s_keyword = Keyword::SpecimenShortDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenShortDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenShortDescription>::s_element = 0x0600;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenShortDescription>::s_name = "Specimen Short Description";
template<>
DATA_API const VR Attribute<Keyword::SpecimenShortDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SpecimenShortDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenDetailedDescription>::s_keyword =
    Keyword::SpecimenDetailedDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenDetailedDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenDetailedDescription>::s_element = 0x0602;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenDetailedDescription>::s_name =
    "Specimen Detailed Description";
template<>
DATA_API const VR Attribute<Keyword::SpecimenDetailedDescription>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::SpecimenDetailedDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenPreparationSequence>::s_keyword =
    Keyword::SpecimenPreparationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenPreparationSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenPreparationSequence>::s_element = 0x0610;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenPreparationSequence>::s_name =
    "Specimen Preparation Sequence";
template<>
DATA_API const VR Attribute<Keyword::SpecimenPreparationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SpecimenPreparationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenLocalizationContentItemSequence>::s_keyword =
    Keyword::SpecimenLocalizationContentItemSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenLocalizationContentItemSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenLocalizationContentItemSequence>::s_element = 0x0620;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenLocalizationContentItemSequence>::s_name =
    "Specimen Localization Content Item Sequence";
template<>
DATA_API const VR Attribute<Keyword::SpecimenLocalizationContentItemSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SpecimenLocalizationContentItemSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>::s_keyword =
    Keyword::WholeSlideMicroscopyImageFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>::s_element = 0x0710;
template<>
DATA_API const std::string_view Attribute<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>::s_name =
    "Whole Slide Microscopy Image Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageCenterPointCoordinatesSequence>::s_keyword =
    Keyword::ImageCenterPointCoordinatesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageCenterPointCoordinatesSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageCenterPointCoordinatesSequence>::s_element = 0x071A;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageCenterPointCoordinatesSequence>::s_name =
    "Image Center Point Coordinates Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImageCenterPointCoordinatesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImageCenterPointCoordinatesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XOffsetInSlideCoordinateSystem>::s_keyword =
    Keyword::XOffsetInSlideCoordinateSystem;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XOffsetInSlideCoordinateSystem>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XOffsetInSlideCoordinateSystem>::s_element = 0x072A;
template<>
DATA_API const std::string_view Attribute<Keyword::XOffsetInSlideCoordinateSystem>::s_name =
    "X Offset in Slide Coordinate System";
template<>
DATA_API const VR Attribute<Keyword::XOffsetInSlideCoordinateSystem>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::XOffsetInSlideCoordinateSystem>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::YOffsetInSlideCoordinateSystem>::s_keyword =
    Keyword::YOffsetInSlideCoordinateSystem;
template<>
DATA_API const std::uint16_t Attribute<Keyword::YOffsetInSlideCoordinateSystem>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::YOffsetInSlideCoordinateSystem>::s_element = 0x073A;
template<>
DATA_API const std::string_view Attribute<Keyword::YOffsetInSlideCoordinateSystem>::s_name =
    "Y Offset in Slide Coordinate System";
template<>
DATA_API const VR Attribute<Keyword::YOffsetInSlideCoordinateSystem>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::YOffsetInSlideCoordinateSystem>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ZOffsetInSlideCoordinateSystem>::s_keyword =
    Keyword::ZOffsetInSlideCoordinateSystem;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZOffsetInSlideCoordinateSystem>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ZOffsetInSlideCoordinateSystem>::s_element = 0x074A;
template<>
DATA_API const std::string_view Attribute<Keyword::ZOffsetInSlideCoordinateSystem>::s_name =
    "Z Offset in Slide Coordinate System";
template<>
DATA_API const VR Attribute<Keyword::ZOffsetInSlideCoordinateSystem>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ZOffsetInSlideCoordinateSystem>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MeasurementUnitsCodeSequence>::s_keyword =
    Keyword::MeasurementUnitsCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasurementUnitsCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasurementUnitsCodeSequence>::s_element = 0x08EA;
template<>
DATA_API const std::string_view Attribute<Keyword::MeasurementUnitsCodeSequence>::s_name =
    "Measurement Units Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::MeasurementUnitsCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MeasurementUnitsCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RequestedProcedureID>::s_keyword = Keyword::RequestedProcedureID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestedProcedureID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RequestedProcedureID>::s_element = 0x1001;
template<>
DATA_API const std::string_view Attribute<Keyword::RequestedProcedureID>::s_name = "Requested Procedure ID";
template<>
DATA_API const VR Attribute<Keyword::RequestedProcedureID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::RequestedProcedureID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReasonForTheRequestedProcedure>::s_keyword =
    Keyword::ReasonForTheRequestedProcedure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForTheRequestedProcedure>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForTheRequestedProcedure>::s_element = 0x1002;
template<>
DATA_API const std::string_view Attribute<Keyword::ReasonForTheRequestedProcedure>::s_name =
    "Reason for the Requested Procedure";
template<>
DATA_API const VR Attribute<Keyword::ReasonForTheRequestedProcedure>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ReasonForTheRequestedProcedure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReasonForRequestedProcedureCodeSequence>::s_keyword =
    Keyword::ReasonForRequestedProcedureCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForRequestedProcedureCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForRequestedProcedureCodeSequence>::s_element = 0x100A;
template<>
DATA_API const std::string_view Attribute<Keyword::ReasonForRequestedProcedureCodeSequence>::s_name =
    "Reason for Requested Procedure Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReasonForRequestedProcedureCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReasonForRequestedProcedureCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReasonForPerformedProcedureCodeSequence>::s_keyword =
    Keyword::ReasonForPerformedProcedureCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForPerformedProcedureCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForPerformedProcedureCodeSequence>::s_element = 0x1012;
template<>
DATA_API const std::string_view Attribute<Keyword::ReasonForPerformedProcedureCodeSequence>::s_name =
    "Reason For Performed Procedure Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReasonForPerformedProcedureCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReasonForPerformedProcedureCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PersonIdentificationCodeSequence>::s_keyword =
    Keyword::PersonIdentificationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonIdentificationCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonIdentificationCodeSequence>::s_element = 0x1101;
template<>
DATA_API const std::string_view Attribute<Keyword::PersonIdentificationCodeSequence>::s_name =
    "Person Identification Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PersonIdentificationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PersonIdentificationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PersonAddress>::s_keyword = Keyword::PersonAddress;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonAddress>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonAddress>::s_element = 0x1102;
template<>
DATA_API const std::string_view Attribute<Keyword::PersonAddress>::s_name = "Person's Address";
template<>
DATA_API const VR Attribute<Keyword::PersonAddress>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::PersonAddress>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PersonTelephoneNumbers>::s_keyword = Keyword::PersonTelephoneNumbers;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonTelephoneNumbers>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonTelephoneNumbers>::s_element = 0x1103;
template<>
DATA_API const std::string_view Attribute<Keyword::PersonTelephoneNumbers>::s_name = "Person's Telephone Numbers";
template<>
DATA_API const VR Attribute<Keyword::PersonTelephoneNumbers>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PersonTelephoneNumbers>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::PersonTelecomInformation>::s_keyword = Keyword::PersonTelecomInformation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonTelecomInformation>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonTelecomInformation>::s_element = 0x1104;
template<>
DATA_API const std::string_view Attribute<Keyword::PersonTelecomInformation>::s_name = "Person's Telecom Information";
template<>
DATA_API const VR Attribute<Keyword::PersonTelecomInformation>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::PersonTelecomInformation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlacerOrderNumberImagingServiceRequest>::s_keyword =
    Keyword::PlacerOrderNumberImagingServiceRequest;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlacerOrderNumberImagingServiceRequest>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlacerOrderNumberImagingServiceRequest>::s_element = 0x2016;
template<>
DATA_API const std::string_view Attribute<Keyword::PlacerOrderNumberImagingServiceRequest>::s_name =
    "Placer Order Number / Imaging Service Request";
template<>
DATA_API const VR Attribute<Keyword::PlacerOrderNumberImagingServiceRequest>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PlacerOrderNumberImagingServiceRequest>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FillerOrderNumberImagingServiceRequest>::s_keyword =
    Keyword::FillerOrderNumberImagingServiceRequest;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FillerOrderNumberImagingServiceRequest>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FillerOrderNumberImagingServiceRequest>::s_element = 0x2017;
template<>
DATA_API const std::string_view Attribute<Keyword::FillerOrderNumberImagingServiceRequest>::s_name =
    "Filler Order Number / Imaging Service Request";
template<>
DATA_API const VR Attribute<Keyword::FillerOrderNumberImagingServiceRequest>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::FillerOrderNumberImagingServiceRequest>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EntranceDoseInmGy>::s_keyword = Keyword::EntranceDoseInmGy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntranceDoseInmGy>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntranceDoseInmGy>::s_element = 0x8302;
template<>
DATA_API const std::string_view Attribute<Keyword::EntranceDoseInmGy>::s_name = "Entrance Dose in mGy";
template<>
DATA_API const VR Attribute<Keyword::EntranceDoseInmGy>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EntranceDoseInmGy>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EntranceDoseDerivation>::s_keyword = Keyword::EntranceDoseDerivation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntranceDoseDerivation>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntranceDoseDerivation>::s_element = 0x8303;
template<>
DATA_API const std::string_view Attribute<Keyword::EntranceDoseDerivation>::s_name = "Entrance Dose Derivation";
template<>
DATA_API const VR Attribute<Keyword::EntranceDoseDerivation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::EntranceDoseDerivation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParametricMapFrameTypeSequence>::s_keyword =
    Keyword::ParametricMapFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParametricMapFrameTypeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParametricMapFrameTypeSequence>::s_element = 0x9092;
template<>
DATA_API const std::string_view Attribute<Keyword::ParametricMapFrameTypeSequence>::s_name =
    "Parametric Map Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::ParametricMapFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ParametricMapFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RealWorldValueMappingSequence>::s_keyword =
    Keyword::RealWorldValueMappingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueMappingSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueMappingSequence>::s_element = 0x9096;
template<>
DATA_API const std::string_view Attribute<Keyword::RealWorldValueMappingSequence>::s_name =
    "Real World Value Mapping Sequence";
template<>
DATA_API const VR Attribute<Keyword::RealWorldValueMappingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RealWorldValueMappingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelValueMappingCodeSequence>::s_keyword =
    Keyword::PixelValueMappingCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueMappingCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelValueMappingCodeSequence>::s_element = 0x9098;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelValueMappingCodeSequence>::s_name =
    "Pixel Value Mapping Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PixelValueMappingCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PixelValueMappingCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LUTLabel>::s_keyword = Keyword::LUTLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTLabel>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LUTLabel>::s_element = 0x9210;
template<>
DATA_API const std::string_view Attribute<Keyword::LUTLabel>::s_name = "LUT Label";
template<>
DATA_API const VR Attribute<Keyword::LUTLabel>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::LUTLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RealWorldValueLastValueMapped>::s_keyword =
    Keyword::RealWorldValueLastValueMapped;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueLastValueMapped>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueLastValueMapped>::s_element = 0x9211;
template<>
DATA_API const std::string_view Attribute<Keyword::RealWorldValueLastValueMapped>::s_name =
    "Real World Value Last Value Mapped";
template<>
DATA_API const VR Attribute<Keyword::RealWorldValueLastValueMapped>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::RealWorldValueLastValueMapped>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RealWorldValueLUTData>::s_keyword = Keyword::RealWorldValueLUTData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueLUTData>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueLUTData>::s_element = 0x9212;
template<>
DATA_API const std::string_view Attribute<Keyword::RealWorldValueLUTData>::s_name = "Real World Value LUT Data";
template<>
DATA_API const VR Attribute<Keyword::RealWorldValueLUTData>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RealWorldValueLUTData>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DoubleFloatRealWorldValueLastValueMapped>::s_keyword =
    Keyword::DoubleFloatRealWorldValueLastValueMapped;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatRealWorldValueLastValueMapped>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatRealWorldValueLastValueMapped>::s_element = 0x9213;
template<>
DATA_API const std::string_view Attribute<Keyword::DoubleFloatRealWorldValueLastValueMapped>::s_name =
    "Double Float Real World Value Last Value Mapped";
template<>
DATA_API const VR Attribute<Keyword::DoubleFloatRealWorldValueLastValueMapped>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DoubleFloatRealWorldValueLastValueMapped>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoubleFloatRealWorldValueFirstValueMapped>::s_keyword =
    Keyword::DoubleFloatRealWorldValueFirstValueMapped;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatRealWorldValueFirstValueMapped>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatRealWorldValueFirstValueMapped>::s_element = 0x9214;
template<>
DATA_API const std::string_view Attribute<Keyword::DoubleFloatRealWorldValueFirstValueMapped>::s_name =
    "Double Float Real World Value First Value Mapped";
template<>
DATA_API const VR Attribute<Keyword::DoubleFloatRealWorldValueFirstValueMapped>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DoubleFloatRealWorldValueFirstValueMapped>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RealWorldValueFirstValueMapped>::s_keyword =
    Keyword::RealWorldValueFirstValueMapped;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueFirstValueMapped>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueFirstValueMapped>::s_element = 0x9216;
template<>
DATA_API const std::string_view Attribute<Keyword::RealWorldValueFirstValueMapped>::s_name =
    "Real World Value First Value Mapped";
template<>
DATA_API const VR Attribute<Keyword::RealWorldValueFirstValueMapped>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::RealWorldValueFirstValueMapped>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::QuantityDefinitionSequence>::s_keyword = Keyword::QuantityDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QuantityDefinitionSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::QuantityDefinitionSequence>::s_element = 0x9220;
template<>
DATA_API const std::string_view Attribute<Keyword::QuantityDefinitionSequence>::s_name = "Quantity Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::QuantityDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::QuantityDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RealWorldValueIntercept>::s_keyword = Keyword::RealWorldValueIntercept;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueIntercept>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueIntercept>::s_element = 0x9224;
template<>
DATA_API const std::string_view Attribute<Keyword::RealWorldValueIntercept>::s_name = "Real World Value Intercept";
template<>
DATA_API const VR Attribute<Keyword::RealWorldValueIntercept>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RealWorldValueIntercept>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RealWorldValueSlope>::s_keyword = Keyword::RealWorldValueSlope;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueSlope>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RealWorldValueSlope>::s_element = 0x9225;
template<>
DATA_API const std::string_view Attribute<Keyword::RealWorldValueSlope>::s_name = "Real World Value Slope";
template<>
DATA_API const VR Attribute<Keyword::RealWorldValueSlope>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RealWorldValueSlope>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelationshipType>::s_keyword = Keyword::RelationshipType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelationshipType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelationshipType>::s_element = 0xA010;
template<>
DATA_API const std::string_view Attribute<Keyword::RelationshipType>::s_name = "Relationship Type";
template<>
DATA_API const VR Attribute<Keyword::RelationshipType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RelationshipType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerifyingOrganization>::s_keyword = Keyword::VerifyingOrganization;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingOrganization>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingOrganization>::s_element = 0xA027;
template<>
DATA_API const std::string_view Attribute<Keyword::VerifyingOrganization>::s_name = "Verifying Organization";
template<>
DATA_API const VR Attribute<Keyword::VerifyingOrganization>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::VerifyingOrganization>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerificationDateTime>::s_keyword = Keyword::VerificationDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerificationDateTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerificationDateTime>::s_element = 0xA030;
template<>
DATA_API const std::string_view Attribute<Keyword::VerificationDateTime>::s_name = "Verification DateTime";
template<>
DATA_API const VR Attribute<Keyword::VerificationDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::VerificationDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObservationDateTime>::s_keyword = Keyword::ObservationDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObservationDateTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObservationDateTime>::s_element = 0xA032;
template<>
DATA_API const std::string_view Attribute<Keyword::ObservationDateTime>::s_name = "Observation DateTime";
template<>
DATA_API const VR Attribute<Keyword::ObservationDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ObservationDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObservationStartDateTime>::s_keyword = Keyword::ObservationStartDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObservationStartDateTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObservationStartDateTime>::s_element = 0xA033;
template<>
DATA_API const std::string_view Attribute<Keyword::ObservationStartDateTime>::s_name = "Observation Start DateTime";
template<>
DATA_API const VR Attribute<Keyword::ObservationStartDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ObservationStartDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ValueType>::s_keyword = Keyword::ValueType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ValueType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ValueType>::s_element = 0xA040;
template<>
DATA_API const std::string_view Attribute<Keyword::ValueType>::s_name = "Value Type";
template<>
DATA_API const VR Attribute<Keyword::ValueType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ValueType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConceptNameCodeSequence>::s_keyword = Keyword::ConceptNameCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConceptNameCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConceptNameCodeSequence>::s_element = 0xA043;
template<>
DATA_API const std::string_view Attribute<Keyword::ConceptNameCodeSequence>::s_name = "Concept Name Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ConceptNameCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ConceptNameCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContinuityOfContent>::s_keyword = Keyword::ContinuityOfContent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContinuityOfContent>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContinuityOfContent>::s_element = 0xA050;
template<>
DATA_API const std::string_view Attribute<Keyword::ContinuityOfContent>::s_name = "Continuity Of Content";
template<>
DATA_API const VR Attribute<Keyword::ContinuityOfContent>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContinuityOfContent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerifyingObserverSequence>::s_keyword = Keyword::VerifyingObserverSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingObserverSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingObserverSequence>::s_element = 0xA073;
template<>
DATA_API const std::string_view Attribute<Keyword::VerifyingObserverSequence>::s_name = "Verifying Observer Sequence";
template<>
DATA_API const VR Attribute<Keyword::VerifyingObserverSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::VerifyingObserverSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerifyingObserverName>::s_keyword = Keyword::VerifyingObserverName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingObserverName>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingObserverName>::s_element = 0xA075;
template<>
DATA_API const std::string_view Attribute<Keyword::VerifyingObserverName>::s_name = "Verifying Observer Name";
template<>
DATA_API const VR Attribute<Keyword::VerifyingObserverName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::VerifyingObserverName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AuthorObserverSequence>::s_keyword = Keyword::AuthorObserverSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AuthorObserverSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AuthorObserverSequence>::s_element = 0xA078;
template<>
DATA_API const std::string_view Attribute<Keyword::AuthorObserverSequence>::s_name = "Author Observer Sequence";
template<>
DATA_API const VR Attribute<Keyword::AuthorObserverSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AuthorObserverSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParticipantSequence>::s_keyword = Keyword::ParticipantSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParticipantSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParticipantSequence>::s_element = 0xA07A;
template<>
DATA_API const std::string_view Attribute<Keyword::ParticipantSequence>::s_name = "Participant Sequence";
template<>
DATA_API const VR Attribute<Keyword::ParticipantSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ParticipantSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CustodialOrganizationSequence>::s_keyword =
    Keyword::CustodialOrganizationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CustodialOrganizationSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CustodialOrganizationSequence>::s_element = 0xA07C;
template<>
DATA_API const std::string_view Attribute<Keyword::CustodialOrganizationSequence>::s_name =
    "Custodial Organization Sequence";
template<>
DATA_API const VR Attribute<Keyword::CustodialOrganizationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CustodialOrganizationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParticipationType>::s_keyword = Keyword::ParticipationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParticipationType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParticipationType>::s_element = 0xA080;
template<>
DATA_API const std::string_view Attribute<Keyword::ParticipationType>::s_name = "Participation Type";
template<>
DATA_API const VR Attribute<Keyword::ParticipationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ParticipationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParticipationDateTime>::s_keyword = Keyword::ParticipationDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParticipationDateTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParticipationDateTime>::s_element = 0xA082;
template<>
DATA_API const std::string_view Attribute<Keyword::ParticipationDateTime>::s_name = "Participation DateTime";
template<>
DATA_API const VR Attribute<Keyword::ParticipationDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ParticipationDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObserverType>::s_keyword = Keyword::ObserverType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObserverType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObserverType>::s_element = 0xA084;
template<>
DATA_API const std::string_view Attribute<Keyword::ObserverType>::s_name = "Observer Type";
template<>
DATA_API const VR Attribute<Keyword::ObserverType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ObserverType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerifyingObserverIdentificationCodeSequence>::s_keyword =
    Keyword::VerifyingObserverIdentificationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingObserverIdentificationCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerifyingObserverIdentificationCodeSequence>::s_element = 0xA088;
template<>
DATA_API const std::string_view Attribute<Keyword::VerifyingObserverIdentificationCodeSequence>::s_name =
    "Verifying Observer Identification Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::VerifyingObserverIdentificationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::VerifyingObserverIdentificationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedWaveformChannels>::s_keyword = Keyword::ReferencedWaveformChannels;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedWaveformChannels>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedWaveformChannels>::s_element = 0xA0B0;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedWaveformChannels>::s_name = "Referenced Waveform Channels";
template<>
DATA_API const VR Attribute<Keyword::ReferencedWaveformChannels>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedWaveformChannels>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::DateTime>::s_keyword = Keyword::DateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DateTime>::s_element = 0xA120;
template<>
DATA_API const std::string_view Attribute<Keyword::DateTime>::s_name = "DateTime";
template<>
DATA_API const VR Attribute<Keyword::DateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::DateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Date>::s_keyword = Keyword::Date;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Date>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Date>::s_element = 0xA121;
template<>
DATA_API const std::string_view Attribute<Keyword::Date>::s_name = "Date";
template<>
DATA_API const VR Attribute<Keyword::Date>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::Date>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Time>::s_keyword = Keyword::Time;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Time>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Time>::s_element = 0xA122;
template<>
DATA_API const std::string_view Attribute<Keyword::Time>::s_name = "Time";
template<>
DATA_API const VR Attribute<Keyword::Time>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::Time>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PersonName>::s_keyword = Keyword::PersonName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonName>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PersonName>::s_element = 0xA123;
template<>
DATA_API const std::string_view Attribute<Keyword::PersonName>::s_name = "Person Name";
template<>
DATA_API const VR Attribute<Keyword::PersonName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::PersonName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UID>::s_keyword = Keyword::UID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UID>::s_element = 0xA124;
template<>
DATA_API const std::string_view Attribute<Keyword::UID>::s_name = "UID";
template<>
DATA_API const VR Attribute<Keyword::UID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::UID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemporalRangeType>::s_keyword = Keyword::TemporalRangeType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalRangeType>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemporalRangeType>::s_element = 0xA130;
template<>
DATA_API const std::string_view Attribute<Keyword::TemporalRangeType>::s_name = "Temporal Range Type";
template<>
DATA_API const VR Attribute<Keyword::TemporalRangeType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TemporalRangeType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSamplePositions>::s_keyword = Keyword::ReferencedSamplePositions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSamplePositions>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSamplePositions>::s_element = 0xA132;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSamplePositions>::s_name = "Referenced Sample Positions";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSamplePositions>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSamplePositions>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedTimeOffsets>::s_keyword = Keyword::ReferencedTimeOffsets;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTimeOffsets>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTimeOffsets>::s_element = 0xA138;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedTimeOffsets>::s_name = "Referenced Time Offsets";
template<>
DATA_API const VR Attribute<Keyword::ReferencedTimeOffsets>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ReferencedTimeOffsets>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedDateTime>::s_keyword = Keyword::ReferencedDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDateTime>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDateTime>::s_element = 0xA13A;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedDateTime>::s_name = "Referenced DateTime";
template<>
DATA_API const VR Attribute<Keyword::ReferencedDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::ReferencedDateTime>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TextValue>::s_keyword = Keyword::TextValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TextValue>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TextValue>::s_element = 0xA160;
template<>
DATA_API const std::string_view Attribute<Keyword::TextValue>::s_name = "Text Value";
template<>
DATA_API const VR Attribute<Keyword::TextValue>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::TextValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FloatingPointValue>::s_keyword = Keyword::FloatingPointValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatingPointValue>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatingPointValue>::s_element = 0xA161;
template<>
DATA_API const std::string_view Attribute<Keyword::FloatingPointValue>::s_name = "Floating Point Value";
template<>
DATA_API const VR Attribute<Keyword::FloatingPointValue>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::FloatingPointValue>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RationalNumeratorValue>::s_keyword = Keyword::RationalNumeratorValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RationalNumeratorValue>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RationalNumeratorValue>::s_element = 0xA162;
template<>
DATA_API const std::string_view Attribute<Keyword::RationalNumeratorValue>::s_name = "Rational Numerator Value";
template<>
DATA_API const VR Attribute<Keyword::RationalNumeratorValue>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::RationalNumeratorValue>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RationalDenominatorValue>::s_keyword = Keyword::RationalDenominatorValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RationalDenominatorValue>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RationalDenominatorValue>::s_element = 0xA163;
template<>
DATA_API const std::string_view Attribute<Keyword::RationalDenominatorValue>::s_name = "Rational Denominator Value";
template<>
DATA_API const VR Attribute<Keyword::RationalDenominatorValue>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::RationalDenominatorValue>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ConceptCodeSequence>::s_keyword = Keyword::ConceptCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConceptCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConceptCodeSequence>::s_element = 0xA168;
template<>
DATA_API const std::string_view Attribute<Keyword::ConceptCodeSequence>::s_name = "Concept Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ConceptCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ConceptCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PurposeOfReferenceCodeSequence>::s_keyword =
    Keyword::PurposeOfReferenceCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PurposeOfReferenceCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PurposeOfReferenceCodeSequence>::s_element = 0xA170;
template<>
DATA_API const std::string_view Attribute<Keyword::PurposeOfReferenceCodeSequence>::s_name =
    "Purpose of Reference Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PurposeOfReferenceCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PurposeOfReferenceCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObservationUID>::s_keyword = Keyword::ObservationUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObservationUID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObservationUID>::s_element = 0xA171;
template<>
DATA_API const std::string_view Attribute<Keyword::ObservationUID>::s_name = "Observation UID";
template<>
DATA_API const VR Attribute<Keyword::ObservationUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ObservationUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MeasuredValueSequence>::s_keyword = Keyword::MeasuredValueSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasuredValueSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeasuredValueSequence>::s_element = 0xA300;
template<>
DATA_API const std::string_view Attribute<Keyword::MeasuredValueSequence>::s_name = "Measured Value Sequence";
template<>
DATA_API const VR Attribute<Keyword::MeasuredValueSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MeasuredValueSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumericValueQualifierCodeSequence>::s_keyword =
    Keyword::NumericValueQualifierCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumericValueQualifierCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumericValueQualifierCodeSequence>::s_element = 0xA301;
template<>
DATA_API const std::string_view Attribute<Keyword::NumericValueQualifierCodeSequence>::s_name =
    "Numeric Value Qualifier Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::NumericValueQualifierCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::NumericValueQualifierCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumericValue>::s_keyword = Keyword::NumericValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumericValue>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumericValue>::s_element = 0xA30A;
template<>
DATA_API const std::string_view Attribute<Keyword::NumericValue>::s_name = "Numeric Value";
template<>
DATA_API const VR Attribute<Keyword::NumericValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::NumericValue>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::PredecessorDocumentsSequence>::s_keyword =
    Keyword::PredecessorDocumentsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PredecessorDocumentsSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PredecessorDocumentsSequence>::s_element = 0xA360;
template<>
DATA_API const std::string_view Attribute<Keyword::PredecessorDocumentsSequence>::s_name =
    "Predecessor Documents Sequence";
template<>
DATA_API const VR Attribute<Keyword::PredecessorDocumentsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PredecessorDocumentsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedRequestSequence>::s_keyword = Keyword::ReferencedRequestSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRequestSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRequestSequence>::s_element = 0xA370;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedRequestSequence>::s_name = "Referenced Request Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedRequestSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedRequestSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcedureCodeSequence>::s_keyword =
    Keyword::PerformedProcedureCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcedureCodeSequence>::s_element = 0xA372;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcedureCodeSequence>::s_name =
    "Performed Procedure Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcedureCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcedureCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CurrentRequestedProcedureEvidenceSequence>::s_keyword =
    Keyword::CurrentRequestedProcedureEvidenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CurrentRequestedProcedureEvidenceSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CurrentRequestedProcedureEvidenceSequence>::s_element = 0xA375;
template<>
DATA_API const std::string_view Attribute<Keyword::CurrentRequestedProcedureEvidenceSequence>::s_name =
    "Current Requested Procedure Evidence Sequence";
template<>
DATA_API const VR Attribute<Keyword::CurrentRequestedProcedureEvidenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CurrentRequestedProcedureEvidenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PertinentOtherEvidenceSequence>::s_keyword =
    Keyword::PertinentOtherEvidenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PertinentOtherEvidenceSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PertinentOtherEvidenceSequence>::s_element = 0xA385;
template<>
DATA_API const std::string_view Attribute<Keyword::PertinentOtherEvidenceSequence>::s_name =
    "Pertinent Other Evidence Sequence";
template<>
DATA_API const VR Attribute<Keyword::PertinentOtherEvidenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PertinentOtherEvidenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HL7StructuredDocumentReferenceSequence>::s_keyword =
    Keyword::HL7StructuredDocumentReferenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HL7StructuredDocumentReferenceSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HL7StructuredDocumentReferenceSequence>::s_element = 0xA390;
template<>
DATA_API const std::string_view Attribute<Keyword::HL7StructuredDocumentReferenceSequence>::s_name =
    "HL7 Structured Document Reference Sequence";
template<>
DATA_API const VR Attribute<Keyword::HL7StructuredDocumentReferenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::HL7StructuredDocumentReferenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CompletionFlag>::s_keyword = Keyword::CompletionFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompletionFlag>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompletionFlag>::s_element = 0xA491;
template<>
DATA_API const std::string_view Attribute<Keyword::CompletionFlag>::s_name = "Completion Flag";
template<>
DATA_API const VR Attribute<Keyword::CompletionFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CompletionFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CompletionFlagDescription>::s_keyword = Keyword::CompletionFlagDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompletionFlagDescription>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CompletionFlagDescription>::s_element = 0xA492;
template<>
DATA_API const std::string_view Attribute<Keyword::CompletionFlagDescription>::s_name = "Completion Flag Description";
template<>
DATA_API const VR Attribute<Keyword::CompletionFlagDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::CompletionFlagDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerificationFlag>::s_keyword = Keyword::VerificationFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerificationFlag>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerificationFlag>::s_element = 0xA493;
template<>
DATA_API const std::string_view Attribute<Keyword::VerificationFlag>::s_name = "Verification Flag";
template<>
DATA_API const VR Attribute<Keyword::VerificationFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::VerificationFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PreliminaryFlag>::s_keyword = Keyword::PreliminaryFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PreliminaryFlag>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PreliminaryFlag>::s_element = 0xA496;
template<>
DATA_API const std::string_view Attribute<Keyword::PreliminaryFlag>::s_name = "Preliminary Flag";
template<>
DATA_API const VR Attribute<Keyword::PreliminaryFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PreliminaryFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentTemplateSequence>::s_keyword = Keyword::ContentTemplateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentTemplateSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentTemplateSequence>::s_element = 0xA504;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentTemplateSequence>::s_name = "Content Template Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContentTemplateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContentTemplateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IdenticalDocumentsSequence>::s_keyword = Keyword::IdenticalDocumentsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IdenticalDocumentsSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IdenticalDocumentsSequence>::s_element = 0xA525;
template<>
DATA_API const std::string_view Attribute<Keyword::IdenticalDocumentsSequence>::s_name = "Identical Documents Sequence";
template<>
DATA_API const VR Attribute<Keyword::IdenticalDocumentsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IdenticalDocumentsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentSequence>::s_keyword = Keyword::ContentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentSequence>::s_element = 0xA730;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentSequence>::s_name = "Content Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TabulatedValuesSequence>::s_keyword = Keyword::TabulatedValuesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TabulatedValuesSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TabulatedValuesSequence>::s_element = 0xA801;
template<>
DATA_API const std::string_view Attribute<Keyword::TabulatedValuesSequence>::s_name = "Tabulated Values Sequence";
template<>
DATA_API const VR Attribute<Keyword::TabulatedValuesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TabulatedValuesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTableRows>::s_keyword = Keyword::NumberOfTableRows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableRows>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableRows>::s_element = 0xA802;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTableRows>::s_name = "Number of Table Rows";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTableRows>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTableRows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTableColumns>::s_keyword = Keyword::NumberOfTableColumns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableColumns>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTableColumns>::s_element = 0xA803;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTableColumns>::s_name = "Number of Table Columns";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTableColumns>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTableColumns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableRowDefinitionSequence>::s_keyword = Keyword::TableRowDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableRowDefinitionSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableRowDefinitionSequence>::s_element = 0xA806;
template<>
DATA_API const std::string_view Attribute<Keyword::TableRowDefinitionSequence>::s_name =
    "Table Row Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::TableRowDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TableRowDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableColumnDefinitionSequence>::s_keyword =
    Keyword::TableColumnDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableColumnDefinitionSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableColumnDefinitionSequence>::s_element = 0xA807;
template<>
DATA_API const std::string_view Attribute<Keyword::TableColumnDefinitionSequence>::s_name =
    "Table Column Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::TableColumnDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TableColumnDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CellValuesSequence>::s_keyword = Keyword::CellValuesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CellValuesSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CellValuesSequence>::s_element = 0xA808;
template<>
DATA_API const std::string_view Attribute<Keyword::CellValuesSequence>::s_name = "Cell Values Sequence";
template<>
DATA_API const VR Attribute<Keyword::CellValuesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CellValuesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TemplateIdentifier>::s_keyword = Keyword::TemplateIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemplateIdentifier>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TemplateIdentifier>::s_element = 0xDB00;
template<>
DATA_API const std::string_view Attribute<Keyword::TemplateIdentifier>::s_name = "Template Identifier";
template<>
DATA_API const VR Attribute<Keyword::TemplateIdentifier>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TemplateIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedContentItemIdentifier>::s_keyword =
    Keyword::ReferencedContentItemIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedContentItemIdentifier>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedContentItemIdentifier>::s_element = 0xDB73;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedContentItemIdentifier>::s_name =
    "Referenced Content Item Identifier";
template<>
DATA_API const VR Attribute<Keyword::ReferencedContentItemIdentifier>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::ReferencedContentItemIdentifier>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::HL7InstanceIdentifier>::s_keyword = Keyword::HL7InstanceIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HL7InstanceIdentifier>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HL7InstanceIdentifier>::s_element = 0xE001;
template<>
DATA_API const std::string_view Attribute<Keyword::HL7InstanceIdentifier>::s_name = "HL7 Instance Identifier";
template<>
DATA_API const VR Attribute<Keyword::HL7InstanceIdentifier>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::HL7InstanceIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DocumentClassCodeSequence>::s_keyword = Keyword::DocumentClassCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DocumentClassCodeSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DocumentClassCodeSequence>::s_element = 0xE008;
template<>
DATA_API const std::string_view Attribute<Keyword::DocumentClassCodeSequence>::s_name = "Document Class Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::DocumentClassCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DocumentClassCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RetrieveURI>::s_keyword = Keyword::RetrieveURI;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveURI>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveURI>::s_element = 0xE010;
template<>
DATA_API const std::string_view Attribute<Keyword::RetrieveURI>::s_name = "Retrieve URI";
template<>
DATA_API const VR Attribute<Keyword::RetrieveURI>::s_vr = VR::UR;
template<>
DATA_API const VM Attribute<Keyword::RetrieveURI>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RetrieveLocationUID>::s_keyword = Keyword::RetrieveLocationUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveLocationUID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RetrieveLocationUID>::s_element = 0xE011;
template<>
DATA_API const std::string_view Attribute<Keyword::RetrieveLocationUID>::s_name = "Retrieve Location UID";
template<>
DATA_API const VR Attribute<Keyword::RetrieveLocationUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::RetrieveLocationUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TypeOfInstances>::s_keyword = Keyword::TypeOfInstances;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfInstances>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfInstances>::s_element = 0xE020;
template<>
DATA_API const std::string_view Attribute<Keyword::TypeOfInstances>::s_name = "Type of Instances";
template<>
DATA_API const VR Attribute<Keyword::TypeOfInstances>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TypeOfInstances>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DICOMRetrievalSequence>::s_keyword = Keyword::DICOMRetrievalSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DICOMRetrievalSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DICOMRetrievalSequence>::s_element = 0xE021;
template<>
DATA_API const std::string_view Attribute<Keyword::DICOMRetrievalSequence>::s_name = "DICOM Retrieval Sequence";
template<>
DATA_API const VR Attribute<Keyword::DICOMRetrievalSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DICOMRetrievalSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DICOMMediaRetrievalSequence>::s_keyword =
    Keyword::DICOMMediaRetrievalSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DICOMMediaRetrievalSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DICOMMediaRetrievalSequence>::s_element = 0xE022;
template<>
DATA_API const std::string_view Attribute<Keyword::DICOMMediaRetrievalSequence>::s_name =
    "DICOM Media Retrieval Sequence";
template<>
DATA_API const VR Attribute<Keyword::DICOMMediaRetrievalSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DICOMMediaRetrievalSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WADORetrievalSequence>::s_keyword = Keyword::WADORetrievalSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WADORetrievalSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WADORetrievalSequence>::s_element = 0xE023;
template<>
DATA_API const std::string_view Attribute<Keyword::WADORetrievalSequence>::s_name = "WADO Retrieval Sequence";
template<>
DATA_API const VR Attribute<Keyword::WADORetrievalSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::WADORetrievalSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XDSRetrievalSequence>::s_keyword = Keyword::XDSRetrievalSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XDSRetrievalSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XDSRetrievalSequence>::s_element = 0xE024;
template<>
DATA_API const std::string_view Attribute<Keyword::XDSRetrievalSequence>::s_name = "XDS Retrieval Sequence";
template<>
DATA_API const VR Attribute<Keyword::XDSRetrievalSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::XDSRetrievalSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::WADORSRetrievalSequence>::s_keyword = Keyword::WADORSRetrievalSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WADORSRetrievalSequence>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::WADORSRetrievalSequence>::s_element = 0xE025;
template<>
DATA_API const std::string_view Attribute<Keyword::WADORSRetrievalSequence>::s_name = "WADO-RS Retrieval Sequence";
template<>
DATA_API const VR Attribute<Keyword::WADORSRetrievalSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::WADORSRetrievalSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RepositoryUniqueID>::s_keyword = Keyword::RepositoryUniqueID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RepositoryUniqueID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RepositoryUniqueID>::s_element = 0xE030;
template<>
DATA_API const std::string_view Attribute<Keyword::RepositoryUniqueID>::s_name = "Repository Unique ID";
template<>
DATA_API const VR Attribute<Keyword::RepositoryUniqueID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::RepositoryUniqueID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HomeCommunityID>::s_keyword = Keyword::HomeCommunityID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HomeCommunityID>::s_group = 0x0040;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HomeCommunityID>::s_element = 0xE031;
template<>
DATA_API const std::string_view Attribute<Keyword::HomeCommunityID>::s_name = "Home Community ID";
template<>
DATA_API const VR Attribute<Keyword::HomeCommunityID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::HomeCommunityID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DocumentTitle>::s_keyword = Keyword::DocumentTitle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DocumentTitle>::s_group = 0x0042;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DocumentTitle>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::DocumentTitle>::s_name = "Document Title";
template<>
DATA_API const VR Attribute<Keyword::DocumentTitle>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::DocumentTitle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EncapsulatedDocument>::s_keyword = Keyword::EncapsulatedDocument;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncapsulatedDocument>::s_group = 0x0042;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncapsulatedDocument>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::EncapsulatedDocument>::s_name = "Encapsulated Document";
template<>
DATA_API const VR Attribute<Keyword::EncapsulatedDocument>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::EncapsulatedDocument>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MIMETypeOfEncapsulatedDocument>::s_keyword =
    Keyword::MIMETypeOfEncapsulatedDocument;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MIMETypeOfEncapsulatedDocument>::s_group = 0x0042;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MIMETypeOfEncapsulatedDocument>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::MIMETypeOfEncapsulatedDocument>::s_name =
    "MIME Type of Encapsulated Document";
template<>
DATA_API const VR Attribute<Keyword::MIMETypeOfEncapsulatedDocument>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::MIMETypeOfEncapsulatedDocument>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceInstanceSequence>::s_keyword = Keyword::SourceInstanceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceInstanceSequence>::s_group = 0x0042;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceInstanceSequence>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceInstanceSequence>::s_name = "Source Instance Sequence";
template<>
DATA_API const VR Attribute<Keyword::SourceInstanceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SourceInstanceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ListOfMIMETypes>::s_keyword = Keyword::ListOfMIMETypes;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ListOfMIMETypes>::s_group = 0x0042;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ListOfMIMETypes>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::ListOfMIMETypes>::s_name = "List of MIME Types";
template<>
DATA_API const VR Attribute<Keyword::ListOfMIMETypes>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ListOfMIMETypes>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::EncapsulatedDocumentLength>::s_keyword = Keyword::EncapsulatedDocumentLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncapsulatedDocumentLength>::s_group = 0x0042;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncapsulatedDocumentLength>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::EncapsulatedDocumentLength>::s_name = "Encapsulated Document Length";
template<>
DATA_API const VR Attribute<Keyword::EncapsulatedDocumentLength>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::EncapsulatedDocumentLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OrganizationalRoleCodeSequence>::s_keyword =
    Keyword::OrganizationalRoleCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrganizationalRoleCodeSequence>::s_group = 0x0044;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OrganizationalRoleCodeSequence>::s_element = 0x010A;
template<>
DATA_API const std::string_view Attribute<Keyword::OrganizationalRoleCodeSequence>::s_name =
    "Organizational Role Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::OrganizationalRoleCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OrganizationalRoleCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SteepKeratometricAxisSequence>::s_keyword =
    Keyword::SteepKeratometricAxisSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SteepKeratometricAxisSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SteepKeratometricAxisSequence>::s_element = 0x0074;
template<>
DATA_API const std::string_view Attribute<Keyword::SteepKeratometricAxisSequence>::s_name =
    "Steep Keratometric Axis Sequence";
template<>
DATA_API const VR Attribute<Keyword::SteepKeratometricAxisSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SteepKeratometricAxisSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiusOfCurvature>::s_keyword = Keyword::RadiusOfCurvature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCurvature>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiusOfCurvature>::s_element = 0x0075;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiusOfCurvature>::s_name = "Radius of Curvature";
template<>
DATA_API const VR Attribute<Keyword::RadiusOfCurvature>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RadiusOfCurvature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::KeratometricPower>::s_keyword = Keyword::KeratometricPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KeratometricPower>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KeratometricPower>::s_element = 0x0076;
template<>
DATA_API const std::string_view Attribute<Keyword::KeratometricPower>::s_name = "Keratometric Power";
template<>
DATA_API const VR Attribute<Keyword::KeratometricPower>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::KeratometricPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::KeratometricAxis>::s_keyword = Keyword::KeratometricAxis;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KeratometricAxis>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KeratometricAxis>::s_element = 0x0077;
template<>
DATA_API const std::string_view Attribute<Keyword::KeratometricAxis>::s_name = "Keratometric Axis";
template<>
DATA_API const VR Attribute<Keyword::KeratometricAxis>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::KeratometricAxis>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FlatKeratometricAxisSequence>::s_keyword =
    Keyword::FlatKeratometricAxisSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlatKeratometricAxisSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FlatKeratometricAxisSequence>::s_element = 0x0080;
template<>
DATA_API const std::string_view Attribute<Keyword::FlatKeratometricAxisSequence>::s_name =
    "Flat Keratometric Axis Sequence";
template<>
DATA_API const VR Attribute<Keyword::FlatKeratometricAxisSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FlatKeratometricAxisSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealTopographySurface>::s_keyword = Keyword::CornealTopographySurface;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographySurface>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographySurface>::s_element = 0x0201;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealTopographySurface>::s_name = "Corneal Topography Surface";
template<>
DATA_API const VR Attribute<Keyword::CornealTopographySurface>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CornealTopographySurface>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealVertexLocation>::s_keyword = Keyword::CornealVertexLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealVertexLocation>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealVertexLocation>::s_element = 0x0202;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealVertexLocation>::s_name = "Corneal Vertex Location";
template<>
DATA_API const VR Attribute<Keyword::CornealVertexLocation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CornealVertexLocation>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::PupilCentroidXCoordinate>::s_keyword = Keyword::PupilCentroidXCoordinate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PupilCentroidXCoordinate>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PupilCentroidXCoordinate>::s_element = 0x0203;
template<>
DATA_API const std::string_view Attribute<Keyword::PupilCentroidXCoordinate>::s_name = "Pupil Centroid X-Coordinate";
template<>
DATA_API const VR Attribute<Keyword::PupilCentroidXCoordinate>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PupilCentroidXCoordinate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PupilCentroidYCoordinate>::s_keyword = Keyword::PupilCentroidYCoordinate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PupilCentroidYCoordinate>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PupilCentroidYCoordinate>::s_element = 0x0204;
template<>
DATA_API const std::string_view Attribute<Keyword::PupilCentroidYCoordinate>::s_name = "Pupil Centroid Y-Coordinate";
template<>
DATA_API const VR Attribute<Keyword::PupilCentroidYCoordinate>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PupilCentroidYCoordinate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EquivalentPupilRadius>::s_keyword = Keyword::EquivalentPupilRadius;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquivalentPupilRadius>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquivalentPupilRadius>::s_element = 0x0205;
template<>
DATA_API const std::string_view Attribute<Keyword::EquivalentPupilRadius>::s_name = "Equivalent Pupil Radius";
template<>
DATA_API const VR Attribute<Keyword::EquivalentPupilRadius>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::EquivalentPupilRadius>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealTopographyMapTypeCodeSequence>::s_keyword =
    Keyword::CornealTopographyMapTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographyMapTypeCodeSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographyMapTypeCodeSequence>::s_element = 0x0207;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealTopographyMapTypeCodeSequence>::s_name =
    "Corneal Topography Map Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::CornealTopographyMapTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CornealTopographyMapTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VerticesOfTheOutlineOfPupil>::s_keyword =
    Keyword::VerticesOfTheOutlineOfPupil;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfTheOutlineOfPupil>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VerticesOfTheOutlineOfPupil>::s_element = 0x0208;
template<>
DATA_API const std::string_view Attribute<Keyword::VerticesOfTheOutlineOfPupil>::s_name =
    "Vertices of the Outline of Pupil";
template<>
DATA_API const VR Attribute<Keyword::VerticesOfTheOutlineOfPupil>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::VerticesOfTheOutlineOfPupil>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::CornealTopographyMappingNormalsSequence>::s_keyword =
    Keyword::CornealTopographyMappingNormalsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographyMappingNormalsSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographyMappingNormalsSequence>::s_element = 0x0210;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealTopographyMappingNormalsSequence>::s_name =
    "Corneal Topography Mapping Normals Sequence";
template<>
DATA_API const VR Attribute<Keyword::CornealTopographyMappingNormalsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CornealTopographyMappingNormalsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumCornealCurvatureSequence>::s_keyword =
    Keyword::MaximumCornealCurvatureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumCornealCurvatureSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumCornealCurvatureSequence>::s_element = 0x0211;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumCornealCurvatureSequence>::s_name =
    "Maximum Corneal Curvature Sequence";
template<>
DATA_API const VR Attribute<Keyword::MaximumCornealCurvatureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MaximumCornealCurvatureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumCornealCurvature>::s_keyword = Keyword::MaximumCornealCurvature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumCornealCurvature>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumCornealCurvature>::s_element = 0x0212;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumCornealCurvature>::s_name = "Maximum Corneal Curvature";
template<>
DATA_API const VR Attribute<Keyword::MaximumCornealCurvature>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaximumCornealCurvature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumCornealCurvatureLocation>::s_keyword =
    Keyword::MaximumCornealCurvatureLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumCornealCurvatureLocation>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumCornealCurvatureLocation>::s_element = 0x0213;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumCornealCurvatureLocation>::s_name =
    "Maximum Corneal Curvature Location";
template<>
DATA_API const VR Attribute<Keyword::MaximumCornealCurvatureLocation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaximumCornealCurvatureLocation>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::MinimumKeratometricSequence>::s_keyword =
    Keyword::MinimumKeratometricSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MinimumKeratometricSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MinimumKeratometricSequence>::s_element = 0x0215;
template<>
DATA_API const std::string_view Attribute<Keyword::MinimumKeratometricSequence>::s_name =
    "Minimum Keratometric Sequence";
template<>
DATA_API const VR Attribute<Keyword::MinimumKeratometricSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MinimumKeratometricSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SimulatedKeratometricCylinderSequence>::s_keyword =
    Keyword::SimulatedKeratometricCylinderSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SimulatedKeratometricCylinderSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SimulatedKeratometricCylinderSequence>::s_element = 0x0218;
template<>
DATA_API const std::string_view Attribute<Keyword::SimulatedKeratometricCylinderSequence>::s_name =
    "Simulated Keratometric Cylinder Sequence";
template<>
DATA_API const VR Attribute<Keyword::SimulatedKeratometricCylinderSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SimulatedKeratometricCylinderSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AverageCornealPower>::s_keyword = Keyword::AverageCornealPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AverageCornealPower>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AverageCornealPower>::s_element = 0x0220;
template<>
DATA_API const std::string_view Attribute<Keyword::AverageCornealPower>::s_name = "Average Corneal Power";
template<>
DATA_API const VR Attribute<Keyword::AverageCornealPower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AverageCornealPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealISValue>::s_keyword = Keyword::CornealISValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealISValue>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealISValue>::s_element = 0x0224;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealISValue>::s_name = "Corneal I-S Value";
template<>
DATA_API const VR Attribute<Keyword::CornealISValue>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CornealISValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AnalyzedArea>::s_keyword = Keyword::AnalyzedArea;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnalyzedArea>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AnalyzedArea>::s_element = 0x0227;
template<>
DATA_API const std::string_view Attribute<Keyword::AnalyzedArea>::s_name = "Analyzed Area";
template<>
DATA_API const VR Attribute<Keyword::AnalyzedArea>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AnalyzedArea>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceRegularityIndex>::s_keyword = Keyword::SurfaceRegularityIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceRegularityIndex>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceRegularityIndex>::s_element = 0x0230;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceRegularityIndex>::s_name = "Surface Regularity Index";
template<>
DATA_API const VR Attribute<Keyword::SurfaceRegularityIndex>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SurfaceRegularityIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceAsymmetryIndex>::s_keyword = Keyword::SurfaceAsymmetryIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceAsymmetryIndex>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceAsymmetryIndex>::s_element = 0x0232;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceAsymmetryIndex>::s_name = "Surface Asymmetry Index";
template<>
DATA_API const VR Attribute<Keyword::SurfaceAsymmetryIndex>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SurfaceAsymmetryIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealEccentricityIndex>::s_keyword = Keyword::CornealEccentricityIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealEccentricityIndex>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealEccentricityIndex>::s_element = 0x0234;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealEccentricityIndex>::s_name = "Corneal Eccentricity Index";
template<>
DATA_API const VR Attribute<Keyword::CornealEccentricityIndex>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CornealEccentricityIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::KeratoconusPredictionIndex>::s_keyword = Keyword::KeratoconusPredictionIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KeratoconusPredictionIndex>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::KeratoconusPredictionIndex>::s_element = 0x0236;
template<>
DATA_API const std::string_view Attribute<Keyword::KeratoconusPredictionIndex>::s_name = "Keratoconus Prediction Index";
template<>
DATA_API const VR Attribute<Keyword::KeratoconusPredictionIndex>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::KeratoconusPredictionIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecimalPotentialVisualAcuity>::s_keyword =
    Keyword::DecimalPotentialVisualAcuity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecimalPotentialVisualAcuity>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecimalPotentialVisualAcuity>::s_element = 0x0238;
template<>
DATA_API const std::string_view Attribute<Keyword::DecimalPotentialVisualAcuity>::s_name =
    "Decimal Potential Visual Acuity";
template<>
DATA_API const VR Attribute<Keyword::DecimalPotentialVisualAcuity>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DecimalPotentialVisualAcuity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealTopographyMapQualityEvaluation>::s_keyword =
    Keyword::CornealTopographyMapQualityEvaluation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographyMapQualityEvaluation>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealTopographyMapQualityEvaluation>::s_element = 0x0242;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealTopographyMapQualityEvaluation>::s_name =
    "Corneal Topography Map Quality Evaluation";
template<>
DATA_API const VR Attribute<Keyword::CornealTopographyMapQualityEvaluation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CornealTopographyMapQualityEvaluation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceImageCornealProcessedDataSequence>::s_keyword =
    Keyword::SourceImageCornealProcessedDataSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceImageCornealProcessedDataSequence>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceImageCornealProcessedDataSequence>::s_element = 0x0244;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceImageCornealProcessedDataSequence>::s_name =
    "Source Image Corneal Processed Data Sequence";
template<>
DATA_API const VR Attribute<Keyword::SourceImageCornealProcessedDataSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SourceImageCornealProcessedDataSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealPointLocation>::s_keyword = Keyword::CornealPointLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealPointLocation>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealPointLocation>::s_element = 0x0247;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealPointLocation>::s_name = "Corneal Point Location";
template<>
DATA_API const VR Attribute<Keyword::CornealPointLocation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CornealPointLocation>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::CornealPointEstimated>::s_keyword = Keyword::CornealPointEstimated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealPointEstimated>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealPointEstimated>::s_element = 0x0248;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealPointEstimated>::s_name = "Corneal Point Estimated";
template<>
DATA_API const VR Attribute<Keyword::CornealPointEstimated>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CornealPointEstimated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AxialPower>::s_keyword = Keyword::AxialPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialPower>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialPower>::s_element = 0x0249;
template<>
DATA_API const std::string_view Attribute<Keyword::AxialPower>::s_name = "Axial Power";
template<>
DATA_API const VR Attribute<Keyword::AxialPower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AxialPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TangentialPower>::s_keyword = Keyword::TangentialPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TangentialPower>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TangentialPower>::s_element = 0x0250;
template<>
DATA_API const std::string_view Attribute<Keyword::TangentialPower>::s_name = "Tangential Power";
template<>
DATA_API const VR Attribute<Keyword::TangentialPower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TangentialPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RefractivePower>::s_keyword = Keyword::RefractivePower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RefractivePower>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RefractivePower>::s_element = 0x0251;
template<>
DATA_API const std::string_view Attribute<Keyword::RefractivePower>::s_name = "Refractive Power";
template<>
DATA_API const VR Attribute<Keyword::RefractivePower>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RefractivePower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelativeElevation>::s_keyword = Keyword::RelativeElevation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeElevation>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeElevation>::s_element = 0x0252;
template<>
DATA_API const std::string_view Attribute<Keyword::RelativeElevation>::s_name = "Relative Elevation";
template<>
DATA_API const VR Attribute<Keyword::RelativeElevation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RelativeElevation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CornealWavefront>::s_keyword = Keyword::CornealWavefront;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealWavefront>::s_group = 0x0046;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CornealWavefront>::s_element = 0x0253;
template<>
DATA_API const std::string_view Attribute<Keyword::CornealWavefront>::s_name = "Corneal Wavefront";
template<>
DATA_API const VR Attribute<Keyword::CornealWavefront>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CornealWavefront>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagedVolumeWidth>::s_keyword = Keyword::ImagedVolumeWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedVolumeWidth>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedVolumeWidth>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagedVolumeWidth>::s_name = "Imaged Volume Width";
template<>
DATA_API const VR Attribute<Keyword::ImagedVolumeWidth>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ImagedVolumeWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagedVolumeHeight>::s_keyword = Keyword::ImagedVolumeHeight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedVolumeHeight>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedVolumeHeight>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagedVolumeHeight>::s_name = "Imaged Volume Height";
template<>
DATA_API const VR Attribute<Keyword::ImagedVolumeHeight>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ImagedVolumeHeight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagedVolumeDepth>::s_keyword = Keyword::ImagedVolumeDepth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedVolumeDepth>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagedVolumeDepth>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagedVolumeDepth>::s_name = "Imaged Volume Depth";
template<>
DATA_API const VR Attribute<Keyword::ImagedVolumeDepth>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ImagedVolumeDepth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TotalPixelMatrixColumns>::s_keyword = Keyword::TotalPixelMatrixColumns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixColumns>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixColumns>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::TotalPixelMatrixColumns>::s_name = "Total Pixel Matrix Columns";
template<>
DATA_API const VR Attribute<Keyword::TotalPixelMatrixColumns>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TotalPixelMatrixColumns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TotalPixelMatrixRows>::s_keyword = Keyword::TotalPixelMatrixRows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixRows>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixRows>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::TotalPixelMatrixRows>::s_name = "Total Pixel Matrix Rows";
template<>
DATA_API const VR Attribute<Keyword::TotalPixelMatrixRows>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TotalPixelMatrixRows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TotalPixelMatrixOriginSequence>::s_keyword =
    Keyword::TotalPixelMatrixOriginSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixOriginSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixOriginSequence>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::TotalPixelMatrixOriginSequence>::s_name =
    "Total Pixel Matrix Origin Sequence";
template<>
DATA_API const VR Attribute<Keyword::TotalPixelMatrixOriginSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TotalPixelMatrixOriginSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenLabelInImage>::s_keyword = Keyword::SpecimenLabelInImage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenLabelInImage>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenLabelInImage>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenLabelInImage>::s_name = "Specimen Label in Image";
template<>
DATA_API const VR Attribute<Keyword::SpecimenLabelInImage>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpecimenLabelInImage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FocusMethod>::s_keyword = Keyword::FocusMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocusMethod>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FocusMethod>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::FocusMethod>::s_name = "Focus Method";
template<>
DATA_API const VR Attribute<Keyword::FocusMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FocusMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExtendedDepthOfField>::s_keyword = Keyword::ExtendedDepthOfField;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExtendedDepthOfField>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExtendedDepthOfField>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::ExtendedDepthOfField>::s_name = "Extended Depth of field";
template<>
DATA_API const VR Attribute<Keyword::ExtendedDepthOfField>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ExtendedDepthOfField>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfFocalPlanes>::s_keyword = Keyword::NumberOfFocalPlanes;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFocalPlanes>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFocalPlanes>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfFocalPlanes>::s_name = "Number of Focal Planes";
template<>
DATA_API const VR Attribute<Keyword::NumberOfFocalPlanes>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfFocalPlanes>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DistanceBetweenFocalPlanes>::s_keyword = Keyword::DistanceBetweenFocalPlanes;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceBetweenFocalPlanes>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DistanceBetweenFocalPlanes>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::DistanceBetweenFocalPlanes>::s_name =
    "Distance Between Focal Planes";
template<>
DATA_API const VR Attribute<Keyword::DistanceBetweenFocalPlanes>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::DistanceBetweenFocalPlanes>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedAbsentPixelCIELabValue>::s_keyword =
    Keyword::RecommendedAbsentPixelCIELabValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedAbsentPixelCIELabValue>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedAbsentPixelCIELabValue>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedAbsentPixelCIELabValue>::s_name =
    "Recommended Absent Pixel CIELab Value";
template<>
DATA_API const VR Attribute<Keyword::RecommendedAbsentPixelCIELabValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RecommendedAbsentPixelCIELabValue>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminatorTypeCodeSequence>::s_keyword =
    Keyword::IlluminatorTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminatorTypeCodeSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminatorTypeCodeSequence>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminatorTypeCodeSequence>::s_name =
    "Illuminator Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::IlluminatorTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IlluminatorTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageOrientationSlide>::s_keyword = Keyword::ImageOrientationSlide;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageOrientationSlide>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageOrientationSlide>::s_element = 0x0102;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageOrientationSlide>::s_name = "Image Orientation (Slide)";
template<>
DATA_API const VR Attribute<Keyword::ImageOrientationSlide>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImageOrientationSlide>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::OpticalPathSequence>::s_keyword = Keyword::OpticalPathSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathSequence>::s_element = 0x0105;
template<>
DATA_API const std::string_view Attribute<Keyword::OpticalPathSequence>::s_name = "Optical Path Sequence";
template<>
DATA_API const VR Attribute<Keyword::OpticalPathSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OpticalPathSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OpticalPathIdentifier>::s_keyword = Keyword::OpticalPathIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathIdentifier>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathIdentifier>::s_element = 0x0106;
template<>
DATA_API const std::string_view Attribute<Keyword::OpticalPathIdentifier>::s_name = "Optical Path Identifier";
template<>
DATA_API const VR Attribute<Keyword::OpticalPathIdentifier>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::OpticalPathIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OpticalPathDescription>::s_keyword = Keyword::OpticalPathDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathDescription>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathDescription>::s_element = 0x0107;
template<>
DATA_API const std::string_view Attribute<Keyword::OpticalPathDescription>::s_name = "Optical Path Description";
template<>
DATA_API const VR Attribute<Keyword::OpticalPathDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::OpticalPathDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IlluminationColorCodeSequence>::s_keyword =
    Keyword::IlluminationColorCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationColorCodeSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IlluminationColorCodeSequence>::s_element = 0x0108;
template<>
DATA_API const std::string_view Attribute<Keyword::IlluminationColorCodeSequence>::s_name =
    "Illumination Color Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::IlluminationColorCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IlluminationColorCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpecimenReferenceSequence>::s_keyword = Keyword::SpecimenReferenceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenReferenceSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpecimenReferenceSequence>::s_element = 0x0110;
template<>
DATA_API const std::string_view Attribute<Keyword::SpecimenReferenceSequence>::s_name = "Specimen Reference Sequence";
template<>
DATA_API const VR Attribute<Keyword::SpecimenReferenceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SpecimenReferenceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CondenserLensPower>::s_keyword = Keyword::CondenserLensPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CondenserLensPower>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CondenserLensPower>::s_element = 0x0111;
template<>
DATA_API const std::string_view Attribute<Keyword::CondenserLensPower>::s_name = "Condenser Lens Power";
template<>
DATA_API const VR Attribute<Keyword::CondenserLensPower>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CondenserLensPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObjectiveLensPower>::s_keyword = Keyword::ObjectiveLensPower;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectiveLensPower>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectiveLensPower>::s_element = 0x0112;
template<>
DATA_API const std::string_view Attribute<Keyword::ObjectiveLensPower>::s_name = "Objective Lens Power";
template<>
DATA_API const VR Attribute<Keyword::ObjectiveLensPower>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ObjectiveLensPower>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ObjectiveLensNumericalAperture>::s_keyword =
    Keyword::ObjectiveLensNumericalAperture;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectiveLensNumericalAperture>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ObjectiveLensNumericalAperture>::s_element = 0x0113;
template<>
DATA_API const std::string_view Attribute<Keyword::ObjectiveLensNumericalAperture>::s_name =
    "Objective Lens Numerical Aperture";
template<>
DATA_API const VR Attribute<Keyword::ObjectiveLensNumericalAperture>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ObjectiveLensNumericalAperture>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PaletteColorLookupTableSequence>::s_keyword =
    Keyword::PaletteColorLookupTableSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PaletteColorLookupTableSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PaletteColorLookupTableSequence>::s_element = 0x0120;
template<>
DATA_API const std::string_view Attribute<Keyword::PaletteColorLookupTableSequence>::s_name =
    "Palette Color Lookup Table Sequence";
template<>
DATA_API const VR Attribute<Keyword::PaletteColorLookupTableSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PaletteColorLookupTableSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OpticalPathIdentificationSequence>::s_keyword =
    Keyword::OpticalPathIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathIdentificationSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OpticalPathIdentificationSequence>::s_element = 0x0207;
template<>
DATA_API const std::string_view Attribute<Keyword::OpticalPathIdentificationSequence>::s_name =
    "Optical Path Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::OpticalPathIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OpticalPathIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanePositionSlideSequence>::s_keyword = Keyword::PlanePositionSlideSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanePositionSlideSequence>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanePositionSlideSequence>::s_element = 0x021A;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanePositionSlideSequence>::s_name =
    "Plane Position (Slide) Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanePositionSlideSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanePositionSlideSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ColumnPositionInTotalImagePixelMatrix>::s_keyword =
    Keyword::ColumnPositionInTotalImagePixelMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColumnPositionInTotalImagePixelMatrix>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ColumnPositionInTotalImagePixelMatrix>::s_element = 0x021E;
template<>
DATA_API const std::string_view Attribute<Keyword::ColumnPositionInTotalImagePixelMatrix>::s_name =
    "Column Position In Total Image Pixel Matrix";
template<>
DATA_API const VR Attribute<Keyword::ColumnPositionInTotalImagePixelMatrix>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::ColumnPositionInTotalImagePixelMatrix>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RowPositionInTotalImagePixelMatrix>::s_keyword =
    Keyword::RowPositionInTotalImagePixelMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RowPositionInTotalImagePixelMatrix>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RowPositionInTotalImagePixelMatrix>::s_element = 0x021F;
template<>
DATA_API const std::string_view Attribute<Keyword::RowPositionInTotalImagePixelMatrix>::s_name =
    "Row Position In Total Image Pixel Matrix";
template<>
DATA_API const VR Attribute<Keyword::RowPositionInTotalImagePixelMatrix>::s_vr = VR::SL;
template<>
DATA_API const VM Attribute<Keyword::RowPositionInTotalImagePixelMatrix>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelOriginInterpretation>::s_keyword = Keyword::PixelOriginInterpretation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelOriginInterpretation>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelOriginInterpretation>::s_element = 0x0301;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelOriginInterpretation>::s_name = "Pixel Origin Interpretation";
template<>
DATA_API const VR Attribute<Keyword::PixelOriginInterpretation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PixelOriginInterpretation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfOpticalPaths>::s_keyword = Keyword::NumberOfOpticalPaths;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfOpticalPaths>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfOpticalPaths>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfOpticalPaths>::s_name = "Number of Optical Paths";
template<>
DATA_API const VR Attribute<Keyword::NumberOfOpticalPaths>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfOpticalPaths>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TotalPixelMatrixFocalPlanes>::s_keyword =
    Keyword::TotalPixelMatrixFocalPlanes;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixFocalPlanes>::s_group = 0x0048;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TotalPixelMatrixFocalPlanes>::s_element = 0x0303;
template<>
DATA_API const std::string_view Attribute<Keyword::TotalPixelMatrixFocalPlanes>::s_name =
    "Total Pixel Matrix Focal Planes";
template<>
DATA_API const VR Attribute<Keyword::TotalPixelMatrixFocalPlanes>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::TotalPixelMatrixFocalPlanes>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CalibrationImage>::s_keyword = Keyword::CalibrationImage;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalibrationImage>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalibrationImage>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::CalibrationImage>::s_name = "Calibration Image";
template<>
DATA_API const VR Attribute<Keyword::CalibrationImage>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CalibrationImage>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceSequence>::s_keyword = Keyword::DeviceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceSequence>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceSequence>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceSequence>::s_name = "Device Sequence";
template<>
DATA_API const VR Attribute<Keyword::DeviceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DeviceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentTypeCodeSequence>::s_keyword =
    Keyword::ContainerComponentTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentTypeCodeSequence>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentTypeCodeSequence>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentTypeCodeSequence>::s_name =
    "Container Component Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentThickness>::s_keyword =
    Keyword::ContainerComponentThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentThickness>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentThickness>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentThickness>::s_name =
    "Container Component Thickness";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentThickness>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceLength>::s_keyword = Keyword::DeviceLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceLength>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceLength>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceLength>::s_name = "Device Length";
template<>
DATA_API const VR Attribute<Keyword::DeviceLength>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DeviceLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentWidth>::s_keyword = Keyword::ContainerComponentWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentWidth>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentWidth>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentWidth>::s_name = "Container Component Width";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentWidth>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceDiameter>::s_keyword = Keyword::DeviceDiameter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceDiameter>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceDiameter>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceDiameter>::s_name = "Device Diameter";
template<>
DATA_API const VR Attribute<Keyword::DeviceDiameter>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DeviceDiameter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceDiameterUnits>::s_keyword = Keyword::DeviceDiameterUnits;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceDiameterUnits>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceDiameterUnits>::s_element = 0x0017;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceDiameterUnits>::s_name = "Device Diameter Units";
template<>
DATA_API const VR Attribute<Keyword::DeviceDiameterUnits>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DeviceDiameterUnits>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceVolume>::s_keyword = Keyword::DeviceVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceVolume>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceVolume>::s_element = 0x0018;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceVolume>::s_name = "Device Volume";
template<>
DATA_API const VR Attribute<Keyword::DeviceVolume>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DeviceVolume>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterMarkerDistance>::s_keyword = Keyword::InterMarkerDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterMarkerDistance>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterMarkerDistance>::s_element = 0x0019;
template<>
DATA_API const std::string_view Attribute<Keyword::InterMarkerDistance>::s_name = "Inter-Marker Distance";
template<>
DATA_API const VR Attribute<Keyword::InterMarkerDistance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::InterMarkerDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentMaterial>::s_keyword = Keyword::ContainerComponentMaterial;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentMaterial>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentMaterial>::s_element = 0x001A;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentMaterial>::s_name = "Container Component Material";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentMaterial>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentMaterial>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentID>::s_keyword = Keyword::ContainerComponentID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentID>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentID>::s_element = 0x001B;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentID>::s_name = "Container Component ID";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentLength>::s_keyword = Keyword::ContainerComponentLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentLength>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentLength>::s_element = 0x001C;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentLength>::s_name = "Container Component Length";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentLength>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentDiameter>::s_keyword = Keyword::ContainerComponentDiameter;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentDiameter>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentDiameter>::s_element = 0x001D;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentDiameter>::s_name = "Container Component Diameter";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentDiameter>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentDiameter>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContainerComponentDescription>::s_keyword =
    Keyword::ContainerComponentDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentDescription>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContainerComponentDescription>::s_element = 0x001E;
template<>
DATA_API const std::string_view Attribute<Keyword::ContainerComponentDescription>::s_name =
    "Container Component Description";
template<>
DATA_API const VR Attribute<Keyword::ContainerComponentDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContainerComponentDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceDescription>::s_keyword = Keyword::DeviceDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceDescription>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceDescription>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceDescription>::s_name = "Device Description";
template<>
DATA_API const VR Attribute<Keyword::DeviceDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DeviceDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LongDeviceDescription>::s_keyword = Keyword::LongDeviceDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongDeviceDescription>::s_group = 0x0050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LongDeviceDescription>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::LongDeviceDescription>::s_name = "Long Device Description";
template<>
DATA_API const VR Attribute<Keyword::LongDeviceDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::LongDeviceDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContrastBolusIngredientPercentByVolume>::s_keyword =
    Keyword::ContrastBolusIngredientPercentByVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientPercentByVolume>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContrastBolusIngredientPercentByVolume>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::ContrastBolusIngredientPercentByVolume>::s_name =
    "Contrast/Bolus Ingredient Percent by Volume";
template<>
DATA_API const VR Attribute<Keyword::ContrastBolusIngredientPercentByVolume>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::ContrastBolusIngredientPercentByVolume>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OCTFocalDistance>::s_keyword = Keyword::OCTFocalDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTFocalDistance>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTFocalDistance>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::OCTFocalDistance>::s_name = "OCT Focal Distance";
template<>
DATA_API const VR Attribute<Keyword::OCTFocalDistance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OCTFocalDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeamSpotSize>::s_keyword = Keyword::BeamSpotSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamSpotSize>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamSpotSize>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::BeamSpotSize>::s_name = "Beam Spot Size";
template<>
DATA_API const VR Attribute<Keyword::BeamSpotSize>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BeamSpotSize>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EffectiveRefractiveIndex>::s_keyword = Keyword::EffectiveRefractiveIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveRefractiveIndex>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveRefractiveIndex>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::EffectiveRefractiveIndex>::s_name = "Effective Refractive Index";
template<>
DATA_API const VR Attribute<Keyword::EffectiveRefractiveIndex>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::EffectiveRefractiveIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OCTAcquisitionDomain>::s_keyword = Keyword::OCTAcquisitionDomain;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTAcquisitionDomain>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTAcquisitionDomain>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::OCTAcquisitionDomain>::s_name = "OCT Acquisition Domain";
template<>
DATA_API const VR Attribute<Keyword::OCTAcquisitionDomain>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OCTAcquisitionDomain>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OCTOpticalCenterWavelength>::s_keyword = Keyword::OCTOpticalCenterWavelength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTOpticalCenterWavelength>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTOpticalCenterWavelength>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::OCTOpticalCenterWavelength>::s_name =
    "OCT Optical Center Wavelength";
template<>
DATA_API const VR Attribute<Keyword::OCTOpticalCenterWavelength>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OCTOpticalCenterWavelength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AxialResolution>::s_keyword = Keyword::AxialResolution;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialResolution>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialResolution>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::AxialResolution>::s_name = "Axial Resolution";
template<>
DATA_API const VR Attribute<Keyword::AxialResolution>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::AxialResolution>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RangingDepth>::s_keyword = Keyword::RangingDepth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RangingDepth>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RangingDepth>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::RangingDepth>::s_name = "Ranging Depth";
template<>
DATA_API const VR Attribute<Keyword::RangingDepth>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RangingDepth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ALineRate>::s_keyword = Keyword::ALineRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ALineRate>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ALineRate>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::ALineRate>::s_name = "A-line Rate";
template<>
DATA_API const VR Attribute<Keyword::ALineRate>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ALineRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ALinesPerFrame>::s_keyword = Keyword::ALinesPerFrame;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ALinesPerFrame>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ALinesPerFrame>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::ALinesPerFrame>::s_name = "A-lines Per Frame";
template<>
DATA_API const VR Attribute<Keyword::ALinesPerFrame>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ALinesPerFrame>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CatheterRotationalRate>::s_keyword = Keyword::CatheterRotationalRate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CatheterRotationalRate>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CatheterRotationalRate>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::CatheterRotationalRate>::s_name = "Catheter Rotational Rate";
template<>
DATA_API const VR Attribute<Keyword::CatheterRotationalRate>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::CatheterRotationalRate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ALinePixelSpacing>::s_keyword = Keyword::ALinePixelSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ALinePixelSpacing>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ALinePixelSpacing>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::ALinePixelSpacing>::s_name = "A-line Pixel Spacing";
template<>
DATA_API const VR Attribute<Keyword::ALinePixelSpacing>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ALinePixelSpacing>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModeOfPercutaneousAccessSequence>::s_keyword =
    Keyword::ModeOfPercutaneousAccessSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModeOfPercutaneousAccessSequence>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModeOfPercutaneousAccessSequence>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::ModeOfPercutaneousAccessSequence>::s_name =
    "Mode of Percutaneous Access Sequence";
template<>
DATA_API const VR Attribute<Keyword::ModeOfPercutaneousAccessSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ModeOfPercutaneousAccessSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntravascularOCTFrameTypeSequence>::s_keyword =
    Keyword::IntravascularOCTFrameTypeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularOCTFrameTypeSequence>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularOCTFrameTypeSequence>::s_element = 0x0025;
template<>
DATA_API const std::string_view Attribute<Keyword::IntravascularOCTFrameTypeSequence>::s_name =
    "Intravascular OCT Frame Type Sequence";
template<>
DATA_API const VR Attribute<Keyword::IntravascularOCTFrameTypeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IntravascularOCTFrameTypeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OCTZOffsetApplied>::s_keyword = Keyword::OCTZOffsetApplied;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTZOffsetApplied>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTZOffsetApplied>::s_element = 0x0026;
template<>
DATA_API const std::string_view Attribute<Keyword::OCTZOffsetApplied>::s_name = "OCT Z Offset Applied";
template<>
DATA_API const VR Attribute<Keyword::OCTZOffsetApplied>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OCTZOffsetApplied>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntravascularFrameContentSequence>::s_keyword =
    Keyword::IntravascularFrameContentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularFrameContentSequence>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularFrameContentSequence>::s_element = 0x0027;
template<>
DATA_API const std::string_view Attribute<Keyword::IntravascularFrameContentSequence>::s_name =
    "Intravascular Frame Content Sequence";
template<>
DATA_API const VR Attribute<Keyword::IntravascularFrameContentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IntravascularFrameContentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntravascularLongitudinalDistance>::s_keyword =
    Keyword::IntravascularLongitudinalDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularLongitudinalDistance>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularLongitudinalDistance>::s_element = 0x0028;
template<>
DATA_API const std::string_view Attribute<Keyword::IntravascularLongitudinalDistance>::s_name =
    "Intravascular Longitudinal Distance";
template<>
DATA_API const VR Attribute<Keyword::IntravascularLongitudinalDistance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::IntravascularLongitudinalDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IntravascularOCTFrameContentSequence>::s_keyword =
    Keyword::IntravascularOCTFrameContentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularOCTFrameContentSequence>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IntravascularOCTFrameContentSequence>::s_element = 0x0029;
template<>
DATA_API const std::string_view Attribute<Keyword::IntravascularOCTFrameContentSequence>::s_name =
    "Intravascular OCT Frame Content Sequence";
template<>
DATA_API const VR Attribute<Keyword::IntravascularOCTFrameContentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IntravascularOCTFrameContentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OCTZOffsetCorrection>::s_keyword = Keyword::OCTZOffsetCorrection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTZOffsetCorrection>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OCTZOffsetCorrection>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::OCTZOffsetCorrection>::s_name = "OCT Z Offset Correction";
template<>
DATA_API const VR Attribute<Keyword::OCTZOffsetCorrection>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::OCTZOffsetCorrection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CatheterDirectionOfRotation>::s_keyword =
    Keyword::CatheterDirectionOfRotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CatheterDirectionOfRotation>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CatheterDirectionOfRotation>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::CatheterDirectionOfRotation>::s_name =
    "Catheter Direction of Rotation";
template<>
DATA_API const VR Attribute<Keyword::CatheterDirectionOfRotation>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CatheterDirectionOfRotation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeamLineLocation>::s_keyword = Keyword::SeamLineLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeamLineLocation>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeamLineLocation>::s_element = 0x0033;
template<>
DATA_API const std::string_view Attribute<Keyword::SeamLineLocation>::s_name = "Seam Line Location";
template<>
DATA_API const VR Attribute<Keyword::SeamLineLocation>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SeamLineLocation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FirstALineLocation>::s_keyword = Keyword::FirstALineLocation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FirstALineLocation>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FirstALineLocation>::s_element = 0x0034;
template<>
DATA_API const std::string_view Attribute<Keyword::FirstALineLocation>::s_name = "First A-line Location";
template<>
DATA_API const VR Attribute<Keyword::FirstALineLocation>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::FirstALineLocation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeamLineIndex>::s_keyword = Keyword::SeamLineIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeamLineIndex>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeamLineIndex>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::SeamLineIndex>::s_name = "Seam Line Index";
template<>
DATA_API const VR Attribute<Keyword::SeamLineIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SeamLineIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfPaddedALines>::s_keyword = Keyword::NumberOfPaddedALines;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPaddedALines>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPaddedALines>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfPaddedALines>::s_name = "Number of Padded A-lines";
template<>
DATA_API const VR Attribute<Keyword::NumberOfPaddedALines>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfPaddedALines>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InterpolationType>::s_keyword = Keyword::InterpolationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterpolationType>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InterpolationType>::s_element = 0x0039;
template<>
DATA_API const std::string_view Attribute<Keyword::InterpolationType>::s_name = "Interpolation Type";
template<>
DATA_API const VR Attribute<Keyword::InterpolationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InterpolationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RefractiveIndexApplied>::s_keyword = Keyword::RefractiveIndexApplied;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RefractiveIndexApplied>::s_group = 0x0052;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RefractiveIndexApplied>::s_element = 0x003A;
template<>
DATA_API const std::string_view Attribute<Keyword::RefractiveIndexApplied>::s_name = "Refractive Index Applied";
template<>
DATA_API const VR Attribute<Keyword::RefractiveIndexApplied>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RefractiveIndexApplied>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWindowVector>::s_keyword = Keyword::EnergyWindowVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowVector>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWindowVector>::s_name = "Energy Window Vector";
template<>
DATA_API const VR Attribute<Keyword::EnergyWindowVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::EnergyWindowVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfEnergyWindows>::s_keyword = Keyword::NumberOfEnergyWindows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfEnergyWindows>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfEnergyWindows>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfEnergyWindows>::s_name = "Number of Energy Windows";
template<>
DATA_API const VR Attribute<Keyword::NumberOfEnergyWindows>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfEnergyWindows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWindowInformationSequence>::s_keyword =
    Keyword::EnergyWindowInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowInformationSequence>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWindowInformationSequence>::s_name =
    "Energy Window Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::EnergyWindowInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EnergyWindowInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWindowRangeSequence>::s_keyword = Keyword::EnergyWindowRangeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowRangeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowRangeSequence>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWindowRangeSequence>::s_name = "Energy Window Range Sequence";
template<>
DATA_API const VR Attribute<Keyword::EnergyWindowRangeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EnergyWindowRangeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWindowLowerLimit>::s_keyword = Keyword::EnergyWindowLowerLimit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowLowerLimit>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowLowerLimit>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWindowLowerLimit>::s_name = "Energy Window Lower Limit";
template<>
DATA_API const VR Attribute<Keyword::EnergyWindowLowerLimit>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EnergyWindowLowerLimit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWindowUpperLimit>::s_keyword = Keyword::EnergyWindowUpperLimit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowUpperLimit>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowUpperLimit>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWindowUpperLimit>::s_name = "Energy Window Upper Limit";
template<>
DATA_API const VR Attribute<Keyword::EnergyWindowUpperLimit>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EnergyWindowUpperLimit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalInformationSequence>::s_keyword =
    Keyword::RadiopharmaceuticalInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalInformationSequence>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalInformationSequence>::s_name =
    "Radiopharmaceutical Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnergyWindowName>::s_keyword = Keyword::EnergyWindowName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowName>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnergyWindowName>::s_element = 0x0018;
template<>
DATA_API const std::string_view Attribute<Keyword::EnergyWindowName>::s_name = "Energy Window Name";
template<>
DATA_API const VR Attribute<Keyword::EnergyWindowName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::EnergyWindowName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorVector>::s_keyword = Keyword::DetectorVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorVector>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorVector>::s_name = "Detector Vector";
template<>
DATA_API const VR Attribute<Keyword::DetectorVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::DetectorVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfDetectors>::s_keyword = Keyword::NumberOfDetectors;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfDetectors>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfDetectors>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfDetectors>::s_name = "Number of Detectors";
template<>
DATA_API const VR Attribute<Keyword::NumberOfDetectors>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfDetectors>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorInformationSequence>::s_keyword =
    Keyword::DetectorInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorInformationSequence>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorInformationSequence>::s_name =
    "Detector Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::DetectorInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DetectorInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhaseVector>::s_keyword = Keyword::PhaseVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseVector>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::PhaseVector>::s_name = "Phase Vector";
template<>
DATA_API const VR Attribute<Keyword::PhaseVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PhaseVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfPhases>::s_keyword = Keyword::NumberOfPhases;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPhases>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPhases>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfPhases>::s_name = "Number of Phases";
template<>
DATA_API const VR Attribute<Keyword::NumberOfPhases>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfPhases>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhaseInformationSequence>::s_keyword = Keyword::PhaseInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseInformationSequence>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::PhaseInformationSequence>::s_name = "Phase Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::PhaseInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PhaseInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfFramesInPhase>::s_keyword = Keyword::NumberOfFramesInPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFramesInPhase>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFramesInPhase>::s_element = 0x0033;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfFramesInPhase>::s_name = "Number of Frames in Phase";
template<>
DATA_API const VR Attribute<Keyword::NumberOfFramesInPhase>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfFramesInPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhaseDelay>::s_keyword = Keyword::PhaseDelay;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseDelay>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseDelay>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::PhaseDelay>::s_name = "Phase Delay";
template<>
DATA_API const VR Attribute<Keyword::PhaseDelay>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::PhaseDelay>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PauseBetweenFrames>::s_keyword = Keyword::PauseBetweenFrames;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PauseBetweenFrames>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PauseBetweenFrames>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::PauseBetweenFrames>::s_name = "Pause Between Frames";
template<>
DATA_API const VR Attribute<Keyword::PauseBetweenFrames>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::PauseBetweenFrames>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PhaseDescription>::s_keyword = Keyword::PhaseDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseDescription>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PhaseDescription>::s_element = 0x0039;
template<>
DATA_API const std::string_view Attribute<Keyword::PhaseDescription>::s_name = "Phase Description";
template<>
DATA_API const VR Attribute<Keyword::PhaseDescription>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PhaseDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RotationVector>::s_keyword = Keyword::RotationVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationVector>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::RotationVector>::s_name = "Rotation Vector";
template<>
DATA_API const VR Attribute<Keyword::RotationVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RotationVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfRotations>::s_keyword = Keyword::NumberOfRotations;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfRotations>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfRotations>::s_element = 0x0051;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfRotations>::s_name = "Number of Rotations";
template<>
DATA_API const VR Attribute<Keyword::NumberOfRotations>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfRotations>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RotationInformationSequence>::s_keyword =
    Keyword::RotationInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RotationInformationSequence>::s_element = 0x0052;
template<>
DATA_API const std::string_view Attribute<Keyword::RotationInformationSequence>::s_name =
    "Rotation Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::RotationInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RotationInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfFramesInRotation>::s_keyword = Keyword::NumberOfFramesInRotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFramesInRotation>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFramesInRotation>::s_element = 0x0053;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfFramesInRotation>::s_name = "Number of Frames in Rotation";
template<>
DATA_API const VR Attribute<Keyword::NumberOfFramesInRotation>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfFramesInRotation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RRIntervalVector>::s_keyword = Keyword::RRIntervalVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RRIntervalVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RRIntervalVector>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::RRIntervalVector>::s_name = "R-R Interval Vector";
template<>
DATA_API const VR Attribute<Keyword::RRIntervalVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RRIntervalVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfRRIntervals>::s_keyword = Keyword::NumberOfRRIntervals;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfRRIntervals>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfRRIntervals>::s_element = 0x0061;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfRRIntervals>::s_name = "Number of R-R Intervals";
template<>
DATA_API const VR Attribute<Keyword::NumberOfRRIntervals>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfRRIntervals>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GatedInformationSequence>::s_keyword = Keyword::GatedInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GatedInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GatedInformationSequence>::s_element = 0x0062;
template<>
DATA_API const std::string_view Attribute<Keyword::GatedInformationSequence>::s_name = "Gated Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::GatedInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::GatedInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataInformationSequence>::s_keyword = Keyword::DataInformationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataInformationSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataInformationSequence>::s_element = 0x0063;
template<>
DATA_API const std::string_view Attribute<Keyword::DataInformationSequence>::s_name = "Data Information Sequence";
template<>
DATA_API const VR Attribute<Keyword::DataInformationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DataInformationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TimeSlotVector>::s_keyword = Keyword::TimeSlotVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeSlotVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeSlotVector>::s_element = 0x0070;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeSlotVector>::s_name = "Time Slot Vector";
template<>
DATA_API const VR Attribute<Keyword::TimeSlotVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::TimeSlotVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTimeSlots>::s_keyword = Keyword::NumberOfTimeSlots;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTimeSlots>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTimeSlots>::s_element = 0x0071;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTimeSlots>::s_name = "Number of Time Slots";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTimeSlots>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTimeSlots>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SliceVector>::s_keyword = Keyword::SliceVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceVector>::s_element = 0x0080;
template<>
DATA_API const std::string_view Attribute<Keyword::SliceVector>::s_name = "Slice Vector";
template<>
DATA_API const VR Attribute<Keyword::SliceVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SliceVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfSlices>::s_keyword = Keyword::NumberOfSlices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSlices>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSlices>::s_element = 0x0081;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfSlices>::s_name = "Number of Slices";
template<>
DATA_API const VR Attribute<Keyword::NumberOfSlices>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfSlices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AngularViewVector>::s_keyword = Keyword::AngularViewVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AngularViewVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AngularViewVector>::s_element = 0x0090;
template<>
DATA_API const std::string_view Attribute<Keyword::AngularViewVector>::s_name = "Angular view Vector";
template<>
DATA_API const VR Attribute<Keyword::AngularViewVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::AngularViewVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TimeSliceVector>::s_keyword = Keyword::TimeSliceVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeSliceVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TimeSliceVector>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::TimeSliceVector>::s_name = "Time Slice Vector";
template<>
DATA_API const VR Attribute<Keyword::TimeSliceVector>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::TimeSliceVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTimeSlices>::s_keyword = Keyword::NumberOfTimeSlices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTimeSlices>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTimeSlices>::s_element = 0x0101;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTimeSlices>::s_name = "Number of Time Slices";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTimeSlices>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTimeSlices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartAngle>::s_keyword = Keyword::StartAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartAngle>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartAngle>::s_element = 0x0200;
template<>
DATA_API const std::string_view Attribute<Keyword::StartAngle>::s_name = "Start Angle";
template<>
DATA_API const VR Attribute<Keyword::StartAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::StartAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TypeOfDetectorMotion>::s_keyword = Keyword::TypeOfDetectorMotion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfDetectorMotion>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfDetectorMotion>::s_element = 0x0202;
template<>
DATA_API const std::string_view Attribute<Keyword::TypeOfDetectorMotion>::s_name = "Type of Detector Motion";
template<>
DATA_API const VR Attribute<Keyword::TypeOfDetectorMotion>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TypeOfDetectorMotion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TriggerVector>::s_keyword = Keyword::TriggerVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerVector>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TriggerVector>::s_element = 0x0210;
template<>
DATA_API const std::string_view Attribute<Keyword::TriggerVector>::s_name = "Trigger Vector";
template<>
DATA_API const VR Attribute<Keyword::TriggerVector>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::TriggerVector>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfTriggersInPhase>::s_keyword = Keyword::NumberOfTriggersInPhase;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTriggersInPhase>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfTriggersInPhase>::s_element = 0x0211;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfTriggersInPhase>::s_name = "Number of Triggers in Phase";
template<>
DATA_API const VR Attribute<Keyword::NumberOfTriggersInPhase>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfTriggersInPhase>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewCodeSequence>::s_keyword = Keyword::ViewCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewCodeSequence>::s_element = 0x0220;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewCodeSequence>::s_name = "view Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ViewCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ViewCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewModifierCodeSequence>::s_keyword = Keyword::ViewModifierCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewModifierCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewModifierCodeSequence>::s_element = 0x0222;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewModifierCodeSequence>::s_name = "view Modifier Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ViewModifierCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ViewModifierCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadionuclideCodeSequence>::s_keyword = Keyword::RadionuclideCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclideCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadionuclideCodeSequence>::s_element = 0x0300;
template<>
DATA_API const std::string_view Attribute<Keyword::RadionuclideCodeSequence>::s_name = "Radionuclide Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RadionuclideCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RadionuclideCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AdministrationRouteCodeSequence>::s_keyword =
    Keyword::AdministrationRouteCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdministrationRouteCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AdministrationRouteCodeSequence>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::AdministrationRouteCodeSequence>::s_name =
    "Administration Route Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AdministrationRouteCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AdministrationRouteCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiopharmaceuticalCodeSequence>::s_keyword =
    Keyword::RadiopharmaceuticalCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiopharmaceuticalCodeSequence>::s_element = 0x0304;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiopharmaceuticalCodeSequence>::s_name =
    "Radiopharmaceutical Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RadiopharmaceuticalCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RadiopharmaceuticalCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CalibrationDataSequence>::s_keyword = Keyword::CalibrationDataSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalibrationDataSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CalibrationDataSequence>::s_element = 0x0306;
template<>
DATA_API const std::string_view Attribute<Keyword::CalibrationDataSequence>::s_name = "Calibration Data Sequence";
template<>
DATA_API const VR Attribute<Keyword::CalibrationDataSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CalibrationDataSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageID>::s_keyword = Keyword::ImageID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageID>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageID>::s_element = 0x0400;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageID>::s_name = "Image ID";
template<>
DATA_API const VR Attribute<Keyword::ImageID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::ImageID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientOrientationCodeSequence>::s_keyword =
    Keyword::PatientOrientationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientationCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientationCodeSequence>::s_element = 0x0410;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientOrientationCodeSequence>::s_name =
    "Patient Orientation Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientOrientationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientOrientationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientOrientationModifierCodeSequence>::s_keyword =
    Keyword::PatientOrientationModifierCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientationModifierCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientOrientationModifierCodeSequence>::s_element = 0x0412;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientOrientationModifierCodeSequence>::s_name =
    "Patient Orientation Modifier Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientOrientationModifierCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientOrientationModifierCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientGantryRelationshipCodeSequence>::s_keyword =
    Keyword::PatientGantryRelationshipCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientGantryRelationshipCodeSequence>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientGantryRelationshipCodeSequence>::s_element = 0x0414;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientGantryRelationshipCodeSequence>::s_name =
    "Patient Gantry Relationship Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientGantryRelationshipCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientGantryRelationshipCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SliceProgressionDirection>::s_keyword = Keyword::SliceProgressionDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceProgressionDirection>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceProgressionDirection>::s_element = 0x0500;
template<>
DATA_API const std::string_view Attribute<Keyword::SliceProgressionDirection>::s_name = "Slice Progression Direction";
template<>
DATA_API const VR Attribute<Keyword::SliceProgressionDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SliceProgressionDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScanProgressionDirection>::s_keyword = Keyword::ScanProgressionDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanProgressionDirection>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScanProgressionDirection>::s_element = 0x0501;
template<>
DATA_API const std::string_view Attribute<Keyword::ScanProgressionDirection>::s_name = "Scan Progression Direction";
template<>
DATA_API const VR Attribute<Keyword::ScanProgressionDirection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ScanProgressionDirection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SeriesType>::s_keyword = Keyword::SeriesType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesType>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SeriesType>::s_element = 0x1000;
template<>
DATA_API const std::string_view Attribute<Keyword::SeriesType>::s_name = "Series Type";
template<>
DATA_API const VR Attribute<Keyword::SeriesType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SeriesType>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::Units>::s_keyword = Keyword::Units;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Units>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Units>::s_element = 0x1001;
template<>
DATA_API const std::string_view Attribute<Keyword::Units>::s_name = "Units";
template<>
DATA_API const VR Attribute<Keyword::Units>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Units>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CountsSource>::s_keyword = Keyword::CountsSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountsSource>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CountsSource>::s_element = 0x1002;
template<>
DATA_API const std::string_view Attribute<Keyword::CountsSource>::s_name = "Counts Source";
template<>
DATA_API const VR Attribute<Keyword::CountsSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CountsSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReprojectionMethod>::s_keyword = Keyword::ReprojectionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReprojectionMethod>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReprojectionMethod>::s_element = 0x1004;
template<>
DATA_API const std::string_view Attribute<Keyword::ReprojectionMethod>::s_name = "Reprojection Method";
template<>
DATA_API const VR Attribute<Keyword::ReprojectionMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ReprojectionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SUVType>::s_keyword = Keyword::SUVType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SUVType>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SUVType>::s_element = 0x1006;
template<>
DATA_API const std::string_view Attribute<Keyword::SUVType>::s_name = "SUV Type";
template<>
DATA_API const VR Attribute<Keyword::SUVType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SUVType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RandomsCorrectionMethod>::s_keyword = Keyword::RandomsCorrectionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RandomsCorrectionMethod>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RandomsCorrectionMethod>::s_element = 0x1100;
template<>
DATA_API const std::string_view Attribute<Keyword::RandomsCorrectionMethod>::s_name = "Randoms Correction Method";
template<>
DATA_API const VR Attribute<Keyword::RandomsCorrectionMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RandomsCorrectionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AttenuationCorrectionMethod>::s_keyword =
    Keyword::AttenuationCorrectionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrectionMethod>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttenuationCorrectionMethod>::s_element = 0x1101;
template<>
DATA_API const std::string_view Attribute<Keyword::AttenuationCorrectionMethod>::s_name =
    "Attenuation Correction Method";
template<>
DATA_API const VR Attribute<Keyword::AttenuationCorrectionMethod>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AttenuationCorrectionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecayCorrection>::s_keyword = Keyword::DecayCorrection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayCorrection>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayCorrection>::s_element = 0x1102;
template<>
DATA_API const std::string_view Attribute<Keyword::DecayCorrection>::s_name = "Decay Correction";
template<>
DATA_API const VR Attribute<Keyword::DecayCorrection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DecayCorrection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReconstructionMethod>::s_keyword = Keyword::ReconstructionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionMethod>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReconstructionMethod>::s_element = 0x1103;
template<>
DATA_API const std::string_view Attribute<Keyword::ReconstructionMethod>::s_name = "Reconstruction Method";
template<>
DATA_API const VR Attribute<Keyword::ReconstructionMethod>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ReconstructionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorLinesOfResponseUsed>::s_keyword =
    Keyword::DetectorLinesOfResponseUsed;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorLinesOfResponseUsed>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorLinesOfResponseUsed>::s_element = 0x1104;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorLinesOfResponseUsed>::s_name =
    "Detector Lines of Response Used";
template<>
DATA_API const VR Attribute<Keyword::DetectorLinesOfResponseUsed>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DetectorLinesOfResponseUsed>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScatterCorrectionMethod>::s_keyword = Keyword::ScatterCorrectionMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScatterCorrectionMethod>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScatterCorrectionMethod>::s_element = 0x1105;
template<>
DATA_API const std::string_view Attribute<Keyword::ScatterCorrectionMethod>::s_name = "Scatter Correction Method";
template<>
DATA_API const VR Attribute<Keyword::ScatterCorrectionMethod>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ScatterCorrectionMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AxialAcceptance>::s_keyword = Keyword::AxialAcceptance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialAcceptance>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialAcceptance>::s_element = 0x1200;
template<>
DATA_API const std::string_view Attribute<Keyword::AxialAcceptance>::s_name = "Axial Acceptance";
template<>
DATA_API const VR Attribute<Keyword::AxialAcceptance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::AxialAcceptance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AxialMash>::s_keyword = Keyword::AxialMash;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialMash>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxialMash>::s_element = 0x1201;
template<>
DATA_API const std::string_view Attribute<Keyword::AxialMash>::s_name = "Axial Mash";
template<>
DATA_API const VR Attribute<Keyword::AxialMash>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::AxialMash>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::TransverseMash>::s_keyword = Keyword::TransverseMash;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransverseMash>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TransverseMash>::s_element = 0x1202;
template<>
DATA_API const std::string_view Attribute<Keyword::TransverseMash>::s_name = "Transverse Mash";
template<>
DATA_API const VR Attribute<Keyword::TransverseMash>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::TransverseMash>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DetectorElementSize>::s_keyword = Keyword::DetectorElementSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorElementSize>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DetectorElementSize>::s_element = 0x1203;
template<>
DATA_API const std::string_view Attribute<Keyword::DetectorElementSize>::s_name = "Detector Element Size";
template<>
DATA_API const VR Attribute<Keyword::DetectorElementSize>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DetectorElementSize>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::CoincidenceWindowWidth>::s_keyword = Keyword::CoincidenceWindowWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CoincidenceWindowWidth>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CoincidenceWindowWidth>::s_element = 0x1210;
template<>
DATA_API const std::string_view Attribute<Keyword::CoincidenceWindowWidth>::s_name = "Coincidence Window Width";
template<>
DATA_API const VR Attribute<Keyword::CoincidenceWindowWidth>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::CoincidenceWindowWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryCountsType>::s_keyword = Keyword::SecondaryCountsType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCountsType>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCountsType>::s_element = 0x1220;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryCountsType>::s_name = "Secondary Counts Type";
template<>
DATA_API const VR Attribute<Keyword::SecondaryCountsType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SecondaryCountsType>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::FrameReferenceTime>::s_keyword = Keyword::FrameReferenceTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameReferenceTime>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameReferenceTime>::s_element = 0x1300;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameReferenceTime>::s_name = "Frame Reference Time";
template<>
DATA_API const VR Attribute<Keyword::FrameReferenceTime>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FrameReferenceTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryPromptsCountsAccumulated>::s_keyword =
    Keyword::PrimaryPromptsCountsAccumulated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPromptsCountsAccumulated>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryPromptsCountsAccumulated>::s_element = 0x1310;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryPromptsCountsAccumulated>::s_name =
    "Primary (Prompts) Counts Accumulated";
template<>
DATA_API const VR Attribute<Keyword::PrimaryPromptsCountsAccumulated>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::PrimaryPromptsCountsAccumulated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SecondaryCountsAccumulated>::s_keyword = Keyword::SecondaryCountsAccumulated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCountsAccumulated>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SecondaryCountsAccumulated>::s_element = 0x1311;
template<>
DATA_API const std::string_view Attribute<Keyword::SecondaryCountsAccumulated>::s_name = "Secondary Counts Accumulated";
template<>
DATA_API const VR Attribute<Keyword::SecondaryCountsAccumulated>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SecondaryCountsAccumulated>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SliceSensitivityFactor>::s_keyword = Keyword::SliceSensitivityFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceSensitivityFactor>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SliceSensitivityFactor>::s_element = 0x1320;
template<>
DATA_API const std::string_view Attribute<Keyword::SliceSensitivityFactor>::s_name = "Slice Sensitivity Factor";
template<>
DATA_API const VR Attribute<Keyword::SliceSensitivityFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SliceSensitivityFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DecayFactor>::s_keyword = Keyword::DecayFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayFactor>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DecayFactor>::s_element = 0x1321;
template<>
DATA_API const std::string_view Attribute<Keyword::DecayFactor>::s_name = "Decay Factor";
template<>
DATA_API const VR Attribute<Keyword::DecayFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DecayFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoseCalibrationFactor>::s_keyword = Keyword::DoseCalibrationFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseCalibrationFactor>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseCalibrationFactor>::s_element = 0x1322;
template<>
DATA_API const std::string_view Attribute<Keyword::DoseCalibrationFactor>::s_name = "Dose Calibration Factor";
template<>
DATA_API const VR Attribute<Keyword::DoseCalibrationFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DoseCalibrationFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScatterFractionFactor>::s_keyword = Keyword::ScatterFractionFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScatterFractionFactor>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScatterFractionFactor>::s_element = 0x1323;
template<>
DATA_API const std::string_view Attribute<Keyword::ScatterFractionFactor>::s_name = "Scatter Fraction Factor";
template<>
DATA_API const VR Attribute<Keyword::ScatterFractionFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ScatterFractionFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeadTimeFactor>::s_keyword = Keyword::DeadTimeFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeadTimeFactor>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeadTimeFactor>::s_element = 0x1324;
template<>
DATA_API const std::string_view Attribute<Keyword::DeadTimeFactor>::s_name = "Dead Time Factor";
template<>
DATA_API const VR Attribute<Keyword::DeadTimeFactor>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DeadTimeFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageIndex>::s_keyword = Keyword::ImageIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageIndex>::s_group = 0x0054;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageIndex>::s_element = 0x1330;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageIndex>::s_name = "Image Index";
template<>
DATA_API const VR Attribute<Keyword::ImageIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImageIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramSequence>::s_keyword = Keyword::HistogramSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramSequence>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramSequence>::s_element = 0x3000;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramSequence>::s_name = "histogram Sequence";
template<>
DATA_API const VR Attribute<Keyword::HistogramSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::HistogramSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramNumberOfBins>::s_keyword = Keyword::HistogramNumberOfBins;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramNumberOfBins>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramNumberOfBins>::s_element = 0x3002;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramNumberOfBins>::s_name = "histogram Number of Bins";
template<>
DATA_API const VR Attribute<Keyword::HistogramNumberOfBins>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::HistogramNumberOfBins>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramFirstBinValue>::s_keyword = Keyword::HistogramFirstBinValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramFirstBinValue>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramFirstBinValue>::s_element = 0x3004;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramFirstBinValue>::s_name = "histogram First Bin Value";
template<>
DATA_API const VR Attribute<Keyword::HistogramFirstBinValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::HistogramFirstBinValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramLastBinValue>::s_keyword = Keyword::HistogramLastBinValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramLastBinValue>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramLastBinValue>::s_element = 0x3006;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramLastBinValue>::s_name = "histogram Last Bin Value";
template<>
DATA_API const VR Attribute<Keyword::HistogramLastBinValue>::s_vr = VR::SS_US;
template<>
DATA_API const VM Attribute<Keyword::HistogramLastBinValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramBinWidth>::s_keyword = Keyword::HistogramBinWidth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramBinWidth>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramBinWidth>::s_element = 0x3008;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramBinWidth>::s_name = "histogram Bin Width";
template<>
DATA_API const VR Attribute<Keyword::HistogramBinWidth>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::HistogramBinWidth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramExplanation>::s_keyword = Keyword::HistogramExplanation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramExplanation>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramExplanation>::s_element = 0x3010;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramExplanation>::s_name = "histogram Explanation";
template<>
DATA_API const VR Attribute<Keyword::HistogramExplanation>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::HistogramExplanation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HistogramData>::s_keyword = Keyword::HistogramData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramData>::s_group = 0x0060;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HistogramData>::s_element = 0x3020;
template<>
DATA_API const std::string_view Attribute<Keyword::HistogramData>::s_name = "histogram Data";
template<>
DATA_API const VR Attribute<Keyword::HistogramData>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::HistogramData>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentationType>::s_keyword = Keyword::SegmentationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentationType>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentationType>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentationType>::s_name = "Segmentation Type";
template<>
DATA_API const VR Attribute<Keyword::SegmentationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SegmentationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentSequence>::s_keyword = Keyword::SegmentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentSequence>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentSequence>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentSequence>::s_name = "Segment Sequence";
template<>
DATA_API const VR Attribute<Keyword::SegmentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SegmentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedPropertyCategoryCodeSequence>::s_keyword =
    Keyword::SegmentedPropertyCategoryCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedPropertyCategoryCodeSequence>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedPropertyCategoryCodeSequence>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedPropertyCategoryCodeSequence>::s_name =
    "Segmented Property Category Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SegmentedPropertyCategoryCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SegmentedPropertyCategoryCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentNumber>::s_keyword = Keyword::SegmentNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentNumber>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentNumber>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentNumber>::s_name = "Segment Number";
template<>
DATA_API const VR Attribute<Keyword::SegmentNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SegmentNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentLabel>::s_keyword = Keyword::SegmentLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentLabel>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentLabel>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentLabel>::s_name = "Segment Label";
template<>
DATA_API const VR Attribute<Keyword::SegmentLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SegmentLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentDescription>::s_keyword = Keyword::SegmentDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentDescription>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentDescription>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentDescription>::s_name = "Segment Description";
template<>
DATA_API const VR Attribute<Keyword::SegmentDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::SegmentDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentationAlgorithmIdentificationSequence>::s_keyword =
    Keyword::SegmentationAlgorithmIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentationAlgorithmIdentificationSequence>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentationAlgorithmIdentificationSequence>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentationAlgorithmIdentificationSequence>::s_name =
    "Segmentation Algorithm Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::SegmentationAlgorithmIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SegmentationAlgorithmIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentAlgorithmType>::s_keyword = Keyword::SegmentAlgorithmType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentAlgorithmType>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentAlgorithmType>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentAlgorithmType>::s_name = "Segment Algorithm Type";
template<>
DATA_API const VR Attribute<Keyword::SegmentAlgorithmType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SegmentAlgorithmType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentAlgorithmName>::s_keyword = Keyword::SegmentAlgorithmName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentAlgorithmName>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentAlgorithmName>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentAlgorithmName>::s_name = "Segment Algorithm Name";
template<>
DATA_API const VR Attribute<Keyword::SegmentAlgorithmName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SegmentAlgorithmName>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentIdentificationSequence>::s_keyword =
    Keyword::SegmentIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentIdentificationSequence>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentIdentificationSequence>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentIdentificationSequence>::s_name =
    "Segment Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::SegmentIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SegmentIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSegmentNumber>::s_keyword = Keyword::ReferencedSegmentNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSegmentNumber>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSegmentNumber>::s_element = 0x000B;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSegmentNumber>::s_name = "Referenced Segment Number";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSegmentNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSegmentNumber>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedDisplayGrayscaleValue>::s_keyword =
    Keyword::RecommendedDisplayGrayscaleValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayGrayscaleValue>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayGrayscaleValue>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedDisplayGrayscaleValue>::s_name =
    "Recommended Display Grayscale Value";
template<>
DATA_API const VR Attribute<Keyword::RecommendedDisplayGrayscaleValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RecommendedDisplayGrayscaleValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedDisplayCIELabValue>::s_keyword =
    Keyword::RecommendedDisplayCIELabValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayCIELabValue>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedDisplayCIELabValue>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedDisplayCIELabValue>::s_name =
    "Recommended Display CIELab Value";
template<>
DATA_API const VR Attribute<Keyword::RecommendedDisplayCIELabValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RecommendedDisplayCIELabValue>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumFractionalValue>::s_keyword = Keyword::MaximumFractionalValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumFractionalValue>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumFractionalValue>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumFractionalValue>::s_name = "Maximum Fractional Value";
template<>
DATA_API const VR Attribute<Keyword::MaximumFractionalValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MaximumFractionalValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedPropertyTypeCodeSequence>::s_keyword =
    Keyword::SegmentedPropertyTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedPropertyTypeCodeSequence>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedPropertyTypeCodeSequence>::s_element = 0x000F;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedPropertyTypeCodeSequence>::s_name =
    "Segmented Property Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SegmentedPropertyTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SegmentedPropertyTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentationFractionalType>::s_keyword = Keyword::SegmentationFractionalType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentationFractionalType>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentationFractionalType>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentationFractionalType>::s_name = "Segmentation Fractional Type";
template<>
DATA_API const VR Attribute<Keyword::SegmentationFractionalType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SegmentationFractionalType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentedPropertyTypeModifierCodeSequence>::s_keyword =
    Keyword::SegmentedPropertyTypeModifierCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedPropertyTypeModifierCodeSequence>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentedPropertyTypeModifierCodeSequence>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentedPropertyTypeModifierCodeSequence>::s_name =
    "Segmented Property Type Modifier Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SegmentedPropertyTypeModifierCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SegmentedPropertyTypeModifierCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SegmentsOverlap>::s_keyword = Keyword::SegmentsOverlap;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentsOverlap>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SegmentsOverlap>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::SegmentsOverlap>::s_name = "Segments Overlap";
template<>
DATA_API const VR Attribute<Keyword::SegmentsOverlap>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SegmentsOverlap>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TrackingID>::s_keyword = Keyword::TrackingID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TrackingID>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TrackingID>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::TrackingID>::s_name = "Tracking ID";
template<>
DATA_API const VR Attribute<Keyword::TrackingID>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::TrackingID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TrackingUID>::s_keyword = Keyword::TrackingUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TrackingUID>::s_group = 0x0062;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TrackingUID>::s_element = 0x0021;
template<>
DATA_API const std::string_view Attribute<Keyword::TrackingUID>::s_name = "Tracking UID";
template<>
DATA_API const VR Attribute<Keyword::TrackingUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::TrackingUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfSurfaces>::s_keyword = Keyword::NumberOfSurfaces;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSurfaces>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSurfaces>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfSurfaces>::s_name = "Number of Surfaces";
template<>
DATA_API const VR Attribute<Keyword::NumberOfSurfaces>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfSurfaces>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceSequence>::s_keyword = Keyword::SurfaceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceSequence>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceSequence>::s_name = "Surface Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfaceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfaceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceNumber>::s_keyword = Keyword::SurfaceNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceNumber>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceNumber>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceNumber>::s_name = "Surface Number";
template<>
DATA_API const VR Attribute<Keyword::SurfaceNumber>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::SurfaceNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceComments>::s_keyword = Keyword::SurfaceComments;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceComments>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceComments>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceComments>::s_name = "Surface Comments";
template<>
DATA_API const VR Attribute<Keyword::SurfaceComments>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::SurfaceComments>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceProcessing>::s_keyword = Keyword::SurfaceProcessing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessing>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessing>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceProcessing>::s_name = "Surface Processing";
template<>
DATA_API const VR Attribute<Keyword::SurfaceProcessing>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SurfaceProcessing>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceProcessingRatio>::s_keyword = Keyword::SurfaceProcessingRatio;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessingRatio>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessingRatio>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceProcessingRatio>::s_name = "Surface Processing Ratio";
template<>
DATA_API const VR Attribute<Keyword::SurfaceProcessingRatio>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::SurfaceProcessingRatio>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceProcessingDescription>::s_keyword =
    Keyword::SurfaceProcessingDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessingDescription>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessingDescription>::s_element = 0x000B;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceProcessingDescription>::s_name =
    "Surface Processing Description";
template<>
DATA_API const VR Attribute<Keyword::SurfaceProcessingDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SurfaceProcessingDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedPresentationOpacity>::s_keyword =
    Keyword::RecommendedPresentationOpacity;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedPresentationOpacity>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedPresentationOpacity>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedPresentationOpacity>::s_name =
    "Recommended Presentation Opacity";
template<>
DATA_API const VR Attribute<Keyword::RecommendedPresentationOpacity>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RecommendedPresentationOpacity>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedPresentationType>::s_keyword =
    Keyword::RecommendedPresentationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedPresentationType>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedPresentationType>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedPresentationType>::s_name =
    "Recommended Presentation Type";
template<>
DATA_API const VR Attribute<Keyword::RecommendedPresentationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RecommendedPresentationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FiniteVolume>::s_keyword = Keyword::FiniteVolume;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiniteVolume>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiniteVolume>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::FiniteVolume>::s_name = "Finite Volume";
template<>
DATA_API const VR Attribute<Keyword::FiniteVolume>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FiniteVolume>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Manifold>::s_keyword = Keyword::Manifold;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Manifold>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Manifold>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::Manifold>::s_name = "Manifold";
template<>
DATA_API const VR Attribute<Keyword::Manifold>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::Manifold>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfacePointsSequence>::s_keyword = Keyword::SurfacePointsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointsSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointsSequence>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfacePointsSequence>::s_name = "Surface Points Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfacePointsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfacePointsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfacePointsNormalsSequence>::s_keyword =
    Keyword::SurfacePointsNormalsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointsNormalsSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointsNormalsSequence>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfacePointsNormalsSequence>::s_name =
    "Surface Points Normals Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfacePointsNormalsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfacePointsNormalsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceMeshPrimitivesSequence>::s_keyword =
    Keyword::SurfaceMeshPrimitivesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceMeshPrimitivesSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceMeshPrimitivesSequence>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceMeshPrimitivesSequence>::s_name =
    "Surface Mesh Primitives Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfaceMeshPrimitivesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfaceMeshPrimitivesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfSurfacePoints>::s_keyword = Keyword::NumberOfSurfacePoints;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSurfacePoints>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfSurfacePoints>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfSurfacePoints>::s_name = "Number of Surface Points";
template<>
DATA_API const VR Attribute<Keyword::NumberOfSurfacePoints>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::NumberOfSurfacePoints>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PointCoordinatesData>::s_keyword = Keyword::PointCoordinatesData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PointCoordinatesData>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PointCoordinatesData>::s_element = 0x0016;
template<>
DATA_API const std::string_view Attribute<Keyword::PointCoordinatesData>::s_name = "Point Coordinates Data";
template<>
DATA_API const VR Attribute<Keyword::PointCoordinatesData>::s_vr = VR::OF;
template<>
DATA_API const VM Attribute<Keyword::PointCoordinatesData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PointPositionAccuracy>::s_keyword = Keyword::PointPositionAccuracy;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PointPositionAccuracy>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PointPositionAccuracy>::s_element = 0x0017;
template<>
DATA_API const std::string_view Attribute<Keyword::PointPositionAccuracy>::s_name = "Point Position Accuracy";
template<>
DATA_API const VR Attribute<Keyword::PointPositionAccuracy>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PointPositionAccuracy>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::MeanPointDistance>::s_keyword = Keyword::MeanPointDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeanPointDistance>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MeanPointDistance>::s_element = 0x0018;
template<>
DATA_API const std::string_view Attribute<Keyword::MeanPointDistance>::s_name = "Mean Point Distance";
template<>
DATA_API const VR Attribute<Keyword::MeanPointDistance>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MeanPointDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaximumPointDistance>::s_keyword = Keyword::MaximumPointDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumPointDistance>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaximumPointDistance>::s_element = 0x0019;
template<>
DATA_API const std::string_view Attribute<Keyword::MaximumPointDistance>::s_name = "Maximum Point Distance";
template<>
DATA_API const VR Attribute<Keyword::MaximumPointDistance>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::MaximumPointDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PointsBoundingBoxCoordinates>::s_keyword =
    Keyword::PointsBoundingBoxCoordinates;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PointsBoundingBoxCoordinates>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PointsBoundingBoxCoordinates>::s_element = 0x001A;
template<>
DATA_API const std::string_view Attribute<Keyword::PointsBoundingBoxCoordinates>::s_name =
    "Points Bounding Box Coordinates";
template<>
DATA_API const VR Attribute<Keyword::PointsBoundingBoxCoordinates>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::PointsBoundingBoxCoordinates>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::AxisOfRotation>::s_keyword = Keyword::AxisOfRotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxisOfRotation>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AxisOfRotation>::s_element = 0x001B;
template<>
DATA_API const std::string_view Attribute<Keyword::AxisOfRotation>::s_name = "Axis of Rotation";
template<>
DATA_API const VR Attribute<Keyword::AxisOfRotation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::AxisOfRotation>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::CenterOfRotation>::s_keyword = Keyword::CenterOfRotation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfRotation>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CenterOfRotation>::s_element = 0x001C;
template<>
DATA_API const std::string_view Attribute<Keyword::CenterOfRotation>::s_name = "Center of Rotation";
template<>
DATA_API const VR Attribute<Keyword::CenterOfRotation>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::CenterOfRotation>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceCount>::s_keyword = Keyword::SurfaceCount;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceCount>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceCount>::s_element = 0x002A;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceCount>::s_name = "Surface Count";
template<>
DATA_API const VR Attribute<Keyword::SurfaceCount>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::SurfaceCount>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSurfaceSequence>::s_keyword = Keyword::ReferencedSurfaceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceSequence>::s_element = 0x002B;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSurfaceSequence>::s_name = "Referenced Surface Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSurfaceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSurfaceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSurfaceNumber>::s_keyword = Keyword::ReferencedSurfaceNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceNumber>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceNumber>::s_element = 0x002C;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSurfaceNumber>::s_name = "Referenced Surface Number";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSurfaceNumber>::s_vr = VR::UL;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSurfaceNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmFamilyCodeSequence>::s_keyword =
    Keyword::AlgorithmFamilyCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmFamilyCodeSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmFamilyCodeSequence>::s_element = 0x002F;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmFamilyCodeSequence>::s_name =
    "Algorithm Family Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmFamilyCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmFamilyCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmNameCodeSequence>::s_keyword = Keyword::AlgorithmNameCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmNameCodeSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmNameCodeSequence>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmNameCodeSequence>::s_name = "Algorithm Name Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmNameCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmNameCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmVersion>::s_keyword = Keyword::AlgorithmVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmVersion>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmVersion>::s_element = 0x0031;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmVersion>::s_name = "Algorithm Version";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmVersion>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmParameters>::s_keyword = Keyword::AlgorithmParameters;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmParameters>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmParameters>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmParameters>::s_name = "Algorithm Parameters";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmParameters>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmParameters>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>::s_keyword =
    Keyword::SurfaceProcessingAlgorithmIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>::s_element = 0x0035;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>::s_name =
    "Surface Processing Algorithm Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlgorithmName>::s_keyword = Keyword::AlgorithmName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmName>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlgorithmName>::s_element = 0x0036;
template<>
DATA_API const std::string_view Attribute<Keyword::AlgorithmName>::s_name = "Algorithm Name";
template<>
DATA_API const VR Attribute<Keyword::AlgorithmName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AlgorithmName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedPointRadius>::s_keyword = Keyword::RecommendedPointRadius;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedPointRadius>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedPointRadius>::s_element = 0x0037;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedPointRadius>::s_name = "Recommended Point Radius";
template<>
DATA_API const VR Attribute<Keyword::RecommendedPointRadius>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RecommendedPointRadius>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedLineThickness>::s_keyword = Keyword::RecommendedLineThickness;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedLineThickness>::s_group = 0x0066;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedLineThickness>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedLineThickness>::s_name = "Recommended Line Thickness";
template<>
DATA_API const VR Attribute<Keyword::RecommendedLineThickness>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::RecommendedLineThickness>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantSize>::s_keyword = Keyword::ImplantSize;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantSize>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantSize>::s_element = 0x6210;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantSize>::s_name = "Implant Size";
template<>
DATA_API const VR Attribute<Keyword::ImplantSize>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ImplantSize>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantTemplateVersion>::s_keyword = Keyword::ImplantTemplateVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTemplateVersion>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTemplateVersion>::s_element = 0x6221;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantTemplateVersion>::s_name = "Implant Template Version";
template<>
DATA_API const VR Attribute<Keyword::ImplantTemplateVersion>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ImplantTemplateVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReplacedImplantTemplateSequence>::s_keyword =
    Keyword::ReplacedImplantTemplateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReplacedImplantTemplateSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReplacedImplantTemplateSequence>::s_element = 0x6222;
template<>
DATA_API const std::string_view Attribute<Keyword::ReplacedImplantTemplateSequence>::s_name =
    "Replaced Implant Template Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReplacedImplantTemplateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReplacedImplantTemplateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantType>::s_keyword = Keyword::ImplantType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantType>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantType>::s_element = 0x6223;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantType>::s_name = "Implant Type";
template<>
DATA_API const VR Attribute<Keyword::ImplantType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ImplantType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DerivationImplantTemplateSequence>::s_keyword =
    Keyword::DerivationImplantTemplateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationImplantTemplateSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DerivationImplantTemplateSequence>::s_element = 0x6224;
template<>
DATA_API const std::string_view Attribute<Keyword::DerivationImplantTemplateSequence>::s_name =
    "Derivation Implant Template Sequence";
template<>
DATA_API const VR Attribute<Keyword::DerivationImplantTemplateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DerivationImplantTemplateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OriginalImplantTemplateSequence>::s_keyword =
    Keyword::OriginalImplantTemplateSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OriginalImplantTemplateSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OriginalImplantTemplateSequence>::s_element = 0x6225;
template<>
DATA_API const std::string_view Attribute<Keyword::OriginalImplantTemplateSequence>::s_name =
    "Original Implant Template Sequence";
template<>
DATA_API const VR Attribute<Keyword::OriginalImplantTemplateSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OriginalImplantTemplateSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EffectiveDateTime>::s_keyword = Keyword::EffectiveDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveDateTime>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EffectiveDateTime>::s_element = 0x6226;
template<>
DATA_API const std::string_view Attribute<Keyword::EffectiveDateTime>::s_name = "Effective DateTime";
template<>
DATA_API const VR Attribute<Keyword::EffectiveDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::EffectiveDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantTargetAnatomySequence>::s_keyword =
    Keyword::ImplantTargetAnatomySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTargetAnatomySequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTargetAnatomySequence>::s_element = 0x6230;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantTargetAnatomySequence>::s_name =
    "Implant Target Anatomy Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImplantTargetAnatomySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImplantTargetAnatomySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InformationFromManufacturerSequence>::s_keyword =
    Keyword::InformationFromManufacturerSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InformationFromManufacturerSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InformationFromManufacturerSequence>::s_element = 0x6260;
template<>
DATA_API const std::string_view Attribute<Keyword::InformationFromManufacturerSequence>::s_name =
    "Information From Manufacturer Sequence";
template<>
DATA_API const VR Attribute<Keyword::InformationFromManufacturerSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InformationFromManufacturerSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NotificationFromManufacturerSequence>::s_keyword =
    Keyword::NotificationFromManufacturerSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NotificationFromManufacturerSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NotificationFromManufacturerSequence>::s_element = 0x6265;
template<>
DATA_API const std::string_view Attribute<Keyword::NotificationFromManufacturerSequence>::s_name =
    "Notification From Manufacturer Sequence";
template<>
DATA_API const VR Attribute<Keyword::NotificationFromManufacturerSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::NotificationFromManufacturerSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InformationIssueDateTime>::s_keyword = Keyword::InformationIssueDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InformationIssueDateTime>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InformationIssueDateTime>::s_element = 0x6270;
template<>
DATA_API const std::string_view Attribute<Keyword::InformationIssueDateTime>::s_name = "Information Issue DateTime";
template<>
DATA_API const VR Attribute<Keyword::InformationIssueDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::InformationIssueDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InformationSummary>::s_keyword = Keyword::InformationSummary;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InformationSummary>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InformationSummary>::s_element = 0x6280;
template<>
DATA_API const std::string_view Attribute<Keyword::InformationSummary>::s_name = "Information Summary";
template<>
DATA_API const VR Attribute<Keyword::InformationSummary>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::InformationSummary>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantRegulatoryDisapprovalCodeSequence>::s_keyword =
    Keyword::ImplantRegulatoryDisapprovalCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantRegulatoryDisapprovalCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantRegulatoryDisapprovalCodeSequence>::s_element = 0x62A0;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantRegulatoryDisapprovalCodeSequence>::s_name =
    "Implant Regulatory Disapproval Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImplantRegulatoryDisapprovalCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImplantRegulatoryDisapprovalCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverallTemplateSpatialTolerance>::s_keyword =
    Keyword::OverallTemplateSpatialTolerance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverallTemplateSpatialTolerance>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverallTemplateSpatialTolerance>::s_element = 0x62A5;
template<>
DATA_API const std::string_view Attribute<Keyword::OverallTemplateSpatialTolerance>::s_name =
    "Overall Template Spatial Tolerance";
template<>
DATA_API const VR Attribute<Keyword::OverallTemplateSpatialTolerance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::OverallTemplateSpatialTolerance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLDocumentSequence>::s_keyword = Keyword::HPGLDocumentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentSequence>::s_element = 0x62C0;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLDocumentSequence>::s_name = "HPGL Document Sequence";
template<>
DATA_API const VR Attribute<Keyword::HPGLDocumentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::HPGLDocumentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLDocumentID>::s_keyword = Keyword::HPGLDocumentID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentID>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentID>::s_element = 0x62D0;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLDocumentID>::s_name = "HPGL Document ID";
template<>
DATA_API const VR Attribute<Keyword::HPGLDocumentID>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::HPGLDocumentID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLDocumentLabel>::s_keyword = Keyword::HPGLDocumentLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentLabel>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentLabel>::s_element = 0x62D5;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLDocumentLabel>::s_name = "HPGL Document Label";
template<>
DATA_API const VR Attribute<Keyword::HPGLDocumentLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::HPGLDocumentLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewOrientationCodeSequence>::s_keyword =
    Keyword::ViewOrientationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewOrientationCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewOrientationCodeSequence>::s_element = 0x62E0;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewOrientationCodeSequence>::s_name =
    "view Orientation Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ViewOrientationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ViewOrientationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewOrientationModifierCodeSequence>::s_keyword =
    Keyword::ViewOrientationModifierCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewOrientationModifierCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewOrientationModifierCodeSequence>::s_element = 0x62F0;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewOrientationModifierCodeSequence>::s_name =
    "view Orientation Modifier Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ViewOrientationModifierCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ViewOrientationModifierCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLDocumentScaling>::s_keyword = Keyword::HPGLDocumentScaling;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentScaling>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocumentScaling>::s_element = 0x62F2;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLDocumentScaling>::s_name = "HPGL Document Scaling";
template<>
DATA_API const VR Attribute<Keyword::HPGLDocumentScaling>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::HPGLDocumentScaling>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLDocument>::s_keyword = Keyword::HPGLDocument;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocument>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLDocument>::s_element = 0x6300;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLDocument>::s_name = "HPGL Document";
template<>
DATA_API const VR Attribute<Keyword::HPGLDocument>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::HPGLDocument>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLContourPenNumber>::s_keyword = Keyword::HPGLContourPenNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLContourPenNumber>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLContourPenNumber>::s_element = 0x6310;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLContourPenNumber>::s_name = "HPGL Contour Pen Number";
template<>
DATA_API const VR Attribute<Keyword::HPGLContourPenNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::HPGLContourPenNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HPGLPenSequence>::s_keyword = Keyword::HPGLPenSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLPenSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HPGLPenSequence>::s_element = 0x6320;
template<>
DATA_API const std::string_view Attribute<Keyword::HPGLPenSequence>::s_name = "HPGL Pen Sequence";
template<>
DATA_API const VR Attribute<Keyword::HPGLPenSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::HPGLPenSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RecommendedRotationPoint>::s_keyword = Keyword::RecommendedRotationPoint;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedRotationPoint>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RecommendedRotationPoint>::s_element = 0x6346;
template<>
DATA_API const std::string_view Attribute<Keyword::RecommendedRotationPoint>::s_name = "Recommended Rotation Point";
template<>
DATA_API const VR Attribute<Keyword::RecommendedRotationPoint>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RecommendedRotationPoint>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::BoundingRectangle>::s_keyword = Keyword::BoundingRectangle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BoundingRectangle>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BoundingRectangle>::s_element = 0x6347;
template<>
DATA_API const std::string_view Attribute<Keyword::BoundingRectangle>::s_name = "Bounding Rectangle";
template<>
DATA_API const VR Attribute<Keyword::BoundingRectangle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BoundingRectangle>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantTemplate3DModelSurfaceNumber>::s_keyword =
    Keyword::ImplantTemplate3DModelSurfaceNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTemplate3DModelSurfaceNumber>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTemplate3DModelSurfaceNumber>::s_element = 0x6350;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantTemplate3DModelSurfaceNumber>::s_name =
    "Implant Template 3D Model Surface Number";
template<>
DATA_API const VR Attribute<Keyword::ImplantTemplate3DModelSurfaceNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImplantTemplate3DModelSurfaceNumber>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceModelDescriptionSequence>::s_keyword =
    Keyword::SurfaceModelDescriptionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceModelDescriptionSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceModelDescriptionSequence>::s_element = 0x6360;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceModelDescriptionSequence>::s_name =
    "Surface Model Description Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfaceModelDescriptionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfaceModelDescriptionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceModelLabel>::s_keyword = Keyword::SurfaceModelLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceModelLabel>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceModelLabel>::s_element = 0x6380;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceModelLabel>::s_name = "Surface Model Label";
template<>
DATA_API const VR Attribute<Keyword::SurfaceModelLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SurfaceModelLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceModelScalingFactor>::s_keyword = Keyword::SurfaceModelScalingFactor;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceModelScalingFactor>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceModelScalingFactor>::s_element = 0x6390;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceModelScalingFactor>::s_name = "Surface Model Scaling Factor";
template<>
DATA_API const VR Attribute<Keyword::SurfaceModelScalingFactor>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::SurfaceModelScalingFactor>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MaterialsCodeSequence>::s_keyword = Keyword::MaterialsCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaterialsCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MaterialsCodeSequence>::s_element = 0x63A0;
template<>
DATA_API const std::string_view Attribute<Keyword::MaterialsCodeSequence>::s_name = "Materials Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::MaterialsCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MaterialsCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CoatingMaterialsCodeSequence>::s_keyword =
    Keyword::CoatingMaterialsCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CoatingMaterialsCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CoatingMaterialsCodeSequence>::s_element = 0x63A4;
template<>
DATA_API const std::string_view Attribute<Keyword::CoatingMaterialsCodeSequence>::s_name =
    "Coating Materials Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::CoatingMaterialsCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::CoatingMaterialsCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImplantTypeCodeSequence>::s_keyword = Keyword::ImplantTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTypeCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImplantTypeCodeSequence>::s_element = 0x63A8;
template<>
DATA_API const std::string_view Attribute<Keyword::ImplantTypeCodeSequence>::s_name = "Implant Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImplantTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImplantTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FixationMethodCodeSequence>::s_keyword = Keyword::FixationMethodCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FixationMethodCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FixationMethodCodeSequence>::s_element = 0x63AC;
template<>
DATA_API const std::string_view Attribute<Keyword::FixationMethodCodeSequence>::s_name =
    "Fixation Method Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::FixationMethodCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FixationMethodCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MatingFeatureSetsSequence>::s_keyword = Keyword::MatingFeatureSetsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSetsSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSetsSequence>::s_element = 0x63B0;
template<>
DATA_API const std::string_view Attribute<Keyword::MatingFeatureSetsSequence>::s_name = "Mating Feature Sets Sequence";
template<>
DATA_API const VR Attribute<Keyword::MatingFeatureSetsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MatingFeatureSetsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MatingFeatureSetID>::s_keyword = Keyword::MatingFeatureSetID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSetID>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSetID>::s_element = 0x63C0;
template<>
DATA_API const std::string_view Attribute<Keyword::MatingFeatureSetID>::s_name = "Mating Feature Set ID";
template<>
DATA_API const VR Attribute<Keyword::MatingFeatureSetID>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MatingFeatureSetID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MatingFeatureSetLabel>::s_keyword = Keyword::MatingFeatureSetLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSetLabel>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSetLabel>::s_element = 0x63D0;
template<>
DATA_API const std::string_view Attribute<Keyword::MatingFeatureSetLabel>::s_name = "Mating Feature Set Label";
template<>
DATA_API const VR Attribute<Keyword::MatingFeatureSetLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::MatingFeatureSetLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MatingFeatureSequence>::s_keyword = Keyword::MatingFeatureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MatingFeatureSequence>::s_element = 0x63E0;
template<>
DATA_API const std::string_view Attribute<Keyword::MatingFeatureSequence>::s_name = "Mating Feature Sequence";
template<>
DATA_API const VR Attribute<Keyword::MatingFeatureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MatingFeatureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedHPGLDocumentID>::s_keyword = Keyword::ReferencedHPGLDocumentID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedHPGLDocumentID>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedHPGLDocumentID>::s_element = 0x6440;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedHPGLDocumentID>::s_name = "Referenced HPGL Document ID";
template<>
DATA_API const VR Attribute<Keyword::ReferencedHPGLDocumentID>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedHPGLDocumentID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanningLandmarkPointSequence>::s_keyword =
    Keyword::PlanningLandmarkPointSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkPointSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkPointSequence>::s_element = 0x6500;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanningLandmarkPointSequence>::s_name =
    "Planning Landmark Point Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanningLandmarkPointSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanningLandmarkPointSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanningLandmarkLineSequence>::s_keyword =
    Keyword::PlanningLandmarkLineSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkLineSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkLineSequence>::s_element = 0x6510;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanningLandmarkLineSequence>::s_name =
    "Planning Landmark Line Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanningLandmarkLineSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanningLandmarkLineSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanningLandmarkPlaneSequence>::s_keyword =
    Keyword::PlanningLandmarkPlaneSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkPlaneSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkPlaneSequence>::s_element = 0x6520;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanningLandmarkPlaneSequence>::s_name =
    "Planning Landmark Plane Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanningLandmarkPlaneSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanningLandmarkPlaneSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanningLandmarkID>::s_keyword = Keyword::PlanningLandmarkID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkID>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkID>::s_element = 0x6530;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanningLandmarkID>::s_name = "Planning Landmark ID";
template<>
DATA_API const VR Attribute<Keyword::PlanningLandmarkID>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PlanningLandmarkID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanningLandmarkDescription>::s_keyword =
    Keyword::PlanningLandmarkDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkDescription>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkDescription>::s_element = 0x6540;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanningLandmarkDescription>::s_name =
    "Planning Landmark Description";
template<>
DATA_API const VR Attribute<Keyword::PlanningLandmarkDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::PlanningLandmarkDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanningLandmarkIdentificationCodeSequence>::s_keyword =
    Keyword::PlanningLandmarkIdentificationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkIdentificationCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanningLandmarkIdentificationCodeSequence>::s_element = 0x6545;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanningLandmarkIdentificationCodeSequence>::s_name =
    "Planning Landmark Identification Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanningLandmarkIdentificationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanningLandmarkIdentificationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDPointCoordinatesSequence>::s_keyword =
    Keyword::TwoDPointCoordinatesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPointCoordinatesSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPointCoordinatesSequence>::s_element = 0x6550;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDPointCoordinatesSequence>::s_name =
    "2D Point Coordinates Sequence";
template<>
DATA_API const VR Attribute<Keyword::TwoDPointCoordinatesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TwoDPointCoordinatesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDPointCoordinates>::s_keyword = Keyword::TwoDPointCoordinates;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPointCoordinates>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPointCoordinates>::s_element = 0x6560;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDPointCoordinates>::s_name = "2D Point Coordinates";
template<>
DATA_API const VR Attribute<Keyword::TwoDPointCoordinates>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TwoDPointCoordinates>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ThreeDPointCoordinates>::s_keyword = Keyword::ThreeDPointCoordinates;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDPointCoordinates>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDPointCoordinates>::s_element = 0x6590;
template<>
DATA_API const std::string_view Attribute<Keyword::ThreeDPointCoordinates>::s_name = "3D Point Coordinates";
template<>
DATA_API const VR Attribute<Keyword::ThreeDPointCoordinates>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ThreeDPointCoordinates>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDLineCoordinatesSequence>::s_keyword =
    Keyword::TwoDLineCoordinatesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDLineCoordinatesSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDLineCoordinatesSequence>::s_element = 0x65A0;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDLineCoordinatesSequence>::s_name =
    "2D Line Coordinates Sequence";
template<>
DATA_API const VR Attribute<Keyword::TwoDLineCoordinatesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TwoDLineCoordinatesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDLineCoordinates>::s_keyword = Keyword::TwoDLineCoordinates;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDLineCoordinates>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDLineCoordinates>::s_element = 0x65B0;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDLineCoordinates>::s_name = "2D Line Coordinates";
template<>
DATA_API const VR Attribute<Keyword::TwoDLineCoordinates>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TwoDLineCoordinates>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::ThreeDLineCoordinates>::s_keyword = Keyword::ThreeDLineCoordinates;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDLineCoordinates>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDLineCoordinates>::s_element = 0x65D0;
template<>
DATA_API const std::string_view Attribute<Keyword::ThreeDLineCoordinates>::s_name = "3D Line Coordinates";
template<>
DATA_API const VR Attribute<Keyword::ThreeDLineCoordinates>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ThreeDLineCoordinates>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDPlaneCoordinatesSequence>::s_keyword =
    Keyword::TwoDPlaneCoordinatesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPlaneCoordinatesSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPlaneCoordinatesSequence>::s_element = 0x65E0;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDPlaneCoordinatesSequence>::s_name =
    "2D Plane Coordinates Sequence";
template<>
DATA_API const VR Attribute<Keyword::TwoDPlaneCoordinatesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TwoDPlaneCoordinatesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TwoDPlaneIntersection>::s_keyword = Keyword::TwoDPlaneIntersection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPlaneIntersection>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TwoDPlaneIntersection>::s_element = 0x65F0;
template<>
DATA_API const std::string_view Attribute<Keyword::TwoDPlaneIntersection>::s_name = "2D Plane Intersection";
template<>
DATA_API const VR Attribute<Keyword::TwoDPlaneIntersection>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::TwoDPlaneIntersection>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::ThreeDPlaneOrigin>::s_keyword = Keyword::ThreeDPlaneOrigin;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDPlaneOrigin>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDPlaneOrigin>::s_element = 0x6610;
template<>
DATA_API const std::string_view Attribute<Keyword::ThreeDPlaneOrigin>::s_name = "3D Plane Origin";
template<>
DATA_API const VR Attribute<Keyword::ThreeDPlaneOrigin>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ThreeDPlaneOrigin>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ThreeDPlaneNormal>::s_keyword = Keyword::ThreeDPlaneNormal;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDPlaneNormal>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ThreeDPlaneNormal>::s_element = 0x6620;
template<>
DATA_API const std::string_view Attribute<Keyword::ThreeDPlaneNormal>::s_name = "3D Plane Normal";
template<>
DATA_API const VR Attribute<Keyword::ThreeDPlaneNormal>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ThreeDPlaneNormal>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ModelModification>::s_keyword = Keyword::ModelModification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelModification>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelModification>::s_element = 0x7001;
template<>
DATA_API const std::string_view Attribute<Keyword::ModelModification>::s_name = "Model Modification";
template<>
DATA_API const VR Attribute<Keyword::ModelModification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ModelModification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModelMirroring>::s_keyword = Keyword::ModelMirroring;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelMirroring>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelMirroring>::s_element = 0x7002;
template<>
DATA_API const std::string_view Attribute<Keyword::ModelMirroring>::s_name = "Model Mirroring";
template<>
DATA_API const VR Attribute<Keyword::ModelMirroring>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ModelMirroring>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModelUsageCodeSequence>::s_keyword = Keyword::ModelUsageCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelUsageCodeSequence>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelUsageCodeSequence>::s_element = 0x7003;
template<>
DATA_API const std::string_view Attribute<Keyword::ModelUsageCodeSequence>::s_name = "Model Usage Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ModelUsageCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ModelUsageCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModelGroupUID>::s_keyword = Keyword::ModelGroupUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelGroupUID>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModelGroupUID>::s_element = 0x7004;
template<>
DATA_API const std::string_view Attribute<Keyword::ModelGroupUID>::s_name = "Model Group UID";
template<>
DATA_API const VR Attribute<Keyword::ModelGroupUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ModelGroupUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>::s_keyword =
    Keyword::RelativeURIReferenceWithinEncapsulatedDocument;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>::s_group = 0x0068;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>::s_element = 0x7005;
template<>
DATA_API const std::string_view Attribute<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>::s_name =
    "Relative URI Reference Within Encapsulated Document";
template<>
DATA_API const VR Attribute<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>::s_vr = VR::UR;
template<>
DATA_API const VM Attribute<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UnformattedTextValue>::s_keyword = Keyword::UnformattedTextValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UnformattedTextValue>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UnformattedTextValue>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::UnformattedTextValue>::s_name = "Unformatted Text Value";
template<>
DATA_API const VR Attribute<Keyword::UnformattedTextValue>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::UnformattedTextValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BoundingBoxTextHorizontalJustification>::s_keyword =
    Keyword::BoundingBoxTextHorizontalJustification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BoundingBoxTextHorizontalJustification>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BoundingBoxTextHorizontalJustification>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::BoundingBoxTextHorizontalJustification>::s_name =
    "Bounding Box Text Horizontal Justification";
template<>
DATA_API const VR Attribute<Keyword::BoundingBoxTextHorizontalJustification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BoundingBoxTextHorizontalJustification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GraphicData>::s_keyword = Keyword::GraphicData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GraphicData>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GraphicData>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::GraphicData>::s_name = "Graphic Data";
template<>
DATA_API const VR Attribute<Keyword::GraphicData>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::GraphicData>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::GraphicType>::s_keyword = Keyword::GraphicType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GraphicType>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GraphicType>::s_element = 0x0023;
template<>
DATA_API const std::string_view Attribute<Keyword::GraphicType>::s_name = "Graphic Type";
template<>
DATA_API const VR Attribute<Keyword::GraphicType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::GraphicType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentLabel>::s_keyword = Keyword::ContentLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentLabel>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentLabel>::s_element = 0x0080;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentLabel>::s_name = "Content Label";
template<>
DATA_API const VR Attribute<Keyword::ContentLabel>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ContentLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentDescription>::s_keyword = Keyword::ContentDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentDescription>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentDescription>::s_element = 0x0081;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentDescription>::s_name = "Content Description";
template<>
DATA_API const VR Attribute<Keyword::ContentDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ContentDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PresentationCreationDate>::s_keyword = Keyword::PresentationCreationDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationCreationDate>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationCreationDate>::s_element = 0x0082;
template<>
DATA_API const std::string_view Attribute<Keyword::PresentationCreationDate>::s_name = "Presentation Creation Date";
template<>
DATA_API const VR Attribute<Keyword::PresentationCreationDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::PresentationCreationDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PresentationCreationTime>::s_keyword = Keyword::PresentationCreationTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationCreationTime>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationCreationTime>::s_element = 0x0083;
template<>
DATA_API const std::string_view Attribute<Keyword::PresentationCreationTime>::s_name = "Presentation Creation Time";
template<>
DATA_API const VR Attribute<Keyword::PresentationCreationTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::PresentationCreationTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentCreatorName>::s_keyword = Keyword::ContentCreatorName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentCreatorName>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentCreatorName>::s_element = 0x0084;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentCreatorName>::s_name = "Content Creator's Name";
template<>
DATA_API const VR Attribute<Keyword::ContentCreatorName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::ContentCreatorName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ContentCreatorIdentificationCodeSequence>::s_keyword =
    Keyword::ContentCreatorIdentificationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentCreatorIdentificationCodeSequence>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ContentCreatorIdentificationCodeSequence>::s_element = 0x0086;
template<>
DATA_API const std::string_view Attribute<Keyword::ContentCreatorIdentificationCodeSequence>::s_name =
    "Content Creator's Identification Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ContentCreatorIdentificationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ContentCreatorIdentificationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AlternateContentDescriptionSequence>::s_keyword =
    Keyword::AlternateContentDescriptionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlternateContentDescriptionSequence>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AlternateContentDescriptionSequence>::s_element = 0x0087;
template<>
DATA_API const std::string_view Attribute<Keyword::AlternateContentDescriptionSequence>::s_name =
    "Alternate Content Description Sequence";
template<>
DATA_API const VR Attribute<Keyword::AlternateContentDescriptionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AlternateContentDescriptionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FiducialUID>::s_keyword = Keyword::FiducialUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiducialUID>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiducialUID>::s_element = 0x031A;
template<>
DATA_API const std::string_view Attribute<Keyword::FiducialUID>::s_name = "Fiducial UID";
template<>
DATA_API const VR Attribute<Keyword::FiducialUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::FiducialUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FiducialSetSequence>::s_keyword = Keyword::FiducialSetSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiducialSetSequence>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiducialSetSequence>::s_element = 0x031C;
template<>
DATA_API const std::string_view Attribute<Keyword::FiducialSetSequence>::s_name = "Fiducial Set Sequence";
template<>
DATA_API const VR Attribute<Keyword::FiducialSetSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FiducialSetSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FiducialSequence>::s_keyword = Keyword::FiducialSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiducialSequence>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FiducialSequence>::s_element = 0x031E;
template<>
DATA_API const std::string_view Attribute<Keyword::FiducialSequence>::s_name = "Fiducial Sequence";
template<>
DATA_API const VR Attribute<Keyword::FiducialSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FiducialSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GraphicLayerRecommendedDisplayCIELabValue>::s_keyword =
    Keyword::GraphicLayerRecommendedDisplayCIELabValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GraphicLayerRecommendedDisplayCIELabValue>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GraphicLayerRecommendedDisplayCIELabValue>::s_element = 0x0401;
template<>
DATA_API const std::string_view Attribute<Keyword::GraphicLayerRecommendedDisplayCIELabValue>::s_name =
    "Graphic Layer Recommended Display CIELab Value";
template<>
DATA_API const VR Attribute<Keyword::GraphicLayerRecommendedDisplayCIELabValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::GraphicLayerRecommendedDisplayCIELabValue>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSpatialRegistrationSequence>::s_keyword =
    Keyword::ReferencedSpatialRegistrationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSpatialRegistrationSequence>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSpatialRegistrationSequence>::s_element = 0x0404;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSpatialRegistrationSequence>::s_name =
    "Referenced Spatial Registration Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSpatialRegistrationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSpatialRegistrationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RenderProjection>::s_keyword = Keyword::RenderProjection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RenderProjection>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RenderProjection>::s_element = 0x1602;
template<>
DATA_API const std::string_view Attribute<Keyword::RenderProjection>::s_name = "Render Projection";
template<>
DATA_API const VR Attribute<Keyword::RenderProjection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RenderProjection>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ViewpointPosition>::s_keyword = Keyword::ViewpointPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewpointPosition>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewpointPosition>::s_element = 0x1603;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewpointPosition>::s_name = "Viewpoint Position";
template<>
DATA_API const VR Attribute<Keyword::ViewpointPosition>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ViewpointPosition>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ViewpointLookAtPoint>::s_keyword = Keyword::ViewpointLookAtPoint;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewpointLookAtPoint>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewpointLookAtPoint>::s_element = 0x1604;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewpointLookAtPoint>::s_name = "Viewpoint LookAt Point";
template<>
DATA_API const VR Attribute<Keyword::ViewpointLookAtPoint>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ViewpointLookAtPoint>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::ViewpointUpDirection>::s_keyword = Keyword::ViewpointUpDirection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewpointUpDirection>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ViewpointUpDirection>::s_element = 0x1605;
template<>
DATA_API const std::string_view Attribute<Keyword::ViewpointUpDirection>::s_name = "Viewpoint Up Direction";
template<>
DATA_API const VR Attribute<Keyword::ViewpointUpDirection>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ViewpointUpDirection>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::RenderFieldOfView>::s_keyword = Keyword::RenderFieldOfView;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RenderFieldOfView>::s_group = 0x0070;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RenderFieldOfView>::s_element = 0x1606;
template<>
DATA_API const std::string_view Attribute<Keyword::RenderFieldOfView>::s_name = "Render field of view";
template<>
DATA_API const VR Attribute<Keyword::RenderFieldOfView>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RenderFieldOfView>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::HangingProtocolName>::s_keyword = Keyword::HangingProtocolName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HangingProtocolName>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HangingProtocolName>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::HangingProtocolName>::s_name = "Hanging Protocol Name";
template<>
DATA_API const VR Attribute<Keyword::HangingProtocolName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::HangingProtocolName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::HangingProtocolCreator>::s_keyword = Keyword::HangingProtocolCreator;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HangingProtocolCreator>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::HangingProtocolCreator>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::HangingProtocolCreator>::s_name = "Hanging Protocol Creator";
template<>
DATA_API const VR Attribute<Keyword::HangingProtocolCreator>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::HangingProtocolCreator>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfScreens>::s_keyword = Keyword::NumberOfScreens;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfScreens>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfScreens>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfScreens>::s_name = "Number of Screens";
template<>
DATA_API const VR Attribute<Keyword::NumberOfScreens>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfScreens>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NominalScreenDefinitionSequence>::s_keyword =
    Keyword::NominalScreenDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalScreenDefinitionSequence>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NominalScreenDefinitionSequence>::s_element = 0x0102;
template<>
DATA_API const std::string_view Attribute<Keyword::NominalScreenDefinitionSequence>::s_name =
    "Nominal Screen Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::NominalScreenDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::NominalScreenDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfVerticalPixels>::s_keyword = Keyword::NumberOfVerticalPixels;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfVerticalPixels>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfVerticalPixels>::s_element = 0x0104;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfVerticalPixels>::s_name = "Number of Vertical Pixels";
template<>
DATA_API const VR Attribute<Keyword::NumberOfVerticalPixels>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfVerticalPixels>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfHorizontalPixels>::s_keyword = Keyword::NumberOfHorizontalPixels;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfHorizontalPixels>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfHorizontalPixels>::s_element = 0x0106;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfHorizontalPixels>::s_name = "Number of Horizontal Pixels";
template<>
DATA_API const VR Attribute<Keyword::NumberOfHorizontalPixels>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfHorizontalPixels>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DisplayEnvironmentSpatialPosition>::s_keyword =
    Keyword::DisplayEnvironmentSpatialPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayEnvironmentSpatialPosition>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplayEnvironmentSpatialPosition>::s_element = 0x0108;
template<>
DATA_API const std::string_view Attribute<Keyword::DisplayEnvironmentSpatialPosition>::s_name =
    "Display Environment Spatial Position";
template<>
DATA_API const VR Attribute<Keyword::DisplayEnvironmentSpatialPosition>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DisplayEnvironmentSpatialPosition>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::ScreenMinimumGrayscaleBitDepth>::s_keyword =
    Keyword::ScreenMinimumGrayscaleBitDepth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScreenMinimumGrayscaleBitDepth>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScreenMinimumGrayscaleBitDepth>::s_element = 0x010A;
template<>
DATA_API const std::string_view Attribute<Keyword::ScreenMinimumGrayscaleBitDepth>::s_name =
    "Screen Minimum Grayscale Bit Depth";
template<>
DATA_API const VR Attribute<Keyword::ScreenMinimumGrayscaleBitDepth>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ScreenMinimumGrayscaleBitDepth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ScreenMinimumColorBitDepth>::s_keyword = Keyword::ScreenMinimumColorBitDepth;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScreenMinimumColorBitDepth>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ScreenMinimumColorBitDepth>::s_element = 0x010C;
template<>
DATA_API const std::string_view Attribute<Keyword::ScreenMinimumColorBitDepth>::s_name =
    "Screen Minimum Color Bit Depth";
template<>
DATA_API const VR Attribute<Keyword::ScreenMinimumColorBitDepth>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ScreenMinimumColorBitDepth>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicationMaximumRepaintTime>::s_keyword =
    Keyword::ApplicationMaximumRepaintTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationMaximumRepaintTime>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicationMaximumRepaintTime>::s_element = 0x010E;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicationMaximumRepaintTime>::s_name =
    "application Maximum Repaint Time";
template<>
DATA_API const VR Attribute<Keyword::ApplicationMaximumRepaintTime>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ApplicationMaximumRepaintTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageBoxNumber>::s_keyword = Keyword::ImageBoxNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxNumber>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxNumber>::s_element = 0x0302;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageBoxNumber>::s_name = "Image Box Number";
template<>
DATA_API const VR Attribute<Keyword::ImageBoxNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImageBoxNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageBoxLayoutType>::s_keyword = Keyword::ImageBoxLayoutType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxLayoutType>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxLayoutType>::s_element = 0x0304;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageBoxLayoutType>::s_name = "Image Box Layout Type";
template<>
DATA_API const VR Attribute<Keyword::ImageBoxLayoutType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ImageBoxLayoutType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageBoxTileHorizontalDimension>::s_keyword =
    Keyword::ImageBoxTileHorizontalDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxTileHorizontalDimension>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxTileHorizontalDimension>::s_element = 0x0306;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageBoxTileHorizontalDimension>::s_name =
    "Image Box Tile Horizontal Dimension";
template<>
DATA_API const VR Attribute<Keyword::ImageBoxTileHorizontalDimension>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImageBoxTileHorizontalDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageBoxTileVerticalDimension>::s_keyword =
    Keyword::ImageBoxTileVerticalDimension;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxTileVerticalDimension>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxTileVerticalDimension>::s_element = 0x0308;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageBoxTileVerticalDimension>::s_name =
    "Image Box Tile Vertical Dimension";
template<>
DATA_API const VR Attribute<Keyword::ImageBoxTileVerticalDimension>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImageBoxTileVerticalDimension>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageBoxOverlapPriority>::s_keyword = Keyword::ImageBoxOverlapPriority;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxOverlapPriority>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxOverlapPriority>::s_element = 0x0320;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageBoxOverlapPriority>::s_name = "Image Box Overlap Priority";
template<>
DATA_API const VR Attribute<Keyword::ImageBoxOverlapPriority>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImageBoxOverlapPriority>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CineRelativeToRealTime>::s_keyword = Keyword::CineRelativeToRealTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CineRelativeToRealTime>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CineRelativeToRealTime>::s_element = 0x0330;
template<>
DATA_API const std::string_view Attribute<Keyword::CineRelativeToRealTime>::s_name = "Cine Relative to Real-Time";
template<>
DATA_API const VR Attribute<Keyword::CineRelativeToRealTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::CineRelativeToRealTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StructuredDisplayBackgroundCIELabValue>::s_keyword =
    Keyword::StructuredDisplayBackgroundCIELabValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StructuredDisplayBackgroundCIELabValue>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StructuredDisplayBackgroundCIELabValue>::s_element = 0x0420;
template<>
DATA_API const std::string_view Attribute<Keyword::StructuredDisplayBackgroundCIELabValue>::s_name =
    "Structured Display Background CIELab Value";
template<>
DATA_API const VR Attribute<Keyword::StructuredDisplayBackgroundCIELabValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::StructuredDisplayBackgroundCIELabValue>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::EmptyImageBoxCIELabValue>::s_keyword = Keyword::EmptyImageBoxCIELabValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EmptyImageBoxCIELabValue>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EmptyImageBoxCIELabValue>::s_element = 0x0421;
template<>
DATA_API const std::string_view Attribute<Keyword::EmptyImageBoxCIELabValue>::s_name = "Empty Image Box CIELab Value";
template<>
DATA_API const VR Attribute<Keyword::EmptyImageBoxCIELabValue>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::EmptyImageBoxCIELabValue>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::StructuredDisplayImageBoxSequence>::s_keyword =
    Keyword::StructuredDisplayImageBoxSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StructuredDisplayImageBoxSequence>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StructuredDisplayImageBoxSequence>::s_element = 0x0422;
template<>
DATA_API const std::string_view Attribute<Keyword::StructuredDisplayImageBoxSequence>::s_name =
    "Structured Display Image Box Sequence";
template<>
DATA_API const VR Attribute<Keyword::StructuredDisplayImageBoxSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StructuredDisplayImageBoxSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StructuredDisplayTextBoxSequence>::s_keyword =
    Keyword::StructuredDisplayTextBoxSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StructuredDisplayTextBoxSequence>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StructuredDisplayTextBoxSequence>::s_element = 0x0424;
template<>
DATA_API const std::string_view Attribute<Keyword::StructuredDisplayTextBoxSequence>::s_name =
    "Structured Display Text Box Sequence";
template<>
DATA_API const VR Attribute<Keyword::StructuredDisplayTextBoxSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::StructuredDisplayTextBoxSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedFirstFrameSequence>::s_keyword =
    Keyword::ReferencedFirstFrameSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFirstFrameSequence>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFirstFrameSequence>::s_element = 0x0427;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedFirstFrameSequence>::s_name =
    "Referenced First Frame Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedFirstFrameSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedFirstFrameSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageBoxSynchronizationSequence>::s_keyword =
    Keyword::ImageBoxSynchronizationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxSynchronizationSequence>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageBoxSynchronizationSequence>::s_element = 0x0430;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageBoxSynchronizationSequence>::s_name =
    "Image Box Synchronization Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImageBoxSynchronizationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImageBoxSynchronizationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SynchronizedImageBoxList>::s_keyword = Keyword::SynchronizedImageBoxList;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizedImageBoxList>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SynchronizedImageBoxList>::s_element = 0x0432;
template<>
DATA_API const std::string_view Attribute<Keyword::SynchronizedImageBoxList>::s_name = "Synchronized Image Box List";
template<>
DATA_API const VR Attribute<Keyword::SynchronizedImageBoxList>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SynchronizedImageBoxList>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::TypeOfSynchronization>::s_keyword = Keyword::TypeOfSynchronization;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfSynchronization>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TypeOfSynchronization>::s_element = 0x0434;
template<>
DATA_API const std::string_view Attribute<Keyword::TypeOfSynchronization>::s_name = "Type of Synchronization";
template<>
DATA_API const VR Attribute<Keyword::TypeOfSynchronization>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TypeOfSynchronization>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DisplaySetHorizontalJustification>::s_keyword =
    Keyword::DisplaySetHorizontalJustification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplaySetHorizontalJustification>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplaySetHorizontalJustification>::s_element = 0x0717;
template<>
DATA_API const std::string_view Attribute<Keyword::DisplaySetHorizontalJustification>::s_name =
    "Display Set Horizontal Justification";
template<>
DATA_API const VR Attribute<Keyword::DisplaySetHorizontalJustification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DisplaySetHorizontalJustification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DisplaySetVerticalJustification>::s_keyword =
    Keyword::DisplaySetVerticalJustification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplaySetVerticalJustification>::s_group = 0x0072;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DisplaySetVerticalJustification>::s_element = 0x0718;
template<>
DATA_API const std::string_view Attribute<Keyword::DisplaySetVerticalJustification>::s_name =
    "Display Set Vertical Justification";
template<>
DATA_API const VR Attribute<Keyword::DisplaySetVerticalJustification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DisplaySetVerticalJustification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerformedProcessingParametersSequence>::s_keyword =
    Keyword::PerformedProcessingParametersSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcessingParametersSequence>::s_group = 0x0074;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerformedProcessingParametersSequence>::s_element = 0x1212;
template<>
DATA_API const std::string_view Attribute<Keyword::PerformedProcessingParametersSequence>::s_name =
    "Performed Processing Parameters Sequence";
template<>
DATA_API const VR Attribute<Keyword::PerformedProcessingParametersSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PerformedProcessingParametersSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceScanAcquisitionTypeCodeSequence>::s_keyword =
    Keyword::SurfaceScanAcquisitionTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceScanAcquisitionTypeCodeSequence>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceScanAcquisitionTypeCodeSequence>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceScanAcquisitionTypeCodeSequence>::s_name =
    "Surface Scan Acquisition Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfaceScanAcquisitionTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfaceScanAcquisitionTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfaceScanModeCodeSequence>::s_keyword =
    Keyword::SurfaceScanModeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceScanModeCodeSequence>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfaceScanModeCodeSequence>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfaceScanModeCodeSequence>::s_name =
    "Surface Scan Mode Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::SurfaceScanModeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SurfaceScanModeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RegistrationMethodCodeSequence>::s_keyword =
    Keyword::RegistrationMethodCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegistrationMethodCodeSequence>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RegistrationMethodCodeSequence>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::RegistrationMethodCodeSequence>::s_name =
    "Registration Method Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RegistrationMethodCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RegistrationMethodCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShotDurationTime>::s_keyword = Keyword::ShotDurationTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShotDurationTime>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShotDurationTime>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::ShotDurationTime>::s_name = "Shot Duration Time";
template<>
DATA_API const VR Attribute<Keyword::ShotDurationTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ShotDurationTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ShotOffsetTime>::s_keyword = Keyword::ShotOffsetTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShotOffsetTime>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ShotOffsetTime>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::ShotOffsetTime>::s_name = "Shot Offset Time";
template<>
DATA_API const VR Attribute<Keyword::ShotOffsetTime>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ShotOffsetTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SurfacePointPresentationValueData>::s_keyword =
    Keyword::SurfacePointPresentationValueData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointPresentationValueData>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointPresentationValueData>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfacePointPresentationValueData>::s_name =
    "Surface Point Presentation Value Data";
template<>
DATA_API const VR Attribute<Keyword::SurfacePointPresentationValueData>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SurfacePointPresentationValueData>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::SurfacePointColorCIELabValueData>::s_keyword =
    Keyword::SurfacePointColorCIELabValueData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointColorCIELabValueData>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SurfacePointColorCIELabValueData>::s_element = 0x0007;
template<>
DATA_API const std::string_view Attribute<Keyword::SurfacePointColorCIELabValueData>::s_name =
    "Surface Point Color CIELab Value Data";
template<>
DATA_API const VR Attribute<Keyword::SurfacePointColorCIELabValueData>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::SurfacePointColorCIELabValueData>::s_vm = VM::MIN_3_MAX_3N;
template<>
DATA_API const Keyword Attribute<Keyword::UVMappingSequence>::s_keyword = Keyword::UVMappingSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UVMappingSequence>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UVMappingSequence>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::UVMappingSequence>::s_name = "UV Mapping Sequence";
template<>
DATA_API const VR Attribute<Keyword::UVMappingSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::UVMappingSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TextureLabel>::s_keyword = Keyword::TextureLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TextureLabel>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TextureLabel>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::TextureLabel>::s_name = "texture Label";
template<>
DATA_API const VR Attribute<Keyword::TextureLabel>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::TextureLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::UValueData>::s_keyword = Keyword::UValueData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UValueData>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::UValueData>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::UValueData>::s_name = "U Value Data";
template<>
DATA_API const VR Attribute<Keyword::UValueData>::s_vr = VR::OF;
template<>
DATA_API const VM Attribute<Keyword::UValueData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::VValueData>::s_keyword = Keyword::VValueData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VValueData>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::VValueData>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::VValueData>::s_name = "V Value Data";
template<>
DATA_API const VR Attribute<Keyword::VValueData>::s_vr = VR::OF;
template<>
DATA_API const VM Attribute<Keyword::VValueData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedTextureSequence>::s_keyword = Keyword::ReferencedTextureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTextureSequence>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTextureSequence>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedTextureSequence>::s_name = "Referenced texture Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedTextureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedTextureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSurfaceDataSequence>::s_keyword =
    Keyword::ReferencedSurfaceDataSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceDataSequence>::s_group = 0x0080;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSurfaceDataSequence>::s_element = 0x0013;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSurfaceDataSequence>::s_name =
    "Referenced Surface Data Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSurfaceDataSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSurfaceDataSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StorageMediaFileSetID>::s_keyword = Keyword::StorageMediaFileSetID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StorageMediaFileSetID>::s_group = 0x0088;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StorageMediaFileSetID>::s_element = 0x0130;
template<>
DATA_API const std::string_view Attribute<Keyword::StorageMediaFileSetID>::s_name = "Storage Media File-set ID";
template<>
DATA_API const VR Attribute<Keyword::StorageMediaFileSetID>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::StorageMediaFileSetID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StorageMediaFileSetUID>::s_keyword = Keyword::StorageMediaFileSetUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StorageMediaFileSetUID>::s_group = 0x0088;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StorageMediaFileSetUID>::s_element = 0x0140;
template<>
DATA_API const std::string_view Attribute<Keyword::StorageMediaFileSetUID>::s_name = "Storage Media File-set UID";
template<>
DATA_API const VR Attribute<Keyword::StorageMediaFileSetUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::StorageMediaFileSetUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IconImageSequence>::s_keyword = Keyword::IconImageSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IconImageSequence>::s_group = 0x0088;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IconImageSequence>::s_element = 0x0200;
template<>
DATA_API const std::string_view Attribute<Keyword::IconImageSequence>::s_name = "Icon Image Sequence";
template<>
DATA_API const VR Attribute<Keyword::IconImageSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::IconImageSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SOPInstanceStatus>::s_keyword = Keyword::SOPInstanceStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPInstanceStatus>::s_group = 0x0100;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPInstanceStatus>::s_element = 0x0410;
template<>
DATA_API const std::string_view Attribute<Keyword::SOPInstanceStatus>::s_name = "SOP Instance Status";
template<>
DATA_API const VR Attribute<Keyword::SOPInstanceStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SOPInstanceStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SOPAuthorizationDateTime>::s_keyword = Keyword::SOPAuthorizationDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPAuthorizationDateTime>::s_group = 0x0100;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPAuthorizationDateTime>::s_element = 0x0420;
template<>
DATA_API const std::string_view Attribute<Keyword::SOPAuthorizationDateTime>::s_name = "SOP Authorization DateTime";
template<>
DATA_API const VR Attribute<Keyword::SOPAuthorizationDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::SOPAuthorizationDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SOPAuthorizationComment>::s_keyword = Keyword::SOPAuthorizationComment;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPAuthorizationComment>::s_group = 0x0100;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SOPAuthorizationComment>::s_element = 0x0424;
template<>
DATA_API const std::string_view Attribute<Keyword::SOPAuthorizationComment>::s_name = "SOP Authorization Comment";
template<>
DATA_API const VR Attribute<Keyword::SOPAuthorizationComment>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::SOPAuthorizationComment>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AuthorizationEquipmentCertificationNumber>::s_keyword =
    Keyword::AuthorizationEquipmentCertificationNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AuthorizationEquipmentCertificationNumber>::s_group = 0x0100;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AuthorizationEquipmentCertificationNumber>::s_element = 0x0426;
template<>
DATA_API const std::string_view Attribute<Keyword::AuthorizationEquipmentCertificationNumber>::s_name =
    "Authorization Equipment Certification Number";
template<>
DATA_API const VR Attribute<Keyword::AuthorizationEquipmentCertificationNumber>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::AuthorizationEquipmentCertificationNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MACIDNumber>::s_keyword = Keyword::MACIDNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACIDNumber>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACIDNumber>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::MACIDNumber>::s_name = "MAC ID Number";
template<>
DATA_API const VR Attribute<Keyword::MACIDNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::MACIDNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MACCalculationTransferSyntaxUID>::s_keyword =
    Keyword::MACCalculationTransferSyntaxUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACCalculationTransferSyntaxUID>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACCalculationTransferSyntaxUID>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::MACCalculationTransferSyntaxUID>::s_name =
    "MAC Calculation Transfer Syntax UID";
template<>
DATA_API const VR Attribute<Keyword::MACCalculationTransferSyntaxUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::MACCalculationTransferSyntaxUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MACAlgorithm>::s_keyword = Keyword::MACAlgorithm;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACAlgorithm>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACAlgorithm>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::MACAlgorithm>::s_name = "MAC Algorithm";
template<>
DATA_API const VR Attribute<Keyword::MACAlgorithm>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::MACAlgorithm>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DataElementsSigned>::s_keyword = Keyword::DataElementsSigned;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataElementsSigned>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DataElementsSigned>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::DataElementsSigned>::s_name = "Data Elements Signed";
template<>
DATA_API const VR Attribute<Keyword::DataElementsSigned>::s_vr = VR::AT;
template<>
DATA_API const VM Attribute<Keyword::DataElementsSigned>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DigitalSignatureUID>::s_keyword = Keyword::DigitalSignatureUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignatureUID>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignatureUID>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitalSignatureUID>::s_name = "Digital Signature UID";
template<>
DATA_API const VR Attribute<Keyword::DigitalSignatureUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::DigitalSignatureUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DigitalSignatureDateTime>::s_keyword = Keyword::DigitalSignatureDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignatureDateTime>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignatureDateTime>::s_element = 0x0105;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitalSignatureDateTime>::s_name = "Digital Signature DateTime";
template<>
DATA_API const VR Attribute<Keyword::DigitalSignatureDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::DigitalSignatureDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CertificateType>::s_keyword = Keyword::CertificateType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertificateType>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertificateType>::s_element = 0x0110;
template<>
DATA_API const std::string_view Attribute<Keyword::CertificateType>::s_name = "Certificate Type";
template<>
DATA_API const VR Attribute<Keyword::CertificateType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CertificateType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CertificateOfSigner>::s_keyword = Keyword::CertificateOfSigner;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertificateOfSigner>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertificateOfSigner>::s_element = 0x0115;
template<>
DATA_API const std::string_view Attribute<Keyword::CertificateOfSigner>::s_name = "Certificate of Signer";
template<>
DATA_API const VR Attribute<Keyword::CertificateOfSigner>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::CertificateOfSigner>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Signature>::s_keyword = Keyword::Signature;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Signature>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Signature>::s_element = 0x0120;
template<>
DATA_API const std::string_view Attribute<Keyword::Signature>::s_name = "Signature";
template<>
DATA_API const VR Attribute<Keyword::Signature>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::Signature>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CertifiedTimestampType>::s_keyword = Keyword::CertifiedTimestampType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertifiedTimestampType>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertifiedTimestampType>::s_element = 0x0305;
template<>
DATA_API const std::string_view Attribute<Keyword::CertifiedTimestampType>::s_name = "Certified Timestamp Type";
template<>
DATA_API const VR Attribute<Keyword::CertifiedTimestampType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::CertifiedTimestampType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CertifiedTimestamp>::s_keyword = Keyword::CertifiedTimestamp;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertifiedTimestamp>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CertifiedTimestamp>::s_element = 0x0310;
template<>
DATA_API const std::string_view Attribute<Keyword::CertifiedTimestamp>::s_name = "Certified Timestamp";
template<>
DATA_API const VR Attribute<Keyword::CertifiedTimestamp>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::CertifiedTimestamp>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DigitalSignaturePurposeCodeSequence>::s_keyword =
    Keyword::DigitalSignaturePurposeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignaturePurposeCodeSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignaturePurposeCodeSequence>::s_element = 0x0401;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitalSignaturePurposeCodeSequence>::s_name =
    "Digital Signature Purpose Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::DigitalSignaturePurposeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DigitalSignaturePurposeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedDigitalSignatureSequence>::s_keyword =
    Keyword::ReferencedDigitalSignatureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDigitalSignatureSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDigitalSignatureSequence>::s_element = 0x0402;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedDigitalSignatureSequence>::s_name =
    "Referenced Digital Signature Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedDigitalSignatureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedDigitalSignatureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedSOPInstanceMACSequence>::s_keyword =
    Keyword::ReferencedSOPInstanceMACSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPInstanceMACSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedSOPInstanceMACSequence>::s_element = 0x0403;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedSOPInstanceMACSequence>::s_name =
    "Referenced SOP Instance MAC Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedSOPInstanceMACSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedSOPInstanceMACSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EncryptedAttributesSequence>::s_keyword =
    Keyword::EncryptedAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncryptedAttributesSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncryptedAttributesSequence>::s_element = 0x0500;
template<>
DATA_API const std::string_view Attribute<Keyword::EncryptedAttributesSequence>::s_name =
    "Encrypted Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::EncryptedAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EncryptedAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EncryptedContentTransferSyntaxUID>::s_keyword =
    Keyword::EncryptedContentTransferSyntaxUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncryptedContentTransferSyntaxUID>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncryptedContentTransferSyntaxUID>::s_element = 0x0510;
template<>
DATA_API const std::string_view Attribute<Keyword::EncryptedContentTransferSyntaxUID>::s_name =
    "Encrypted Content Transfer Syntax UID";
template<>
DATA_API const VR Attribute<Keyword::EncryptedContentTransferSyntaxUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::EncryptedContentTransferSyntaxUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EncryptedContent>::s_keyword = Keyword::EncryptedContent;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncryptedContent>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncryptedContent>::s_element = 0x0520;
template<>
DATA_API const std::string_view Attribute<Keyword::EncryptedContent>::s_name = "Encrypted Content";
template<>
DATA_API const VR Attribute<Keyword::EncryptedContent>::s_vr = VR::OB;
template<>
DATA_API const VM Attribute<Keyword::EncryptedContent>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModifiedAttributesSequence>::s_keyword = Keyword::ModifiedAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModifiedAttributesSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModifiedAttributesSequence>::s_element = 0x0550;
template<>
DATA_API const std::string_view Attribute<Keyword::ModifiedAttributesSequence>::s_name = "Modified Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::ModifiedAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ModifiedAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NonconformingModifiedAttributesSequence>::s_keyword =
    Keyword::NonconformingModifiedAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NonconformingModifiedAttributesSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NonconformingModifiedAttributesSequence>::s_element = 0x0551;
template<>
DATA_API const std::string_view Attribute<Keyword::NonconformingModifiedAttributesSequence>::s_name =
    "Nonconforming Modified Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::NonconformingModifiedAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::NonconformingModifiedAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OriginalAttributesSequence>::s_keyword = Keyword::OriginalAttributesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OriginalAttributesSequence>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OriginalAttributesSequence>::s_element = 0x0561;
template<>
DATA_API const std::string_view Attribute<Keyword::OriginalAttributesSequence>::s_name = "Original Attributes Sequence";
template<>
DATA_API const VR Attribute<Keyword::OriginalAttributesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::OriginalAttributesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AttributeModificationDateTime>::s_keyword =
    Keyword::AttributeModificationDateTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttributeModificationDateTime>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AttributeModificationDateTime>::s_element = 0x0562;
template<>
DATA_API const std::string_view Attribute<Keyword::AttributeModificationDateTime>::s_name =
    "Attribute Modification DateTime";
template<>
DATA_API const VR Attribute<Keyword::AttributeModificationDateTime>::s_vr = VR::DT;
template<>
DATA_API const VM Attribute<Keyword::AttributeModificationDateTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ModifyingSystem>::s_keyword = Keyword::ModifyingSystem;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModifyingSystem>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ModifyingSystem>::s_element = 0x0563;
template<>
DATA_API const std::string_view Attribute<Keyword::ModifyingSystem>::s_name = "Modifying System";
template<>
DATA_API const VR Attribute<Keyword::ModifyingSystem>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ModifyingSystem>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceOfPreviousValues>::s_keyword = Keyword::SourceOfPreviousValues;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceOfPreviousValues>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceOfPreviousValues>::s_element = 0x0564;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceOfPreviousValues>::s_name = "Source of Previous Values";
template<>
DATA_API const VR Attribute<Keyword::SourceOfPreviousValues>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::SourceOfPreviousValues>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReasonForTheAttributeModification>::s_keyword =
    Keyword::ReasonForTheAttributeModification;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForTheAttributeModification>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReasonForTheAttributeModification>::s_element = 0x0565;
template<>
DATA_API const std::string_view Attribute<Keyword::ReasonForTheAttributeModification>::s_name =
    "Reason for the Attribute Modification";
template<>
DATA_API const VR Attribute<Keyword::ReasonForTheAttributeModification>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ReasonForTheAttributeModification>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceOriginStatus>::s_keyword = Keyword::InstanceOriginStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceOriginStatus>::s_group = 0x0400;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceOriginStatus>::s_element = 0x0600;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceOriginStatus>::s_name = "Instance Origin Status";
template<>
DATA_API const VR Attribute<Keyword::InstanceOriginStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::InstanceOriginStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::Illumination>::s_keyword = Keyword::Illumination;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Illumination>::s_group = 0x2010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::Illumination>::s_element = 0x015E;
template<>
DATA_API const std::string_view Attribute<Keyword::Illumination>::s_name = "Illumination";
template<>
DATA_API const VR Attribute<Keyword::Illumination>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::Illumination>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReflectedAmbientLight>::s_keyword = Keyword::ReflectedAmbientLight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReflectedAmbientLight>::s_group = 0x2010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReflectedAmbientLight>::s_element = 0x0160;
template<>
DATA_API const std::string_view Attribute<Keyword::ReflectedAmbientLight>::s_name = "Reflected Ambient Light";
template<>
DATA_API const VR Attribute<Keyword::ReflectedAmbientLight>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReflectedAmbientLight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PresentationLUTShape>::s_keyword = Keyword::PresentationLUTShape;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationLUTShape>::s_group = 0x2050;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PresentationLUTShape>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::PresentationLUTShape>::s_name = "Presentation LUT Shape";
template<>
DATA_API const VR Attribute<Keyword::PresentationLUTShape>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PresentationLUTShape>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::LabelText>::s_keyword = Keyword::LabelText;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LabelText>::s_group = 0x2200;
template<>
DATA_API const std::uint16_t Attribute<Keyword::LabelText>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::LabelText>::s_name = "Label Text";
template<>
DATA_API const VR Attribute<Keyword::LabelText>::s_vr = VR::UT;
template<>
DATA_API const VM Attribute<Keyword::LabelText>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BarcodeValue>::s_keyword = Keyword::BarcodeValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BarcodeValue>::s_group = 0x2200;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BarcodeValue>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::BarcodeValue>::s_name = "Barcode Value";
template<>
DATA_API const VR Attribute<Keyword::BarcodeValue>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::BarcodeValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageLabel>::s_keyword = Keyword::RTImageLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageLabel>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageLabel>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageLabel>::s_name = "RT Image Label";
template<>
DATA_API const VR Attribute<Keyword::RTImageLabel>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::RTImageLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageName>::s_keyword = Keyword::RTImageName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageName>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageName>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageName>::s_name = "RT Image Name";
template<>
DATA_API const VR Attribute<Keyword::RTImageName>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RTImageName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageDescription>::s_keyword = Keyword::RTImageDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageDescription>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageDescription>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageDescription>::s_name = "RT Image Description";
template<>
DATA_API const VR Attribute<Keyword::RTImageDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::RTImageDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReportedValuesOrigin>::s_keyword = Keyword::ReportedValuesOrigin;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReportedValuesOrigin>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReportedValuesOrigin>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::ReportedValuesOrigin>::s_name = "Reported Values Origin";
template<>
DATA_API const VR Attribute<Keyword::ReportedValuesOrigin>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ReportedValuesOrigin>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImagePlane>::s_keyword = Keyword::RTImagePlane;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImagePlane>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImagePlane>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImagePlane>::s_name = "RT Image Plane";
template<>
DATA_API const VR Attribute<Keyword::RTImagePlane>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::RTImagePlane>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::XRayImageReceptorTranslation>::s_keyword =
    Keyword::XRayImageReceptorTranslation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayImageReceptorTranslation>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayImageReceptorTranslation>::s_element = 0x000D;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayImageReceptorTranslation>::s_name =
    "X-Ray Image Receptor Translation";
template<>
DATA_API const VR Attribute<Keyword::XRayImageReceptorTranslation>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::XRayImageReceptorTranslation>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::XRayImageReceptorAngle>::s_keyword = Keyword::XRayImageReceptorAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayImageReceptorAngle>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::XRayImageReceptorAngle>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::XRayImageReceptorAngle>::s_name = "X-Ray Image Receptor Angle";
template<>
DATA_API const VR Attribute<Keyword::XRayImageReceptorAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::XRayImageReceptorAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageOrientation>::s_keyword = Keyword::RTImageOrientation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageOrientation>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageOrientation>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageOrientation>::s_name = "RT Image Orientation";
template<>
DATA_API const VR Attribute<Keyword::RTImageOrientation>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RTImageOrientation>::s_vm = VM::MIN_6_MAX_6;
template<>
DATA_API const Keyword Attribute<Keyword::ImagePlanePixelSpacing>::s_keyword = Keyword::ImagePlanePixelSpacing;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePlanePixelSpacing>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagePlanePixelSpacing>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagePlanePixelSpacing>::s_name = "Image Plane Pixel Spacing";
template<>
DATA_API const VR Attribute<Keyword::ImagePlanePixelSpacing>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ImagePlanePixelSpacing>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RTImagePosition>::s_keyword = Keyword::RTImagePosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImagePosition>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImagePosition>::s_element = 0x0012;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImagePosition>::s_name = "RT Image Position";
template<>
DATA_API const VR Attribute<Keyword::RTImagePosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RTImagePosition>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RadiationMachineName>::s_keyword = Keyword::RadiationMachineName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMachineName>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMachineName>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiationMachineName>::s_name = "Radiation Machine Name";
template<>
DATA_API const VR Attribute<Keyword::RadiationMachineName>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::RadiationMachineName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiationMachineSAD>::s_keyword = Keyword::RadiationMachineSAD;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMachineSAD>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMachineSAD>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiationMachineSAD>::s_name = "Radiation Machine SAD";
template<>
DATA_API const VR Attribute<Keyword::RadiationMachineSAD>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadiationMachineSAD>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiationMachineSSD>::s_keyword = Keyword::RadiationMachineSSD;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMachineSSD>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationMachineSSD>::s_element = 0x0024;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiationMachineSSD>::s_name = "Radiation Machine SSD";
template<>
DATA_API const VR Attribute<Keyword::RadiationMachineSSD>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RadiationMachineSSD>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageSID>::s_keyword = Keyword::RTImageSID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageSID>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageSID>::s_element = 0x0026;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageSID>::s_name = "RT Image SID";
template<>
DATA_API const VR Attribute<Keyword::RTImageSID>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::RTImageSID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SourceToReferenceObjectDistance>::s_keyword =
    Keyword::SourceToReferenceObjectDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceToReferenceObjectDistance>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SourceToReferenceObjectDistance>::s_element = 0x0028;
template<>
DATA_API const std::string_view Attribute<Keyword::SourceToReferenceObjectDistance>::s_name =
    "Source to Reference Object Distance";
template<>
DATA_API const VR Attribute<Keyword::SourceToReferenceObjectDistance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::SourceToReferenceObjectDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FractionNumber>::s_keyword = Keyword::FractionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FractionNumber>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FractionNumber>::s_element = 0x0029;
template<>
DATA_API const std::string_view Attribute<Keyword::FractionNumber>::s_name = "Fraction Number";
template<>
DATA_API const VR Attribute<Keyword::FractionNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::FractionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExposureSequence>::s_keyword = Keyword::ExposureSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExposureSequence>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::ExposureSequence>::s_name = "Exposure Sequence";
template<>
DATA_API const VR Attribute<Keyword::ExposureSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ExposureSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MetersetExposure>::s_keyword = Keyword::MetersetExposure;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MetersetExposure>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MetersetExposure>::s_element = 0x0032;
template<>
DATA_API const std::string_view Attribute<Keyword::MetersetExposure>::s_name = "Meterset Exposure";
template<>
DATA_API const VR Attribute<Keyword::MetersetExposure>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::MetersetExposure>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DiaphragmPosition>::s_keyword = Keyword::DiaphragmPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiaphragmPosition>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DiaphragmPosition>::s_element = 0x0034;
template<>
DATA_API const std::string_view Attribute<Keyword::DiaphragmPosition>::s_name = "Diaphragm Position";
template<>
DATA_API const VR Attribute<Keyword::DiaphragmPosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DiaphragmPosition>::s_vm = VM::MIN_4_MAX_4;
template<>
DATA_API const Keyword Attribute<Keyword::FluenceMapSequence>::s_keyword = Keyword::FluenceMapSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluenceMapSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluenceMapSequence>::s_element = 0x0040;
template<>
DATA_API const std::string_view Attribute<Keyword::FluenceMapSequence>::s_name = "Fluence Map Sequence";
template<>
DATA_API const VR Attribute<Keyword::FluenceMapSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FluenceMapSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FluenceDataSource>::s_keyword = Keyword::FluenceDataSource;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluenceDataSource>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluenceDataSource>::s_element = 0x0041;
template<>
DATA_API const std::string_view Attribute<Keyword::FluenceDataSource>::s_name = "Fluence Data Source";
template<>
DATA_API const VR Attribute<Keyword::FluenceDataSource>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::FluenceDataSource>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FluenceDataScale>::s_keyword = Keyword::FluenceDataScale;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluenceDataScale>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FluenceDataScale>::s_element = 0x0042;
template<>
DATA_API const std::string_view Attribute<Keyword::FluenceDataScale>::s_name = "Fluence Data Scale";
template<>
DATA_API const VR Attribute<Keyword::FluenceDataScale>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::FluenceDataScale>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryFluenceModeSequence>::s_keyword = Keyword::PrimaryFluenceModeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryFluenceModeSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryFluenceModeSequence>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryFluenceModeSequence>::s_name =
    "Primary Fluence Mode Sequence";
template<>
DATA_API const VR Attribute<Keyword::PrimaryFluenceModeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PrimaryFluenceModeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SelectedFrameNumber>::s_keyword = Keyword::SelectedFrameNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SelectedFrameNumber>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SelectedFrameNumber>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::SelectedFrameNumber>::s_name = "Selected Frame Number";
template<>
DATA_API const VR Attribute<Keyword::SelectedFrameNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::SelectedFrameNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SelectedFrameFunctionalGroupsSequence>::s_keyword =
    Keyword::SelectedFrameFunctionalGroupsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SelectedFrameFunctionalGroupsSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SelectedFrameFunctionalGroupsSequence>::s_element = 0x0101;
template<>
DATA_API const std::string_view Attribute<Keyword::SelectedFrameFunctionalGroupsSequence>::s_name =
    "Selected Frame Functional Groups Sequence";
template<>
DATA_API const VR Attribute<Keyword::SelectedFrameFunctionalGroupsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SelectedFrameFunctionalGroupsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageFrameGeneralContentSequence>::s_keyword =
    Keyword::RTImageFrameGeneralContentSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameGeneralContentSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameGeneralContentSequence>::s_element = 0x0102;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageFrameGeneralContentSequence>::s_name =
    "RT Image Frame General Content Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageFrameGeneralContentSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageFrameGeneralContentSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageFrameContextSequence>::s_keyword =
    Keyword::RTImageFrameContextSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameContextSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameContextSequence>::s_element = 0x0103;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageFrameContextSequence>::s_name =
    "RT Image Frame Context Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageFrameContextSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageFrameContextSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageScopeSequence>::s_keyword = Keyword::RTImageScopeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageScopeSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageScopeSequence>::s_element = 0x0104;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageScopeSequence>::s_name = "RT Image Scope Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageScopeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageScopeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeamModifierCoordinatesPresenceFlag>::s_keyword =
    Keyword::BeamModifierCoordinatesPresenceFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamModifierCoordinatesPresenceFlag>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamModifierCoordinatesPresenceFlag>::s_element = 0x0105;
template<>
DATA_API const std::string_view Attribute<Keyword::BeamModifierCoordinatesPresenceFlag>::s_name =
    "Beam Modifier Coordinates Presence Flag";
template<>
DATA_API const VR Attribute<Keyword::BeamModifierCoordinatesPresenceFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::BeamModifierCoordinatesPresenceFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartCumulativeMeterset>::s_keyword = Keyword::StartCumulativeMeterset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartCumulativeMeterset>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartCumulativeMeterset>::s_element = 0x0106;
template<>
DATA_API const std::string_view Attribute<Keyword::StartCumulativeMeterset>::s_name = "Start Cumulative Meterset";
template<>
DATA_API const VR Attribute<Keyword::StartCumulativeMeterset>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::StartCumulativeMeterset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StopCumulativeMeterset>::s_keyword = Keyword::StopCumulativeMeterset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StopCumulativeMeterset>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StopCumulativeMeterset>::s_element = 0x0107;
template<>
DATA_API const std::string_view Attribute<Keyword::StopCumulativeMeterset>::s_name = "Stop Cumulative Meterset";
template<>
DATA_API const VR Attribute<Keyword::StopCumulativeMeterset>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::StopCumulativeMeterset>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageFrameImagingDevicePositionSequence>::s_keyword =
    Keyword::RTImageFrameImagingDevicePositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameImagingDevicePositionSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameImagingDevicePositionSequence>::s_element = 0x0109;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageFrameImagingDevicePositionSequence>::s_name =
    "RT Image Frame Imaging Device Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageFrameImagingDevicePositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageFrameImagingDevicePositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageFramekVRadiationAcquisitionSequence>::s_keyword =
    Keyword::RTImageFramekVRadiationAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFramekVRadiationAcquisitionSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFramekVRadiationAcquisitionSequence>::s_element = 0x010A;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageFramekVRadiationAcquisitionSequence>::s_name =
    "RT Image Frame kV Radiation Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageFramekVRadiationAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageFramekVRadiationAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageFrameMVRadiationAcquisitionSequence>::s_keyword =
    Keyword::RTImageFrameMVRadiationAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameMVRadiationAcquisitionSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameMVRadiationAcquisitionSequence>::s_element = 0x010B;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageFrameMVRadiationAcquisitionSequence>::s_name =
    "RT Image Frame MV Radiation Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageFrameMVRadiationAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageFrameMVRadiationAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTImageFrameRadiationAcquisitionSequence>::s_keyword =
    Keyword::RTImageFrameRadiationAcquisitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameRadiationAcquisitionSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTImageFrameRadiationAcquisitionSequence>::s_element = 0x010C;
template<>
DATA_API const std::string_view Attribute<Keyword::RTImageFrameRadiationAcquisitionSequence>::s_name =
    "RT Image Frame Radiation Acquisition Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTImageFrameRadiationAcquisitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTImageFrameRadiationAcquisitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImagingSourcePositionSequence>::s_keyword =
    Keyword::ImagingSourcePositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagingSourcePositionSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImagingSourcePositionSequence>::s_element = 0x010D;
template<>
DATA_API const std::string_view Attribute<Keyword::ImagingSourcePositionSequence>::s_name =
    "Imaging Source Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImagingSourcePositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImagingSourcePositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ImageReceptorPositionSequence>::s_keyword =
    Keyword::ImageReceptorPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageReceptorPositionSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageReceptorPositionSequence>::s_element = 0x010E;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageReceptorPositionSequence>::s_name =
    "Image Receptor Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::ImageReceptorPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ImageReceptorPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DevicePositionToEquipmentMappingMatrix>::s_keyword =
    Keyword::DevicePositionToEquipmentMappingMatrix;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DevicePositionToEquipmentMappingMatrix>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DevicePositionToEquipmentMappingMatrix>::s_element = 0x010F;
template<>
DATA_API const std::string_view Attribute<Keyword::DevicePositionToEquipmentMappingMatrix>::s_name =
    "Device Position to Equipment Mapping Matrix";
template<>
DATA_API const VR Attribute<Keyword::DevicePositionToEquipmentMappingMatrix>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::DevicePositionToEquipmentMappingMatrix>::s_vm = VM::MIN_16_MAX_16;
template<>
DATA_API const Keyword Attribute<Keyword::DevicePositionParameterSequence>::s_keyword =
    Keyword::DevicePositionParameterSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DevicePositionParameterSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DevicePositionParameterSequence>::s_element = 0x0110;
template<>
DATA_API const std::string_view Attribute<Keyword::DevicePositionParameterSequence>::s_name =
    "Device Position Parameter Sequence";
template<>
DATA_API const VR Attribute<Keyword::DevicePositionParameterSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DevicePositionParameterSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfAcquisitionDevices>::s_keyword = Keyword::NumberOfAcquisitionDevices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfAcquisitionDevices>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfAcquisitionDevices>::s_element = 0x0116;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfAcquisitionDevices>::s_name =
    "Number of Acquisition Devices";
template<>
DATA_API const VR Attribute<Keyword::NumberOfAcquisitionDevices>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfAcquisitionDevices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AcquisitionDeviceSequence>::s_keyword = Keyword::AcquisitionDeviceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceSequence>::s_group = 0x3002;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AcquisitionDeviceSequence>::s_element = 0x0117;
template<>
DATA_API const std::string_view Attribute<Keyword::AcquisitionDeviceSequence>::s_name = "Acquisition Device Sequence";
template<>
DATA_API const VR Attribute<Keyword::AcquisitionDeviceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AcquisitionDeviceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHType>::s_keyword = Keyword::DVHType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHType>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHType>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHType>::s_name = "DVH Type";
template<>
DATA_API const VR Attribute<Keyword::DVHType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DVHType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoseUnits>::s_keyword = Keyword::DoseUnits;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseUnits>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseUnits>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::DoseUnits>::s_name = "Dose Units";
template<>
DATA_API const VR Attribute<Keyword::DoseUnits>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DoseUnits>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoseType>::s_keyword = Keyword::DoseType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseType>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseType>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::DoseType>::s_name = "Dose Type";
template<>
DATA_API const VR Attribute<Keyword::DoseType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DoseType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SpatialTransformOfDose>::s_keyword = Keyword::SpatialTransformOfDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialTransformOfDose>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SpatialTransformOfDose>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::SpatialTransformOfDose>::s_name = "Spatial Transform of Dose";
template<>
DATA_API const VR Attribute<Keyword::SpatialTransformOfDose>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::SpatialTransformOfDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoseComment>::s_keyword = Keyword::DoseComment;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseComment>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseComment>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::DoseComment>::s_name = "Dose Comment";
template<>
DATA_API const VR Attribute<Keyword::DoseComment>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DoseComment>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NormalizationPoint>::s_keyword = Keyword::NormalizationPoint;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NormalizationPoint>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NormalizationPoint>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::NormalizationPoint>::s_name = "Normalization Point";
template<>
DATA_API const VR Attribute<Keyword::NormalizationPoint>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::NormalizationPoint>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::DoseSummationType>::s_keyword = Keyword::DoseSummationType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseSummationType>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseSummationType>::s_element = 0x000A;
template<>
DATA_API const std::string_view Attribute<Keyword::DoseSummationType>::s_name = "Dose Summation Type";
template<>
DATA_API const VR Attribute<Keyword::DoseSummationType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DoseSummationType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GridFrameOffsetVector>::s_keyword = Keyword::GridFrameOffsetVector;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridFrameOffsetVector>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GridFrameOffsetVector>::s_element = 0x000C;
template<>
DATA_API const std::string_view Attribute<Keyword::GridFrameOffsetVector>::s_name = "Grid Frame Offset Vector";
template<>
DATA_API const VR Attribute<Keyword::GridFrameOffsetVector>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GridFrameOffsetVector>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::DoseGridScaling>::s_keyword = Keyword::DoseGridScaling;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseGridScaling>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoseGridScaling>::s_element = 0x000E;
template<>
DATA_API const std::string_view Attribute<Keyword::DoseGridScaling>::s_name = "Dose Grid Scaling";
template<>
DATA_API const VR Attribute<Keyword::DoseGridScaling>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DoseGridScaling>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TissueHeterogeneityCorrection>::s_keyword =
    Keyword::TissueHeterogeneityCorrection;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TissueHeterogeneityCorrection>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TissueHeterogeneityCorrection>::s_element = 0x0014;
template<>
DATA_API const std::string_view Attribute<Keyword::TissueHeterogeneityCorrection>::s_name =
    "Tissue Heterogeneity Correction";
template<>
DATA_API const VR Attribute<Keyword::TissueHeterogeneityCorrection>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::TissueHeterogeneityCorrection>::s_vm = VM::MIN_1_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::DVHNormalizationPoint>::s_keyword = Keyword::DVHNormalizationPoint;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHNormalizationPoint>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHNormalizationPoint>::s_element = 0x0040;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHNormalizationPoint>::s_name = "DVH Normalization Point";
template<>
DATA_API const VR Attribute<Keyword::DVHNormalizationPoint>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHNormalizationPoint>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::DVHNormalizationDoseValue>::s_keyword = Keyword::DVHNormalizationDoseValue;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHNormalizationDoseValue>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHNormalizationDoseValue>::s_element = 0x0042;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHNormalizationDoseValue>::s_name = "DVH Normalization Dose Value";
template<>
DATA_API const VR Attribute<Keyword::DVHNormalizationDoseValue>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHNormalizationDoseValue>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHSequence>::s_keyword = Keyword::DVHSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHSequence>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHSequence>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHSequence>::s_name = "DVH Sequence";
template<>
DATA_API const VR Attribute<Keyword::DVHSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DVHSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHDoseScaling>::s_keyword = Keyword::DVHDoseScaling;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHDoseScaling>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHDoseScaling>::s_element = 0x0052;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHDoseScaling>::s_name = "DVH Dose Scaling";
template<>
DATA_API const VR Attribute<Keyword::DVHDoseScaling>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHDoseScaling>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHVolumeUnits>::s_keyword = Keyword::DVHVolumeUnits;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHVolumeUnits>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHVolumeUnits>::s_element = 0x0054;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHVolumeUnits>::s_name = "DVH Volume Units";
template<>
DATA_API const VR Attribute<Keyword::DVHVolumeUnits>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DVHVolumeUnits>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHNumberOfBins>::s_keyword = Keyword::DVHNumberOfBins;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHNumberOfBins>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHNumberOfBins>::s_element = 0x0056;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHNumberOfBins>::s_name = "DVH Number of Bins";
template<>
DATA_API const VR Attribute<Keyword::DVHNumberOfBins>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::DVHNumberOfBins>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHData>::s_keyword = Keyword::DVHData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHData>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHData>::s_element = 0x0058;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHData>::s_name = "DVH Data";
template<>
DATA_API const VR Attribute<Keyword::DVHData>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHData>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::DVHReferencedROISequence>::s_keyword = Keyword::DVHReferencedROISequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHReferencedROISequence>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHReferencedROISequence>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHReferencedROISequence>::s_name = "DVH Referenced ROI Sequence";
template<>
DATA_API const VR Attribute<Keyword::DVHReferencedROISequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DVHReferencedROISequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHMinimumDose>::s_keyword = Keyword::DVHMinimumDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHMinimumDose>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHMinimumDose>::s_element = 0x0070;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHMinimumDose>::s_name = "DVH Minimum Dose";
template<>
DATA_API const VR Attribute<Keyword::DVHMinimumDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHMinimumDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHMaximumDose>::s_keyword = Keyword::DVHMaximumDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHMaximumDose>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHMaximumDose>::s_element = 0x0072;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHMaximumDose>::s_name = "DVH Maximum Dose";
template<>
DATA_API const VR Attribute<Keyword::DVHMaximumDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHMaximumDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DVHMeanDose>::s_keyword = Keyword::DVHMeanDose;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHMeanDose>::s_group = 0x3004;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DVHMeanDose>::s_element = 0x0074;
template<>
DATA_API const std::string_view Attribute<Keyword::DVHMeanDose>::s_name = "DVH Mean Dose";
template<>
DATA_API const VR Attribute<Keyword::DVHMeanDose>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::DVHMeanDose>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedFrameOfReferenceUID>::s_keyword =
    Keyword::ReferencedFrameOfReferenceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFrameOfReferenceUID>::s_group = 0x3006;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFrameOfReferenceUID>::s_element = 0x0024;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedFrameOfReferenceUID>::s_name =
    "Referenced Frame of Reference UID";
template<>
DATA_API const VR Attribute<Keyword::ReferencedFrameOfReferenceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::ReferencedFrameOfReferenceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedROINumber>::s_keyword = Keyword::ReferencedROINumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedROINumber>::s_group = 0x3006;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedROINumber>::s_element = 0x0084;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedROINumber>::s_name = "Referenced ROI Number";
template<>
DATA_API const VR Attribute<Keyword::ReferencedROINumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ReferencedROINumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FrameOfReferenceTransformationComment>::s_keyword =
    Keyword::FrameOfReferenceTransformationComment;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfReferenceTransformationComment>::s_group = 0x3006;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FrameOfReferenceTransformationComment>::s_element = 0x00C8;
template<>
DATA_API const std::string_view Attribute<Keyword::FrameOfReferenceTransformationComment>::s_name =
    "Frame of Reference Transformation Comment";
template<>
DATA_API const VR Attribute<Keyword::FrameOfReferenceTransformationComment>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::FrameOfReferenceTransformationComment>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientLocationCoordinatesSequence>::s_keyword =
    Keyword::PatientLocationCoordinatesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientLocationCoordinatesSequence>::s_group = 0x3006;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientLocationCoordinatesSequence>::s_element = 0x00C9;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientLocationCoordinatesSequence>::s_name =
    "Patient Location Coordinates Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientLocationCoordinatesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientLocationCoordinatesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientLocationCoordinatesCodeSequence>::s_keyword =
    Keyword::PatientLocationCoordinatesCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientLocationCoordinatesCodeSequence>::s_group = 0x3006;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientLocationCoordinatesCodeSequence>::s_element = 0x00CA;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientLocationCoordinatesCodeSequence>::s_name =
    "Patient Location Coordinates Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientLocationCoordinatesCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientLocationCoordinatesCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSupportPositionSequence>::s_keyword =
    Keyword::PatientSupportPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionSequence>::s_group = 0x3006;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionSequence>::s_element = 0x00CB;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSupportPositionSequence>::s_name =
    "Patient Support Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientSupportPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientSupportPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::CurrentFractionNumber>::s_keyword = Keyword::CurrentFractionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CurrentFractionNumber>::s_group = 0x3008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::CurrentFractionNumber>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::CurrentFractionNumber>::s_name = "Current Fraction Number";
template<>
DATA_API const VR Attribute<Keyword::CurrentFractionNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::CurrentFractionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedTreatmentRecordSequence>::s_keyword =
    Keyword::ReferencedTreatmentRecordSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTreatmentRecordSequence>::s_group = 0x3008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTreatmentRecordSequence>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedTreatmentRecordSequence>::s_name =
    "Referenced Treatment Record Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedTreatmentRecordSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedTreatmentRecordSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnhancedRTBeamLimitingDeviceSequence>::s_keyword =
    Keyword::EnhancedRTBeamLimitingDeviceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedRTBeamLimitingDeviceSequence>::s_group = 0x3008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedRTBeamLimitingDeviceSequence>::s_element = 0x00A1;
template<>
DATA_API const std::string_view Attribute<Keyword::EnhancedRTBeamLimitingDeviceSequence>::s_name =
    "Enhanced RT Beam Limiting Device Sequence";
template<>
DATA_API const VR Attribute<Keyword::EnhancedRTBeamLimitingDeviceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EnhancedRTBeamLimitingDeviceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnhancedRTBeamLimitingOpeningSequence>::s_keyword =
    Keyword::EnhancedRTBeamLimitingOpeningSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedRTBeamLimitingOpeningSequence>::s_group = 0x3008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedRTBeamLimitingOpeningSequence>::s_element = 0x00A2;
template<>
DATA_API const std::string_view Attribute<Keyword::EnhancedRTBeamLimitingOpeningSequence>::s_name =
    "Enhanced RT Beam Limiting Opening Sequence";
template<>
DATA_API const VR Attribute<Keyword::EnhancedRTBeamLimitingOpeningSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::EnhancedRTBeamLimitingOpeningSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>::s_keyword =
    Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>::s_group = 0x3008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>::s_element = 0x00A3;
template<>
DATA_API const std::string_view Attribute<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>::s_name =
    "Enhanced RT Beam Limiting Device Definition Flag";
template<>
DATA_API const VR Attribute<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterOpeningExtents>::s_keyword =
    Keyword::ParallelRTBeamDelimiterOpeningExtents;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterOpeningExtents>::s_group = 0x3008;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterOpeningExtents>::s_element = 0x00A4;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterOpeningExtents>::s_name =
    "Parallel RT Beam Delimiter Opening Extents";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterOpeningExtents>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterOpeningExtents>::s_vm = VM::MIN_2_MAX_2N;
template<>
DATA_API const Keyword Attribute<Keyword::RTPlanLabel>::s_keyword = Keyword::RTPlanLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTPlanLabel>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTPlanLabel>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::RTPlanLabel>::s_name = "RT Plan Label";
template<>
DATA_API const VR Attribute<Keyword::RTPlanLabel>::s_vr = VR::SH;
template<>
DATA_API const VM Attribute<Keyword::RTPlanLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrimaryDosimeterUnit>::s_keyword = Keyword::PrimaryDosimeterUnit;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryDosimeterUnit>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrimaryDosimeterUnit>::s_element = 0x00B3;
template<>
DATA_API const std::string_view Attribute<Keyword::PrimaryDosimeterUnit>::s_name = "Primary Dosimeter Unit";
template<>
DATA_API const VR Attribute<Keyword::PrimaryDosimeterUnit>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PrimaryDosimeterUnit>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeamLimitingDeviceSequence>::s_keyword = Keyword::BeamLimitingDeviceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamLimitingDeviceSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamLimitingDeviceSequence>::s_element = 0x00B6;
template<>
DATA_API const std::string_view Attribute<Keyword::BeamLimitingDeviceSequence>::s_name =
    "Beam Limiting Device Sequence";
template<>
DATA_API const VR Attribute<Keyword::BeamLimitingDeviceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BeamLimitingDeviceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfBlocks>::s_keyword = Keyword::NumberOfBlocks;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfBlocks>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfBlocks>::s_element = 0x00F0;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfBlocks>::s_name = "Number of Blocks";
template<>
DATA_API const VR Attribute<Keyword::NumberOfBlocks>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfBlocks>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BlockSequence>::s_keyword = Keyword::BlockSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlockSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BlockSequence>::s_element = 0x00F4;
template<>
DATA_API const std::string_view Attribute<Keyword::BlockSequence>::s_name = "Block Sequence";
template<>
DATA_API const VR Attribute<Keyword::BlockSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::BlockSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApplicatorSequence>::s_keyword = Keyword::ApplicatorSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicatorSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApplicatorSequence>::s_element = 0x0107;
template<>
DATA_API const std::string_view Attribute<Keyword::ApplicatorSequence>::s_name = "Applicator Sequence";
template<>
DATA_API const VR Attribute<Keyword::ApplicatorSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ApplicatorSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GantryAngle>::s_keyword = Keyword::GantryAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryAngle>::s_element = 0x011E;
template<>
DATA_API const std::string_view Attribute<Keyword::GantryAngle>::s_name = "Gantry Angle";
template<>
DATA_API const VR Attribute<Keyword::GantryAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::GantryAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeamLimitingDeviceAngle>::s_keyword = Keyword::BeamLimitingDeviceAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamLimitingDeviceAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamLimitingDeviceAngle>::s_element = 0x0120;
template<>
DATA_API const std::string_view Attribute<Keyword::BeamLimitingDeviceAngle>::s_name = "Beam Limiting Device Angle";
template<>
DATA_API const VR Attribute<Keyword::BeamLimitingDeviceAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::BeamLimitingDeviceAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSupportAngle>::s_keyword = Keyword::PatientSupportAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportAngle>::s_element = 0x0122;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSupportAngle>::s_name = "Patient Support Angle";
template<>
DATA_API const VR Attribute<Keyword::PatientSupportAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::PatientSupportAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopEccentricAxisDistance>::s_keyword =
    Keyword::TableTopEccentricAxisDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopEccentricAxisDistance>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopEccentricAxisDistance>::s_element = 0x0124;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopEccentricAxisDistance>::s_name =
    "Table Top Eccentric Axis Distance";
template<>
DATA_API const VR Attribute<Keyword::TableTopEccentricAxisDistance>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableTopEccentricAxisDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopEccentricAngle>::s_keyword = Keyword::TableTopEccentricAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopEccentricAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopEccentricAngle>::s_element = 0x0125;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopEccentricAngle>::s_name = "Table Top Eccentric Angle";
template<>
DATA_API const VR Attribute<Keyword::TableTopEccentricAngle>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableTopEccentricAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopVerticalPosition>::s_keyword = Keyword::TableTopVerticalPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopVerticalPosition>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopVerticalPosition>::s_element = 0x0128;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopVerticalPosition>::s_name = "Table Top Vertical Position";
template<>
DATA_API const VR Attribute<Keyword::TableTopVerticalPosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableTopVerticalPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopLongitudinalPosition>::s_keyword =
    Keyword::TableTopLongitudinalPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopLongitudinalPosition>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopLongitudinalPosition>::s_element = 0x0129;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopLongitudinalPosition>::s_name =
    "Table Top Longitudinal Position";
template<>
DATA_API const VR Attribute<Keyword::TableTopLongitudinalPosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableTopLongitudinalPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopLateralPosition>::s_keyword = Keyword::TableTopLateralPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopLateralPosition>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopLateralPosition>::s_element = 0x012A;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopLateralPosition>::s_name = "Table Top Lateral Position";
template<>
DATA_API const VR Attribute<Keyword::TableTopLateralPosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::TableTopLateralPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::IsocenterPosition>::s_keyword = Keyword::IsocenterPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IsocenterPosition>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::IsocenterPosition>::s_element = 0x012C;
template<>
DATA_API const std::string_view Attribute<Keyword::IsocenterPosition>::s_name = "Isocenter Position";
template<>
DATA_API const VR Attribute<Keyword::IsocenterPosition>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::IsocenterPosition>::s_vm = VM::MIN_3_MAX_3;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopPitchAngle>::s_keyword = Keyword::TableTopPitchAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopPitchAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopPitchAngle>::s_element = 0x0140;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopPitchAngle>::s_name = "Table Top Pitch Angle";
template<>
DATA_API const VR Attribute<Keyword::TableTopPitchAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableTopPitchAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TableTopRollAngle>::s_keyword = Keyword::TableTopRollAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopRollAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TableTopRollAngle>::s_element = 0x0144;
template<>
DATA_API const std::string_view Attribute<Keyword::TableTopRollAngle>::s_name = "Table Top Roll Angle";
template<>
DATA_API const VR Attribute<Keyword::TableTopRollAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::TableTopRollAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GantryPitchAngle>::s_keyword = Keyword::GantryPitchAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryPitchAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GantryPitchAngle>::s_element = 0x014A;
template<>
DATA_API const std::string_view Attribute<Keyword::GantryPitchAngle>::s_name = "Gantry Pitch Angle";
template<>
DATA_API const VR Attribute<Keyword::GantryPitchAngle>::s_vr = VR::FL;
template<>
DATA_API const VM Attribute<Keyword::GantryPitchAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneralAccessorySequence>::s_keyword = Keyword::GeneralAccessorySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneralAccessorySequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneralAccessorySequence>::s_element = 0x0420;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneralAccessorySequence>::s_name = "General Accessory Sequence";
template<>
DATA_API const VR Attribute<Keyword::GeneralAccessorySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::GeneralAccessorySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedDefinedDeviceIndex>::s_keyword =
    Keyword::ReferencedDefinedDeviceIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDefinedDeviceIndex>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDefinedDeviceIndex>::s_element = 0x0602;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedDefinedDeviceIndex>::s_name =
    "Referenced Defined Device Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedDefinedDeviceIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedDefinedDeviceIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TreatmentPositionIndex>::s_keyword = Keyword::TreatmentPositionIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentPositionIndex>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentPositionIndex>::s_element = 0x0606;
template<>
DATA_API const std::string_view Attribute<Keyword::TreatmentPositionIndex>::s_name = "Treatment Position Index";
template<>
DATA_API const VR Attribute<Keyword::TreatmentPositionIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::TreatmentPositionIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedDeviceIndex>::s_keyword = Keyword::ReferencedDeviceIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDeviceIndex>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedDeviceIndex>::s_element = 0x0607;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedDeviceIndex>::s_name = "Referenced Device Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedDeviceIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedDeviceIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedTreatmentPositionIndex>::s_keyword =
    Keyword::ReferencedTreatmentPositionIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTreatmentPositionIndex>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedTreatmentPositionIndex>::s_element = 0x060B;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedTreatmentPositionIndex>::s_name =
    "Referenced Treatment Position Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedTreatmentPositionIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedTreatmentPositionIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedRTAccessoryHolderDeviceIndex>::s_keyword =
    Keyword::ReferencedRTAccessoryHolderDeviceIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRTAccessoryHolderDeviceIndex>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRTAccessoryHolderDeviceIndex>::s_element = 0x060E;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedRTAccessoryHolderDeviceIndex>::s_name =
    "Referenced RT Accessory Holder Device Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedRTAccessoryHolderDeviceIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedRTAccessoryHolderDeviceIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTAccessoryHolderSlotID>::s_keyword = Keyword::RTAccessoryHolderSlotID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTAccessoryHolderSlotID>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTAccessoryHolderSlotID>::s_element = 0x0611;
template<>
DATA_API const std::string_view Attribute<Keyword::RTAccessoryHolderSlotID>::s_name = "RT Accessory Holder Slot ID";
template<>
DATA_API const VR Attribute<Keyword::RTAccessoryHolderSlotID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RTAccessoryHolderSlotID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTAccessorySlotDistance>::s_keyword = Keyword::RTAccessorySlotDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTAccessorySlotDistance>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTAccessorySlotDistance>::s_element = 0x0613;
template<>
DATA_API const std::string_view Attribute<Keyword::RTAccessorySlotDistance>::s_name = "RT Accessory Slot Distance";
template<>
DATA_API const VR Attribute<Keyword::RTAccessorySlotDistance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RTAccessorySlotDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTAccessoryDeviceSlotID>::s_keyword = Keyword::RTAccessoryDeviceSlotID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTAccessoryDeviceSlotID>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTAccessoryDeviceSlotID>::s_element = 0x0615;
template<>
DATA_API const std::string_view Attribute<Keyword::RTAccessoryDeviceSlotID>::s_name = "RT Accessory Device Slot ID";
template<>
DATA_API const VR Attribute<Keyword::RTAccessoryDeviceSlotID>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::RTAccessoryDeviceSlotID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TreatmentPositionSequence>::s_keyword = Keyword::TreatmentPositionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentPositionSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentPositionSequence>::s_element = 0x063F;
template<>
DATA_API const std::string_view Attribute<Keyword::TreatmentPositionSequence>::s_name = "Treatment Position Sequence";
template<>
DATA_API const VR Attribute<Keyword::TreatmentPositionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TreatmentPositionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfRTBeamLimitingDevices>::s_keyword =
    Keyword::NumberOfRTBeamLimitingDevices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfRTBeamLimitingDevices>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfRTBeamLimitingDevices>::s_element = 0x0641;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfRTBeamLimitingDevices>::s_name =
    "Number of RT Beam Limiting Devices";
template<>
DATA_API const VR Attribute<Keyword::NumberOfRTBeamLimitingDevices>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfRTBeamLimitingDevices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamLimitingDeviceProximalDistance>::s_keyword =
    Keyword::RTBeamLimitingDeviceProximalDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceProximalDistance>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceProximalDistance>::s_element = 0x0642;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamLimitingDeviceProximalDistance>::s_name =
    "RT Beam Limiting Device Proximal Distance";
template<>
DATA_API const VR Attribute<Keyword::RTBeamLimitingDeviceProximalDistance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RTBeamLimitingDeviceProximalDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamLimitingDeviceDistalDistance>::s_keyword =
    Keyword::RTBeamLimitingDeviceDistalDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceDistalDistance>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceDistalDistance>::s_element = 0x0643;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamLimitingDeviceDistalDistance>::s_name =
    "RT Beam Limiting Device Distal Distance";
template<>
DATA_API const VR Attribute<Keyword::RTBeamLimitingDeviceDistalDistance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RTBeamLimitingDeviceDistalDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>::s_keyword =
    Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>::s_group =
    0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>::s_element =
    0x0644;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>::s_name =
    "Parallel RT Beam Delimiter Device Orientation Label Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::BeamModifierOrientationAngle>::s_keyword =
    Keyword::BeamModifierOrientationAngle;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamModifierOrientationAngle>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::BeamModifierOrientationAngle>::s_element = 0x0645;
template<>
DATA_API const std::string_view Attribute<Keyword::BeamModifierOrientationAngle>::s_name =
    "Beam Modifier Orientation Angle";
template<>
DATA_API const VR Attribute<Keyword::BeamModifierOrientationAngle>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::BeamModifierOrientationAngle>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FixedRTBeamDelimiterDeviceSequence>::s_keyword =
    Keyword::FixedRTBeamDelimiterDeviceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FixedRTBeamDelimiterDeviceSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FixedRTBeamDelimiterDeviceSequence>::s_element = 0x0646;
template<>
DATA_API const std::string_view Attribute<Keyword::FixedRTBeamDelimiterDeviceSequence>::s_name =
    "Fixed RT Beam Delimiter Device Sequence";
template<>
DATA_API const VR Attribute<Keyword::FixedRTBeamDelimiterDeviceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::FixedRTBeamDelimiterDeviceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterDeviceSequence>::s_keyword =
    Keyword::ParallelRTBeamDelimiterDeviceSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterDeviceSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterDeviceSequence>::s_element = 0x0647;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterDeviceSequence>::s_name =
    "Parallel RT Beam Delimiter Device Sequence";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterDeviceSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterDeviceSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfParallelRTBeamDelimiters>::s_keyword =
    Keyword::NumberOfParallelRTBeamDelimiters;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfParallelRTBeamDelimiters>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfParallelRTBeamDelimiters>::s_element = 0x0648;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfParallelRTBeamDelimiters>::s_name =
    "Number of Parallel RT Beam Delimiters";
template<>
DATA_API const VR Attribute<Keyword::NumberOfParallelRTBeamDelimiters>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfParallelRTBeamDelimiters>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterBoundaries>::s_keyword =
    Keyword::ParallelRTBeamDelimiterBoundaries;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterBoundaries>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterBoundaries>::s_element = 0x0649;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterBoundaries>::s_name =
    "Parallel RT Beam Delimiter Boundaries";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterBoundaries>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterBoundaries>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterPositions>::s_keyword =
    Keyword::ParallelRTBeamDelimiterPositions;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterPositions>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterPositions>::s_element = 0x064A;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterPositions>::s_name =
    "Parallel RT Beam Delimiter Positions";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterPositions>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterPositions>::s_vm = VM::MIN_2_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamLimitingDeviceOffset>::s_keyword = Keyword::RTBeamLimitingDeviceOffset;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceOffset>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceOffset>::s_element = 0x064B;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamLimitingDeviceOffset>::s_name =
    "RT Beam Limiting Device Offset";
template<>
DATA_API const VR Attribute<Keyword::RTBeamLimitingDeviceOffset>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RTBeamLimitingDeviceOffset>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamDelimiterGeometrySequence>::s_keyword =
    Keyword::RTBeamDelimiterGeometrySequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamDelimiterGeometrySequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamDelimiterGeometrySequence>::s_element = 0x064C;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamDelimiterGeometrySequence>::s_name =
    "RT Beam Delimiter Geometry Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTBeamDelimiterGeometrySequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTBeamDelimiterGeometrySequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamLimitingDeviceDefinitionSequence>::s_keyword =
    Keyword::RTBeamLimitingDeviceDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceDefinitionSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceDefinitionSequence>::s_element = 0x064D;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamLimitingDeviceDefinitionSequence>::s_name =
    "RT Beam Limiting Device Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTBeamLimitingDeviceDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTBeamLimitingDeviceDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterOpeningMode>::s_keyword =
    Keyword::ParallelRTBeamDelimiterOpeningMode;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterOpeningMode>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterOpeningMode>::s_element = 0x064E;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterOpeningMode>::s_name =
    "Parallel RT Beam Delimiter Opening Mode";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterOpeningMode>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterOpeningMode>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ParallelRTBeamDelimiterLeafMountingSide>::s_keyword =
    Keyword::ParallelRTBeamDelimiterLeafMountingSide;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterLeafMountingSide>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ParallelRTBeamDelimiterLeafMountingSide>::s_element = 0x064F;
template<>
DATA_API const std::string_view Attribute<Keyword::ParallelRTBeamDelimiterLeafMountingSide>::s_name =
    "Parallel RT Beam Delimiter Leaf Mounting Side";
template<>
DATA_API const VR Attribute<Keyword::ParallelRTBeamDelimiterLeafMountingSide>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ParallelRTBeamDelimiterLeafMountingSide>::s_vm = VM::MIN_1_MAX_N;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamLimitingDeviceOpeningSequence>::s_keyword =
    Keyword::RTBeamLimitingDeviceOpeningSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceOpeningSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamLimitingDeviceOpeningSequence>::s_element = 0x0656;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamLimitingDeviceOpeningSequence>::s_name =
    "RT Beam Limiting Device Opening Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTBeamLimitingDeviceOpeningSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTBeamLimitingDeviceOpeningSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RadiationDosimeterUnitSequence>::s_keyword =
    Keyword::RadiationDosimeterUnitSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationDosimeterUnitSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RadiationDosimeterUnitSequence>::s_element = 0x0658;
template<>
DATA_API const std::string_view Attribute<Keyword::RadiationDosimeterUnitSequence>::s_name =
    "Radiation Dosimeter Unit Sequence";
template<>
DATA_API const VR Attribute<Keyword::RadiationDosimeterUnitSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RadiationDosimeterUnitSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>::s_keyword =
    Keyword::RTDeviceDistanceReferenceLocationCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>::s_element = 0x0659;
template<>
DATA_API const std::string_view Attribute<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>::s_name =
    "RT Device Distance Reference Location Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSupportPositionParameterSequence>::s_keyword =
    Keyword::PatientSupportPositionParameterSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionParameterSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionParameterSequence>::s_element = 0x065B;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSupportPositionParameterSequence>::s_name =
    "Patient Support Position Parameter Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientSupportPositionParameterSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientSupportPositionParameterSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSupportPositionSpecificationMethod>::s_keyword =
    Keyword::PatientSupportPositionSpecificationMethod;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionSpecificationMethod>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionSpecificationMethod>::s_element = 0x065C;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSupportPositionSpecificationMethod>::s_name =
    "Patient Support Position Specification Method";
template<>
DATA_API const VR Attribute<Keyword::PatientSupportPositionSpecificationMethod>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::PatientSupportPositionSpecificationMethod>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSupportPositionDeviceParameterSequence>::s_keyword =
    Keyword::PatientSupportPositionDeviceParameterSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionDeviceParameterSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportPositionDeviceParameterSequence>::s_element = 0x065D;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSupportPositionDeviceParameterSequence>::s_name =
    "Patient Support Position Device Parameter Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientSupportPositionDeviceParameterSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientSupportPositionDeviceParameterSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceOrderIndex>::s_keyword = Keyword::DeviceOrderIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceOrderIndex>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceOrderIndex>::s_element = 0x065E;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceOrderIndex>::s_name = "Device Order Index";
template<>
DATA_API const VR Attribute<Keyword::DeviceOrderIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::DeviceOrderIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::GeneralAccessoryDefinitionSequence>::s_keyword =
    Keyword::GeneralAccessoryDefinitionSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneralAccessoryDefinitionSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::GeneralAccessoryDefinitionSequence>::s_element = 0x0671;
template<>
DATA_API const std::string_view Attribute<Keyword::GeneralAccessoryDefinitionSequence>::s_name =
    "General Accessory Definition Sequence";
template<>
DATA_API const VR Attribute<Keyword::GeneralAccessoryDefinitionSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::GeneralAccessoryDefinitionSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfGeneralAccessories>::s_keyword = Keyword::NumberOfGeneralAccessories;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfGeneralAccessories>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfGeneralAccessories>::s_element = 0x0672;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfGeneralAccessories>::s_name =
    "Number of General Accessories";
template<>
DATA_API const VR Attribute<Keyword::NumberOfGeneralAccessories>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfGeneralAccessories>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EquipmentFrameOfReferenceUID>::s_keyword =
    Keyword::EquipmentFrameOfReferenceUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquipmentFrameOfReferenceUID>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EquipmentFrameOfReferenceUID>::s_element = 0x0675;
template<>
DATA_API const std::string_view Attribute<Keyword::EquipmentFrameOfReferenceUID>::s_name =
    "Equipment Frame of Reference UID";
template<>
DATA_API const VR Attribute<Keyword::EquipmentFrameOfReferenceUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::EquipmentFrameOfReferenceUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientSupportDevicesSequence>::s_keyword =
    Keyword::PatientSupportDevicesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportDevicesSequence>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientSupportDevicesSequence>::s_element = 0x0686;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientSupportDevicesSequence>::s_name =
    "Patient Support Devices Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientSupportDevicesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientSupportDevicesSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfPatientSupportDevices>::s_keyword =
    Keyword::NumberOfPatientSupportDevices;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPatientSupportDevices>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfPatientSupportDevices>::s_element = 0x0687;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfPatientSupportDevices>::s_name =
    "Number of Patient Support Devices";
template<>
DATA_API const VR Attribute<Keyword::NumberOfPatientSupportDevices>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfPatientSupportDevices>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTBeamModifierDefinitionDistance>::s_keyword =
    Keyword::RTBeamModifierDefinitionDistance;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamModifierDefinitionDistance>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTBeamModifierDefinitionDistance>::s_element = 0x0688;
template<>
DATA_API const std::string_view Attribute<Keyword::RTBeamModifierDefinitionDistance>::s_name =
    "RT Beam Modifier Definition Distance";
template<>
DATA_API const VR Attribute<Keyword::RTBeamModifierDefinitionDistance>::s_vr = VR::FD;
template<>
DATA_API const VM Attribute<Keyword::RTBeamModifierDefinitionDistance>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TreatmentSessionUID>::s_keyword = Keyword::TreatmentSessionUID;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentSessionUID>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentSessionUID>::s_element = 0x0700;
template<>
DATA_API const std::string_view Attribute<Keyword::TreatmentSessionUID>::s_name = "Treatment Session UID";
template<>
DATA_API const VR Attribute<Keyword::TreatmentSessionUID>::s_vr = VR::UI;
template<>
DATA_API const VM Attribute<Keyword::TreatmentSessionUID>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::RTRadiationSetDeliveryNumber>::s_keyword =
    Keyword::RTRadiationSetDeliveryNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTRadiationSetDeliveryNumber>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::RTRadiationSetDeliveryNumber>::s_element = 0x0704;
template<>
DATA_API const std::string_view Attribute<Keyword::RTRadiationSetDeliveryNumber>::s_name =
    "RT Radiation Set Delivery Number";
template<>
DATA_API const VR Attribute<Keyword::RTRadiationSetDeliveryNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::RTRadiationSetDeliveryNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ClinicalFractionNumber>::s_keyword = Keyword::ClinicalFractionNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalFractionNumber>::s_group = 0x300A;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ClinicalFractionNumber>::s_element = 0x0705;
template<>
DATA_API const std::string_view Attribute<Keyword::ClinicalFractionNumber>::s_name = "Clinical Fraction Number";
template<>
DATA_API const VR Attribute<Keyword::ClinicalFractionNumber>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ClinicalFractionNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedRTPlanSequence>::s_keyword = Keyword::ReferencedRTPlanSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRTPlanSequence>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedRTPlanSequence>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedRTPlanSequence>::s_name = "Referenced RT Plan Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedRTPlanSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedRTPlanSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedBeamSequence>::s_keyword = Keyword::ReferencedBeamSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedBeamSequence>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedBeamSequence>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedBeamSequence>::s_name = "Referenced Beam Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedBeamSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedBeamSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedBeamNumber>::s_keyword = Keyword::ReferencedBeamNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedBeamNumber>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedBeamNumber>::s_element = 0x0006;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedBeamNumber>::s_name = "Referenced Beam Number";
template<>
DATA_API const VR Attribute<Keyword::ReferencedBeamNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ReferencedBeamNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::StartCumulativeMetersetWeight>::s_keyword =
    Keyword::StartCumulativeMetersetWeight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartCumulativeMetersetWeight>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::StartCumulativeMetersetWeight>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::StartCumulativeMetersetWeight>::s_name =
    "Start Cumulative Meterset Weight";
template<>
DATA_API const VR Attribute<Keyword::StartCumulativeMetersetWeight>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::StartCumulativeMetersetWeight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EndCumulativeMetersetWeight>::s_keyword =
    Keyword::EndCumulativeMetersetWeight;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndCumulativeMetersetWeight>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EndCumulativeMetersetWeight>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::EndCumulativeMetersetWeight>::s_name =
    "End Cumulative Meterset Weight";
template<>
DATA_API const VR Attribute<Keyword::EndCumulativeMetersetWeight>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::EndCumulativeMetersetWeight>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedFractionGroupSequence>::s_keyword =
    Keyword::ReferencedFractionGroupSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFractionGroupSequence>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFractionGroupSequence>::s_element = 0x0020;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedFractionGroupSequence>::s_name =
    "Referenced Fraction Group Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedFractionGroupSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedFractionGroupSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedFractionGroupNumber>::s_keyword =
    Keyword::ReferencedFractionGroupNumber;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFractionGroupNumber>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedFractionGroupNumber>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedFractionGroupNumber>::s_name =
    "Referenced Fraction Group Number";
template<>
DATA_API const VR Attribute<Keyword::ReferencedFractionGroupNumber>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ReferencedFractionGroupNumber>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedStructureSetSequence>::s_keyword =
    Keyword::ReferencedStructureSetSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedStructureSetSequence>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedStructureSetSequence>::s_element = 0x0060;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedStructureSetSequence>::s_name =
    "Referenced Structure Set Sequence";
template<>
DATA_API const VR Attribute<Keyword::ReferencedStructureSetSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ReferencedStructureSetSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PrescriptionOverviewSequence>::s_keyword =
    Keyword::PrescriptionOverviewSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrescriptionOverviewSequence>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PrescriptionOverviewSequence>::s_element = 0x0114;
template<>
DATA_API const std::string_view Attribute<Keyword::PrescriptionOverviewSequence>::s_name =
    "Prescription Overview Sequence";
template<>
DATA_API const VR Attribute<Keyword::PrescriptionOverviewSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PrescriptionOverviewSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanOverviewSequence>::s_keyword = Keyword::PlanOverviewSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanOverviewSequence>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanOverviewSequence>::s_element = 0x0116;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanOverviewSequence>::s_name = "Plan Overview Sequence";
template<>
DATA_API const VR Attribute<Keyword::PlanOverviewSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PlanOverviewSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PlanOverviewIndex>::s_keyword = Keyword::PlanOverviewIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanOverviewIndex>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PlanOverviewIndex>::s_element = 0x0117;
template<>
DATA_API const std::string_view Attribute<Keyword::PlanOverviewIndex>::s_name = "Plan Overview Index";
template<>
DATA_API const VR Attribute<Keyword::PlanOverviewIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::PlanOverviewIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReferencedPlanOverviewIndex>::s_keyword =
    Keyword::ReferencedPlanOverviewIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPlanOverviewIndex>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReferencedPlanOverviewIndex>::s_element = 0x0118;
template<>
DATA_API const std::string_view Attribute<Keyword::ReferencedPlanOverviewIndex>::s_name =
    "Referenced Plan Overview Index";
template<>
DATA_API const VR Attribute<Keyword::ReferencedPlanOverviewIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ReferencedPlanOverviewIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfFractionsIncluded>::s_keyword = Keyword::NumberOfFractionsIncluded;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFractionsIncluded>::s_group = 0x300C;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFractionsIncluded>::s_element = 0x0119;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfFractionsIncluded>::s_name = "Number of Fractions Included";
template<>
DATA_API const VR Attribute<Keyword::NumberOfFractionsIncluded>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::NumberOfFractionsIncluded>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ApprovalStatus>::s_keyword = Keyword::ApprovalStatus;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApprovalStatus>::s_group = 0x300E;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ApprovalStatus>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::ApprovalStatus>::s_name = "Approval Status";
template<>
DATA_API const VR Attribute<Keyword::ApprovalStatus>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::ApprovalStatus>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReviewDate>::s_keyword = Keyword::ReviewDate;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReviewDate>::s_group = 0x300E;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReviewDate>::s_element = 0x0004;
template<>
DATA_API const std::string_view Attribute<Keyword::ReviewDate>::s_name = "Review Date";
template<>
DATA_API const VR Attribute<Keyword::ReviewDate>::s_vr = VR::DA;
template<>
DATA_API const VM Attribute<Keyword::ReviewDate>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReviewTime>::s_keyword = Keyword::ReviewTime;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReviewTime>::s_group = 0x300E;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReviewTime>::s_element = 0x0005;
template<>
DATA_API const std::string_view Attribute<Keyword::ReviewTime>::s_name = "Review Time";
template<>
DATA_API const VR Attribute<Keyword::ReviewTime>::s_vr = VR::TM;
template<>
DATA_API const VM Attribute<Keyword::ReviewTime>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ReviewerName>::s_keyword = Keyword::ReviewerName;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReviewerName>::s_group = 0x300E;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ReviewerName>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::ReviewerName>::s_name = "Reviewer Name";
template<>
DATA_API const VR Attribute<Keyword::ReviewerName>::s_vr = VR::PN;
template<>
DATA_API const VM Attribute<Keyword::ReviewerName>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::AuthorIdentificationSequence>::s_keyword =
    Keyword::AuthorIdentificationSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AuthorIdentificationSequence>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::AuthorIdentificationSequence>::s_element = 0x0019;
template<>
DATA_API const std::string_view Attribute<Keyword::AuthorIdentificationSequence>::s_name =
    "Author Identification Sequence";
template<>
DATA_API const VR Attribute<Keyword::AuthorIdentificationSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::AuthorIdentificationSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ManufacturerModelVersion>::s_keyword = Keyword::ManufacturerModelVersion;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerModelVersion>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerModelVersion>::s_element = 0x001A;
template<>
DATA_API const std::string_view Attribute<Keyword::ManufacturerModelVersion>::s_name = "Manufacturer's Model Version";
template<>
DATA_API const VR Attribute<Keyword::ManufacturerModelVersion>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::ManufacturerModelVersion>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceAlternateIdentifier>::s_keyword = Keyword::DeviceAlternateIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceAlternateIdentifier>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceAlternateIdentifier>::s_element = 0x001B;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceAlternateIdentifier>::s_name = "Device Alternate Identifier";
template<>
DATA_API const VR Attribute<Keyword::DeviceAlternateIdentifier>::s_vr = VR::UC;
template<>
DATA_API const VM Attribute<Keyword::DeviceAlternateIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceAlternateIdentifierType>::s_keyword =
    Keyword::DeviceAlternateIdentifierType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceAlternateIdentifierType>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceAlternateIdentifierType>::s_element = 0x001C;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceAlternateIdentifierType>::s_name =
    "Device Alternate Identifier Type";
template<>
DATA_API const VR Attribute<Keyword::DeviceAlternateIdentifierType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::DeviceAlternateIdentifierType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceAlternateIdentifierFormat>::s_keyword =
    Keyword::DeviceAlternateIdentifierFormat;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceAlternateIdentifierFormat>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceAlternateIdentifierFormat>::s_element = 0x001D;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceAlternateIdentifierFormat>::s_name =
    "Device Alternate Identifier Format";
template<>
DATA_API const VR Attribute<Keyword::DeviceAlternateIdentifierFormat>::s_vr = VR::LT;
template<>
DATA_API const VM Attribute<Keyword::DeviceAlternateIdentifierFormat>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ConceptualVolumeSequence>::s_keyword = Keyword::ConceptualVolumeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConceptualVolumeSequence>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ConceptualVolumeSequence>::s_element = 0x0025;
template<>
DATA_API const std::string_view Attribute<Keyword::ConceptualVolumeSequence>::s_name = "Conceptual Volume Sequence";
template<>
DATA_API const VR Attribute<Keyword::ConceptualVolumeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::ConceptualVolumeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceLabel>::s_keyword = Keyword::DeviceLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceLabel>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceLabel>::s_element = 0x002D;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceLabel>::s_name = "Device Label";
template<>
DATA_API const VR Attribute<Keyword::DeviceLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::DeviceLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceTypeCodeSequence>::s_keyword = Keyword::DeviceTypeCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceTypeCodeSequence>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceTypeCodeSequence>::s_element = 0x002E;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceTypeCodeSequence>::s_name = "Device Type Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::DeviceTypeCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DeviceTypeCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PatientEquipmentRelationshipCodeSequence>::s_keyword =
    Keyword::PatientEquipmentRelationshipCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientEquipmentRelationshipCodeSequence>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PatientEquipmentRelationshipCodeSequence>::s_element = 0x0030;
template<>
DATA_API const std::string_view Attribute<Keyword::PatientEquipmentRelationshipCodeSequence>::s_name =
    "Patient Equipment Relationship Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::PatientEquipmentRelationshipCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PatientEquipmentRelationshipCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EntityDescription>::s_keyword = Keyword::EntityDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntityDescription>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntityDescription>::s_element = 0x0037;
template<>
DATA_API const std::string_view Attribute<Keyword::EntityDescription>::s_name = "Entity Description";
template<>
DATA_API const VR Attribute<Keyword::EntityDescription>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::EntityDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EntityLongLabel>::s_keyword = Keyword::EntityLongLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntityLongLabel>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EntityLongLabel>::s_element = 0x0038;
template<>
DATA_API const std::string_view Attribute<Keyword::EntityLongLabel>::s_name = "Entity Long Label";
template<>
DATA_API const VR Attribute<Keyword::EntityLongLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::EntityLongLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DeviceIndex>::s_keyword = Keyword::DeviceIndex;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceIndex>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DeviceIndex>::s_element = 0x0039;
template<>
DATA_API const std::string_view Attribute<Keyword::DeviceIndex>::s_name = "Device Index";
template<>
DATA_API const VR Attribute<Keyword::DeviceIndex>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::DeviceIndex>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ManufacturerDeviceIdentifier>::s_keyword =
    Keyword::ManufacturerDeviceIdentifier;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerDeviceIdentifier>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ManufacturerDeviceIdentifier>::s_element = 0x0043;
template<>
DATA_API const std::string_view Attribute<Keyword::ManufacturerDeviceIdentifier>::s_name =
    "Manufacturer's Device Identifier";
template<>
DATA_API const VR Attribute<Keyword::ManufacturerDeviceIdentifier>::s_vr = VR::ST;
template<>
DATA_API const VM Attribute<Keyword::ManufacturerDeviceIdentifier>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>::s_keyword =
    Keyword::InstanceLevelReferencedPerformedProcedureStepSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>::s_group =
    0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>::s_element =
    0x0044;
template<>
DATA_API const std::string_view Attribute<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>::s_name =
    "Instance-Level Referenced Performed Procedure Step Sequence";
template<>
DATA_API const VR Attribute<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TreatmentSite>::s_keyword = Keyword::TreatmentSite;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentSite>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentSite>::s_element = 0x0077;
template<>
DATA_API const std::string_view Attribute<Keyword::TreatmentSite>::s_name = "Treatment Site";
template<>
DATA_API const VR Attribute<Keyword::TreatmentSite>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::TreatmentSite>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::TreatmentSiteCodeSequence>::s_keyword = Keyword::TreatmentSiteCodeSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentSiteCodeSequence>::s_group = 0x3010;
template<>
DATA_API const std::uint16_t Attribute<Keyword::TreatmentSiteCodeSequence>::s_element = 0x0078;
template<>
DATA_API const std::string_view Attribute<Keyword::TreatmentSiteCodeSequence>::s_name = "Treatment Site Code Sequence";
template<>
DATA_API const VR Attribute<Keyword::TreatmentSiteCodeSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::TreatmentSiteCodeSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::MACParametersSequence>::s_keyword = Keyword::MACParametersSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACParametersSequence>::s_group = 0x4FFE;
template<>
DATA_API const std::uint16_t Attribute<Keyword::MACParametersSequence>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::MACParametersSequence>::s_name = "MAC Parameters Sequence";
template<>
DATA_API const VR Attribute<Keyword::MACParametersSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::MACParametersSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::SharedFunctionalGroupsSequence>::s_keyword =
    Keyword::SharedFunctionalGroupsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SharedFunctionalGroupsSequence>::s_group = 0x5200;
template<>
DATA_API const std::uint16_t Attribute<Keyword::SharedFunctionalGroupsSequence>::s_element = 0x9229;
template<>
DATA_API const std::string_view Attribute<Keyword::SharedFunctionalGroupsSequence>::s_name =
    "Shared Functional Groups Sequence";
template<>
DATA_API const VR Attribute<Keyword::SharedFunctionalGroupsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::SharedFunctionalGroupsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PerFrameFunctionalGroupsSequence>::s_keyword =
    Keyword::PerFrameFunctionalGroupsSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerFrameFunctionalGroupsSequence>::s_group = 0x5200;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PerFrameFunctionalGroupsSequence>::s_element = 0x9230;
template<>
DATA_API const std::string_view Attribute<Keyword::PerFrameFunctionalGroupsSequence>::s_name =
    "Per-frame Functional Groups Sequence";
template<>
DATA_API const VR Attribute<Keyword::PerFrameFunctionalGroupsSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::PerFrameFunctionalGroupsSequence>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayRows>::s_keyword = Keyword::OverlayRows;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayRows>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayRows>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayRows>::s_name = "Overlay Rows";
template<>
DATA_API const VR Attribute<Keyword::OverlayRows>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::OverlayRows>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayColumns>::s_keyword = Keyword::OverlayColumns;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayColumns>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayColumns>::s_element = 0x0011;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayColumns>::s_name = "Overlay Columns";
template<>
DATA_API const VR Attribute<Keyword::OverlayColumns>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::OverlayColumns>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::NumberOfFramesInOverlay>::s_keyword = Keyword::NumberOfFramesInOverlay;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFramesInOverlay>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::NumberOfFramesInOverlay>::s_element = 0x0015;
template<>
DATA_API const std::string_view Attribute<Keyword::NumberOfFramesInOverlay>::s_name = "Number of Frames in Overlay";
template<>
DATA_API const VR Attribute<Keyword::NumberOfFramesInOverlay>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::NumberOfFramesInOverlay>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayDescription>::s_keyword = Keyword::OverlayDescription;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayDescription>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayDescription>::s_element = 0x0022;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayDescription>::s_name = "Overlay Description";
template<>
DATA_API const VR Attribute<Keyword::OverlayDescription>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::OverlayDescription>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayType>::s_keyword = Keyword::OverlayType;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayType>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayType>::s_element = 0x0040;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayType>::s_name = "Overlay Type";
template<>
DATA_API const VR Attribute<Keyword::OverlayType>::s_vr = VR::CS;
template<>
DATA_API const VM Attribute<Keyword::OverlayType>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlaySubtype>::s_keyword = Keyword::OverlaySubtype;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlaySubtype>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlaySubtype>::s_element = 0x0045;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlaySubtype>::s_name = "Overlay Subtype";
template<>
DATA_API const VR Attribute<Keyword::OverlaySubtype>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::OverlaySubtype>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayOrigin>::s_keyword = Keyword::OverlayOrigin;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayOrigin>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayOrigin>::s_element = 0x0050;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayOrigin>::s_name = "Overlay Origin";
template<>
DATA_API const VR Attribute<Keyword::OverlayOrigin>::s_vr = VR::SS;
template<>
DATA_API const VM Attribute<Keyword::OverlayOrigin>::s_vm = VM::MIN_2_MAX_2;
template<>
DATA_API const Keyword Attribute<Keyword::ImageFrameOrigin>::s_keyword = Keyword::ImageFrameOrigin;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageFrameOrigin>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ImageFrameOrigin>::s_element = 0x0051;
template<>
DATA_API const std::string_view Attribute<Keyword::ImageFrameOrigin>::s_name = "Image Frame Origin";
template<>
DATA_API const VR Attribute<Keyword::ImageFrameOrigin>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::ImageFrameOrigin>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayBitsAllocated>::s_keyword = Keyword::OverlayBitsAllocated;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayBitsAllocated>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayBitsAllocated>::s_element = 0x0100;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayBitsAllocated>::s_name = "Overlay Bits Allocated";
template<>
DATA_API const VR Attribute<Keyword::OverlayBitsAllocated>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::OverlayBitsAllocated>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayBitPosition>::s_keyword = Keyword::OverlayBitPosition;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayBitPosition>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayBitPosition>::s_element = 0x0102;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayBitPosition>::s_name = "Overlay Bit Position";
template<>
DATA_API const VR Attribute<Keyword::OverlayBitPosition>::s_vr = VR::US;
template<>
DATA_API const VM Attribute<Keyword::OverlayBitPosition>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ROIArea>::s_keyword = Keyword::ROIArea;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ROIArea>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ROIArea>::s_element = 0x1301;
template<>
DATA_API const std::string_view Attribute<Keyword::ROIArea>::s_name = "ROI Area";
template<>
DATA_API const VR Attribute<Keyword::ROIArea>::s_vr = VR::IS;
template<>
DATA_API const VM Attribute<Keyword::ROIArea>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ROIMean>::s_keyword = Keyword::ROIMean;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ROIMean>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ROIMean>::s_element = 0x1302;
template<>
DATA_API const std::string_view Attribute<Keyword::ROIMean>::s_name = "ROI Mean";
template<>
DATA_API const VR Attribute<Keyword::ROIMean>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ROIMean>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ROIStandardDeviation>::s_keyword = Keyword::ROIStandardDeviation;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ROIStandardDeviation>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ROIStandardDeviation>::s_element = 0x1303;
template<>
DATA_API const std::string_view Attribute<Keyword::ROIStandardDeviation>::s_name = "ROI Standard Deviation";
template<>
DATA_API const VR Attribute<Keyword::ROIStandardDeviation>::s_vr = VR::DS;
template<>
DATA_API const VM Attribute<Keyword::ROIStandardDeviation>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayLabel>::s_keyword = Keyword::OverlayLabel;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayLabel>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayLabel>::s_element = 0x1500;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayLabel>::s_name = "Overlay Label";
template<>
DATA_API const VR Attribute<Keyword::OverlayLabel>::s_vr = VR::LO;
template<>
DATA_API const VM Attribute<Keyword::OverlayLabel>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::OverlayData>::s_keyword = Keyword::OverlayData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayData>::s_group = 0x6000;
template<>
DATA_API const std::uint16_t Attribute<Keyword::OverlayData>::s_element = 0x3000;
template<>
DATA_API const std::string_view Attribute<Keyword::OverlayData>::s_name = "Overlay Data";
template<>
DATA_API const VR Attribute<Keyword::OverlayData>::s_vr = VR::OB_OW;
template<>
DATA_API const VM Attribute<Keyword::OverlayData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExtendedOffsetTable>::s_keyword = Keyword::ExtendedOffsetTable;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExtendedOffsetTable>::s_group = 0x7FE0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExtendedOffsetTable>::s_element = 0x0001;
template<>
DATA_API const std::string_view Attribute<Keyword::ExtendedOffsetTable>::s_name = "Extended Offset Table";
template<>
DATA_API const VR Attribute<Keyword::ExtendedOffsetTable>::s_vr = VR::OV;
template<>
DATA_API const VM Attribute<Keyword::ExtendedOffsetTable>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::ExtendedOffsetTableLengths>::s_keyword = Keyword::ExtendedOffsetTableLengths;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExtendedOffsetTableLengths>::s_group = 0x7FE0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::ExtendedOffsetTableLengths>::s_element = 0x0002;
template<>
DATA_API const std::string_view Attribute<Keyword::ExtendedOffsetTableLengths>::s_name =
    "Extended Offset Table Lengths";
template<>
DATA_API const VR Attribute<Keyword::ExtendedOffsetTableLengths>::s_vr = VR::OV;
template<>
DATA_API const VM Attribute<Keyword::ExtendedOffsetTableLengths>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::EncapsulatedPixelDataValueTotalLength>::s_keyword =
    Keyword::EncapsulatedPixelDataValueTotalLength;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncapsulatedPixelDataValueTotalLength>::s_group = 0x7FE0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::EncapsulatedPixelDataValueTotalLength>::s_element = 0x0003;
template<>
DATA_API const std::string_view Attribute<Keyword::EncapsulatedPixelDataValueTotalLength>::s_name =
    "Encapsulated Pixel Data Value Total Length";
template<>
DATA_API const VR Attribute<Keyword::EncapsulatedPixelDataValueTotalLength>::s_vr = VR::UV;
template<>
DATA_API const VM Attribute<Keyword::EncapsulatedPixelDataValueTotalLength>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::FloatPixelData>::s_keyword = Keyword::FloatPixelData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatPixelData>::s_group = 0x7FE0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::FloatPixelData>::s_element = 0x0008;
template<>
DATA_API const std::string_view Attribute<Keyword::FloatPixelData>::s_name = "Float Pixel Data";
template<>
DATA_API const VR Attribute<Keyword::FloatPixelData>::s_vr = VR::OF;
template<>
DATA_API const VM Attribute<Keyword::FloatPixelData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DoubleFloatPixelData>::s_keyword = Keyword::DoubleFloatPixelData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatPixelData>::s_group = 0x7FE0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DoubleFloatPixelData>::s_element = 0x0009;
template<>
DATA_API const std::string_view Attribute<Keyword::DoubleFloatPixelData>::s_name = "Double Float Pixel Data";
template<>
DATA_API const VR Attribute<Keyword::DoubleFloatPixelData>::s_vr = VR::OD;
template<>
DATA_API const VM Attribute<Keyword::DoubleFloatPixelData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::PixelData>::s_keyword = Keyword::PixelData;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelData>::s_group = 0x7FE0;
template<>
DATA_API const std::uint16_t Attribute<Keyword::PixelData>::s_element = 0x0010;
template<>
DATA_API const std::string_view Attribute<Keyword::PixelData>::s_name = "Pixel Data";
template<>
DATA_API const VR Attribute<Keyword::PixelData>::s_vr = VR::OB_OW;
template<>
DATA_API const VM Attribute<Keyword::PixelData>::s_vm = VM::MIN_1_MAX_1;
template<>
DATA_API const Keyword Attribute<Keyword::DigitalSignaturesSequence>::s_keyword = Keyword::DigitalSignaturesSequence;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignaturesSequence>::s_group = 0xFFFA;
template<>
DATA_API const std::uint16_t Attribute<Keyword::DigitalSignaturesSequence>::s_element = 0xFFFA;
template<>
DATA_API const std::string_view Attribute<Keyword::DigitalSignaturesSequence>::s_name = "Digital Signatures Sequence";
template<>
DATA_API const VR Attribute<Keyword::DigitalSignaturesSequence>::s_vr = VR::SQ;
template<>
DATA_API const VM Attribute<Keyword::DigitalSignaturesSequence>::s_vm = VM::MIN_1_MAX_1;

//------------------------------------------------------------------------------

const IAttribute& get(Keyword keyword)
{
    switch(keyword)
    {
        case Keyword::SpecificCharacterSet:
            return get<Keyword::SpecificCharacterSet>();

        case Keyword::LanguageCodeSequence:
            return get<Keyword::LanguageCodeSequence>();

        case Keyword::ImageType:
            return get<Keyword::ImageType>();

        case Keyword::InstanceCreationDate:
            return get<Keyword::InstanceCreationDate>();

        case Keyword::InstanceCreationTime:
            return get<Keyword::InstanceCreationTime>();

        case Keyword::InstanceCreatorUID:
            return get<Keyword::InstanceCreatorUID>();

        case Keyword::InstanceCoercionDateTime:
            return get<Keyword::InstanceCoercionDateTime>();

        case Keyword::sop_classUID:
            return get<Keyword::sop_classUID>();

        case Keyword::AcquisitionUID:
            return get<Keyword::AcquisitionUID>();

        case Keyword::SOPInstanceUID:
            return get<Keyword::SOPInstanceUID>();

        case Keyword::PyramidUID:
            return get<Keyword::PyramidUID>();

        case Keyword::RelatedGeneralsop_classUID:
            return get<Keyword::RelatedGeneralsop_classUID>();

        case Keyword::OriginalSpecializedsop_classUID:
            return get<Keyword::OriginalSpecializedsop_classUID>();

        case Keyword::StudyDate:
            return get<Keyword::StudyDate>();

        case Keyword::SeriesDate:
            return get<Keyword::SeriesDate>();

        case Keyword::AcquisitionDate:
            return get<Keyword::AcquisitionDate>();

        case Keyword::ContentDate:
            return get<Keyword::ContentDate>();

        case Keyword::AcquisitionDateTime:
            return get<Keyword::AcquisitionDateTime>();

        case Keyword::StudyTime:
            return get<Keyword::StudyTime>();

        case Keyword::SeriesTime:
            return get<Keyword::SeriesTime>();

        case Keyword::AcquisitionTime:
            return get<Keyword::AcquisitionTime>();

        case Keyword::ContentTime:
            return get<Keyword::ContentTime>();

        case Keyword::AccessionNumber:
            return get<Keyword::AccessionNumber>();

        case Keyword::IssuerOfAccessionNumberSequence:
            return get<Keyword::IssuerOfAccessionNumberSequence>();

        case Keyword::QueryRetrieveView:
            return get<Keyword::QueryRetrieveView>();

        case Keyword::RetrieveAETitle:
            return get<Keyword::RetrieveAETitle>();

        case Keyword::StationAETitle:
            return get<Keyword::StationAETitle>();

        case Keyword::Modality:
            return get<Keyword::Modality>();

        case Keyword::ConversionType:
            return get<Keyword::ConversionType>();

        case Keyword::PresentationIntentType:
            return get<Keyword::PresentationIntentType>();

        case Keyword::Manufacturer:
            return get<Keyword::Manufacturer>();

        case Keyword::InstitutionName:
            return get<Keyword::InstitutionName>();

        case Keyword::InstitutionAddress:
            return get<Keyword::InstitutionAddress>();

        case Keyword::InstitutionCodeSequence:
            return get<Keyword::InstitutionCodeSequence>();

        case Keyword::ReferringPhysicianName:
            return get<Keyword::ReferringPhysicianName>();

        case Keyword::ReferringPhysicianIdentificationSequence:
            return get<Keyword::ReferringPhysicianIdentificationSequence>();

        case Keyword::ConsultingPhysicianName:
            return get<Keyword::ConsultingPhysicianName>();

        case Keyword::ConsultingPhysicianIdentificationSequence:
            return get<Keyword::ConsultingPhysicianIdentificationSequence>();

        case Keyword::CodeValue:
            return get<Keyword::CodeValue>();

        case Keyword::CodingSchemeDesignator:
            return get<Keyword::CodingSchemeDesignator>();

        case Keyword::CodingSchemeVersion:
            return get<Keyword::CodingSchemeVersion>();

        case Keyword::CodeMeaning:
            return get<Keyword::CodeMeaning>();

        case Keyword::MappingResource:
            return get<Keyword::MappingResource>();

        case Keyword::ContextGroupVersion:
            return get<Keyword::ContextGroupVersion>();

        case Keyword::ContextGroupLocalVersion:
            return get<Keyword::ContextGroupLocalVersion>();

        case Keyword::CodingSchemeResourcesSequence:
            return get<Keyword::CodingSchemeResourcesSequence>();

        case Keyword::ContextGroupExtensionFlag:
            return get<Keyword::ContextGroupExtensionFlag>();

        case Keyword::CodingSchemeUID:
            return get<Keyword::CodingSchemeUID>();

        case Keyword::ContextGroupExtensionCreatorUID:
            return get<Keyword::ContextGroupExtensionCreatorUID>();

        case Keyword::ContextIdentifier:
            return get<Keyword::ContextIdentifier>();

        case Keyword::CodingSchemeIdentificationSequence:
            return get<Keyword::CodingSchemeIdentificationSequence>();

        case Keyword::CodingSchemeRegistry:
            return get<Keyword::CodingSchemeRegistry>();

        case Keyword::CodingSchemeExternalID:
            return get<Keyword::CodingSchemeExternalID>();

        case Keyword::CodingSchemeName:
            return get<Keyword::CodingSchemeName>();

        case Keyword::CodingSchemeResponsibleOrganization:
            return get<Keyword::CodingSchemeResponsibleOrganization>();

        case Keyword::ContextUID:
            return get<Keyword::ContextUID>();

        case Keyword::MappingResourceUID:
            return get<Keyword::MappingResourceUID>();

        case Keyword::LongCodeValue:
            return get<Keyword::LongCodeValue>();

        case Keyword::URNCodeValue:
            return get<Keyword::URNCodeValue>();

        case Keyword::EquivalentCodeSequence:
            return get<Keyword::EquivalentCodeSequence>();

        case Keyword::MappingResourceName:
            return get<Keyword::MappingResourceName>();

        case Keyword::ContextGroupIdentificationSequence:
            return get<Keyword::ContextGroupIdentificationSequence>();

        case Keyword::MappingResourceIdentificationSequence:
            return get<Keyword::MappingResourceIdentificationSequence>();

        case Keyword::TimezoneOffsetFromUTC:
            return get<Keyword::TimezoneOffsetFromUTC>();

        case Keyword::ResponsibleGroupCodeSequence:
            return get<Keyword::ResponsibleGroupCodeSequence>();

        case Keyword::PrivateDataElementCharacteristicsSequence:
            return get<Keyword::PrivateDataElementCharacteristicsSequence>();

        case Keyword::PrivateGroupReference:
            return get<Keyword::PrivateGroupReference>();

        case Keyword::PrivateCreatorReference:
            return get<Keyword::PrivateCreatorReference>();

        case Keyword::BlockIdentifyingInformationStatus:
            return get<Keyword::BlockIdentifyingInformationStatus>();

        case Keyword::NonidentifyingPrivateElements:
            return get<Keyword::NonidentifyingPrivateElements>();

        case Keyword::DeidentificationActionSequence:
            return get<Keyword::DeidentificationActionSequence>();

        case Keyword::PrivateDataElementDefinitionSequence:
            return get<Keyword::PrivateDataElementDefinitionSequence>();

        case Keyword::StationName:
            return get<Keyword::StationName>();

        case Keyword::StudyDescription:
            return get<Keyword::StudyDescription>();

        case Keyword::ProcedureCodeSequence:
            return get<Keyword::ProcedureCodeSequence>();

        case Keyword::SeriesDescription:
            return get<Keyword::SeriesDescription>();

        case Keyword::SeriesDescriptionCodeSequence:
            return get<Keyword::SeriesDescriptionCodeSequence>();

        case Keyword::InstitutionalDepartmentName:
            return get<Keyword::InstitutionalDepartmentName>();

        case Keyword::InstitutionalDepartmentTypeCodeSequence:
            return get<Keyword::InstitutionalDepartmentTypeCodeSequence>();

        case Keyword::PhysiciansOfRecord:
            return get<Keyword::PhysiciansOfRecord>();

        case Keyword::PhysiciansOfRecordIdentificationSequence:
            return get<Keyword::PhysiciansOfRecordIdentificationSequence>();

        case Keyword::PerformingPhysicianName:
            return get<Keyword::PerformingPhysicianName>();

        case Keyword::PerformingPhysicianIdentificationSequence:
            return get<Keyword::PerformingPhysicianIdentificationSequence>();

        case Keyword::NameOfPhysiciansReadingStudy:
            return get<Keyword::NameOfPhysiciansReadingStudy>();

        case Keyword::PhysiciansReadingStudyIdentificationSequence:
            return get<Keyword::PhysiciansReadingStudyIdentificationSequence>();

        case Keyword::OperatorsName:
            return get<Keyword::OperatorsName>();

        case Keyword::OperatorIdentificationSequence:
            return get<Keyword::OperatorIdentificationSequence>();

        case Keyword::AdmittingDiagnosesDescription:
            return get<Keyword::AdmittingDiagnosesDescription>();

        case Keyword::AdmittingDiagnosesCodeSequence:
            return get<Keyword::AdmittingDiagnosesCodeSequence>();

        case Keyword::PyramidDescription:
            return get<Keyword::PyramidDescription>();

        case Keyword::ManufacturerModelName:
            return get<Keyword::ManufacturerModelName>();

        case Keyword::ReferencedStudySequence:
            return get<Keyword::ReferencedStudySequence>();

        case Keyword::ReferencedPerformedProcedureStepSequence:
            return get<Keyword::ReferencedPerformedProcedureStepSequence>();

        case Keyword::ReferencedSeriesSequence:
            return get<Keyword::ReferencedSeriesSequence>();

        case Keyword::ReferencedPatientSequence:
            return get<Keyword::ReferencedPatientSequence>();

        case Keyword::ReferencedStereometricInstanceSequence:
            return get<Keyword::ReferencedStereometricInstanceSequence>();

        case Keyword::ReferencedWaveformSequence:
            return get<Keyword::ReferencedWaveformSequence>();

        case Keyword::ReferencedImageSequence:
            return get<Keyword::ReferencedImageSequence>();

        case Keyword::ReferencedInstanceSequence:
            return get<Keyword::ReferencedInstanceSequence>();

        case Keyword::ReferencedRealWorldValueMappingInstanceSequence:
            return get<Keyword::ReferencedRealWorldValueMappingInstanceSequence>();

        case Keyword::ReferencedSOPClassUID:
            return get<Keyword::ReferencedSOPClassUID>();

        case Keyword::ReferencedSOPInstanceUID:
            return get<Keyword::ReferencedSOPInstanceUID>();

        case Keyword::DefinitionSourceSequence:
            return get<Keyword::DefinitionSourceSequence>();

        case Keyword::ReferencedFrameNumber:
            return get<Keyword::ReferencedFrameNumber>();

        case Keyword::SimpleFrameList:
            return get<Keyword::SimpleFrameList>();

        case Keyword::CalculatedFrameList:
            return get<Keyword::CalculatedFrameList>();

        case Keyword::TimeRange:
            return get<Keyword::TimeRange>();

        case Keyword::FrameExtractionSequence:
            return get<Keyword::FrameExtractionSequence>();

        case Keyword::MultiFrameSourceSOPInstanceUID:
            return get<Keyword::MultiFrameSourceSOPInstanceUID>();

        case Keyword::RetrieveURL:
            return get<Keyword::RetrieveURL>();

        case Keyword::ReferencedSOPSequence:
            return get<Keyword::ReferencedSOPSequence>();

        case Keyword::StudiesContainingOtherReferencedInstancesSequence:
            return get<Keyword::StudiesContainingOtherReferencedInstancesSequence>();

        case Keyword::RelatedSeriesSequence:
            return get<Keyword::RelatedSeriesSequence>();

        case Keyword::DerivationDescription:
            return get<Keyword::DerivationDescription>();

        case Keyword::SourceImageSequence:
            return get<Keyword::SourceImageSequence>();

        case Keyword::StageName:
            return get<Keyword::StageName>();

        case Keyword::StageNumber:
            return get<Keyword::StageNumber>();

        case Keyword::NumberOfStages:
            return get<Keyword::NumberOfStages>();

        case Keyword::ViewName:
            return get<Keyword::ViewName>();

        case Keyword::ViewNumber:
            return get<Keyword::ViewNumber>();

        case Keyword::NumberOfEventTimers:
            return get<Keyword::NumberOfEventTimers>();

        case Keyword::NumberOfViewsInStage:
            return get<Keyword::NumberOfViewsInStage>();

        case Keyword::EventElapsedTimes:
            return get<Keyword::EventElapsedTimes>();

        case Keyword::EventTimerNames:
            return get<Keyword::EventTimerNames>();

        case Keyword::EventTimerSequence:
            return get<Keyword::EventTimerSequence>();

        case Keyword::EventTimeOffset:
            return get<Keyword::EventTimeOffset>();

        case Keyword::EventCodeSequence:
            return get<Keyword::EventCodeSequence>();

        case Keyword::StartTrim:
            return get<Keyword::StartTrim>();

        case Keyword::StopTrim:
            return get<Keyword::StopTrim>();

        case Keyword::RecommendedDisplayFrameRate:
            return get<Keyword::RecommendedDisplayFrameRate>();

        case Keyword::AnatomicRegionSequence:
            return get<Keyword::AnatomicRegionSequence>();

        case Keyword::AnatomicRegionModifierSequence:
            return get<Keyword::AnatomicRegionModifierSequence>();

        case Keyword::PrimaryAnatomicStructureSequence:
            return get<Keyword::PrimaryAnatomicStructureSequence>();

        case Keyword::PrimaryAnatomicStructureModifierSequence:
            return get<Keyword::PrimaryAnatomicStructureModifierSequence>();

        case Keyword::IrradiationEventUID:
            return get<Keyword::IrradiationEventUID>();

        case Keyword::SourceIrradiationEventSequence:
            return get<Keyword::SourceIrradiationEventSequence>();

        case Keyword::RadiopharmaceuticalAdministrationEventUID:
            return get<Keyword::RadiopharmaceuticalAdministrationEventUID>();

        case Keyword::FrameType:
            return get<Keyword::FrameType>();

        case Keyword::ReferencedImageEvidenceSequence:
            return get<Keyword::ReferencedImageEvidenceSequence>();

        case Keyword::ReferencedRawDataSequence:
            return get<Keyword::ReferencedRawDataSequence>();

        case Keyword::DerivationImageSequence:
            return get<Keyword::DerivationImageSequence>();

        case Keyword::SourceImageEvidenceSequence:
            return get<Keyword::SourceImageEvidenceSequence>();

        case Keyword::PixelPresentation:
            return get<Keyword::PixelPresentation>();

        case Keyword::VolumetricProperties:
            return get<Keyword::VolumetricProperties>();

        case Keyword::VolumeBasedCalculationTechnique:
            return get<Keyword::VolumeBasedCalculationTechnique>();

        case Keyword::ComplexImageComponent:
            return get<Keyword::ComplexImageComponent>();

        case Keyword::AcquisitionContrast:
            return get<Keyword::AcquisitionContrast>();

        case Keyword::DerivationCodeSequence:
            return get<Keyword::DerivationCodeSequence>();

        case Keyword::ReferencedPresentationStateSequence:
            return get<Keyword::ReferencedPresentationStateSequence>();

        case Keyword::ReferencedOtherPlaneSequence:
            return get<Keyword::ReferencedOtherPlaneSequence>();

        case Keyword::FrameDisplaySequence:
            return get<Keyword::FrameDisplaySequence>();

        case Keyword::RecommendedDisplayFrameRateInFloat:
            return get<Keyword::RecommendedDisplayFrameRateInFloat>();

        case Keyword::SkipFrameRangeFlag:
            return get<Keyword::SkipFrameRangeFlag>();

        case Keyword::PatientName:
            return get<Keyword::PatientName>();

        case Keyword::PatientID:
            return get<Keyword::PatientID>();

        case Keyword::IssuerOfPatientID:
            return get<Keyword::IssuerOfPatientID>();

        case Keyword::TypeOfPatientID:
            return get<Keyword::TypeOfPatientID>();

        case Keyword::IssuerOfPatientIDQualifiersSequence:
            return get<Keyword::IssuerOfPatientIDQualifiersSequence>();

        case Keyword::SourcePatientGroupIdentificationSequence:
            return get<Keyword::SourcePatientGroupIdentificationSequence>();

        case Keyword::GroupOfPatientsIdentificationSequence:
            return get<Keyword::GroupOfPatientsIdentificationSequence>();

        case Keyword::SubjectRelativePositionInImage:
            return get<Keyword::SubjectRelativePositionInImage>();

        case Keyword::PatientBirthDate:
            return get<Keyword::PatientBirthDate>();

        case Keyword::PatientBirthTime:
            return get<Keyword::PatientBirthTime>();

        case Keyword::PatientBirthDateInAlternativeCalendar:
            return get<Keyword::PatientBirthDateInAlternativeCalendar>();

        case Keyword::PatientDeathDateInAlternativeCalendar:
            return get<Keyword::PatientDeathDateInAlternativeCalendar>();

        case Keyword::PatientAlternativeCalendar:
            return get<Keyword::PatientAlternativeCalendar>();

        case Keyword::PatientSex:
            return get<Keyword::PatientSex>();

        case Keyword::QualityControlSubject:
            return get<Keyword::QualityControlSubject>();

        case Keyword::StrainDescription:
            return get<Keyword::StrainDescription>();

        case Keyword::StrainNomenclature:
            return get<Keyword::StrainNomenclature>();

        case Keyword::StrainStockNumber:
            return get<Keyword::StrainStockNumber>();

        case Keyword::StrainSourceRegistryCodeSequence:
            return get<Keyword::StrainSourceRegistryCodeSequence>();

        case Keyword::StrainStockSequence:
            return get<Keyword::StrainStockSequence>();

        case Keyword::StrainSource:
            return get<Keyword::StrainSource>();

        case Keyword::StrainAdditionalInformation:
            return get<Keyword::StrainAdditionalInformation>();

        case Keyword::StrainCodeSequence:
            return get<Keyword::StrainCodeSequence>();

        case Keyword::GeneticModificationsSequence:
            return get<Keyword::GeneticModificationsSequence>();

        case Keyword::GeneticModificationsDescription:
            return get<Keyword::GeneticModificationsDescription>();

        case Keyword::GeneticModificationsNomenclature:
            return get<Keyword::GeneticModificationsNomenclature>();

        case Keyword::GeneticModificationsCodeSequence:
            return get<Keyword::GeneticModificationsCodeSequence>();

        case Keyword::OtherPatientNames:
            return get<Keyword::OtherPatientNames>();

        case Keyword::OtherPatientIDsSequence:
            return get<Keyword::OtherPatientIDsSequence>();

        case Keyword::PatientAge:
            return get<Keyword::PatientAge>();

        case Keyword::PatientSize:
            return get<Keyword::PatientSize>();

        case Keyword::PatientSizeCodeSequence:
            return get<Keyword::PatientSizeCodeSequence>();

        case Keyword::PatientBodyMassIndex:
            return get<Keyword::PatientBodyMassIndex>();

        case Keyword::MeasuredAPDimension:
            return get<Keyword::MeasuredAPDimension>();

        case Keyword::MeasuredLateralDimension:
            return get<Keyword::MeasuredLateralDimension>();

        case Keyword::PatientWeight:
            return get<Keyword::PatientWeight>();

        case Keyword::ReferencedPatientPhotoSequence:
            return get<Keyword::ReferencedPatientPhotoSequence>();

        case Keyword::MedicalAlerts:
            return get<Keyword::MedicalAlerts>();

        case Keyword::Allergies:
            return get<Keyword::Allergies>();

        case Keyword::EthnicGroup:
            return get<Keyword::EthnicGroup>();

        case Keyword::Occupation:
            return get<Keyword::Occupation>();

        case Keyword::SmokingStatus:
            return get<Keyword::SmokingStatus>();

        case Keyword::AdditionalPatientHistory:
            return get<Keyword::AdditionalPatientHistory>();

        case Keyword::PregnancyStatus:
            return get<Keyword::PregnancyStatus>();

        case Keyword::LastMenstrualDate:
            return get<Keyword::LastMenstrualDate>();

        case Keyword::PatientSpeciesDescription:
            return get<Keyword::PatientSpeciesDescription>();

        case Keyword::PatientSpeciesCodeSequence:
            return get<Keyword::PatientSpeciesCodeSequence>();

        case Keyword::PatientSexNeutered:
            return get<Keyword::PatientSexNeutered>();

        case Keyword::AnatomicalOrientationType:
            return get<Keyword::AnatomicalOrientationType>();

        case Keyword::PatientBreedDescription:
            return get<Keyword::PatientBreedDescription>();

        case Keyword::PatientBreedCodeSequence:
            return get<Keyword::PatientBreedCodeSequence>();

        case Keyword::BreedRegistrationSequence:
            return get<Keyword::BreedRegistrationSequence>();

        case Keyword::BreedRegistrationNumber:
            return get<Keyword::BreedRegistrationNumber>();

        case Keyword::BreedRegistryCodeSequence:
            return get<Keyword::BreedRegistryCodeSequence>();

        case Keyword::ResponsiblePerson:
            return get<Keyword::ResponsiblePerson>();

        case Keyword::ResponsiblePersonRole:
            return get<Keyword::ResponsiblePersonRole>();

        case Keyword::ResponsibleOrganization:
            return get<Keyword::ResponsibleOrganization>();

        case Keyword::PatientComments:
            return get<Keyword::PatientComments>();

        case Keyword::ExaminedBodyThickness:
            return get<Keyword::ExaminedBodyThickness>();

        case Keyword::ClinicalTrialSponsorName:
            return get<Keyword::ClinicalTrialSponsorName>();

        case Keyword::ClinicalTrialProtocolID:
            return get<Keyword::ClinicalTrialProtocolID>();

        case Keyword::ClinicalTrialProtocolName:
            return get<Keyword::ClinicalTrialProtocolName>();

        case Keyword::ClinicalTrialSiteID:
            return get<Keyword::ClinicalTrialSiteID>();

        case Keyword::ClinicalTrialSiteName:
            return get<Keyword::ClinicalTrialSiteName>();

        case Keyword::ClinicalTrialSubjectID:
            return get<Keyword::ClinicalTrialSubjectID>();

        case Keyword::ClinicalTrialSubjectReadingID:
            return get<Keyword::ClinicalTrialSubjectReadingID>();

        case Keyword::ClinicalTrialTimePointID:
            return get<Keyword::ClinicalTrialTimePointID>();

        case Keyword::ClinicalTrialTimePointDescription:
            return get<Keyword::ClinicalTrialTimePointDescription>();

        case Keyword::LongitudinalTemporalOffsetFromEvent:
            return get<Keyword::LongitudinalTemporalOffsetFromEvent>();

        case Keyword::LongitudinalTemporalEventType:
            return get<Keyword::LongitudinalTemporalEventType>();

        case Keyword::ClinicalTrialTimePointTypeCodeSequence:
            return get<Keyword::ClinicalTrialTimePointTypeCodeSequence>();

        case Keyword::ClinicalTrialCoordinatingCenterName:
            return get<Keyword::ClinicalTrialCoordinatingCenterName>();

        case Keyword::PatientIdentityRemoved:
            return get<Keyword::PatientIdentityRemoved>();

        case Keyword::DeidentificationMethod:
            return get<Keyword::DeidentificationMethod>();

        case Keyword::DeidentificationMethodCodeSequence:
            return get<Keyword::DeidentificationMethodCodeSequence>();

        case Keyword::ClinicalTrialSeriesID:
            return get<Keyword::ClinicalTrialSeriesID>();

        case Keyword::ClinicalTrialSeriesDescription:
            return get<Keyword::ClinicalTrialSeriesDescription>();

        case Keyword::ClinicalTrialProtocolEthicsCommitteeName:
            return get<Keyword::ClinicalTrialProtocolEthicsCommitteeName>();

        case Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber:
            return get<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>();

        case Keyword::ConsentForClinicalTrialUseSequence:
            return get<Keyword::ConsentForClinicalTrialUseSequence>();

        case Keyword::DistributionType:
            return get<Keyword::DistributionType>();

        case Keyword::ConsentForDistributionFlag:
            return get<Keyword::ConsentForDistributionFlag>();

        case Keyword::WhitePoint:
            return get<Keyword::WhitePoint>();

        case Keyword::PrimaryChromaticities:
            return get<Keyword::PrimaryChromaticities>();

        case Keyword::BatteryLevel:
            return get<Keyword::BatteryLevel>();

        case Keyword::ExposureTimeInSeconds:
            return get<Keyword::ExposureTimeInSeconds>();

        case Keyword::FNumber:
            return get<Keyword::FNumber>();

        case Keyword::OECFRows:
            return get<Keyword::OECFRows>();

        case Keyword::OECFColumns:
            return get<Keyword::OECFColumns>();

        case Keyword::OECFColumnNames:
            return get<Keyword::OECFColumnNames>();

        case Keyword::OECFValues:
            return get<Keyword::OECFValues>();

        case Keyword::SpatialFrequencyResponseRows:
            return get<Keyword::SpatialFrequencyResponseRows>();

        case Keyword::SpatialFrequencyResponseColumns:
            return get<Keyword::SpatialFrequencyResponseColumns>();

        case Keyword::SpatialFrequencyResponseColumnNames:
            return get<Keyword::SpatialFrequencyResponseColumnNames>();

        case Keyword::SpatialFrequencyResponseValues:
            return get<Keyword::SpatialFrequencyResponseValues>();

        case Keyword::ColorFilterArrayPatternRows:
            return get<Keyword::ColorFilterArrayPatternRows>();

        case Keyword::ColorFilterArrayPatternColumns:
            return get<Keyword::ColorFilterArrayPatternColumns>();

        case Keyword::ColorFilterArrayPatternValues:
            return get<Keyword::ColorFilterArrayPatternValues>();

        case Keyword::FlashFiringStatus:
            return get<Keyword::FlashFiringStatus>();

        case Keyword::FlashReturnStatus:
            return get<Keyword::FlashReturnStatus>();

        case Keyword::FlashMode:
            return get<Keyword::FlashMode>();

        case Keyword::FlashFunctionPresent:
            return get<Keyword::FlashFunctionPresent>();

        case Keyword::FlashRedEyeMode:
            return get<Keyword::FlashRedEyeMode>();

        case Keyword::ExposureProgram:
            return get<Keyword::ExposureProgram>();

        case Keyword::SpectralSensitivity:
            return get<Keyword::SpectralSensitivity>();

        case Keyword::PhotographicSensitivity:
            return get<Keyword::PhotographicSensitivity>();

        case Keyword::SelfTimerMode:
            return get<Keyword::SelfTimerMode>();

        case Keyword::SensitivityType:
            return get<Keyword::SensitivityType>();

        case Keyword::StandardOutputSensitivity:
            return get<Keyword::StandardOutputSensitivity>();

        case Keyword::RecommendedExposureIndex:
            return get<Keyword::RecommendedExposureIndex>();

        case Keyword::ISOSpeed:
            return get<Keyword::ISOSpeed>();

        case Keyword::ISOSpeedLatitudeyyy:
            return get<Keyword::ISOSpeedLatitudeyyy>();

        case Keyword::ISOSpeedLatitudezzz:
            return get<Keyword::ISOSpeedLatitudezzz>();

        case Keyword::EXIFVersion:
            return get<Keyword::EXIFVersion>();

        case Keyword::ShutterSpeedValue:
            return get<Keyword::ShutterSpeedValue>();

        case Keyword::ApertureValue:
            return get<Keyword::ApertureValue>();

        case Keyword::BrightnessValue:
            return get<Keyword::BrightnessValue>();

        case Keyword::ExposureBiasValue:
            return get<Keyword::ExposureBiasValue>();

        case Keyword::MaxApertureValue:
            return get<Keyword::MaxApertureValue>();

        case Keyword::SubjectDistance:
            return get<Keyword::SubjectDistance>();

        case Keyword::MeteringMode:
            return get<Keyword::MeteringMode>();

        case Keyword::LightSource:
            return get<Keyword::LightSource>();

        case Keyword::FocalLength:
            return get<Keyword::FocalLength>();

        case Keyword::SubjectArea:
            return get<Keyword::SubjectArea>();

        case Keyword::MakerNote:
            return get<Keyword::MakerNote>();

        case Keyword::Temperature:
            return get<Keyword::Temperature>();

        case Keyword::Humidity:
            return get<Keyword::Humidity>();

        case Keyword::Pressure:
            return get<Keyword::Pressure>();

        case Keyword::WaterDepth:
            return get<Keyword::WaterDepth>();

        case Keyword::Acceleration:
            return get<Keyword::Acceleration>();

        case Keyword::CameraElevationAngle:
            return get<Keyword::CameraElevationAngle>();

        case Keyword::FlashEnergy:
            return get<Keyword::FlashEnergy>();

        case Keyword::SubjectLocation:
            return get<Keyword::SubjectLocation>();

        case Keyword::PhotographicExposureIndex:
            return get<Keyword::PhotographicExposureIndex>();

        case Keyword::SensingMethod:
            return get<Keyword::SensingMethod>();

        case Keyword::FileSource:
            return get<Keyword::FileSource>();

        case Keyword::SceneType:
            return get<Keyword::SceneType>();

        case Keyword::CustomRendered:
            return get<Keyword::CustomRendered>();

        case Keyword::ExposureMode:
            return get<Keyword::ExposureMode>();

        case Keyword::WhiteBalance:
            return get<Keyword::WhiteBalance>();

        case Keyword::DigitalZoomRatio:
            return get<Keyword::DigitalZoomRatio>();

        case Keyword::FocalLengthIn35mmFilm:
            return get<Keyword::FocalLengthIn35mmFilm>();

        case Keyword::SceneCaptureType:
            return get<Keyword::SceneCaptureType>();

        case Keyword::GainControl:
            return get<Keyword::GainControl>();

        case Keyword::Contrast:
            return get<Keyword::Contrast>();

        case Keyword::Saturation:
            return get<Keyword::Saturation>();

        case Keyword::Sharpness:
            return get<Keyword::Sharpness>();

        case Keyword::DeviceSettingDescription:
            return get<Keyword::DeviceSettingDescription>();

        case Keyword::SubjectDistanceRange:
            return get<Keyword::SubjectDistanceRange>();

        case Keyword::CameraOwnerName:
            return get<Keyword::CameraOwnerName>();

        case Keyword::LensSpecification:
            return get<Keyword::LensSpecification>();

        case Keyword::LensMake:
            return get<Keyword::LensMake>();

        case Keyword::LensModel:
            return get<Keyword::LensModel>();

        case Keyword::LensSerialNumber:
            return get<Keyword::LensSerialNumber>();

        case Keyword::InteroperabilityIndex:
            return get<Keyword::InteroperabilityIndex>();

        case Keyword::InteroperabilityVersion:
            return get<Keyword::InteroperabilityVersion>();

        case Keyword::GPSVersionID:
            return get<Keyword::GPSVersionID>();

        case Keyword::GPSLatitudeRef:
            return get<Keyword::GPSLatitudeRef>();

        case Keyword::GPSLatitude:
            return get<Keyword::GPSLatitude>();

        case Keyword::GPSLongitudeRef:
            return get<Keyword::GPSLongitudeRef>();

        case Keyword::GPSLongitude:
            return get<Keyword::GPSLongitude>();

        case Keyword::GPSAltitudeRef:
            return get<Keyword::GPSAltitudeRef>();

        case Keyword::GPSAltitude:
            return get<Keyword::GPSAltitude>();

        case Keyword::GPSTimeStamp:
            return get<Keyword::GPSTimeStamp>();

        case Keyword::GPSSatellites:
            return get<Keyword::GPSSatellites>();

        case Keyword::GPstatus:
            return get<Keyword::GPstatus>();

        case Keyword::GPSMeasureMode:
            return get<Keyword::GPSMeasureMode>();

        case Keyword::GPSDOP:
            return get<Keyword::GPSDOP>();

        case Keyword::GPSSpeedRef:
            return get<Keyword::GPSSpeedRef>();

        case Keyword::GPSSpeed:
            return get<Keyword::GPSSpeed>();

        case Keyword::GPSTrackRef:
            return get<Keyword::GPSTrackRef>();

        case Keyword::GPSTrack:
            return get<Keyword::GPSTrack>();

        case Keyword::GPSImgDirectionRef:
            return get<Keyword::GPSImgDirectionRef>();

        case Keyword::GPSImgDirection:
            return get<Keyword::GPSImgDirection>();

        case Keyword::GPSMapDatum:
            return get<Keyword::GPSMapDatum>();

        case Keyword::GPSDestLatitudeRef:
            return get<Keyword::GPSDestLatitudeRef>();

        case Keyword::GPSDestLatitude:
            return get<Keyword::GPSDestLatitude>();

        case Keyword::GPSDestLongitudeRef:
            return get<Keyword::GPSDestLongitudeRef>();

        case Keyword::GPSDestLongitude:
            return get<Keyword::GPSDestLongitude>();

        case Keyword::GPSDestBearingRef:
            return get<Keyword::GPSDestBearingRef>();

        case Keyword::GPSDestBearing:
            return get<Keyword::GPSDestBearing>();

        case Keyword::GPSDestDistanceRef:
            return get<Keyword::GPSDestDistanceRef>();

        case Keyword::GPSDestDistance:
            return get<Keyword::GPSDestDistance>();

        case Keyword::GPSProcessingMethod:
            return get<Keyword::GPSProcessingMethod>();

        case Keyword::GPSAreaInformation:
            return get<Keyword::GPSAreaInformation>();

        case Keyword::GPSDateStamp:
            return get<Keyword::GPSDateStamp>();

        case Keyword::GPSDifferential:
            return get<Keyword::GPSDifferential>();

        case Keyword::LightSourcePolarization:
            return get<Keyword::LightSourcePolarization>();

        case Keyword::EmitterColorTemperature:
            return get<Keyword::EmitterColorTemperature>();

        case Keyword::ContactMethod:
            return get<Keyword::ContactMethod>();

        case Keyword::ImmersionMedia:
            return get<Keyword::ImmersionMedia>();

        case Keyword::OpticalMagnificationFactor:
            return get<Keyword::OpticalMagnificationFactor>();

        case Keyword::ContrastBolusAgent:
            return get<Keyword::ContrastBolusAgent>();

        case Keyword::ContrastBolusAgentSequence:
            return get<Keyword::ContrastBolusAgentSequence>();

        case Keyword::ContrastBolusT1Relaxivity:
            return get<Keyword::ContrastBolusT1Relaxivity>();

        case Keyword::ContrastBolusAdministrationRouteSequence:
            return get<Keyword::ContrastBolusAdministrationRouteSequence>();

        case Keyword::BodyPartExamined:
            return get<Keyword::BodyPartExamined>();

        case Keyword::ScanningSequence:
            return get<Keyword::ScanningSequence>();

        case Keyword::SequenceVariant:
            return get<Keyword::SequenceVariant>();

        case Keyword::ScanOptions:
            return get<Keyword::ScanOptions>();

        case Keyword::MRAcquisitionType:
            return get<Keyword::MRAcquisitionType>();

        case Keyword::SequenceName:
            return get<Keyword::SequenceName>();

        case Keyword::AngioFlag:
            return get<Keyword::AngioFlag>();

        case Keyword::InterventionDrugInformationSequence:
            return get<Keyword::InterventionDrugInformationSequence>();

        case Keyword::InterventionDrugStopTime:
            return get<Keyword::InterventionDrugStopTime>();

        case Keyword::InterventionDrugDose:
            return get<Keyword::InterventionDrugDose>();

        case Keyword::InterventionDrugCodeSequence:
            return get<Keyword::InterventionDrugCodeSequence>();

        case Keyword::AdditionalDrugSequence:
            return get<Keyword::AdditionalDrugSequence>();

        case Keyword::Radiopharmaceutical:
            return get<Keyword::Radiopharmaceutical>();

        case Keyword::InterventionDrugName:
            return get<Keyword::InterventionDrugName>();

        case Keyword::InterventionDrugStartTime:
            return get<Keyword::InterventionDrugStartTime>();

        case Keyword::InterventionSequence:
            return get<Keyword::InterventionSequence>();

        case Keyword::InterventionStatus:
            return get<Keyword::InterventionStatus>();

        case Keyword::InterventionDescription:
            return get<Keyword::InterventionDescription>();

        case Keyword::CineRate:
            return get<Keyword::CineRate>();

        case Keyword::InitialCineRunState:
            return get<Keyword::InitialCineRunState>();

        case Keyword::SliceThickness:
            return get<Keyword::SliceThickness>();

        case Keyword::KVP:
            return get<Keyword::KVP>();

        case Keyword::CountsAccumulated:
            return get<Keyword::CountsAccumulated>();

        case Keyword::AcquisitionTerminationCondition:
            return get<Keyword::AcquisitionTerminationCondition>();

        case Keyword::EffectiveDuration:
            return get<Keyword::EffectiveDuration>();

        case Keyword::AcquisitionStartCondition:
            return get<Keyword::AcquisitionStartCondition>();

        case Keyword::AcquisitionStartConditionData:
            return get<Keyword::AcquisitionStartConditionData>();

        case Keyword::AcquisitionTerminationConditionData:
            return get<Keyword::AcquisitionTerminationConditionData>();

        case Keyword::RepetitionTime:
            return get<Keyword::RepetitionTime>();

        case Keyword::EchoTime:
            return get<Keyword::EchoTime>();

        case Keyword::InversionTime:
            return get<Keyword::InversionTime>();

        case Keyword::NumberOfAverages:
            return get<Keyword::NumberOfAverages>();

        case Keyword::ImagingFrequency:
            return get<Keyword::ImagingFrequency>();

        case Keyword::ImagedNucleus:
            return get<Keyword::ImagedNucleus>();

        case Keyword::EchoNumbers:
            return get<Keyword::EchoNumbers>();

        case Keyword::MagneticFieldStrength:
            return get<Keyword::MagneticFieldStrength>();

        case Keyword::SpacingBetweenSlices:
            return get<Keyword::SpacingBetweenSlices>();

        case Keyword::NumberOfPhaseEncodingSteps:
            return get<Keyword::NumberOfPhaseEncodingSteps>();

        case Keyword::DataCollectionDiameter:
            return get<Keyword::DataCollectionDiameter>();

        case Keyword::EchoTrainLength:
            return get<Keyword::EchoTrainLength>();

        case Keyword::PercentSampling:
            return get<Keyword::PercentSampling>();

        case Keyword::PercentPhaseFieldOfView:
            return get<Keyword::PercentPhaseFieldOfView>();

        case Keyword::PixelBandwidth:
            return get<Keyword::PixelBandwidth>();

        case Keyword::DeviceSerialNumber:
            return get<Keyword::DeviceSerialNumber>();

        case Keyword::DeviceUID:
            return get<Keyword::DeviceUID>();

        case Keyword::DeviceID:
            return get<Keyword::DeviceID>();

        case Keyword::PlateID:
            return get<Keyword::PlateID>();

        case Keyword::GeneratorID:
            return get<Keyword::GeneratorID>();

        case Keyword::GridID:
            return get<Keyword::GridID>();

        case Keyword::CassetteID:
            return get<Keyword::CassetteID>();

        case Keyword::GantryID:
            return get<Keyword::GantryID>();

        case Keyword::UniqueDeviceIdentifier:
            return get<Keyword::UniqueDeviceIdentifier>();

        case Keyword::UDISequence:
            return get<Keyword::UDISequence>();

        case Keyword::ManufacturerDeviceClassUID:
            return get<Keyword::ManufacturerDeviceClassUID>();

        case Keyword::SecondaryCaptureDeviceID:
            return get<Keyword::SecondaryCaptureDeviceID>();

        case Keyword::DateOfSecondaryCapture:
            return get<Keyword::DateOfSecondaryCapture>();

        case Keyword::TimeOfSecondaryCapture:
            return get<Keyword::TimeOfSecondaryCapture>();

        case Keyword::SecondaryCaptureDeviceManufacturer:
            return get<Keyword::SecondaryCaptureDeviceManufacturer>();

        case Keyword::SecondaryCaptureDeviceManufacturerModelName:
            return get<Keyword::SecondaryCaptureDeviceManufacturerModelName>();

        case Keyword::SecondaryCaptureDeviceSoftwareVersions:
            return get<Keyword::SecondaryCaptureDeviceSoftwareVersions>();

        case Keyword::SoftwareVersions:
            return get<Keyword::SoftwareVersions>();

        case Keyword::VideoImageFormatAcquired:
            return get<Keyword::VideoImageFormatAcquired>();

        case Keyword::DigitalImageFormatAcquired:
            return get<Keyword::DigitalImageFormatAcquired>();

        case Keyword::ProtocolName:
            return get<Keyword::ProtocolName>();

        case Keyword::ContrastBolusRoute:
            return get<Keyword::ContrastBolusRoute>();

        case Keyword::ContrastBolusVolume:
            return get<Keyword::ContrastBolusVolume>();

        case Keyword::ContrastBolusStartTime:
            return get<Keyword::ContrastBolusStartTime>();

        case Keyword::ContrastBolusStopTime:
            return get<Keyword::ContrastBolusStopTime>();

        case Keyword::ContrastBolusTotalDose:
            return get<Keyword::ContrastBolusTotalDose>();

        case Keyword::ContrastFlowRate:
            return get<Keyword::ContrastFlowRate>();

        case Keyword::ContrastFlowDuration:
            return get<Keyword::ContrastFlowDuration>();

        case Keyword::ContrastBolusIngredient:
            return get<Keyword::ContrastBolusIngredient>();

        case Keyword::ContrastBolusIngredientConcentration:
            return get<Keyword::ContrastBolusIngredientConcentration>();

        case Keyword::SpatialResolution:
            return get<Keyword::SpatialResolution>();

        case Keyword::TriggerTime:
            return get<Keyword::TriggerTime>();

        case Keyword::TriggerSourceOrType:
            return get<Keyword::TriggerSourceOrType>();

        case Keyword::NominalInterval:
            return get<Keyword::NominalInterval>();

        case Keyword::FrameTime:
            return get<Keyword::FrameTime>();

        case Keyword::CardiacFramingType:
            return get<Keyword::CardiacFramingType>();

        case Keyword::FrameTimeVector:
            return get<Keyword::FrameTimeVector>();

        case Keyword::FrameDelay:
            return get<Keyword::FrameDelay>();

        case Keyword::ImageTriggerDelay:
            return get<Keyword::ImageTriggerDelay>();

        case Keyword::SynchronizationTrigger:
            return get<Keyword::SynchronizationTrigger>();

        case Keyword::SynchronizationChannel:
            return get<Keyword::SynchronizationChannel>();

        case Keyword::RadiopharmaceuticalRoute:
            return get<Keyword::RadiopharmaceuticalRoute>();

        case Keyword::RadiopharmaceuticalVolume:
            return get<Keyword::RadiopharmaceuticalVolume>();

        case Keyword::RadiopharmaceuticalStartTime:
            return get<Keyword::RadiopharmaceuticalStartTime>();

        case Keyword::RadiopharmaceuticalStopTime:
            return get<Keyword::RadiopharmaceuticalStopTime>();

        case Keyword::RadionuclideTotalDose:
            return get<Keyword::RadionuclideTotalDose>();

        case Keyword::RadionuclideHalfLife:
            return get<Keyword::RadionuclideHalfLife>();

        case Keyword::RadionuclidePositronFraction:
            return get<Keyword::RadionuclidePositronFraction>();

        case Keyword::RadiopharmaceuticalSpecificActivity:
            return get<Keyword::RadiopharmaceuticalSpecificActivity>();

        case Keyword::RadiopharmaceuticalStartDateTime:
            return get<Keyword::RadiopharmaceuticalStartDateTime>();

        case Keyword::RadiopharmaceuticalStopDateTime:
            return get<Keyword::RadiopharmaceuticalStopDateTime>();

        case Keyword::BeatRejectionFlag:
            return get<Keyword::BeatRejectionFlag>();

        case Keyword::LowRRValue:
            return get<Keyword::LowRRValue>();

        case Keyword::HighRRValue:
            return get<Keyword::HighRRValue>();

        case Keyword::IntervalsAcquired:
            return get<Keyword::IntervalsAcquired>();

        case Keyword::IntervalsRejected:
            return get<Keyword::IntervalsRejected>();

        case Keyword::PVCRejection:
            return get<Keyword::PVCRejection>();

        case Keyword::SkipBeats:
            return get<Keyword::SkipBeats>();

        case Keyword::HeartRate:
            return get<Keyword::HeartRate>();

        case Keyword::CardiacNumberOfImages:
            return get<Keyword::CardiacNumberOfImages>();

        case Keyword::TriggerWindow:
            return get<Keyword::TriggerWindow>();

        case Keyword::ReconstructionDiameter:
            return get<Keyword::ReconstructionDiameter>();

        case Keyword::DistanceSourceToDetector:
            return get<Keyword::DistanceSourceToDetector>();

        case Keyword::DistanceSourceToPatient:
            return get<Keyword::DistanceSourceToPatient>();

        case Keyword::EstimatedRadiographicMagnificationFactor:
            return get<Keyword::EstimatedRadiographicMagnificationFactor>();

        case Keyword::GantryDetectorTilt:
            return get<Keyword::GantryDetectorTilt>();

        case Keyword::GantryDetectorSlew:
            return get<Keyword::GantryDetectorSlew>();

        case Keyword::TableHeight:
            return get<Keyword::TableHeight>();

        case Keyword::TableTraverse:
            return get<Keyword::TableTraverse>();

        case Keyword::TableMotion:
            return get<Keyword::TableMotion>();

        case Keyword::TableVerticalIncrement:
            return get<Keyword::TableVerticalIncrement>();

        case Keyword::TableLateralIncrement:
            return get<Keyword::TableLateralIncrement>();

        case Keyword::TableLongitudinalIncrement:
            return get<Keyword::TableLongitudinalIncrement>();

        case Keyword::TableAngle:
            return get<Keyword::TableAngle>();

        case Keyword::TableType:
            return get<Keyword::TableType>();

        case Keyword::RotationDirection:
            return get<Keyword::RotationDirection>();

        case Keyword::RadialPosition:
            return get<Keyword::RadialPosition>();

        case Keyword::ScanArc:
            return get<Keyword::ScanArc>();

        case Keyword::AngularStep:
            return get<Keyword::AngularStep>();

        case Keyword::CenterOfRotationOffset:
            return get<Keyword::CenterOfRotationOffset>();

        case Keyword::FieldOfViewShape:
            return get<Keyword::FieldOfViewShape>();

        case Keyword::FieldOfViewDimensions:
            return get<Keyword::FieldOfViewDimensions>();

        case Keyword::ExposureTime:
            return get<Keyword::ExposureTime>();

        case Keyword::XRayTubeCurrent:
            return get<Keyword::XRayTubeCurrent>();

        case Keyword::Exposure:
            return get<Keyword::Exposure>();

        case Keyword::ExposureInuAs:
            return get<Keyword::ExposureInuAs>();

        case Keyword::AveragePulseWidth:
            return get<Keyword::AveragePulseWidth>();

        case Keyword::RadiationSetting:
            return get<Keyword::RadiationSetting>();

        case Keyword::RectificationType:
            return get<Keyword::RectificationType>();

        case Keyword::RadiationMode:
            return get<Keyword::RadiationMode>();

        case Keyword::ImageAndFluoroscopyAreaDoseProduct:
            return get<Keyword::ImageAndFluoroscopyAreaDoseProduct>();

        case Keyword::FilterType:
            return get<Keyword::FilterType>();

        case Keyword::TypeOfFilters:
            return get<Keyword::TypeOfFilters>();

        case Keyword::IntensifierSize:
            return get<Keyword::IntensifierSize>();

        case Keyword::ImagerPixelSpacing:
            return get<Keyword::ImagerPixelSpacing>();

        case Keyword::Grid:
            return get<Keyword::Grid>();

        case Keyword::GeneratorPower:
            return get<Keyword::GeneratorPower>();

        case Keyword::CollimatorGridName:
            return get<Keyword::CollimatorGridName>();

        case Keyword::CollimatorType:
            return get<Keyword::CollimatorType>();

        case Keyword::FocalDistance:
            return get<Keyword::FocalDistance>();

        case Keyword::XFocusCenter:
            return get<Keyword::XFocusCenter>();

        case Keyword::YFocusCenter:
            return get<Keyword::YFocusCenter>();

        case Keyword::FocalSpots:
            return get<Keyword::FocalSpots>();

        case Keyword::AnodeTargetMaterial:
            return get<Keyword::AnodeTargetMaterial>();

        case Keyword::BodyPartThickness:
            return get<Keyword::BodyPartThickness>();

        case Keyword::CompressionForce:
            return get<Keyword::CompressionForce>();

        case Keyword::CompressionPressure:
            return get<Keyword::CompressionPressure>();

        case Keyword::PaddleDescription:
            return get<Keyword::PaddleDescription>();

        case Keyword::CompressionContactArea:
            return get<Keyword::CompressionContactArea>();

        case Keyword::DateOfLastCalibration:
            return get<Keyword::DateOfLastCalibration>();

        case Keyword::TimeOfLastCalibration:
            return get<Keyword::TimeOfLastCalibration>();

        case Keyword::DateOfManufacture:
            return get<Keyword::DateOfManufacture>();

        case Keyword::DateOfInstallation:
            return get<Keyword::DateOfInstallation>();

        case Keyword::ConvolutionKernel:
            return get<Keyword::ConvolutionKernel>();

        case Keyword::ActualFrameDuration:
            return get<Keyword::ActualFrameDuration>();

        case Keyword::CountRate:
            return get<Keyword::CountRate>();

        case Keyword::PreferredPlaybackSequencing:
            return get<Keyword::PreferredPlaybackSequencing>();

        case Keyword::ReceiveCoilName:
            return get<Keyword::ReceiveCoilName>();

        case Keyword::TransmitCoilName:
            return get<Keyword::TransmitCoilName>();

        case Keyword::PlateType:
            return get<Keyword::PlateType>();

        case Keyword::PhosphorType:
            return get<Keyword::PhosphorType>();

        case Keyword::WaterEquivalentDiameter:
            return get<Keyword::WaterEquivalentDiameter>();

        case Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence:
            return get<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>();

        case Keyword::ScanVelocity:
            return get<Keyword::ScanVelocity>();

        case Keyword::WholeBodyTechnique:
            return get<Keyword::WholeBodyTechnique>();

        case Keyword::ScanLength:
            return get<Keyword::ScanLength>();

        case Keyword::AcquisitionMatrix:
            return get<Keyword::AcquisitionMatrix>();

        case Keyword::InPlanePhaseEncodingDirection:
            return get<Keyword::InPlanePhaseEncodingDirection>();

        case Keyword::FlipAngle:
            return get<Keyword::FlipAngle>();

        case Keyword::VariableFlipAngleFlag:
            return get<Keyword::VariableFlipAngleFlag>();

        case Keyword::SAR:
            return get<Keyword::SAR>();

        case Keyword::dBdt:
            return get<Keyword::dBdt>();

        case Keyword::B1rms:
            return get<Keyword::B1rms>();

        case Keyword::AcquisitionDeviceProcessingDescription:
            return get<Keyword::AcquisitionDeviceProcessingDescription>();

        case Keyword::AcquisitionDeviceProcessingCode:
            return get<Keyword::AcquisitionDeviceProcessingCode>();

        case Keyword::CassetteOrientation:
            return get<Keyword::CassetteOrientation>();

        case Keyword::CassetteSize:
            return get<Keyword::CassetteSize>();

        case Keyword::ExposuresOnPlate:
            return get<Keyword::ExposuresOnPlate>();

        case Keyword::RelativeXRayExposure:
            return get<Keyword::RelativeXRayExposure>();

        case Keyword::ExposureIndex:
            return get<Keyword::ExposureIndex>();

        case Keyword::TargetExposureIndex:
            return get<Keyword::TargetExposureIndex>();

        case Keyword::DeviationIndex:
            return get<Keyword::DeviationIndex>();

        case Keyword::ColumnAngulation:
            return get<Keyword::ColumnAngulation>();

        case Keyword::TomoLayerHeight:
            return get<Keyword::TomoLayerHeight>();

        case Keyword::TomoAngle:
            return get<Keyword::TomoAngle>();

        case Keyword::TomoTime:
            return get<Keyword::TomoTime>();

        case Keyword::TomoType:
            return get<Keyword::TomoType>();

        case Keyword::TomoClass:
            return get<Keyword::TomoClass>();

        case Keyword::NumberOfTomosynthesisSourceImages:
            return get<Keyword::NumberOfTomosynthesisSourceImages>();

        case Keyword::PositionerMotion:
            return get<Keyword::PositionerMotion>();

        case Keyword::PositionerType:
            return get<Keyword::PositionerType>();

        case Keyword::PositionerPrimaryAngle:
            return get<Keyword::PositionerPrimaryAngle>();

        case Keyword::PositionerSecondaryAngle:
            return get<Keyword::PositionerSecondaryAngle>();

        case Keyword::PositionerPrimaryAngleIncrement:
            return get<Keyword::PositionerPrimaryAngleIncrement>();

        case Keyword::PositionerSecondaryAngleIncrement:
            return get<Keyword::PositionerSecondaryAngleIncrement>();

        case Keyword::DetectorPrimaryAngle:
            return get<Keyword::DetectorPrimaryAngle>();

        case Keyword::DetectorSecondaryAngle:
            return get<Keyword::DetectorSecondaryAngle>();

        case Keyword::ShutterShape:
            return get<Keyword::ShutterShape>();

        case Keyword::ShutterLeftVerticalEdge:
            return get<Keyword::ShutterLeftVerticalEdge>();

        case Keyword::ShutterRightVerticalEdge:
            return get<Keyword::ShutterRightVerticalEdge>();

        case Keyword::ShutterUpperHorizontalEdge:
            return get<Keyword::ShutterUpperHorizontalEdge>();

        case Keyword::ShutterLowerHorizontalEdge:
            return get<Keyword::ShutterLowerHorizontalEdge>();

        case Keyword::CenterOfCircularShutter:
            return get<Keyword::CenterOfCircularShutter>();

        case Keyword::RadiusOfCircularShutter:
            return get<Keyword::RadiusOfCircularShutter>();

        case Keyword::VerticesOfThePolygonalShutter:
            return get<Keyword::VerticesOfThePolygonalShutter>();

        case Keyword::ShutterPresentationValue:
            return get<Keyword::ShutterPresentationValue>();

        case Keyword::ShutterOverlayGroup:
            return get<Keyword::ShutterOverlayGroup>();

        case Keyword::ShutterPresentationColorCIELabValue:
            return get<Keyword::ShutterPresentationColorCIELabValue>();

        case Keyword::OutlineShapeType:
            return get<Keyword::OutlineShapeType>();

        case Keyword::OutlineLeftVerticalEdge:
            return get<Keyword::OutlineLeftVerticalEdge>();

        case Keyword::OutlineRightVerticalEdge:
            return get<Keyword::OutlineRightVerticalEdge>();

        case Keyword::OutlineUpperHorizontalEdge:
            return get<Keyword::OutlineUpperHorizontalEdge>();

        case Keyword::OutlineLowerHorizontalEdge:
            return get<Keyword::OutlineLowerHorizontalEdge>();

        case Keyword::CenterOfCircularOutline:
            return get<Keyword::CenterOfCircularOutline>();

        case Keyword::DiameterOfCircularOutline:
            return get<Keyword::DiameterOfCircularOutline>();

        case Keyword::NumberOfPolygonalVertices:
            return get<Keyword::NumberOfPolygonalVertices>();

        case Keyword::VerticesOfThePolygonalOutline:
            return get<Keyword::VerticesOfThePolygonalOutline>();

        case Keyword::CollimatorShape:
            return get<Keyword::CollimatorShape>();

        case Keyword::CollimatorLeftVerticalEdge:
            return get<Keyword::CollimatorLeftVerticalEdge>();

        case Keyword::CollimatorRightVerticalEdge:
            return get<Keyword::CollimatorRightVerticalEdge>();

        case Keyword::CollimatorUpperHorizontalEdge:
            return get<Keyword::CollimatorUpperHorizontalEdge>();

        case Keyword::CollimatorLowerHorizontalEdge:
            return get<Keyword::CollimatorLowerHorizontalEdge>();

        case Keyword::CenterOfCircularCollimator:
            return get<Keyword::CenterOfCircularCollimator>();

        case Keyword::RadiusOfCircularCollimator:
            return get<Keyword::RadiusOfCircularCollimator>();

        case Keyword::VerticesOfThePolygonalCollimator:
            return get<Keyword::VerticesOfThePolygonalCollimator>();

        case Keyword::AcquisitionTimeSynchronized:
            return get<Keyword::AcquisitionTimeSynchronized>();

        case Keyword::TimeSource:
            return get<Keyword::TimeSource>();

        case Keyword::TimeDistributionProtocol:
            return get<Keyword::TimeDistributionProtocol>();

        case Keyword::NTPSourceAddress:
            return get<Keyword::NTPSourceAddress>();

        case Keyword::PageNumberVector:
            return get<Keyword::PageNumberVector>();

        case Keyword::FrameLabelVector:
            return get<Keyword::FrameLabelVector>();

        case Keyword::FramePrimaryAngleVector:
            return get<Keyword::FramePrimaryAngleVector>();

        case Keyword::FrameSecondaryAngleVector:
            return get<Keyword::FrameSecondaryAngleVector>();

        case Keyword::SliceLocationVector:
            return get<Keyword::SliceLocationVector>();

        case Keyword::DisplayWindowLabelVector:
            return get<Keyword::DisplayWindowLabelVector>();

        case Keyword::NominalScannedPixelSpacing:
            return get<Keyword::NominalScannedPixelSpacing>();

        case Keyword::DigitizingDeviceTransportDirection:
            return get<Keyword::DigitizingDeviceTransportDirection>();

        case Keyword::RotationOfScannedFilm:
            return get<Keyword::RotationOfScannedFilm>();

        case Keyword::BiopsyTargetSequence:
            return get<Keyword::BiopsyTargetSequence>();

        case Keyword::TargetUID:
            return get<Keyword::TargetUID>();

        case Keyword::LocalizingCursorPosition:
            return get<Keyword::LocalizingCursorPosition>();

        case Keyword::CalculatedTargetPosition:
            return get<Keyword::CalculatedTargetPosition>();

        case Keyword::TargetLabel:
            return get<Keyword::TargetLabel>();

        case Keyword::DisplayedZValue:
            return get<Keyword::DisplayedZValue>();

        case Keyword::IVUSAcquisition:
            return get<Keyword::IVUSAcquisition>();

        case Keyword::IVUSPullbackRate:
            return get<Keyword::IVUSPullbackRate>();

        case Keyword::IVUSGatedRate:
            return get<Keyword::IVUSGatedRate>();

        case Keyword::IVUSPullbackStartFrameNumber:
            return get<Keyword::IVUSPullbackStartFrameNumber>();

        case Keyword::IVUSPullbackStopFrameNumber:
            return get<Keyword::IVUSPullbackStopFrameNumber>();

        case Keyword::LesionNumber:
            return get<Keyword::LesionNumber>();

        case Keyword::OutputPower:
            return get<Keyword::OutputPower>();

        case Keyword::TransducerData:
            return get<Keyword::TransducerData>();

        case Keyword::TransducerIdentificationSequence:
            return get<Keyword::TransducerIdentificationSequence>();

        case Keyword::FocusDepth:
            return get<Keyword::FocusDepth>();

        case Keyword::ProcessingFunction:
            return get<Keyword::ProcessingFunction>();

        case Keyword::MechanicalIndex:
            return get<Keyword::MechanicalIndex>();

        case Keyword::BoneThermalIndex:
            return get<Keyword::BoneThermalIndex>();

        case Keyword::CranialThermalIndex:
            return get<Keyword::CranialThermalIndex>();

        case Keyword::SoftTissueThermalIndex:
            return get<Keyword::SoftTissueThermalIndex>();

        case Keyword::SoftTissueFocusThermalIndex:
            return get<Keyword::SoftTissueFocusThermalIndex>();

        case Keyword::SoftTissueSurfaceThermalIndex:
            return get<Keyword::SoftTissueSurfaceThermalIndex>();

        case Keyword::DepthOfScanField:
            return get<Keyword::DepthOfScanField>();

        case Keyword::PatientPosition:
            return get<Keyword::PatientPosition>();

        case Keyword::ViewPosition:
            return get<Keyword::ViewPosition>();

        case Keyword::ProjectionEponymousNameCodeSequence:
            return get<Keyword::ProjectionEponymousNameCodeSequence>();

        case Keyword::Sensitivity:
            return get<Keyword::Sensitivity>();

        case Keyword::SequenceOfUltrasoundRegions:
            return get<Keyword::SequenceOfUltrasoundRegions>();

        case Keyword::RegionSpatialFormat:
            return get<Keyword::RegionSpatialFormat>();

        case Keyword::RegionDataType:
            return get<Keyword::RegionDataType>();

        case Keyword::RegionFlags:
            return get<Keyword::RegionFlags>();

        case Keyword::RegionLocationMinX0:
            return get<Keyword::RegionLocationMinX0>();

        case Keyword::RegionLocationMinY0:
            return get<Keyword::RegionLocationMinY0>();

        case Keyword::RegionLocationMaxX1:
            return get<Keyword::RegionLocationMaxX1>();

        case Keyword::RegionLocationMaxY1:
            return get<Keyword::RegionLocationMaxY1>();

        case Keyword::ReferencePixelX0:
            return get<Keyword::ReferencePixelX0>();

        case Keyword::ReferencePixelY0:
            return get<Keyword::ReferencePixelY0>();

        case Keyword::PhysicalUnitsXDirection:
            return get<Keyword::PhysicalUnitsXDirection>();

        case Keyword::PhysicalUnitsYDirection:
            return get<Keyword::PhysicalUnitsYDirection>();

        case Keyword::ReferencePixelPhysicalValueX:
            return get<Keyword::ReferencePixelPhysicalValueX>();

        case Keyword::ReferencePixelPhysicalValueY:
            return get<Keyword::ReferencePixelPhysicalValueY>();

        case Keyword::PhysicalDeltaX:
            return get<Keyword::PhysicalDeltaX>();

        case Keyword::PhysicalDeltaY:
            return get<Keyword::PhysicalDeltaY>();

        case Keyword::TransducerFrequency:
            return get<Keyword::TransducerFrequency>();

        case Keyword::TransducerType:
            return get<Keyword::TransducerType>();

        case Keyword::PulseRepetitionFrequency:
            return get<Keyword::PulseRepetitionFrequency>();

        case Keyword::DopplerCorrectionAngle:
            return get<Keyword::DopplerCorrectionAngle>();

        case Keyword::SteeringAngle:
            return get<Keyword::SteeringAngle>();

        case Keyword::DopplerSampleVolumeXPosition:
            return get<Keyword::DopplerSampleVolumeXPosition>();

        case Keyword::DopplerSampleVolumeYPosition:
            return get<Keyword::DopplerSampleVolumeYPosition>();

        case Keyword::TMLinePositionX0:
            return get<Keyword::TMLinePositionX0>();

        case Keyword::TMLinePositionY0:
            return get<Keyword::TMLinePositionY0>();

        case Keyword::TMLinePositionX1:
            return get<Keyword::TMLinePositionX1>();

        case Keyword::TMLinePositionY1:
            return get<Keyword::TMLinePositionY1>();

        case Keyword::PixelComponentOrganization:
            return get<Keyword::PixelComponentOrganization>();

        case Keyword::PixelComponentMask:
            return get<Keyword::PixelComponentMask>();

        case Keyword::PixelComponentRangeStart:
            return get<Keyword::PixelComponentRangeStart>();

        case Keyword::PixelComponentRangeStop:
            return get<Keyword::PixelComponentRangeStop>();

        case Keyword::PixelComponentPhysicalUnits:
            return get<Keyword::PixelComponentPhysicalUnits>();

        case Keyword::PixelComponentDataType:
            return get<Keyword::PixelComponentDataType>();

        case Keyword::NumberOfTableBreakPoints:
            return get<Keyword::NumberOfTableBreakPoints>();

        case Keyword::TableOfXBreakPoints:
            return get<Keyword::TableOfXBreakPoints>();

        case Keyword::TableOfYBreakPoints:
            return get<Keyword::TableOfYBreakPoints>();

        case Keyword::NumberOfTableEntries:
            return get<Keyword::NumberOfTableEntries>();

        case Keyword::TableOfPixelValues:
            return get<Keyword::TableOfPixelValues>();

        case Keyword::TableOfParameterValues:
            return get<Keyword::TableOfParameterValues>();

        case Keyword::RWaveTimeVector:
            return get<Keyword::RWaveTimeVector>();

        case Keyword::ActiveImageAreaOverlayGroup:
            return get<Keyword::ActiveImageAreaOverlayGroup>();

        case Keyword::DetectorConditionsNominalFlag:
            return get<Keyword::DetectorConditionsNominalFlag>();

        case Keyword::DetectorTemperature:
            return get<Keyword::DetectorTemperature>();

        case Keyword::DetectorType:
            return get<Keyword::DetectorType>();

        case Keyword::DetectorConfiguration:
            return get<Keyword::DetectorConfiguration>();

        case Keyword::DetectorDescription:
            return get<Keyword::DetectorDescription>();

        case Keyword::DetectorMode:
            return get<Keyword::DetectorMode>();

        case Keyword::DetectorID:
            return get<Keyword::DetectorID>();

        case Keyword::DateOfLastDetectorCalibration:
            return get<Keyword::DateOfLastDetectorCalibration>();

        case Keyword::TimeOfLastDetectorCalibration:
            return get<Keyword::TimeOfLastDetectorCalibration>();

        case Keyword::ExposuresOnDetectorSinceLastCalibration:
            return get<Keyword::ExposuresOnDetectorSinceLastCalibration>();

        case Keyword::ExposuresOnDetectorSinceManufactured:
            return get<Keyword::ExposuresOnDetectorSinceManufactured>();

        case Keyword::DetectorTimeSinceLastExposure:
            return get<Keyword::DetectorTimeSinceLastExposure>();

        case Keyword::DetectorActiveTime:
            return get<Keyword::DetectorActiveTime>();

        case Keyword::DetectorActivationOffsetFromExposure:
            return get<Keyword::DetectorActivationOffsetFromExposure>();

        case Keyword::DetectorBinning:
            return get<Keyword::DetectorBinning>();

        case Keyword::DetectorElementPhysicalSize:
            return get<Keyword::DetectorElementPhysicalSize>();

        case Keyword::DetectorElementSpacing:
            return get<Keyword::DetectorElementSpacing>();

        case Keyword::DetectorActiveShape:
            return get<Keyword::DetectorActiveShape>();

        case Keyword::DetectorActiveDimensions:
            return get<Keyword::DetectorActiveDimensions>();

        case Keyword::DetectorActiveOrigin:
            return get<Keyword::DetectorActiveOrigin>();

        case Keyword::DetectorManufacturerName:
            return get<Keyword::DetectorManufacturerName>();

        case Keyword::DetectorManufacturerModelName:
            return get<Keyword::DetectorManufacturerModelName>();

        case Keyword::FieldOfViewOrigin:
            return get<Keyword::FieldOfViewOrigin>();

        case Keyword::FieldOfViewRotation:
            return get<Keyword::FieldOfViewRotation>();

        case Keyword::FieldOfViewHorizontalFlip:
            return get<Keyword::FieldOfViewHorizontalFlip>();

        case Keyword::PixelDataAreaOriginRelativeToFOV:
            return get<Keyword::PixelDataAreaOriginRelativeToFOV>();

        case Keyword::PixelDataAreaRotationAngleRelativeToFOV:
            return get<Keyword::PixelDataAreaRotationAngleRelativeToFOV>();

        case Keyword::GridAbsorbingMaterial:
            return get<Keyword::GridAbsorbingMaterial>();

        case Keyword::GridSpacingMaterial:
            return get<Keyword::GridSpacingMaterial>();

        case Keyword::GridThickness:
            return get<Keyword::GridThickness>();

        case Keyword::GridPitch:
            return get<Keyword::GridPitch>();

        case Keyword::GridAspectRatio:
            return get<Keyword::GridAspectRatio>();

        case Keyword::GridPeriod:
            return get<Keyword::GridPeriod>();

        case Keyword::GridFocalDistance:
            return get<Keyword::GridFocalDistance>();

        case Keyword::FilterMaterial:
            return get<Keyword::FilterMaterial>();

        case Keyword::FilterThicknessMinimum:
            return get<Keyword::FilterThicknessMinimum>();

        case Keyword::FilterThicknessMaximum:
            return get<Keyword::FilterThicknessMaximum>();

        case Keyword::FilterBeamPathLengthMinimum:
            return get<Keyword::FilterBeamPathLengthMinimum>();

        case Keyword::FilterBeamPathLengthMaximum:
            return get<Keyword::FilterBeamPathLengthMaximum>();

        case Keyword::ExposureControlMode:
            return get<Keyword::ExposureControlMode>();

        case Keyword::ExposureControlModeDescription:
            return get<Keyword::ExposureControlModeDescription>();

        case Keyword::ExposureStatus:
            return get<Keyword::ExposureStatus>();

        case Keyword::PhototimerSetting:
            return get<Keyword::PhototimerSetting>();

        case Keyword::ExposureTimeInuS:
            return get<Keyword::ExposureTimeInuS>();

        case Keyword::XRayTubeCurrentInuA:
            return get<Keyword::XRayTubeCurrentInuA>();

        case Keyword::ContentQualification:
            return get<Keyword::ContentQualification>();

        case Keyword::PulseSequenceName:
            return get<Keyword::PulseSequenceName>();

        case Keyword::MRImagingModifierSequence:
            return get<Keyword::MRImagingModifierSequence>();

        case Keyword::EchoPulseSequence:
            return get<Keyword::EchoPulseSequence>();

        case Keyword::InversionRecovery:
            return get<Keyword::InversionRecovery>();

        case Keyword::FlowCompensation:
            return get<Keyword::FlowCompensation>();

        case Keyword::MultipleSpinEcho:
            return get<Keyword::MultipleSpinEcho>();

        case Keyword::MultiPlanarExcitation:
            return get<Keyword::MultiPlanarExcitation>();

        case Keyword::PhaseContrast:
            return get<Keyword::PhaseContrast>();

        case Keyword::TimeOfFlightContrast:
            return get<Keyword::TimeOfFlightContrast>();

        case Keyword::Spoiling:
            return get<Keyword::Spoiling>();

        case Keyword::SteadyStatePulseSequence:
            return get<Keyword::SteadyStatePulseSequence>();

        case Keyword::EchoPlanarPulseSequence:
            return get<Keyword::EchoPlanarPulseSequence>();

        case Keyword::TagAngleFirstAxis:
            return get<Keyword::TagAngleFirstAxis>();

        case Keyword::MagnetizationTransfer:
            return get<Keyword::MagnetizationTransfer>();

        case Keyword::T2Preparation:
            return get<Keyword::T2Preparation>();

        case Keyword::BloodSignalNulling:
            return get<Keyword::BloodSignalNulling>();

        case Keyword::SaturationRecovery:
            return get<Keyword::SaturationRecovery>();

        case Keyword::SpectrallySelectedSuppression:
            return get<Keyword::SpectrallySelectedSuppression>();

        case Keyword::SpectrallySelectedExcitation:
            return get<Keyword::SpectrallySelectedExcitation>();

        case Keyword::SpatialPresaturation:
            return get<Keyword::SpatialPresaturation>();

        case Keyword::Tagging:
            return get<Keyword::Tagging>();

        case Keyword::OversamplingPhase:
            return get<Keyword::OversamplingPhase>();

        case Keyword::TagSpacingFirstDimension:
            return get<Keyword::TagSpacingFirstDimension>();

        case Keyword::GeometryOfKSpaceTraversal:
            return get<Keyword::GeometryOfKSpaceTraversal>();

        case Keyword::SegmentedKSpaceTraversal:
            return get<Keyword::SegmentedKSpaceTraversal>();

        case Keyword::RectilinearPhaseEncodeReordering:
            return get<Keyword::RectilinearPhaseEncodeReordering>();

        case Keyword::TagThickness:
            return get<Keyword::TagThickness>();

        case Keyword::PartialFourierDirection:
            return get<Keyword::PartialFourierDirection>();

        case Keyword::CardiacSynchronizationTechnique:
            return get<Keyword::CardiacSynchronizationTechnique>();

        case Keyword::ReceiveCoilManufacturerName:
            return get<Keyword::ReceiveCoilManufacturerName>();

        case Keyword::MRReceiveCoilSequence:
            return get<Keyword::MRReceiveCoilSequence>();

        case Keyword::ReceiveCoilType:
            return get<Keyword::ReceiveCoilType>();

        case Keyword::QuadratureReceiveCoil:
            return get<Keyword::QuadratureReceiveCoil>();

        case Keyword::MultiCoilDefinitionSequence:
            return get<Keyword::MultiCoilDefinitionSequence>();

        case Keyword::MultiCoilConfiguration:
            return get<Keyword::MultiCoilConfiguration>();

        case Keyword::MRTransmitCoilSequence:
            return get<Keyword::MRTransmitCoilSequence>();

        case Keyword::TransmitCoilManufacturerName:
            return get<Keyword::TransmitCoilManufacturerName>();

        case Keyword::TransmitCoilType:
            return get<Keyword::TransmitCoilType>();

        case Keyword::MRAcquisitionFrequencyEncodingSteps:
            return get<Keyword::MRAcquisitionFrequencyEncodingSteps>();

        case Keyword::KSpaceFiltering:
            return get<Keyword::KSpaceFiltering>();

        case Keyword::ParallelReductionFactorInPlane:
            return get<Keyword::ParallelReductionFactorInPlane>();

        case Keyword::CardiacRRIntervalSpecified:
            return get<Keyword::CardiacRRIntervalSpecified>();

        case Keyword::AcquisitionDuration:
            return get<Keyword::AcquisitionDuration>();

        case Keyword::FrameAcquisitionDateTime:
            return get<Keyword::FrameAcquisitionDateTime>();

        case Keyword::DiffusionDirectionality:
            return get<Keyword::DiffusionDirectionality>();

        case Keyword::DiffusionGradientDirectionSequence:
            return get<Keyword::DiffusionGradientDirectionSequence>();

        case Keyword::ParallelAcquisition:
            return get<Keyword::ParallelAcquisition>();

        case Keyword::ParallelAcquisitionTechnique:
            return get<Keyword::ParallelAcquisitionTechnique>();

        case Keyword::InversionTimes:
            return get<Keyword::InversionTimes>();

        case Keyword::MetaboliteMapDescription:
            return get<Keyword::MetaboliteMapDescription>();

        case Keyword::PartialFourier:
            return get<Keyword::PartialFourier>();

        case Keyword::EffectiveEchoTime:
            return get<Keyword::EffectiveEchoTime>();

        case Keyword::MetaboliteMapCodeSequence:
            return get<Keyword::MetaboliteMapCodeSequence>();

        case Keyword::ChemicalShiftSequence:
            return get<Keyword::ChemicalShiftSequence>();

        case Keyword::CardiacSignalSource:
            return get<Keyword::CardiacSignalSource>();

        case Keyword::DiffusionBValue:
            return get<Keyword::DiffusionBValue>();

        case Keyword::VelocityEncodingDirection:
            return get<Keyword::VelocityEncodingDirection>();

        case Keyword::VelocityEncodingMinimumValue:
            return get<Keyword::VelocityEncodingMinimumValue>();

        case Keyword::VelocityEncodingAcquisitionSequence:
            return get<Keyword::VelocityEncodingAcquisitionSequence>();

        case Keyword::NumberOfKSpaceTrajectories:
            return get<Keyword::NumberOfKSpaceTrajectories>();

        case Keyword::CoverageOfKSpace:
            return get<Keyword::CoverageOfKSpace>();

        case Keyword::TransmitterFrequency:
            return get<Keyword::TransmitterFrequency>();

        case Keyword::ResonantNucleus:
            return get<Keyword::ResonantNucleus>();

        case Keyword::SlabThickness:
            return get<Keyword::SlabThickness>();

        case Keyword::SlabOrientation:
            return get<Keyword::SlabOrientation>();

        case Keyword::MidSlabPosition:
            return get<Keyword::MidSlabPosition>();

        case Keyword::MRSpatialSaturationSequence:
            return get<Keyword::MRSpatialSaturationSequence>();

        case Keyword::MRTimingAndRelatedParametersSequence:
            return get<Keyword::MRTimingAndRelatedParametersSequence>();

        case Keyword::MREchoSequence:
            return get<Keyword::MREchoSequence>();

        case Keyword::MRModifierSequence:
            return get<Keyword::MRModifierSequence>();

        case Keyword::MRDiffusionSequence:
            return get<Keyword::MRDiffusionSequence>();

        case Keyword::CardiacSynchronizationSequence:
            return get<Keyword::CardiacSynchronizationSequence>();

        case Keyword::MRAveragesSequence:
            return get<Keyword::MRAveragesSequence>();

        case Keyword::MRFOVGeometrySequence:
            return get<Keyword::MRFOVGeometrySequence>();

        case Keyword::DiffusionAnisotropyType:
            return get<Keyword::DiffusionAnisotropyType>();

        case Keyword::FrameReferenceDateTime:
            return get<Keyword::FrameReferenceDateTime>();

        case Keyword::MRMetaboliteMapSequence:
            return get<Keyword::MRMetaboliteMapSequence>();

        case Keyword::ParallelReductionFactorOutOfPlane:
            return get<Keyword::ParallelReductionFactorOutOfPlane>();

        case Keyword::ParallelReductionFactorSecondInPlane:
            return get<Keyword::ParallelReductionFactorSecondInPlane>();

        case Keyword::CardiacBeatRejectionTechnique:
            return get<Keyword::CardiacBeatRejectionTechnique>();

        case Keyword::RespiratoryMotionCompensationTechnique:
            return get<Keyword::RespiratoryMotionCompensationTechnique>();

        case Keyword::RespiratorySignalSource:
            return get<Keyword::RespiratorySignalSource>();

        case Keyword::BulkMotionCompensationTechnique:
            return get<Keyword::BulkMotionCompensationTechnique>();

        case Keyword::BulkMotionSignalSource:
            return get<Keyword::BulkMotionSignalSource>();

        case Keyword::ApplicableSafetyStandardAgency:
            return get<Keyword::ApplicableSafetyStandardAgency>();

        case Keyword::ApplicableSafetyStandardDescription:
            return get<Keyword::ApplicableSafetyStandardDescription>();

        case Keyword::OperatingModeSequence:
            return get<Keyword::OperatingModeSequence>();

        case Keyword::GradientOutputType:
            return get<Keyword::GradientOutputType>();

        case Keyword::GradientOutput:
            return get<Keyword::GradientOutput>();

        case Keyword::FlowCompensationDirection:
            return get<Keyword::FlowCompensationDirection>();

        case Keyword::TaggingDelay:
            return get<Keyword::TaggingDelay>();

        case Keyword::MRVelocityEncodingSequence:
            return get<Keyword::MRVelocityEncodingSequence>();

        case Keyword::RespiratoryCyclePosition:
            return get<Keyword::RespiratoryCyclePosition>();

        case Keyword::VelocityEncodingMaximumValue:
            return get<Keyword::VelocityEncodingMaximumValue>();

        case Keyword::TagSpacingSecondDimension:
            return get<Keyword::TagSpacingSecondDimension>();

        case Keyword::TagAngleSecondAxis:
            return get<Keyword::TagAngleSecondAxis>();

        case Keyword::FrameAcquisitionDuration:
            return get<Keyword::FrameAcquisitionDuration>();

        case Keyword::MRImageFrameTypeSequence:
            return get<Keyword::MRImageFrameTypeSequence>();

        case Keyword::MRAcquisitionPhaseEncodingStepsInPlane:
            return get<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>();

        case Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane:
            return get<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>();

        case Keyword::CardiacCyclePosition:
            return get<Keyword::CardiacCyclePosition>();

        case Keyword::SpecificAbsorptionRateSequence:
            return get<Keyword::SpecificAbsorptionRateSequence>();

        case Keyword::RFEchoTrainLength:
            return get<Keyword::RFEchoTrainLength>();

        case Keyword::GradientEchoTrainLength:
            return get<Keyword::GradientEchoTrainLength>();

        case Keyword::ArterialSpinLabelingContrast:
            return get<Keyword::ArterialSpinLabelingContrast>();

        case Keyword::MRArterialSpinLabelingSequence:
            return get<Keyword::MRArterialSpinLabelingSequence>();

        case Keyword::ASLTechniqueDescription:
            return get<Keyword::ASLTechniqueDescription>();

        case Keyword::ASLContext:
            return get<Keyword::ASLContext>();

        case Keyword::ASLCrusherFlag:
            return get<Keyword::ASLCrusherFlag>();

        case Keyword::ASLCrusherFlowLimit:
            return get<Keyword::ASLCrusherFlowLimit>();

        case Keyword::ASLCrusherDescription:
            return get<Keyword::ASLCrusherDescription>();

        case Keyword::ASLBolusCutoffFlag:
            return get<Keyword::ASLBolusCutoffFlag>();

        case Keyword::ASLBolusCutoffTimingSequence:
            return get<Keyword::ASLBolusCutoffTimingSequence>();

        case Keyword::ASLSlabSequence:
            return get<Keyword::ASLSlabSequence>();

        case Keyword::CTAcquisitionTypeSequence:
            return get<Keyword::CTAcquisitionTypeSequence>();

        case Keyword::AcquisitionType:
            return get<Keyword::AcquisitionType>();

        case Keyword::TubeAngle:
            return get<Keyword::TubeAngle>();

        case Keyword::CTAcquisitionDetailsSequence:
            return get<Keyword::CTAcquisitionDetailsSequence>();

        case Keyword::RevolutionTime:
            return get<Keyword::RevolutionTime>();

        case Keyword::SingleCollimationWidth:
            return get<Keyword::SingleCollimationWidth>();

        case Keyword::TotalCollimationWidth:
            return get<Keyword::TotalCollimationWidth>();

        case Keyword::CTTableDynamicsSequence:
            return get<Keyword::CTTableDynamicsSequence>();

        case Keyword::TableSpeed:
            return get<Keyword::TableSpeed>();

        case Keyword::TableFeedPerRotation:
            return get<Keyword::TableFeedPerRotation>();

        case Keyword::SpiralPitchFactor:
            return get<Keyword::SpiralPitchFactor>();

        case Keyword::CTGeometrySequence:
            return get<Keyword::CTGeometrySequence>();

        case Keyword::DataCollectionCenterPatient:
            return get<Keyword::DataCollectionCenterPatient>();

        case Keyword::CTReconstructionSequence:
            return get<Keyword::CTReconstructionSequence>();

        case Keyword::ReconstructionAlgorithm:
            return get<Keyword::ReconstructionAlgorithm>();

        case Keyword::ConvolutionKernelGroup:
            return get<Keyword::ConvolutionKernelGroup>();

        case Keyword::ReconstructionFieldOfView:
            return get<Keyword::ReconstructionFieldOfView>();

        case Keyword::ReconstructionTargetCenterPatient:
            return get<Keyword::ReconstructionTargetCenterPatient>();

        case Keyword::ReconstructionAngle:
            return get<Keyword::ReconstructionAngle>();

        case Keyword::ImageFilter:
            return get<Keyword::ImageFilter>();

        case Keyword::CTExposureSequence:
            return get<Keyword::CTExposureSequence>();

        case Keyword::ReconstructionPixelSpacing:
            return get<Keyword::ReconstructionPixelSpacing>();

        case Keyword::ExposureModulationType:
            return get<Keyword::ExposureModulationType>();

        case Keyword::CTXRayDetailsSequence:
            return get<Keyword::CTXRayDetailsSequence>();

        case Keyword::CTPositionSequence:
            return get<Keyword::CTPositionSequence>();

        case Keyword::TablePosition:
            return get<Keyword::TablePosition>();

        case Keyword::ExposureTimeInms:
            return get<Keyword::ExposureTimeInms>();

        case Keyword::CTImageFrameTypeSequence:
            return get<Keyword::CTImageFrameTypeSequence>();

        case Keyword::XRayTubeCurrentInmA:
            return get<Keyword::XRayTubeCurrentInmA>();

        case Keyword::ExposureInmAs:
            return get<Keyword::ExposureInmAs>();

        case Keyword::ConstantVolumeFlag:
            return get<Keyword::ConstantVolumeFlag>();

        case Keyword::FluoroscopyFlag:
            return get<Keyword::FluoroscopyFlag>();

        case Keyword::DistanceSourceToDataCollectionCenter:
            return get<Keyword::DistanceSourceToDataCollectionCenter>();

        case Keyword::ContrastBolusAgentNumber:
            return get<Keyword::ContrastBolusAgentNumber>();

        case Keyword::ContrastBolusIngredientCodeSequence:
            return get<Keyword::ContrastBolusIngredientCodeSequence>();

        case Keyword::ContrastAdministrationProfileSequence:
            return get<Keyword::ContrastAdministrationProfileSequence>();

        case Keyword::ContrastBolusUsageSequence:
            return get<Keyword::ContrastBolusUsageSequence>();

        case Keyword::ContrastBolusAgentAdministered:
            return get<Keyword::ContrastBolusAgentAdministered>();

        case Keyword::ContrastBolusAgentDetected:
            return get<Keyword::ContrastBolusAgentDetected>();

        case Keyword::ContrastBolusAgentPhase:
            return get<Keyword::ContrastBolusAgentPhase>();

        case Keyword::CTDIvol:
            return get<Keyword::CTDIvol>();

        case Keyword::CTDIPhantomTypeCodeSequence:
            return get<Keyword::CTDIPhantomTypeCodeSequence>();

        case Keyword::CalciumScoringMassFactorPatient:
            return get<Keyword::CalciumScoringMassFactorPatient>();

        case Keyword::CalciumScoringMassFactorDevice:
            return get<Keyword::CalciumScoringMassFactorDevice>();

        case Keyword::EnergyWeightingFactor:
            return get<Keyword::EnergyWeightingFactor>();

        case Keyword::CTAdditionalXRaySourceSequence:
            return get<Keyword::CTAdditionalXRaySourceSequence>();

        case Keyword::MultienergyCTAcquisition:
            return get<Keyword::MultienergyCTAcquisition>();

        case Keyword::MultienergyCTAcquisitionSequence:
            return get<Keyword::MultienergyCTAcquisitionSequence>();

        case Keyword::MultienergyCTProcessingSequence:
            return get<Keyword::MultienergyCTProcessingSequence>();

        case Keyword::MultienergyCTCharacteristicsSequence:
            return get<Keyword::MultienergyCTCharacteristicsSequence>();

        case Keyword::MultienergyCTXRaySourceSequence:
            return get<Keyword::MultienergyCTXRaySourceSequence>();

        case Keyword::XRaySourceIndex:
            return get<Keyword::XRaySourceIndex>();

        case Keyword::XRaySourceID:
            return get<Keyword::XRaySourceID>();

        case Keyword::MultienergySourceTechnique:
            return get<Keyword::MultienergySourceTechnique>();

        case Keyword::SourceStartDateTime:
            return get<Keyword::SourceStartDateTime>();

        case Keyword::SourceEndDateTime:
            return get<Keyword::SourceEndDateTime>();

        case Keyword::SwitchingPhaseNumber:
            return get<Keyword::SwitchingPhaseNumber>();

        case Keyword::SwitchingPhaseNominalDuration:
            return get<Keyword::SwitchingPhaseNominalDuration>();

        case Keyword::SwitchingPhaseTransitionDuration:
            return get<Keyword::SwitchingPhaseTransitionDuration>();

        case Keyword::EffectiveBinEnergy:
            return get<Keyword::EffectiveBinEnergy>();

        case Keyword::MultienergyCTXRayDetectorSequence:
            return get<Keyword::MultienergyCTXRayDetectorSequence>();

        case Keyword::XRayDetectorIndex:
            return get<Keyword::XRayDetectorIndex>();

        case Keyword::XRayDetectorID:
            return get<Keyword::XRayDetectorID>();

        case Keyword::MultienergyDetectorType:
            return get<Keyword::MultienergyDetectorType>();

        case Keyword::XRayDetectorLabel:
            return get<Keyword::XRayDetectorLabel>();

        case Keyword::NominalMaxEnergy:
            return get<Keyword::NominalMaxEnergy>();

        case Keyword::NominalMinEnergy:
            return get<Keyword::NominalMinEnergy>();

        case Keyword::ReferencedXRayDetectorIndex:
            return get<Keyword::ReferencedXRayDetectorIndex>();

        case Keyword::ReferencedXRaySourceIndex:
            return get<Keyword::ReferencedXRaySourceIndex>();

        case Keyword::ReferencedPathIndex:
            return get<Keyword::ReferencedPathIndex>();

        case Keyword::MultienergyCTPathSequence:
            return get<Keyword::MultienergyCTPathSequence>();

        case Keyword::MultienergyCTPathIndex:
            return get<Keyword::MultienergyCTPathIndex>();

        case Keyword::MultienergyAcquisitionDescription:
            return get<Keyword::MultienergyAcquisitionDescription>();

        case Keyword::MonoenergeticEnergyEquivalent:
            return get<Keyword::MonoenergeticEnergyEquivalent>();

        case Keyword::DecompositionMethod:
            return get<Keyword::DecompositionMethod>();

        case Keyword::DecompositionDescription:
            return get<Keyword::DecompositionDescription>();

        case Keyword::DecompositionAlgorithmIdentificationSequence:
            return get<Keyword::DecompositionAlgorithmIdentificationSequence>();

        case Keyword::DecompositionMaterialSequence:
            return get<Keyword::DecompositionMaterialSequence>();

        case Keyword::ProjectionPixelCalibrationSequence:
            return get<Keyword::ProjectionPixelCalibrationSequence>();

        case Keyword::DistanceSourceToIsocenter:
            return get<Keyword::DistanceSourceToIsocenter>();

        case Keyword::DistanceObjectToTableTop:
            return get<Keyword::DistanceObjectToTableTop>();

        case Keyword::ObjectPixelSpacingInCenterOfBeam:
            return get<Keyword::ObjectPixelSpacingInCenterOfBeam>();

        case Keyword::PositionerPositionSequence:
            return get<Keyword::PositionerPositionSequence>();

        case Keyword::TablePositionSequence:
            return get<Keyword::TablePositionSequence>();

        case Keyword::CollimatorShapeSequence:
            return get<Keyword::CollimatorShapeSequence>();

        case Keyword::PlanesInAcquisition:
            return get<Keyword::PlanesInAcquisition>();

        case Keyword::XAXRFFrameCharacteristicsSequence:
            return get<Keyword::XAXRFFrameCharacteristicsSequence>();

        case Keyword::FrameAcquisitionSequence:
            return get<Keyword::FrameAcquisitionSequence>();

        case Keyword::XRayReceptorType:
            return get<Keyword::XRayReceptorType>();

        case Keyword::AcquisitionProtocolName:
            return get<Keyword::AcquisitionProtocolName>();

        case Keyword::AcquisitionProtocolDescription:
            return get<Keyword::AcquisitionProtocolDescription>();

        case Keyword::ContrastBolusIngredientOpaque:
            return get<Keyword::ContrastBolusIngredientOpaque>();

        case Keyword::DistanceReceptorPlaneToDetectorHousing:
            return get<Keyword::DistanceReceptorPlaneToDetectorHousing>();

        case Keyword::IntensifierActiveShape:
            return get<Keyword::IntensifierActiveShape>();

        case Keyword::IntensifierActiveDimensions:
            return get<Keyword::IntensifierActiveDimensions>();

        case Keyword::PhysicalDetectorSize:
            return get<Keyword::PhysicalDetectorSize>();

        case Keyword::PositionOfIsocenterProjection:
            return get<Keyword::PositionOfIsocenterProjection>();

        case Keyword::FieldOfViewSequence:
            return get<Keyword::FieldOfViewSequence>();

        case Keyword::FieldOfViewDescription:
            return get<Keyword::FieldOfViewDescription>();

        case Keyword::ExposureControlSensingRegionsSequence:
            return get<Keyword::ExposureControlSensingRegionsSequence>();

        case Keyword::ExposureControlSensingRegionShape:
            return get<Keyword::ExposureControlSensingRegionShape>();

        case Keyword::ExposureControlSensingRegionLeftVerticalEdge:
            return get<Keyword::ExposureControlSensingRegionLeftVerticalEdge>();

        case Keyword::ExposureControlSensingRegionRightVerticalEdge:
            return get<Keyword::ExposureControlSensingRegionRightVerticalEdge>();

        case Keyword::ExposureControlSensingRegionUpperHorizontalEdge:
            return get<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>();

        case Keyword::ExposureControlSensingRegionLowerHorizontalEdge:
            return get<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>();

        case Keyword::CenterOfCircularExposureControlSensingRegion:
            return get<Keyword::CenterOfCircularExposureControlSensingRegion>();

        case Keyword::RadiusOfCircularExposureControlSensingRegion:
            return get<Keyword::RadiusOfCircularExposureControlSensingRegion>();

        case Keyword::VerticesOfThePolygonalExposureControlSensingRegion:
            return get<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>();

        case Keyword::ColumnAngulationPatient:
            return get<Keyword::ColumnAngulationPatient>();

        case Keyword::BeamAngle:
            return get<Keyword::BeamAngle>();

        case Keyword::FrameDetectorParametersSequence:
            return get<Keyword::FrameDetectorParametersSequence>();

        case Keyword::CalculatedAnatomyThickness:
            return get<Keyword::CalculatedAnatomyThickness>();

        case Keyword::CalibrationSequence:
            return get<Keyword::CalibrationSequence>();

        case Keyword::ObjectThicknessSequence:
            return get<Keyword::ObjectThicknessSequence>();

        case Keyword::PlaneIdentification:
            return get<Keyword::PlaneIdentification>();

        case Keyword::FieldOfViewDimensionsInFloat:
            return get<Keyword::FieldOfViewDimensionsInFloat>();

        case Keyword::IsocenterReferenceSystemSequence:
            return get<Keyword::IsocenterReferenceSystemSequence>();

        case Keyword::PositionerIsocenterPrimaryAngle:
            return get<Keyword::PositionerIsocenterPrimaryAngle>();

        case Keyword::PositionerIsocenterSecondaryAngle:
            return get<Keyword::PositionerIsocenterSecondaryAngle>();

        case Keyword::PositionerIsocenterDetectorRotationAngle:
            return get<Keyword::PositionerIsocenterDetectorRotationAngle>();

        case Keyword::TableXPositionToIsocenter:
            return get<Keyword::TableXPositionToIsocenter>();

        case Keyword::TableYPositionToIsocenter:
            return get<Keyword::TableYPositionToIsocenter>();

        case Keyword::TableZPositionToIsocenter:
            return get<Keyword::TableZPositionToIsocenter>();

        case Keyword::TableHorizontalRotationAngle:
            return get<Keyword::TableHorizontalRotationAngle>();

        case Keyword::TableHeadTiltAngle:
            return get<Keyword::TableHeadTiltAngle>();

        case Keyword::TableCradleTiltAngle:
            return get<Keyword::TableCradleTiltAngle>();

        case Keyword::FrameDisplayShutterSequence:
            return get<Keyword::FrameDisplayShutterSequence>();

        case Keyword::AcquiredImageAreaDoseProduct:
            return get<Keyword::AcquiredImageAreaDoseProduct>();

        case Keyword::CArmPositionerTabletopRelationship:
            return get<Keyword::CArmPositionerTabletopRelationship>();

        case Keyword::XRayGeometrySequence:
            return get<Keyword::XRayGeometrySequence>();

        case Keyword::IrradiationEventIdentificationSequence:
            return get<Keyword::IrradiationEventIdentificationSequence>();

        case Keyword::XRay3DFrameTypeSequence:
            return get<Keyword::XRay3DFrameTypeSequence>();

        case Keyword::ContributingSourcesSequence:
            return get<Keyword::ContributingSourcesSequence>();

        case Keyword::XRay3DAcquisitionSequence:
            return get<Keyword::XRay3DAcquisitionSequence>();

        case Keyword::PrimaryPositionerScanArc:
            return get<Keyword::PrimaryPositionerScanArc>();

        case Keyword::SecondaryPositionerScanArc:
            return get<Keyword::SecondaryPositionerScanArc>();

        case Keyword::PrimaryPositionerScanStartAngle:
            return get<Keyword::PrimaryPositionerScanStartAngle>();

        case Keyword::SecondaryPositionerScanStartAngle:
            return get<Keyword::SecondaryPositionerScanStartAngle>();

        case Keyword::PrimaryPositionerIncrement:
            return get<Keyword::PrimaryPositionerIncrement>();

        case Keyword::SecondaryPositionerIncrement:
            return get<Keyword::SecondaryPositionerIncrement>();

        case Keyword::StartAcquisitionDateTime:
            return get<Keyword::StartAcquisitionDateTime>();

        case Keyword::EndAcquisitionDateTime:
            return get<Keyword::EndAcquisitionDateTime>();

        case Keyword::PrimaryPositionerIncrementSign:
            return get<Keyword::PrimaryPositionerIncrementSign>();

        case Keyword::SecondaryPositionerIncrementSign:
            return get<Keyword::SecondaryPositionerIncrementSign>();

        case Keyword::ApplicationName:
            return get<Keyword::ApplicationName>();

        case Keyword::ApplicationVersion:
            return get<Keyword::ApplicationVersion>();

        case Keyword::ApplicationManufacturer:
            return get<Keyword::ApplicationManufacturer>();

        case Keyword::AlgorithmType:
            return get<Keyword::AlgorithmType>();

        case Keyword::AlgorithmDescription:
            return get<Keyword::AlgorithmDescription>();

        case Keyword::XRay3DReconstructionSequence:
            return get<Keyword::XRay3DReconstructionSequence>();

        case Keyword::ReconstructionDescription:
            return get<Keyword::ReconstructionDescription>();

        case Keyword::PerProjectionAcquisitionSequence:
            return get<Keyword::PerProjectionAcquisitionSequence>();

        case Keyword::DetectorPositionSequence:
            return get<Keyword::DetectorPositionSequence>();

        case Keyword::XRayAcquisitionDoseSequence:
            return get<Keyword::XRayAcquisitionDoseSequence>();

        case Keyword::XRaySourceIsocenterPrimaryAngle:
            return get<Keyword::XRaySourceIsocenterPrimaryAngle>();

        case Keyword::XRaySourceIsocenterSecondaryAngle:
            return get<Keyword::XRaySourceIsocenterSecondaryAngle>();

        case Keyword::BreastSupportIsocenterPrimaryAngle:
            return get<Keyword::BreastSupportIsocenterPrimaryAngle>();

        case Keyword::BreastSupportIsocenterSecondaryAngle:
            return get<Keyword::BreastSupportIsocenterSecondaryAngle>();

        case Keyword::BreastSupportXPositionToIsocenter:
            return get<Keyword::BreastSupportXPositionToIsocenter>();

        case Keyword::BreastSupportYPositionToIsocenter:
            return get<Keyword::BreastSupportYPositionToIsocenter>();

        case Keyword::BreastSupportZPositionToIsocenter:
            return get<Keyword::BreastSupportZPositionToIsocenter>();

        case Keyword::DetectorIsocenterPrimaryAngle:
            return get<Keyword::DetectorIsocenterPrimaryAngle>();

        case Keyword::DetectorIsocenterSecondaryAngle:
            return get<Keyword::DetectorIsocenterSecondaryAngle>();

        case Keyword::DetectorXPositionToIsocenter:
            return get<Keyword::DetectorXPositionToIsocenter>();

        case Keyword::DetectorYPositionToIsocenter:
            return get<Keyword::DetectorYPositionToIsocenter>();

        case Keyword::DetectorZPositionToIsocenter:
            return get<Keyword::DetectorZPositionToIsocenter>();

        case Keyword::XRayGridSequence:
            return get<Keyword::XRayGridSequence>();

        case Keyword::XRayFilterSequence:
            return get<Keyword::XRayFilterSequence>();

        case Keyword::DetectorActiveAreaTLHCPosition:
            return get<Keyword::DetectorActiveAreaTLHCPosition>();

        case Keyword::DetectorActiveAreaOrientation:
            return get<Keyword::DetectorActiveAreaOrientation>();

        case Keyword::PositionerPrimaryAngleDirection:
            return get<Keyword::PositionerPrimaryAngleDirection>();

        case Keyword::DiffusionBMatrixSequence:
            return get<Keyword::DiffusionBMatrixSequence>();

        case Keyword::FunctionalMRSequence:
            return get<Keyword::FunctionalMRSequence>();

        case Keyword::FunctionalSettlingPhaseFramesPresent:
            return get<Keyword::FunctionalSettlingPhaseFramesPresent>();

        case Keyword::FunctionalSyncPulse:
            return get<Keyword::FunctionalSyncPulse>();

        case Keyword::SettlingPhaseFrame:
            return get<Keyword::SettlingPhaseFrame>();

        case Keyword::DecayCorrectionDateTime:
            return get<Keyword::DecayCorrectionDateTime>();

        case Keyword::StartDensityThreshold:
            return get<Keyword::StartDensityThreshold>();

        case Keyword::StartRelativeDensityDifferenceThreshold:
            return get<Keyword::StartRelativeDensityDifferenceThreshold>();

        case Keyword::StartCardiacTriggerCountThreshold:
            return get<Keyword::StartCardiacTriggerCountThreshold>();

        case Keyword::StartRespiratoryTriggerCountThreshold:
            return get<Keyword::StartRespiratoryTriggerCountThreshold>();

        case Keyword::TerminationCountsThreshold:
            return get<Keyword::TerminationCountsThreshold>();

        case Keyword::TerminationDensityThreshold:
            return get<Keyword::TerminationDensityThreshold>();

        case Keyword::TerminationRelativeDensityThreshold:
            return get<Keyword::TerminationRelativeDensityThreshold>();

        case Keyword::TerminationTimeThreshold:
            return get<Keyword::TerminationTimeThreshold>();

        case Keyword::TerminationCardiacTriggerCountThreshold:
            return get<Keyword::TerminationCardiacTriggerCountThreshold>();

        case Keyword::TerminationRespiratoryTriggerCountThreshold:
            return get<Keyword::TerminationRespiratoryTriggerCountThreshold>();

        case Keyword::DetectorGeometry:
            return get<Keyword::DetectorGeometry>();

        case Keyword::TransverseDetectorSeparation:
            return get<Keyword::TransverseDetectorSeparation>();

        case Keyword::AxialDetectorDimension:
            return get<Keyword::AxialDetectorDimension>();

        case Keyword::RadiopharmaceuticalAgentNumber:
            return get<Keyword::RadiopharmaceuticalAgentNumber>();

        case Keyword::PETFrameAcquisitionSequence:
            return get<Keyword::PETFrameAcquisitionSequence>();

        case Keyword::PETDetectorMotionDetailsSequence:
            return get<Keyword::PETDetectorMotionDetailsSequence>();

        case Keyword::PETTableDynamicsSequence:
            return get<Keyword::PETTableDynamicsSequence>();

        case Keyword::PETPositionSequence:
            return get<Keyword::PETPositionSequence>();

        case Keyword::PETFrameCorrectionFactorsSequence:
            return get<Keyword::PETFrameCorrectionFactorsSequence>();

        case Keyword::RadiopharmaceuticalUsageSequence:
            return get<Keyword::RadiopharmaceuticalUsageSequence>();

        case Keyword::AttenuationCorrectionSource:
            return get<Keyword::AttenuationCorrectionSource>();

        case Keyword::NumberOfIterations:
            return get<Keyword::NumberOfIterations>();

        case Keyword::NumberOfSubsets:
            return get<Keyword::NumberOfSubsets>();

        case Keyword::PETReconstructionSequence:
            return get<Keyword::PETReconstructionSequence>();

        case Keyword::PETFrameTypeSequence:
            return get<Keyword::PETFrameTypeSequence>();

        case Keyword::TimeOfFlightInformationUsed:
            return get<Keyword::TimeOfFlightInformationUsed>();

        case Keyword::ReconstructionType:
            return get<Keyword::ReconstructionType>();

        case Keyword::DecayCorrected:
            return get<Keyword::DecayCorrected>();

        case Keyword::AttenuationCorrected:
            return get<Keyword::AttenuationCorrected>();

        case Keyword::ScatterCorrected:
            return get<Keyword::ScatterCorrected>();

        case Keyword::DeadTimeCorrected:
            return get<Keyword::DeadTimeCorrected>();

        case Keyword::GantryMotionCorrected:
            return get<Keyword::GantryMotionCorrected>();

        case Keyword::PatientMotionCorrected:
            return get<Keyword::PatientMotionCorrected>();

        case Keyword::CountLossNormalizationCorrected:
            return get<Keyword::CountLossNormalizationCorrected>();

        case Keyword::RandomsCorrected:
            return get<Keyword::RandomsCorrected>();

        case Keyword::NonUniformRadialSamplingCorrected:
            return get<Keyword::NonUniformRadialSamplingCorrected>();

        case Keyword::SensitivityCalibrated:
            return get<Keyword::SensitivityCalibrated>();

        case Keyword::DetectorNormalizationCorrection:
            return get<Keyword::DetectorNormalizationCorrection>();

        case Keyword::IterativeReconstructionMethod:
            return get<Keyword::IterativeReconstructionMethod>();

        case Keyword::AttenuationCorrectionTemporalRelationship:
            return get<Keyword::AttenuationCorrectionTemporalRelationship>();

        case Keyword::PatientPhysiologicalStateSequence:
            return get<Keyword::PatientPhysiologicalStateSequence>();

        case Keyword::PatientPhysiologicalStateCodeSequence:
            return get<Keyword::PatientPhysiologicalStateCodeSequence>();

        case Keyword::DepthsOfFocus:
            return get<Keyword::DepthsOfFocus>();

        case Keyword::ExcludedIntervalsSequence:
            return get<Keyword::ExcludedIntervalsSequence>();

        case Keyword::ExclusionStartDateTime:
            return get<Keyword::ExclusionStartDateTime>();

        case Keyword::ExclusionDuration:
            return get<Keyword::ExclusionDuration>();

        case Keyword::USImageDescriptionSequence:
            return get<Keyword::USImageDescriptionSequence>();

        case Keyword::ImageDataTypeSequence:
            return get<Keyword::ImageDataTypeSequence>();

        case Keyword::DataType:
            return get<Keyword::DataType>();

        case Keyword::TransducerScanPatternCodeSequence:
            return get<Keyword::TransducerScanPatternCodeSequence>();

        case Keyword::AliasedDataType:
            return get<Keyword::AliasedDataType>();

        case Keyword::PositionMeasuringDeviceUsed:
            return get<Keyword::PositionMeasuringDeviceUsed>();

        case Keyword::TransducerGeometryCodeSequence:
            return get<Keyword::TransducerGeometryCodeSequence>();

        case Keyword::TransducerBeamSteeringCodeSequence:
            return get<Keyword::TransducerBeamSteeringCodeSequence>();

        case Keyword::TransducerApplicationCodeSequence:
            return get<Keyword::TransducerApplicationCodeSequence>();

        case Keyword::ZeroVelocityPixelValue:
            return get<Keyword::ZeroVelocityPixelValue>();

        case Keyword::PhotoacousticExcitationCharacteristicsSequence:
            return get<Keyword::PhotoacousticExcitationCharacteristicsSequence>();

        case Keyword::ExcitationSpectralWidth:
            return get<Keyword::ExcitationSpectralWidth>();

        case Keyword::ExcitationEnergy:
            return get<Keyword::ExcitationEnergy>();

        case Keyword::ExcitationPulseDuration:
            return get<Keyword::ExcitationPulseDuration>();

        case Keyword::ExcitationWavelengthSequence:
            return get<Keyword::ExcitationWavelengthSequence>();

        case Keyword::ExcitationWavelength:
            return get<Keyword::ExcitationWavelength>();

        case Keyword::IlluminationTranslationFlag:
            return get<Keyword::IlluminationTranslationFlag>();

        case Keyword::AcousticCouplingMediumFlag:
            return get<Keyword::AcousticCouplingMediumFlag>();

        case Keyword::AcousticCouplingMediumCodeSequence:
            return get<Keyword::AcousticCouplingMediumCodeSequence>();

        case Keyword::AcousticCouplingMediumTemperature:
            return get<Keyword::AcousticCouplingMediumTemperature>();

        case Keyword::TransducerResponseSequence:
            return get<Keyword::TransducerResponseSequence>();

        case Keyword::CenterFrequency:
            return get<Keyword::CenterFrequency>();

        case Keyword::FractionalBandwidth:
            return get<Keyword::FractionalBandwidth>();

        case Keyword::LowerCutoffFrequency:
            return get<Keyword::LowerCutoffFrequency>();

        case Keyword::UpperCutoffFrequency:
            return get<Keyword::UpperCutoffFrequency>();

        case Keyword::TransducerTechnologySequence:
            return get<Keyword::TransducerTechnologySequence>();

        case Keyword::SoundSpeedCorrectionMechanismCodeSequence:
            return get<Keyword::SoundSpeedCorrectionMechanismCodeSequence>();

        case Keyword::ObjectSoundSpeed:
            return get<Keyword::ObjectSoundSpeed>();

        case Keyword::AcousticCouplingMediumSoundSpeed:
            return get<Keyword::AcousticCouplingMediumSoundSpeed>();

        case Keyword::PhotoacousticImageFrameTypeSequence:
            return get<Keyword::PhotoacousticImageFrameTypeSequence>();

        case Keyword::ImageDataTypeCodeSequence:
            return get<Keyword::ImageDataTypeCodeSequence>();

        case Keyword::ReferencedDefinedProtocolSequence:
            return get<Keyword::ReferencedDefinedProtocolSequence>();

        case Keyword::ReferencedPerformedProtocolSequence:
            return get<Keyword::ReferencedPerformedProtocolSequence>();

        case Keyword::SourceAcquisitionProtocolElementNumber:
            return get<Keyword::SourceAcquisitionProtocolElementNumber>();

        case Keyword::SourceReconstructionProtocolElementNumber:
            return get<Keyword::SourceReconstructionProtocolElementNumber>();

        case Keyword::ReconstructionAlgorithmSequence:
            return get<Keyword::ReconstructionAlgorithmSequence>();

        case Keyword::ContributingEquipmentSequence:
            return get<Keyword::ContributingEquipmentSequence>();

        case Keyword::ContributionDateTime:
            return get<Keyword::ContributionDateTime>();

        case Keyword::ContributionDescription:
            return get<Keyword::ContributionDescription>();

        case Keyword::StudyInstanceUID:
            return get<Keyword::StudyInstanceUID>();

        case Keyword::SeriesInstanceUID:
            return get<Keyword::SeriesInstanceUID>();

        case Keyword::StudyID:
            return get<Keyword::StudyID>();

        case Keyword::SeriesNumber:
            return get<Keyword::SeriesNumber>();

        case Keyword::AcquisitionNumber:
            return get<Keyword::AcquisitionNumber>();

        case Keyword::InstanceNumber:
            return get<Keyword::InstanceNumber>();

        case Keyword::PatientOrientation:
            return get<Keyword::PatientOrientation>();

        case Keyword::PyramidLabel:
            return get<Keyword::PyramidLabel>();

        case Keyword::ImagePositionPatient:
            return get<Keyword::ImagePositionPatient>();

        case Keyword::ImageOrientationPatient:
            return get<Keyword::ImageOrientationPatient>();

        case Keyword::FrameOfReferenceUID:
            return get<Keyword::FrameOfReferenceUID>();

        case Keyword::Laterality:
            return get<Keyword::Laterality>();

        case Keyword::ImageLaterality:
            return get<Keyword::ImageLaterality>();

        case Keyword::TemporalPositionIdentifier:
            return get<Keyword::TemporalPositionIdentifier>();

        case Keyword::NumberOfTemporalPositions:
            return get<Keyword::NumberOfTemporalPositions>();

        case Keyword::TemporalResolution:
            return get<Keyword::TemporalResolution>();

        case Keyword::SynchronizationFrameOfReferenceUID:
            return get<Keyword::SynchronizationFrameOfReferenceUID>();

        case Keyword::SOPInstanceUIDOfConcatenationSource:
            return get<Keyword::SOPInstanceUIDOfConcatenationSource>();

        case Keyword::ImagesInAcquisition:
            return get<Keyword::ImagesInAcquisition>();

        case Keyword::PositionReferenceIndicator:
            return get<Keyword::PositionReferenceIndicator>();

        case Keyword::SliceLocation:
            return get<Keyword::SliceLocation>();

        case Keyword::ImageComments:
            return get<Keyword::ImageComments>();

        case Keyword::StackID:
            return get<Keyword::StackID>();

        case Keyword::InStackPositionNumber:
            return get<Keyword::InStackPositionNumber>();

        case Keyword::FrameAnatomySequence:
            return get<Keyword::FrameAnatomySequence>();

        case Keyword::FrameLaterality:
            return get<Keyword::FrameLaterality>();

        case Keyword::FrameContentSequence:
            return get<Keyword::FrameContentSequence>();

        case Keyword::PlanePositionSequence:
            return get<Keyword::PlanePositionSequence>();

        case Keyword::PlaneOrientationSequence:
            return get<Keyword::PlaneOrientationSequence>();

        case Keyword::TemporalPositionIndex:
            return get<Keyword::TemporalPositionIndex>();

        case Keyword::NominalCardiacTriggerDelayTime:
            return get<Keyword::NominalCardiacTriggerDelayTime>();

        case Keyword::NominalCardiacTriggerTimePriorToRPeak:
            return get<Keyword::NominalCardiacTriggerTimePriorToRPeak>();

        case Keyword::ActualCardiacTriggerTimePriorToRPeak:
            return get<Keyword::ActualCardiacTriggerTimePriorToRPeak>();

        case Keyword::FrameAcquisitionNumber:
            return get<Keyword::FrameAcquisitionNumber>();

        case Keyword::DimensionIndexValues:
            return get<Keyword::DimensionIndexValues>();

        case Keyword::FrameComments:
            return get<Keyword::FrameComments>();

        case Keyword::ConcatenationUID:
            return get<Keyword::ConcatenationUID>();

        case Keyword::InConcatenationNumber:
            return get<Keyword::InConcatenationNumber>();

        case Keyword::InConcatenationTotalNumber:
            return get<Keyword::InConcatenationTotalNumber>();

        case Keyword::DimensionOrganizationUID:
            return get<Keyword::DimensionOrganizationUID>();

        case Keyword::DimensionIndexPointer:
            return get<Keyword::DimensionIndexPointer>();

        case Keyword::FunctionalGroupPointer:
            return get<Keyword::FunctionalGroupPointer>();

        case Keyword::UnassignedSharedConvertedAttributesSequence:
            return get<Keyword::UnassignedSharedConvertedAttributesSequence>();

        case Keyword::UnassignedPerFrameConvertedAttributesSequence:
            return get<Keyword::UnassignedPerFrameConvertedAttributesSequence>();

        case Keyword::ConversionSourceAttributesSequence:
            return get<Keyword::ConversionSourceAttributesSequence>();

        case Keyword::DimensionIndexPrivateCreator:
            return get<Keyword::DimensionIndexPrivateCreator>();

        case Keyword::DimensionOrganizationSequence:
            return get<Keyword::DimensionOrganizationSequence>();

        case Keyword::DimensionIndexSequence:
            return get<Keyword::DimensionIndexSequence>();

        case Keyword::ConcatenationFrameOffsetNumber:
            return get<Keyword::ConcatenationFrameOffsetNumber>();

        case Keyword::FunctionalGroupPrivateCreator:
            return get<Keyword::FunctionalGroupPrivateCreator>();

        case Keyword::NominalPercentageOfCardiacPhase:
            return get<Keyword::NominalPercentageOfCardiacPhase>();

        case Keyword::NominalPercentageOfRespiratoryPhase:
            return get<Keyword::NominalPercentageOfRespiratoryPhase>();

        case Keyword::StartingRespiratoryAmplitude:
            return get<Keyword::StartingRespiratoryAmplitude>();

        case Keyword::StartingRespiratoryPhase:
            return get<Keyword::StartingRespiratoryPhase>();

        case Keyword::EndingRespiratoryAmplitude:
            return get<Keyword::EndingRespiratoryAmplitude>();

        case Keyword::EndingRespiratoryPhase:
            return get<Keyword::EndingRespiratoryPhase>();

        case Keyword::RespiratoryTriggerType:
            return get<Keyword::RespiratoryTriggerType>();

        case Keyword::RRIntervalTimeNominal:
            return get<Keyword::RRIntervalTimeNominal>();

        case Keyword::ActualCardiacTriggerDelayTime:
            return get<Keyword::ActualCardiacTriggerDelayTime>();

        case Keyword::RespiratorySynchronizationSequence:
            return get<Keyword::RespiratorySynchronizationSequence>();

        case Keyword::RespiratoryIntervalTime:
            return get<Keyword::RespiratoryIntervalTime>();

        case Keyword::NominalRespiratoryTriggerDelayTime:
            return get<Keyword::NominalRespiratoryTriggerDelayTime>();

        case Keyword::RespiratoryTriggerDelayThreshold:
            return get<Keyword::RespiratoryTriggerDelayThreshold>();

        case Keyword::ActualRespiratoryTriggerDelayTime:
            return get<Keyword::ActualRespiratoryTriggerDelayTime>();

        case Keyword::ImagePositionVolume:
            return get<Keyword::ImagePositionVolume>();

        case Keyword::ImageOrientationVolume:
            return get<Keyword::ImageOrientationVolume>();

        case Keyword::UltrasoundAcquisitionGeometry:
            return get<Keyword::UltrasoundAcquisitionGeometry>();

        case Keyword::ApexPosition:
            return get<Keyword::ApexPosition>();

        case Keyword::VolumeToTransducerMappingMatrix:
            return get<Keyword::VolumeToTransducerMappingMatrix>();

        case Keyword::VolumeToTableMappingMatrix:
            return get<Keyword::VolumeToTableMappingMatrix>();

        case Keyword::VolumeToTransducerRelationship:
            return get<Keyword::VolumeToTransducerRelationship>();

        case Keyword::PatientFrameOfReferenceSource:
            return get<Keyword::PatientFrameOfReferenceSource>();

        case Keyword::TemporalPositionTimeOffset:
            return get<Keyword::TemporalPositionTimeOffset>();

        case Keyword::PlanePositionVolumeSequence:
            return get<Keyword::PlanePositionVolumeSequence>();

        case Keyword::PlaneOrientationVolumeSequence:
            return get<Keyword::PlaneOrientationVolumeSequence>();

        case Keyword::TemporalPositionSequence:
            return get<Keyword::TemporalPositionSequence>();

        case Keyword::DimensionOrganizationType:
            return get<Keyword::DimensionOrganizationType>();

        case Keyword::VolumeFrameOfReferenceUID:
            return get<Keyword::VolumeFrameOfReferenceUID>();

        case Keyword::TableFrameOfReferenceUID:
            return get<Keyword::TableFrameOfReferenceUID>();

        case Keyword::DimensionDescriptionLabel:
            return get<Keyword::DimensionDescriptionLabel>();

        case Keyword::PatientOrientationInFrameSequence:
            return get<Keyword::PatientOrientationInFrameSequence>();

        case Keyword::FrameLabel:
            return get<Keyword::FrameLabel>();

        case Keyword::AcquisitionIndex:
            return get<Keyword::AcquisitionIndex>();

        case Keyword::ContributingSOPInstancesReferenceSequence:
            return get<Keyword::ContributingSOPInstancesReferenceSequence>();

        case Keyword::ReconstructionIndex:
            return get<Keyword::ReconstructionIndex>();

        case Keyword::LightPathFilterPassThroughWavelength:
            return get<Keyword::LightPathFilterPassThroughWavelength>();

        case Keyword::LightPathFilterPassBand:
            return get<Keyword::LightPathFilterPassBand>();

        case Keyword::ImagePathFilterPassThroughWavelength:
            return get<Keyword::ImagePathFilterPassThroughWavelength>();

        case Keyword::ImagePathFilterPassBand:
            return get<Keyword::ImagePathFilterPassBand>();

        case Keyword::PatientEyeMovementCommanded:
            return get<Keyword::PatientEyeMovementCommanded>();

        case Keyword::PatientEyeMovementCommandCodeSequence:
            return get<Keyword::PatientEyeMovementCommandCodeSequence>();

        case Keyword::SphericalLensPower:
            return get<Keyword::SphericalLensPower>();

        case Keyword::CylinderLensPower:
            return get<Keyword::CylinderLensPower>();

        case Keyword::CylinderAxis:
            return get<Keyword::CylinderAxis>();

        case Keyword::EmmetropicMagnification:
            return get<Keyword::EmmetropicMagnification>();

        case Keyword::IntraOcularPressure:
            return get<Keyword::IntraOcularPressure>();

        case Keyword::HorizontalFieldOfView:
            return get<Keyword::HorizontalFieldOfView>();

        case Keyword::PupilDilated:
            return get<Keyword::PupilDilated>();

        case Keyword::DegreeOfDilation:
            return get<Keyword::DegreeOfDilation>();

        case Keyword::AcquisitionDeviceTypeCodeSequence:
            return get<Keyword::AcquisitionDeviceTypeCodeSequence>();

        case Keyword::IlluminationTypeCodeSequence:
            return get<Keyword::IlluminationTypeCodeSequence>();

        case Keyword::LightPathFilterTypeStackCodeSequence:
            return get<Keyword::LightPathFilterTypeStackCodeSequence>();

        case Keyword::ImagePathFilterTypeStackCodeSequence:
            return get<Keyword::ImagePathFilterTypeStackCodeSequence>();

        case Keyword::LensesCodeSequence:
            return get<Keyword::LensesCodeSequence>();

        case Keyword::ChannelDescriptionCodeSequence:
            return get<Keyword::ChannelDescriptionCodeSequence>();

        case Keyword::RefractiveStateSequence:
            return get<Keyword::RefractiveStateSequence>();

        case Keyword::MydriaticAgentCodeSequence:
            return get<Keyword::MydriaticAgentCodeSequence>();

        case Keyword::RelativeImagePositionCodeSequence:
            return get<Keyword::RelativeImagePositionCodeSequence>();

        case Keyword::CameraAngleOfView:
            return get<Keyword::CameraAngleOfView>();

        case Keyword::StereoPairsPresent:
            return get<Keyword::StereoPairsPresent>();

        case Keyword::AxialLengthOfTheEye:
            return get<Keyword::AxialLengthOfTheEye>();

        case Keyword::OphthalmicFrameLocationSequence:
            return get<Keyword::OphthalmicFrameLocationSequence>();

        case Keyword::ReferenceCoordinates:
            return get<Keyword::ReferenceCoordinates>();

        case Keyword::DepthSpatialResolution:
            return get<Keyword::DepthSpatialResolution>();

        case Keyword::MaximumDepthDistortion:
            return get<Keyword::MaximumDepthDistortion>();

        case Keyword::AlongScanSpatialResolution:
            return get<Keyword::AlongScanSpatialResolution>();

        case Keyword::MaximumAlongScanDistortion:
            return get<Keyword::MaximumAlongScanDistortion>();

        case Keyword::OphthalmicImageOrientation:
            return get<Keyword::OphthalmicImageOrientation>();

        case Keyword::DepthOfTransverseImage:
            return get<Keyword::DepthOfTransverseImage>();

        case Keyword::MydriaticAgentConcentrationUnitsSequence:
            return get<Keyword::MydriaticAgentConcentrationUnitsSequence>();

        case Keyword::AcrossScanSpatialResolution:
            return get<Keyword::AcrossScanSpatialResolution>();

        case Keyword::MaximumAcrossScanDistortion:
            return get<Keyword::MaximumAcrossScanDistortion>();

        case Keyword::MydriaticAgentConcentration:
            return get<Keyword::MydriaticAgentConcentration>();

        case Keyword::IlluminationWaveLength:
            return get<Keyword::IlluminationWaveLength>();

        case Keyword::IlluminationPower:
            return get<Keyword::IlluminationPower>();

        case Keyword::IlluminationBandwidth:
            return get<Keyword::IlluminationBandwidth>();

        case Keyword::MydriaticAgentSequence:
            return get<Keyword::MydriaticAgentSequence>();

        case Keyword::OphthalmicAxialLength:
            return get<Keyword::OphthalmicAxialLength>();

        case Keyword::ImplantName:
            return get<Keyword::ImplantName>();

        case Keyword::ImplantPartNumber:
            return get<Keyword::ImplantPartNumber>();

        case Keyword::OphthalmicMappingDeviceType:
            return get<Keyword::OphthalmicMappingDeviceType>();

        case Keyword::AcquisitionMethodCodeSequence:
            return get<Keyword::AcquisitionMethodCodeSequence>();

        case Keyword::AcquisitionMethodAlgorithmSequence:
            return get<Keyword::AcquisitionMethodAlgorithmSequence>();

        case Keyword::OphthalmicThicknessMapTypeCodeSequence:
            return get<Keyword::OphthalmicThicknessMapTypeCodeSequence>();

        case Keyword::OphthalmicThicknessMappingNormalsSequence:
            return get<Keyword::OphthalmicThicknessMappingNormalsSequence>();

        case Keyword::RetinalThicknessDefinitionCodeSequence:
            return get<Keyword::RetinalThicknessDefinitionCodeSequence>();

        case Keyword::PixelValueMappingToCodedConceptSequence:
            return get<Keyword::PixelValueMappingToCodedConceptSequence>();

        case Keyword::MappedPixelValue:
            return get<Keyword::MappedPixelValue>();

        case Keyword::PixelValueMappingExplanation:
            return get<Keyword::PixelValueMappingExplanation>();

        case Keyword::OphthalmicThicknessMapQualityThresholdSequence:
            return get<Keyword::OphthalmicThicknessMapQualityThresholdSequence>();

        case Keyword::AnatomicStructureReferencePoint:
            return get<Keyword::AnatomicStructureReferencePoint>();

        case Keyword::RegistrationToLocalizerSequence:
            return get<Keyword::RegistrationToLocalizerSequence>();

        case Keyword::RegisteredLocalizerUnits:
            return get<Keyword::RegisteredLocalizerUnits>();

        case Keyword::RegisteredLocalizerTopLeftHandCorner:
            return get<Keyword::RegisteredLocalizerTopLeftHandCorner>();

        case Keyword::RegisteredLocalizerBottomRightHandCorner:
            return get<Keyword::RegisteredLocalizerBottomRightHandCorner>();

        case Keyword::OphthalmicThicknessMapQualityRatingSequence:
            return get<Keyword::OphthalmicThicknessMapQualityRatingSequence>();

        case Keyword::RelevantOPTAttributesSequence:
            return get<Keyword::RelevantOPTAttributesSequence>();

        case Keyword::TransformationMethodCodeSequence:
            return get<Keyword::TransformationMethodCodeSequence>();

        case Keyword::TransformationAlgorithmSequence:
            return get<Keyword::TransformationAlgorithmSequence>();

        case Keyword::OphthalmicAxialLengthMethod:
            return get<Keyword::OphthalmicAxialLengthMethod>();

        case Keyword::OphthalmicFOV:
            return get<Keyword::OphthalmicFOV>();

        case Keyword::TwoDimensionalToThreeDimensionalMapSequence:
            return get<Keyword::TwoDimensionalToThreeDimensionalMapSequence>();

        case Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence:
            return get<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>();

        case Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence:
            return get<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>();

        case Keyword::XCoordinatesCenterPixelViewAngle:
            return get<Keyword::XCoordinatesCenterPixelViewAngle>();

        case Keyword::YCoordinatesCenterPixelViewAngle:
            return get<Keyword::YCoordinatesCenterPixelViewAngle>();

        case Keyword::NumberOfMapPoints:
            return get<Keyword::NumberOfMapPoints>();

        case Keyword::TwoDimensionalToThreeDimensionalMapData:
            return get<Keyword::TwoDimensionalToThreeDimensionalMapData>();

        case Keyword::DerivationAlgorithmSequence:
            return get<Keyword::DerivationAlgorithmSequence>();

        case Keyword::OphthalmicImageTypeCodeSequence:
            return get<Keyword::OphthalmicImageTypeCodeSequence>();

        case Keyword::OphthalmicImageTypeDescription:
            return get<Keyword::OphthalmicImageTypeDescription>();

        case Keyword::ScanPatternTypeCodeSequence:
            return get<Keyword::ScanPatternTypeCodeSequence>();

        case Keyword::ReferencedSurfaceMeshIdentificationSequence:
            return get<Keyword::ReferencedSurfaceMeshIdentificationSequence>();

        case Keyword::OphthalmicVolumetricPropertiesFlag:
            return get<Keyword::OphthalmicVolumetricPropertiesFlag>();

        case Keyword::OphthalmicAnatomicReferencePointXCoordinate:
            return get<Keyword::OphthalmicAnatomicReferencePointXCoordinate>();

        case Keyword::OphthalmicAnatomicReferencePointYCoordinate:
            return get<Keyword::OphthalmicAnatomicReferencePointYCoordinate>();

        case Keyword::OphthalmicEnFaceImageQualityRatingSequence:
            return get<Keyword::OphthalmicEnFaceImageQualityRatingSequence>();

        case Keyword::QualityThreshold:
            return get<Keyword::QualityThreshold>();

        case Keyword::OCTBscanAnalysisAcquisitionParametersSequence:
            return get<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>();

        case Keyword::NumberOfBscansPerFrame:
            return get<Keyword::NumberOfBscansPerFrame>();

        case Keyword::BscanSlabThickness:
            return get<Keyword::BscanSlabThickness>();

        case Keyword::DistanceBetweenBscanSlabs:
            return get<Keyword::DistanceBetweenBscanSlabs>();

        case Keyword::BscanCycleTime:
            return get<Keyword::BscanCycleTime>();

        case Keyword::BscanCycleTimeVector:
            return get<Keyword::BscanCycleTimeVector>();

        case Keyword::AscanRate:
            return get<Keyword::AscanRate>();

        case Keyword::BscanRate:
            return get<Keyword::BscanRate>();

        case Keyword::SurfaceMeshZPixelOffset:
            return get<Keyword::SurfaceMeshZPixelOffset>();

        case Keyword::AlgorithmSource:
            return get<Keyword::AlgorithmSource>();

        case Keyword::DataSetName:
            return get<Keyword::DataSetName>();

        case Keyword::DataSetVersion:
            return get<Keyword::DataSetVersion>();

        case Keyword::DataSetSource:
            return get<Keyword::DataSetSource>();

        case Keyword::DataSetDescription:
            return get<Keyword::DataSetDescription>();

        case Keyword::SamplesPerPixel:
            return get<Keyword::SamplesPerPixel>();

        case Keyword::SamplesPerPixelUsed:
            return get<Keyword::SamplesPerPixelUsed>();

        case Keyword::PhotometricInterpretation:
            return get<Keyword::PhotometricInterpretation>();

        case Keyword::PlanarConfiguration:
            return get<Keyword::PlanarConfiguration>();

        case Keyword::NumberOfFrames:
            return get<Keyword::NumberOfFrames>();

        case Keyword::FrameIncrementPointer:
            return get<Keyword::FrameIncrementPointer>();

        case Keyword::FrameDimensionPointer:
            return get<Keyword::FrameDimensionPointer>();

        case Keyword::Rows:
            return get<Keyword::Rows>();

        case Keyword::Columns:
            return get<Keyword::Columns>();

        case Keyword::UltrasoundColorDataPresent:
            return get<Keyword::UltrasoundColorDataPresent>();

        case Keyword::PixelSpacing:
            return get<Keyword::PixelSpacing>();

        case Keyword::ZoomFactor:
            return get<Keyword::ZoomFactor>();

        case Keyword::ZoomCenter:
            return get<Keyword::ZoomCenter>();

        case Keyword::PixelAspectRatio:
            return get<Keyword::PixelAspectRatio>();

        case Keyword::CorrectedImage:
            return get<Keyword::CorrectedImage>();

        case Keyword::BitsAllocated:
            return get<Keyword::BitsAllocated>();

        case Keyword::BitsStored:
            return get<Keyword::BitsStored>();

        case Keyword::HighBit:
            return get<Keyword::HighBit>();

        case Keyword::PixelRepresentation:
            return get<Keyword::PixelRepresentation>();

        case Keyword::SmallestImagePixelValue:
            return get<Keyword::SmallestImagePixelValue>();

        case Keyword::LargestImagePixelValue:
            return get<Keyword::LargestImagePixelValue>();

        case Keyword::SmallestPixelValueInSeries:
            return get<Keyword::SmallestPixelValueInSeries>();

        case Keyword::LargestPixelValueInSeries:
            return get<Keyword::LargestPixelValueInSeries>();

        case Keyword::PixelPaddingValue:
            return get<Keyword::PixelPaddingValue>();

        case Keyword::PixelPaddingRangeLimit:
            return get<Keyword::PixelPaddingRangeLimit>();

        case Keyword::FloatPixelPaddingValue:
            return get<Keyword::FloatPixelPaddingValue>();

        case Keyword::DoubleFloatPixelPaddingValue:
            return get<Keyword::DoubleFloatPixelPaddingValue>();

        case Keyword::FloatPixelPaddingRangeLimit:
            return get<Keyword::FloatPixelPaddingRangeLimit>();

        case Keyword::DoubleFloatPixelPaddingRangeLimit:
            return get<Keyword::DoubleFloatPixelPaddingRangeLimit>();

        case Keyword::QualityControlImage:
            return get<Keyword::QualityControlImage>();

        case Keyword::BurnedInAnnotation:
            return get<Keyword::BurnedInAnnotation>();

        case Keyword::RecognizableVisualFeatures:
            return get<Keyword::RecognizableVisualFeatures>();

        case Keyword::LongitudinalTemporalInformationModified:
            return get<Keyword::LongitudinalTemporalInformationModified>();

        case Keyword::ReferencedColorPaletteInstanceUID:
            return get<Keyword::ReferencedColorPaletteInstanceUID>();

        case Keyword::PixelSpacingCalibrationType:
            return get<Keyword::PixelSpacingCalibrationType>();

        case Keyword::PixelSpacingCalibrationDescription:
            return get<Keyword::PixelSpacingCalibrationDescription>();

        case Keyword::PixelIntensityRelationship:
            return get<Keyword::PixelIntensityRelationship>();

        case Keyword::PixelIntensityRelationshipSign:
            return get<Keyword::PixelIntensityRelationshipSign>();

        case Keyword::WindowCenter:
            return get<Keyword::WindowCenter>();

        case Keyword::WindowWidth:
            return get<Keyword::WindowWidth>();

        case Keyword::RescaleIntercept:
            return get<Keyword::RescaleIntercept>();

        case Keyword::RescaleSlope:
            return get<Keyword::RescaleSlope>();

        case Keyword::RescaleType:
            return get<Keyword::RescaleType>();

        case Keyword::WindowCenterWidthExplanation:
            return get<Keyword::WindowCenterWidthExplanation>();

        case Keyword::VOILUTFunction:
            return get<Keyword::VOILUTFunction>();

        case Keyword::RecommendedViewingMode:
            return get<Keyword::RecommendedViewingMode>();

        case Keyword::RedPaletteColorLookupTableDescriptor:
            return get<Keyword::RedPaletteColorLookupTableDescriptor>();

        case Keyword::GreenPaletteColorLookupTableDescriptor:
            return get<Keyword::GreenPaletteColorLookupTableDescriptor>();

        case Keyword::BluePaletteColorLookupTableDescriptor:
            return get<Keyword::BluePaletteColorLookupTableDescriptor>();

        case Keyword::AlphaPaletteColorLookupTableDescriptor:
            return get<Keyword::AlphaPaletteColorLookupTableDescriptor>();

        case Keyword::PaletteColorLookupTableUID:
            return get<Keyword::PaletteColorLookupTableUID>();

        case Keyword::RedPaletteColorLookupTableData:
            return get<Keyword::RedPaletteColorLookupTableData>();

        case Keyword::GreenPaletteColorLookupTableData:
            return get<Keyword::GreenPaletteColorLookupTableData>();

        case Keyword::BluePaletteColorLookupTableData:
            return get<Keyword::BluePaletteColorLookupTableData>();

        case Keyword::AlphaPaletteColorLookupTableData:
            return get<Keyword::AlphaPaletteColorLookupTableData>();

        case Keyword::SegmentedRedPaletteColorLookupTableData:
            return get<Keyword::SegmentedRedPaletteColorLookupTableData>();

        case Keyword::SegmentedGreenPaletteColorLookupTableData:
            return get<Keyword::SegmentedGreenPaletteColorLookupTableData>();

        case Keyword::SegmentedBluePaletteColorLookupTableData:
            return get<Keyword::SegmentedBluePaletteColorLookupTableData>();

        case Keyword::StoredValueColorRangeSequence:
            return get<Keyword::StoredValueColorRangeSequence>();

        case Keyword::MinimumStoredValueMapped:
            return get<Keyword::MinimumStoredValueMapped>();

        case Keyword::MaximumStoredValueMapped:
            return get<Keyword::MaximumStoredValueMapped>();

        case Keyword::BreastImplantPresent:
            return get<Keyword::BreastImplantPresent>();

        case Keyword::PartialView:
            return get<Keyword::PartialView>();

        case Keyword::PartialViewDescription:
            return get<Keyword::PartialViewDescription>();

        case Keyword::PartialViewCodeSequence:
            return get<Keyword::PartialViewCodeSequence>();

        case Keyword::SpatialLocationsPreserved:
            return get<Keyword::SpatialLocationsPreserved>();

        case Keyword::DataFrameAssignmentSequence:
            return get<Keyword::DataFrameAssignmentSequence>();

        case Keyword::DataPathAssignment:
            return get<Keyword::DataPathAssignment>();

        case Keyword::BitsMappedToColorLookupTable:
            return get<Keyword::BitsMappedToColorLookupTable>();

        case Keyword::BlendingLUT1Sequence:
            return get<Keyword::BlendingLUT1Sequence>();

        case Keyword::BlendingLUT1TransferFunction:
            return get<Keyword::BlendingLUT1TransferFunction>();

        case Keyword::BlendingWeightConstant:
            return get<Keyword::BlendingWeightConstant>();

        case Keyword::BlendingLookupTableDescriptor:
            return get<Keyword::BlendingLookupTableDescriptor>();

        case Keyword::BlendingLookupTableData:
            return get<Keyword::BlendingLookupTableData>();

        case Keyword::EnhancedPaletteColorLookupTableSequence:
            return get<Keyword::EnhancedPaletteColorLookupTableSequence>();

        case Keyword::BlendingLUT2Sequence:
            return get<Keyword::BlendingLUT2Sequence>();

        case Keyword::BlendingLUT2TransferFunction:
            return get<Keyword::BlendingLUT2TransferFunction>();

        case Keyword::DataPathID:
            return get<Keyword::DataPathID>();

        case Keyword::RGBLUTTransferFunction:
            return get<Keyword::RGBLUTTransferFunction>();

        case Keyword::AlphaLUTTransferFunction:
            return get<Keyword::AlphaLUTTransferFunction>();

        case Keyword::ICCProfile:
            return get<Keyword::ICCProfile>();

        case Keyword::ColorSpace:
            return get<Keyword::ColorSpace>();

        case Keyword::LossyImageCompression:
            return get<Keyword::LossyImageCompression>();

        case Keyword::LossyImageCompressionRatio:
            return get<Keyword::LossyImageCompressionRatio>();

        case Keyword::LossyImageCompressionMethod:
            return get<Keyword::LossyImageCompressionMethod>();

        case Keyword::ModalityLUTSequence:
            return get<Keyword::ModalityLUTSequence>();

        case Keyword::LUTDescriptor:
            return get<Keyword::LUTDescriptor>();

        case Keyword::LUTExplanation:
            return get<Keyword::LUTExplanation>();

        case Keyword::ModalityLUTType:
            return get<Keyword::ModalityLUTType>();

        case Keyword::LUTData:
            return get<Keyword::LUTData>();

        case Keyword::VOILUTSequence:
            return get<Keyword::VOILUTSequence>();

        case Keyword::RepresentativeFrameNumber:
            return get<Keyword::RepresentativeFrameNumber>();

        case Keyword::FrameNumbersOfInterest:
            return get<Keyword::FrameNumbersOfInterest>();

        case Keyword::FrameOfInterestDescription:
            return get<Keyword::FrameOfInterestDescription>();

        case Keyword::FrameOfInterestType:
            return get<Keyword::FrameOfInterestType>();

        case Keyword::RWavePointer:
            return get<Keyword::RWavePointer>();

        case Keyword::MaskSubtractionSequence:
            return get<Keyword::MaskSubtractionSequence>();

        case Keyword::MaskOperation:
            return get<Keyword::MaskOperation>();

        case Keyword::ApplicableFrameRange:
            return get<Keyword::ApplicableFrameRange>();

        case Keyword::MaskFrameNumbers:
            return get<Keyword::MaskFrameNumbers>();

        case Keyword::ContrastFrameAveraging:
            return get<Keyword::ContrastFrameAveraging>();

        case Keyword::MaskSubPixelShift:
            return get<Keyword::MaskSubPixelShift>();

        case Keyword::TIDOffset:
            return get<Keyword::TIDOffset>();

        case Keyword::MaskOperationExplanation:
            return get<Keyword::MaskOperationExplanation>();

        case Keyword::PixelDataProviderURL:
            return get<Keyword::PixelDataProviderURL>();

        case Keyword::PixelMeasuresSequence:
            return get<Keyword::PixelMeasuresSequence>();

        case Keyword::FrameVOILUTSequence:
            return get<Keyword::FrameVOILUTSequence>();

        case Keyword::PixelValueTransformationSequence:
            return get<Keyword::PixelValueTransformationSequence>();

        case Keyword::DisplayFilterPercentage:
            return get<Keyword::DisplayFilterPercentage>();

        case Keyword::FramePixelShiftSequence:
            return get<Keyword::FramePixelShiftSequence>();

        case Keyword::SubtractionItemID:
            return get<Keyword::SubtractionItemID>();

        case Keyword::PixelIntensityRelationshipLUTSequence:
            return get<Keyword::PixelIntensityRelationshipLUTSequence>();

        case Keyword::FramePixelDataPropertiesSequence:
            return get<Keyword::FramePixelDataPropertiesSequence>();

        case Keyword::GeometricalProperties:
            return get<Keyword::GeometricalProperties>();

        case Keyword::GeometricMaximumDistortion:
            return get<Keyword::GeometricMaximumDistortion>();

        case Keyword::ImageProcessingApplied:
            return get<Keyword::ImageProcessingApplied>();

        case Keyword::MaskSelectionMode:
            return get<Keyword::MaskSelectionMode>();

        case Keyword::LUTFunction:
            return get<Keyword::LUTFunction>();

        case Keyword::MaskVisibilityPercentage:
            return get<Keyword::MaskVisibilityPercentage>();

        case Keyword::ImageToEquipmentMappingMatrix:
            return get<Keyword::ImageToEquipmentMappingMatrix>();

        case Keyword::EquipmentCoordinateSystemIdentification:
            return get<Keyword::EquipmentCoordinateSystemIdentification>();

        case Keyword::RequestingService:
            return get<Keyword::RequestingService>();

        case Keyword::RequestingServiceCodeSequence:
            return get<Keyword::RequestingServiceCodeSequence>();

        case Keyword::RequestedProcedureDescription:
            return get<Keyword::RequestedProcedureDescription>();

        case Keyword::RequestedProcedureCodeSequence:
            return get<Keyword::RequestedProcedureCodeSequence>();

        case Keyword::ReasonForVisit:
            return get<Keyword::ReasonForVisit>();

        case Keyword::ReasonForVisitCodeSequence:
            return get<Keyword::ReasonForVisitCodeSequence>();

        case Keyword::FrameOriginTimestamp:
            return get<Keyword::FrameOriginTimestamp>();

        case Keyword::IncludesImagingSubject:
            return get<Keyword::IncludesImagingSubject>();

        case Keyword::FrameUsefulnessGroupSequence:
            return get<Keyword::FrameUsefulnessGroupSequence>();

        case Keyword::CameraPositionGroupSequence:
            return get<Keyword::CameraPositionGroupSequence>();

        case Keyword::IncludesInformation:
            return get<Keyword::IncludesInformation>();

        case Keyword::TimeOfFrameGroupSequence:
            return get<Keyword::TimeOfFrameGroupSequence>();

        case Keyword::AdmissionID:
            return get<Keyword::AdmissionID>();

        case Keyword::IssuerOfAdmissionIDSequence:
            return get<Keyword::IssuerOfAdmissionIDSequence>();

        case Keyword::ServiceEpisodeID:
            return get<Keyword::ServiceEpisodeID>();

        case Keyword::ServiceEpisodeDescription:
            return get<Keyword::ServiceEpisodeDescription>();

        case Keyword::IssuerOfServiceEpisodeIDSequence:
            return get<Keyword::IssuerOfServiceEpisodeIDSequence>();

        case Keyword::PatientState:
            return get<Keyword::PatientState>();

        case Keyword::ChannelSourceSequence:
            return get<Keyword::ChannelSourceSequence>();

        case Keyword::MultiplexedAudioChannelsDescriptionCodeSequence:
            return get<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>();

        case Keyword::ChannelIdentificationCode:
            return get<Keyword::ChannelIdentificationCode>();

        case Keyword::ChannelMode:
            return get<Keyword::ChannelMode>();

        case Keyword::ScheduledProcedureStepDescription:
            return get<Keyword::ScheduledProcedureStepDescription>();

        case Keyword::ScheduledProtocolCodeSequence:
            return get<Keyword::ScheduledProtocolCodeSequence>();

        case Keyword::ScheduledProcedureStepID:
            return get<Keyword::ScheduledProcedureStepID>();

        case Keyword::StageCodeSequence:
            return get<Keyword::StageCodeSequence>();

        case Keyword::OrderPlacerIdentifierSequence:
            return get<Keyword::OrderPlacerIdentifierSequence>();

        case Keyword::OrderFillerIdentifierSequence:
            return get<Keyword::OrderFillerIdentifierSequence>();

        case Keyword::LocalNamespaceEntityID:
            return get<Keyword::LocalNamespaceEntityID>();

        case Keyword::UniversalEntityID:
            return get<Keyword::UniversalEntityID>();

        case Keyword::UniversalEntityIDType:
            return get<Keyword::UniversalEntityIDType>();

        case Keyword::IdentifierTypeCode:
            return get<Keyword::IdentifierTypeCode>();

        case Keyword::AssigningFacilitySequence:
            return get<Keyword::AssigningFacilitySequence>();

        case Keyword::AssigningJurisdictionCodeSequence:
            return get<Keyword::AssigningJurisdictionCodeSequence>();

        case Keyword::AssigningAgencyOrDepartmentCodeSequence:
            return get<Keyword::AssigningAgencyOrDepartmentCodeSequence>();

        case Keyword::PerformedProcedureStepStartDate:
            return get<Keyword::PerformedProcedureStepStartDate>();

        case Keyword::PerformedProcedureStepStartTime:
            return get<Keyword::PerformedProcedureStepStartTime>();

        case Keyword::PerformedProcedureStepEndDate:
            return get<Keyword::PerformedProcedureStepEndDate>();

        case Keyword::PerformedProcedureStepEndTime:
            return get<Keyword::PerformedProcedureStepEndTime>();

        case Keyword::PerformedProcedureStepID:
            return get<Keyword::PerformedProcedureStepID>();

        case Keyword::PerformedProcedureStepDescription:
            return get<Keyword::PerformedProcedureStepDescription>();

        case Keyword::PerformedProtocolCodeSequence:
            return get<Keyword::PerformedProtocolCodeSequence>();

        case Keyword::PerformedProtocolType:
            return get<Keyword::PerformedProtocolType>();

        case Keyword::RequestAttributesSequence:
            return get<Keyword::RequestAttributesSequence>();

        case Keyword::CommentsOnThePerformedProcedureStep:
            return get<Keyword::CommentsOnThePerformedProcedureStep>();

        case Keyword::EntranceDose:
            return get<Keyword::EntranceDose>();

        case Keyword::ExposedArea:
            return get<Keyword::ExposedArea>();

        case Keyword::DistanceSourceToEntrance:
            return get<Keyword::DistanceSourceToEntrance>();

        case Keyword::CommentsOnRadiationDose:
            return get<Keyword::CommentsOnRadiationDose>();

        case Keyword::XRayOutput:
            return get<Keyword::XRayOutput>();

        case Keyword::HalfValueLayer:
            return get<Keyword::HalfValueLayer>();

        case Keyword::OrganDose:
            return get<Keyword::OrganDose>();

        case Keyword::OrganExposed:
            return get<Keyword::OrganExposed>();

        case Keyword::ProtocolContextSequence:
            return get<Keyword::ProtocolContextSequence>();

        case Keyword::ContentItemModifierSequence:
            return get<Keyword::ContentItemModifierSequence>();

        case Keyword::ContainerIdentifier:
            return get<Keyword::ContainerIdentifier>();

        case Keyword::IssuerOfTheContainerIdentifierSequence:
            return get<Keyword::IssuerOfTheContainerIdentifierSequence>();

        case Keyword::AlternateContainerIdentifierSequence:
            return get<Keyword::AlternateContainerIdentifierSequence>();

        case Keyword::ContainerTypeCodeSequence:
            return get<Keyword::ContainerTypeCodeSequence>();

        case Keyword::ContainerDescription:
            return get<Keyword::ContainerDescription>();

        case Keyword::ContainerComponentSequence:
            return get<Keyword::ContainerComponentSequence>();

        case Keyword::SpecimenIdentifier:
            return get<Keyword::SpecimenIdentifier>();

        case Keyword::SpecimenUID:
            return get<Keyword::SpecimenUID>();

        case Keyword::AcquisitionContextSequence:
            return get<Keyword::AcquisitionContextSequence>();

        case Keyword::AcquisitionContextDescription:
            return get<Keyword::AcquisitionContextDescription>();

        case Keyword::SpecimenDescriptionSequence:
            return get<Keyword::SpecimenDescriptionSequence>();

        case Keyword::IssuerOfTheSpecimenIdentifierSequence:
            return get<Keyword::IssuerOfTheSpecimenIdentifierSequence>();

        case Keyword::SpecimenTypeCodeSequence:
            return get<Keyword::SpecimenTypeCodeSequence>();

        case Keyword::SpecimenShortDescription:
            return get<Keyword::SpecimenShortDescription>();

        case Keyword::SpecimenDetailedDescription:
            return get<Keyword::SpecimenDetailedDescription>();

        case Keyword::SpecimenPreparationSequence:
            return get<Keyword::SpecimenPreparationSequence>();

        case Keyword::SpecimenLocalizationContentItemSequence:
            return get<Keyword::SpecimenLocalizationContentItemSequence>();

        case Keyword::WholeSlideMicroscopyImageFrameTypeSequence:
            return get<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>();

        case Keyword::ImageCenterPointCoordinatesSequence:
            return get<Keyword::ImageCenterPointCoordinatesSequence>();

        case Keyword::XOffsetInSlideCoordinateSystem:
            return get<Keyword::XOffsetInSlideCoordinateSystem>();

        case Keyword::YOffsetInSlideCoordinateSystem:
            return get<Keyword::YOffsetInSlideCoordinateSystem>();

        case Keyword::ZOffsetInSlideCoordinateSystem:
            return get<Keyword::ZOffsetInSlideCoordinateSystem>();

        case Keyword::MeasurementUnitsCodeSequence:
            return get<Keyword::MeasurementUnitsCodeSequence>();

        case Keyword::RequestedProcedureID:
            return get<Keyword::RequestedProcedureID>();

        case Keyword::ReasonForTheRequestedProcedure:
            return get<Keyword::ReasonForTheRequestedProcedure>();

        case Keyword::ReasonForRequestedProcedureCodeSequence:
            return get<Keyword::ReasonForRequestedProcedureCodeSequence>();

        case Keyword::ReasonForPerformedProcedureCodeSequence:
            return get<Keyword::ReasonForPerformedProcedureCodeSequence>();

        case Keyword::PersonIdentificationCodeSequence:
            return get<Keyword::PersonIdentificationCodeSequence>();

        case Keyword::PersonAddress:
            return get<Keyword::PersonAddress>();

        case Keyword::PersonTelephoneNumbers:
            return get<Keyword::PersonTelephoneNumbers>();

        case Keyword::PersonTelecomInformation:
            return get<Keyword::PersonTelecomInformation>();

        case Keyword::PlacerOrderNumberImagingServiceRequest:
            return get<Keyword::PlacerOrderNumberImagingServiceRequest>();

        case Keyword::FillerOrderNumberImagingServiceRequest:
            return get<Keyword::FillerOrderNumberImagingServiceRequest>();

        case Keyword::EntranceDoseInmGy:
            return get<Keyword::EntranceDoseInmGy>();

        case Keyword::EntranceDoseDerivation:
            return get<Keyword::EntranceDoseDerivation>();

        case Keyword::ParametricMapFrameTypeSequence:
            return get<Keyword::ParametricMapFrameTypeSequence>();

        case Keyword::RealWorldValueMappingSequence:
            return get<Keyword::RealWorldValueMappingSequence>();

        case Keyword::PixelValueMappingCodeSequence:
            return get<Keyword::PixelValueMappingCodeSequence>();

        case Keyword::LUTLabel:
            return get<Keyword::LUTLabel>();

        case Keyword::RealWorldValueLastValueMapped:
            return get<Keyword::RealWorldValueLastValueMapped>();

        case Keyword::RealWorldValueLUTData:
            return get<Keyword::RealWorldValueLUTData>();

        case Keyword::DoubleFloatRealWorldValueLastValueMapped:
            return get<Keyword::DoubleFloatRealWorldValueLastValueMapped>();

        case Keyword::DoubleFloatRealWorldValueFirstValueMapped:
            return get<Keyword::DoubleFloatRealWorldValueFirstValueMapped>();

        case Keyword::RealWorldValueFirstValueMapped:
            return get<Keyword::RealWorldValueFirstValueMapped>();

        case Keyword::QuantityDefinitionSequence:
            return get<Keyword::QuantityDefinitionSequence>();

        case Keyword::RealWorldValueIntercept:
            return get<Keyword::RealWorldValueIntercept>();

        case Keyword::RealWorldValueSlope:
            return get<Keyword::RealWorldValueSlope>();

        case Keyword::RelationshipType:
            return get<Keyword::RelationshipType>();

        case Keyword::VerifyingOrganization:
            return get<Keyword::VerifyingOrganization>();

        case Keyword::VerificationDateTime:
            return get<Keyword::VerificationDateTime>();

        case Keyword::ObservationDateTime:
            return get<Keyword::ObservationDateTime>();

        case Keyword::ObservationStartDateTime:
            return get<Keyword::ObservationStartDateTime>();

        case Keyword::ValueType:
            return get<Keyword::ValueType>();

        case Keyword::ConceptNameCodeSequence:
            return get<Keyword::ConceptNameCodeSequence>();

        case Keyword::ContinuityOfContent:
            return get<Keyword::ContinuityOfContent>();

        case Keyword::VerifyingObserverSequence:
            return get<Keyword::VerifyingObserverSequence>();

        case Keyword::VerifyingObserverName:
            return get<Keyword::VerifyingObserverName>();

        case Keyword::AuthorObserverSequence:
            return get<Keyword::AuthorObserverSequence>();

        case Keyword::ParticipantSequence:
            return get<Keyword::ParticipantSequence>();

        case Keyword::CustodialOrganizationSequence:
            return get<Keyword::CustodialOrganizationSequence>();

        case Keyword::ParticipationType:
            return get<Keyword::ParticipationType>();

        case Keyword::ParticipationDateTime:
            return get<Keyword::ParticipationDateTime>();

        case Keyword::ObserverType:
            return get<Keyword::ObserverType>();

        case Keyword::VerifyingObserverIdentificationCodeSequence:
            return get<Keyword::VerifyingObserverIdentificationCodeSequence>();

        case Keyword::ReferencedWaveformChannels:
            return get<Keyword::ReferencedWaveformChannels>();

        case Keyword::DateTime:
            return get<Keyword::DateTime>();

        case Keyword::Date:
            return get<Keyword::Date>();

        case Keyword::Time:
            return get<Keyword::Time>();

        case Keyword::PersonName:
            return get<Keyword::PersonName>();

        case Keyword::UID:
            return get<Keyword::UID>();

        case Keyword::TemporalRangeType:
            return get<Keyword::TemporalRangeType>();

        case Keyword::ReferencedSamplePositions:
            return get<Keyword::ReferencedSamplePositions>();

        case Keyword::ReferencedTimeOffsets:
            return get<Keyword::ReferencedTimeOffsets>();

        case Keyword::ReferencedDateTime:
            return get<Keyword::ReferencedDateTime>();

        case Keyword::TextValue:
            return get<Keyword::TextValue>();

        case Keyword::FloatingPointValue:
            return get<Keyword::FloatingPointValue>();

        case Keyword::RationalNumeratorValue:
            return get<Keyword::RationalNumeratorValue>();

        case Keyword::RationalDenominatorValue:
            return get<Keyword::RationalDenominatorValue>();

        case Keyword::ConceptCodeSequence:
            return get<Keyword::ConceptCodeSequence>();

        case Keyword::PurposeOfReferenceCodeSequence:
            return get<Keyword::PurposeOfReferenceCodeSequence>();

        case Keyword::ObservationUID:
            return get<Keyword::ObservationUID>();

        case Keyword::MeasuredValueSequence:
            return get<Keyword::MeasuredValueSequence>();

        case Keyword::NumericValueQualifierCodeSequence:
            return get<Keyword::NumericValueQualifierCodeSequence>();

        case Keyword::NumericValue:
            return get<Keyword::NumericValue>();

        case Keyword::PredecessorDocumentsSequence:
            return get<Keyword::PredecessorDocumentsSequence>();

        case Keyword::ReferencedRequestSequence:
            return get<Keyword::ReferencedRequestSequence>();

        case Keyword::PerformedProcedureCodeSequence:
            return get<Keyword::PerformedProcedureCodeSequence>();

        case Keyword::CurrentRequestedProcedureEvidenceSequence:
            return get<Keyword::CurrentRequestedProcedureEvidenceSequence>();

        case Keyword::PertinentOtherEvidenceSequence:
            return get<Keyword::PertinentOtherEvidenceSequence>();

        case Keyword::HL7StructuredDocumentReferenceSequence:
            return get<Keyword::HL7StructuredDocumentReferenceSequence>();

        case Keyword::CompletionFlag:
            return get<Keyword::CompletionFlag>();

        case Keyword::CompletionFlagDescription:
            return get<Keyword::CompletionFlagDescription>();

        case Keyword::VerificationFlag:
            return get<Keyword::VerificationFlag>();

        case Keyword::PreliminaryFlag:
            return get<Keyword::PreliminaryFlag>();

        case Keyword::ContentTemplateSequence:
            return get<Keyword::ContentTemplateSequence>();

        case Keyword::IdenticalDocumentsSequence:
            return get<Keyword::IdenticalDocumentsSequence>();

        case Keyword::ContentSequence:
            return get<Keyword::ContentSequence>();

        case Keyword::TabulatedValuesSequence:
            return get<Keyword::TabulatedValuesSequence>();

        case Keyword::NumberOfTableRows:
            return get<Keyword::NumberOfTableRows>();

        case Keyword::NumberOfTableColumns:
            return get<Keyword::NumberOfTableColumns>();

        case Keyword::TableRowDefinitionSequence:
            return get<Keyword::TableRowDefinitionSequence>();

        case Keyword::TableColumnDefinitionSequence:
            return get<Keyword::TableColumnDefinitionSequence>();

        case Keyword::CellValuesSequence:
            return get<Keyword::CellValuesSequence>();

        case Keyword::TemplateIdentifier:
            return get<Keyword::TemplateIdentifier>();

        case Keyword::ReferencedContentItemIdentifier:
            return get<Keyword::ReferencedContentItemIdentifier>();

        case Keyword::HL7InstanceIdentifier:
            return get<Keyword::HL7InstanceIdentifier>();

        case Keyword::DocumentClassCodeSequence:
            return get<Keyword::DocumentClassCodeSequence>();

        case Keyword::RetrieveURI:
            return get<Keyword::RetrieveURI>();

        case Keyword::RetrieveLocationUID:
            return get<Keyword::RetrieveLocationUID>();

        case Keyword::TypeOfInstances:
            return get<Keyword::TypeOfInstances>();

        case Keyword::DICOMRetrievalSequence:
            return get<Keyword::DICOMRetrievalSequence>();

        case Keyword::DICOMMediaRetrievalSequence:
            return get<Keyword::DICOMMediaRetrievalSequence>();

        case Keyword::WADORetrievalSequence:
            return get<Keyword::WADORetrievalSequence>();

        case Keyword::XDSRetrievalSequence:
            return get<Keyword::XDSRetrievalSequence>();

        case Keyword::WADORSRetrievalSequence:
            return get<Keyword::WADORSRetrievalSequence>();

        case Keyword::RepositoryUniqueID:
            return get<Keyword::RepositoryUniqueID>();

        case Keyword::HomeCommunityID:
            return get<Keyword::HomeCommunityID>();

        case Keyword::DocumentTitle:
            return get<Keyword::DocumentTitle>();

        case Keyword::EncapsulatedDocument:
            return get<Keyword::EncapsulatedDocument>();

        case Keyword::MIMETypeOfEncapsulatedDocument:
            return get<Keyword::MIMETypeOfEncapsulatedDocument>();

        case Keyword::SourceInstanceSequence:
            return get<Keyword::SourceInstanceSequence>();

        case Keyword::ListOfMIMETypes:
            return get<Keyword::ListOfMIMETypes>();

        case Keyword::EncapsulatedDocumentLength:
            return get<Keyword::EncapsulatedDocumentLength>();

        case Keyword::OrganizationalRoleCodeSequence:
            return get<Keyword::OrganizationalRoleCodeSequence>();

        case Keyword::SteepKeratometricAxisSequence:
            return get<Keyword::SteepKeratometricAxisSequence>();

        case Keyword::RadiusOfCurvature:
            return get<Keyword::RadiusOfCurvature>();

        case Keyword::KeratometricPower:
            return get<Keyword::KeratometricPower>();

        case Keyword::KeratometricAxis:
            return get<Keyword::KeratometricAxis>();

        case Keyword::FlatKeratometricAxisSequence:
            return get<Keyword::FlatKeratometricAxisSequence>();

        case Keyword::CornealTopographySurface:
            return get<Keyword::CornealTopographySurface>();

        case Keyword::CornealVertexLocation:
            return get<Keyword::CornealVertexLocation>();

        case Keyword::PupilCentroidXCoordinate:
            return get<Keyword::PupilCentroidXCoordinate>();

        case Keyword::PupilCentroidYCoordinate:
            return get<Keyword::PupilCentroidYCoordinate>();

        case Keyword::EquivalentPupilRadius:
            return get<Keyword::EquivalentPupilRadius>();

        case Keyword::CornealTopographyMapTypeCodeSequence:
            return get<Keyword::CornealTopographyMapTypeCodeSequence>();

        case Keyword::VerticesOfTheOutlineOfPupil:
            return get<Keyword::VerticesOfTheOutlineOfPupil>();

        case Keyword::CornealTopographyMappingNormalsSequence:
            return get<Keyword::CornealTopographyMappingNormalsSequence>();

        case Keyword::MaximumCornealCurvatureSequence:
            return get<Keyword::MaximumCornealCurvatureSequence>();

        case Keyword::MaximumCornealCurvature:
            return get<Keyword::MaximumCornealCurvature>();

        case Keyword::MaximumCornealCurvatureLocation:
            return get<Keyword::MaximumCornealCurvatureLocation>();

        case Keyword::MinimumKeratometricSequence:
            return get<Keyword::MinimumKeratometricSequence>();

        case Keyword::SimulatedKeratometricCylinderSequence:
            return get<Keyword::SimulatedKeratometricCylinderSequence>();

        case Keyword::AverageCornealPower:
            return get<Keyword::AverageCornealPower>();

        case Keyword::CornealISValue:
            return get<Keyword::CornealISValue>();

        case Keyword::AnalyzedArea:
            return get<Keyword::AnalyzedArea>();

        case Keyword::SurfaceRegularityIndex:
            return get<Keyword::SurfaceRegularityIndex>();

        case Keyword::SurfaceAsymmetryIndex:
            return get<Keyword::SurfaceAsymmetryIndex>();

        case Keyword::CornealEccentricityIndex:
            return get<Keyword::CornealEccentricityIndex>();

        case Keyword::KeratoconusPredictionIndex:
            return get<Keyword::KeratoconusPredictionIndex>();

        case Keyword::DecimalPotentialVisualAcuity:
            return get<Keyword::DecimalPotentialVisualAcuity>();

        case Keyword::CornealTopographyMapQualityEvaluation:
            return get<Keyword::CornealTopographyMapQualityEvaluation>();

        case Keyword::SourceImageCornealProcessedDataSequence:
            return get<Keyword::SourceImageCornealProcessedDataSequence>();

        case Keyword::CornealPointLocation:
            return get<Keyword::CornealPointLocation>();

        case Keyword::CornealPointEstimated:
            return get<Keyword::CornealPointEstimated>();

        case Keyword::AxialPower:
            return get<Keyword::AxialPower>();

        case Keyword::TangentialPower:
            return get<Keyword::TangentialPower>();

        case Keyword::RefractivePower:
            return get<Keyword::RefractivePower>();

        case Keyword::RelativeElevation:
            return get<Keyword::RelativeElevation>();

        case Keyword::CornealWavefront:
            return get<Keyword::CornealWavefront>();

        case Keyword::ImagedVolumeWidth:
            return get<Keyword::ImagedVolumeWidth>();

        case Keyword::ImagedVolumeHeight:
            return get<Keyword::ImagedVolumeHeight>();

        case Keyword::ImagedVolumeDepth:
            return get<Keyword::ImagedVolumeDepth>();

        case Keyword::TotalPixelMatrixColumns:
            return get<Keyword::TotalPixelMatrixColumns>();

        case Keyword::TotalPixelMatrixRows:
            return get<Keyword::TotalPixelMatrixRows>();

        case Keyword::TotalPixelMatrixOriginSequence:
            return get<Keyword::TotalPixelMatrixOriginSequence>();

        case Keyword::SpecimenLabelInImage:
            return get<Keyword::SpecimenLabelInImage>();

        case Keyword::FocusMethod:
            return get<Keyword::FocusMethod>();

        case Keyword::ExtendedDepthOfField:
            return get<Keyword::ExtendedDepthOfField>();

        case Keyword::NumberOfFocalPlanes:
            return get<Keyword::NumberOfFocalPlanes>();

        case Keyword::DistanceBetweenFocalPlanes:
            return get<Keyword::DistanceBetweenFocalPlanes>();

        case Keyword::RecommendedAbsentPixelCIELabValue:
            return get<Keyword::RecommendedAbsentPixelCIELabValue>();

        case Keyword::IlluminatorTypeCodeSequence:
            return get<Keyword::IlluminatorTypeCodeSequence>();

        case Keyword::ImageOrientationSlide:
            return get<Keyword::ImageOrientationSlide>();

        case Keyword::OpticalPathSequence:
            return get<Keyword::OpticalPathSequence>();

        case Keyword::OpticalPathIdentifier:
            return get<Keyword::OpticalPathIdentifier>();

        case Keyword::OpticalPathDescription:
            return get<Keyword::OpticalPathDescription>();

        case Keyword::IlluminationColorCodeSequence:
            return get<Keyword::IlluminationColorCodeSequence>();

        case Keyword::SpecimenReferenceSequence:
            return get<Keyword::SpecimenReferenceSequence>();

        case Keyword::CondenserLensPower:
            return get<Keyword::CondenserLensPower>();

        case Keyword::ObjectiveLensPower:
            return get<Keyword::ObjectiveLensPower>();

        case Keyword::ObjectiveLensNumericalAperture:
            return get<Keyword::ObjectiveLensNumericalAperture>();

        case Keyword::PaletteColorLookupTableSequence:
            return get<Keyword::PaletteColorLookupTableSequence>();

        case Keyword::OpticalPathIdentificationSequence:
            return get<Keyword::OpticalPathIdentificationSequence>();

        case Keyword::PlanePositionSlideSequence:
            return get<Keyword::PlanePositionSlideSequence>();

        case Keyword::ColumnPositionInTotalImagePixelMatrix:
            return get<Keyword::ColumnPositionInTotalImagePixelMatrix>();

        case Keyword::RowPositionInTotalImagePixelMatrix:
            return get<Keyword::RowPositionInTotalImagePixelMatrix>();

        case Keyword::PixelOriginInterpretation:
            return get<Keyword::PixelOriginInterpretation>();

        case Keyword::NumberOfOpticalPaths:
            return get<Keyword::NumberOfOpticalPaths>();

        case Keyword::TotalPixelMatrixFocalPlanes:
            return get<Keyword::TotalPixelMatrixFocalPlanes>();

        case Keyword::CalibrationImage:
            return get<Keyword::CalibrationImage>();

        case Keyword::DeviceSequence:
            return get<Keyword::DeviceSequence>();

        case Keyword::ContainerComponentTypeCodeSequence:
            return get<Keyword::ContainerComponentTypeCodeSequence>();

        case Keyword::ContainerComponentThickness:
            return get<Keyword::ContainerComponentThickness>();

        case Keyword::DeviceLength:
            return get<Keyword::DeviceLength>();

        case Keyword::ContainerComponentWidth:
            return get<Keyword::ContainerComponentWidth>();

        case Keyword::DeviceDiameter:
            return get<Keyword::DeviceDiameter>();

        case Keyword::DeviceDiameterUnits:
            return get<Keyword::DeviceDiameterUnits>();

        case Keyword::DeviceVolume:
            return get<Keyword::DeviceVolume>();

        case Keyword::InterMarkerDistance:
            return get<Keyword::InterMarkerDistance>();

        case Keyword::ContainerComponentMaterial:
            return get<Keyword::ContainerComponentMaterial>();

        case Keyword::ContainerComponentID:
            return get<Keyword::ContainerComponentID>();

        case Keyword::ContainerComponentLength:
            return get<Keyword::ContainerComponentLength>();

        case Keyword::ContainerComponentDiameter:
            return get<Keyword::ContainerComponentDiameter>();

        case Keyword::ContainerComponentDescription:
            return get<Keyword::ContainerComponentDescription>();

        case Keyword::DeviceDescription:
            return get<Keyword::DeviceDescription>();

        case Keyword::LongDeviceDescription:
            return get<Keyword::LongDeviceDescription>();

        case Keyword::ContrastBolusIngredientPercentByVolume:
            return get<Keyword::ContrastBolusIngredientPercentByVolume>();

        case Keyword::OCTFocalDistance:
            return get<Keyword::OCTFocalDistance>();

        case Keyword::BeamSpotSize:
            return get<Keyword::BeamSpotSize>();

        case Keyword::EffectiveRefractiveIndex:
            return get<Keyword::EffectiveRefractiveIndex>();

        case Keyword::OCTAcquisitionDomain:
            return get<Keyword::OCTAcquisitionDomain>();

        case Keyword::OCTOpticalCenterWavelength:
            return get<Keyword::OCTOpticalCenterWavelength>();

        case Keyword::AxialResolution:
            return get<Keyword::AxialResolution>();

        case Keyword::RangingDepth:
            return get<Keyword::RangingDepth>();

        case Keyword::ALineRate:
            return get<Keyword::ALineRate>();

        case Keyword::ALinesPerFrame:
            return get<Keyword::ALinesPerFrame>();

        case Keyword::CatheterRotationalRate:
            return get<Keyword::CatheterRotationalRate>();

        case Keyword::ALinePixelSpacing:
            return get<Keyword::ALinePixelSpacing>();

        case Keyword::ModeOfPercutaneousAccessSequence:
            return get<Keyword::ModeOfPercutaneousAccessSequence>();

        case Keyword::IntravascularOCTFrameTypeSequence:
            return get<Keyword::IntravascularOCTFrameTypeSequence>();

        case Keyword::OCTZOffsetApplied:
            return get<Keyword::OCTZOffsetApplied>();

        case Keyword::IntravascularFrameContentSequence:
            return get<Keyword::IntravascularFrameContentSequence>();

        case Keyword::IntravascularLongitudinalDistance:
            return get<Keyword::IntravascularLongitudinalDistance>();

        case Keyword::IntravascularOCTFrameContentSequence:
            return get<Keyword::IntravascularOCTFrameContentSequence>();

        case Keyword::OCTZOffsetCorrection:
            return get<Keyword::OCTZOffsetCorrection>();

        case Keyword::CatheterDirectionOfRotation:
            return get<Keyword::CatheterDirectionOfRotation>();

        case Keyword::SeamLineLocation:
            return get<Keyword::SeamLineLocation>();

        case Keyword::FirstALineLocation:
            return get<Keyword::FirstALineLocation>();

        case Keyword::SeamLineIndex:
            return get<Keyword::SeamLineIndex>();

        case Keyword::NumberOfPaddedALines:
            return get<Keyword::NumberOfPaddedALines>();

        case Keyword::InterpolationType:
            return get<Keyword::InterpolationType>();

        case Keyword::RefractiveIndexApplied:
            return get<Keyword::RefractiveIndexApplied>();

        case Keyword::EnergyWindowVector:
            return get<Keyword::EnergyWindowVector>();

        case Keyword::NumberOfEnergyWindows:
            return get<Keyword::NumberOfEnergyWindows>();

        case Keyword::EnergyWindowInformationSequence:
            return get<Keyword::EnergyWindowInformationSequence>();

        case Keyword::EnergyWindowRangeSequence:
            return get<Keyword::EnergyWindowRangeSequence>();

        case Keyword::EnergyWindowLowerLimit:
            return get<Keyword::EnergyWindowLowerLimit>();

        case Keyword::EnergyWindowUpperLimit:
            return get<Keyword::EnergyWindowUpperLimit>();

        case Keyword::RadiopharmaceuticalInformationSequence:
            return get<Keyword::RadiopharmaceuticalInformationSequence>();

        case Keyword::EnergyWindowName:
            return get<Keyword::EnergyWindowName>();

        case Keyword::DetectorVector:
            return get<Keyword::DetectorVector>();

        case Keyword::NumberOfDetectors:
            return get<Keyword::NumberOfDetectors>();

        case Keyword::DetectorInformationSequence:
            return get<Keyword::DetectorInformationSequence>();

        case Keyword::PhaseVector:
            return get<Keyword::PhaseVector>();

        case Keyword::NumberOfPhases:
            return get<Keyword::NumberOfPhases>();

        case Keyword::PhaseInformationSequence:
            return get<Keyword::PhaseInformationSequence>();

        case Keyword::NumberOfFramesInPhase:
            return get<Keyword::NumberOfFramesInPhase>();

        case Keyword::PhaseDelay:
            return get<Keyword::PhaseDelay>();

        case Keyword::PauseBetweenFrames:
            return get<Keyword::PauseBetweenFrames>();

        case Keyword::PhaseDescription:
            return get<Keyword::PhaseDescription>();

        case Keyword::RotationVector:
            return get<Keyword::RotationVector>();

        case Keyword::NumberOfRotations:
            return get<Keyword::NumberOfRotations>();

        case Keyword::RotationInformationSequence:
            return get<Keyword::RotationInformationSequence>();

        case Keyword::NumberOfFramesInRotation:
            return get<Keyword::NumberOfFramesInRotation>();

        case Keyword::RRIntervalVector:
            return get<Keyword::RRIntervalVector>();

        case Keyword::NumberOfRRIntervals:
            return get<Keyword::NumberOfRRIntervals>();

        case Keyword::GatedInformationSequence:
            return get<Keyword::GatedInformationSequence>();

        case Keyword::DataInformationSequence:
            return get<Keyword::DataInformationSequence>();

        case Keyword::TimeSlotVector:
            return get<Keyword::TimeSlotVector>();

        case Keyword::NumberOfTimeSlots:
            return get<Keyword::NumberOfTimeSlots>();

        case Keyword::SliceVector:
            return get<Keyword::SliceVector>();

        case Keyword::NumberOfSlices:
            return get<Keyword::NumberOfSlices>();

        case Keyword::AngularViewVector:
            return get<Keyword::AngularViewVector>();

        case Keyword::TimeSliceVector:
            return get<Keyword::TimeSliceVector>();

        case Keyword::NumberOfTimeSlices:
            return get<Keyword::NumberOfTimeSlices>();

        case Keyword::StartAngle:
            return get<Keyword::StartAngle>();

        case Keyword::TypeOfDetectorMotion:
            return get<Keyword::TypeOfDetectorMotion>();

        case Keyword::TriggerVector:
            return get<Keyword::TriggerVector>();

        case Keyword::NumberOfTriggersInPhase:
            return get<Keyword::NumberOfTriggersInPhase>();

        case Keyword::ViewCodeSequence:
            return get<Keyword::ViewCodeSequence>();

        case Keyword::ViewModifierCodeSequence:
            return get<Keyword::ViewModifierCodeSequence>();

        case Keyword::RadionuclideCodeSequence:
            return get<Keyword::RadionuclideCodeSequence>();

        case Keyword::AdministrationRouteCodeSequence:
            return get<Keyword::AdministrationRouteCodeSequence>();

        case Keyword::RadiopharmaceuticalCodeSequence:
            return get<Keyword::RadiopharmaceuticalCodeSequence>();

        case Keyword::CalibrationDataSequence:
            return get<Keyword::CalibrationDataSequence>();

        case Keyword::ImageID:
            return get<Keyword::ImageID>();

        case Keyword::PatientOrientationCodeSequence:
            return get<Keyword::PatientOrientationCodeSequence>();

        case Keyword::PatientOrientationModifierCodeSequence:
            return get<Keyword::PatientOrientationModifierCodeSequence>();

        case Keyword::PatientGantryRelationshipCodeSequence:
            return get<Keyword::PatientGantryRelationshipCodeSequence>();

        case Keyword::SliceProgressionDirection:
            return get<Keyword::SliceProgressionDirection>();

        case Keyword::ScanProgressionDirection:
            return get<Keyword::ScanProgressionDirection>();

        case Keyword::SeriesType:
            return get<Keyword::SeriesType>();

        case Keyword::Units:
            return get<Keyword::Units>();

        case Keyword::CountsSource:
            return get<Keyword::CountsSource>();

        case Keyword::ReprojectionMethod:
            return get<Keyword::ReprojectionMethod>();

        case Keyword::SUVType:
            return get<Keyword::SUVType>();

        case Keyword::RandomsCorrectionMethod:
            return get<Keyword::RandomsCorrectionMethod>();

        case Keyword::AttenuationCorrectionMethod:
            return get<Keyword::AttenuationCorrectionMethod>();

        case Keyword::DecayCorrection:
            return get<Keyword::DecayCorrection>();

        case Keyword::ReconstructionMethod:
            return get<Keyword::ReconstructionMethod>();

        case Keyword::DetectorLinesOfResponseUsed:
            return get<Keyword::DetectorLinesOfResponseUsed>();

        case Keyword::ScatterCorrectionMethod:
            return get<Keyword::ScatterCorrectionMethod>();

        case Keyword::AxialAcceptance:
            return get<Keyword::AxialAcceptance>();

        case Keyword::AxialMash:
            return get<Keyword::AxialMash>();

        case Keyword::TransverseMash:
            return get<Keyword::TransverseMash>();

        case Keyword::DetectorElementSize:
            return get<Keyword::DetectorElementSize>();

        case Keyword::CoincidenceWindowWidth:
            return get<Keyword::CoincidenceWindowWidth>();

        case Keyword::SecondaryCountsType:
            return get<Keyword::SecondaryCountsType>();

        case Keyword::FrameReferenceTime:
            return get<Keyword::FrameReferenceTime>();

        case Keyword::PrimaryPromptsCountsAccumulated:
            return get<Keyword::PrimaryPromptsCountsAccumulated>();

        case Keyword::SecondaryCountsAccumulated:
            return get<Keyword::SecondaryCountsAccumulated>();

        case Keyword::SliceSensitivityFactor:
            return get<Keyword::SliceSensitivityFactor>();

        case Keyword::DecayFactor:
            return get<Keyword::DecayFactor>();

        case Keyword::DoseCalibrationFactor:
            return get<Keyword::DoseCalibrationFactor>();

        case Keyword::ScatterFractionFactor:
            return get<Keyword::ScatterFractionFactor>();

        case Keyword::DeadTimeFactor:
            return get<Keyword::DeadTimeFactor>();

        case Keyword::ImageIndex:
            return get<Keyword::ImageIndex>();

        case Keyword::HistogramSequence:
            return get<Keyword::HistogramSequence>();

        case Keyword::HistogramNumberOfBins:
            return get<Keyword::HistogramNumberOfBins>();

        case Keyword::HistogramFirstBinValue:
            return get<Keyword::HistogramFirstBinValue>();

        case Keyword::HistogramLastBinValue:
            return get<Keyword::HistogramLastBinValue>();

        case Keyword::HistogramBinWidth:
            return get<Keyword::HistogramBinWidth>();

        case Keyword::HistogramExplanation:
            return get<Keyword::HistogramExplanation>();

        case Keyword::HistogramData:
            return get<Keyword::HistogramData>();

        case Keyword::SegmentationType:
            return get<Keyword::SegmentationType>();

        case Keyword::SegmentSequence:
            return get<Keyword::SegmentSequence>();

        case Keyword::SegmentedPropertyCategoryCodeSequence:
            return get<Keyword::SegmentedPropertyCategoryCodeSequence>();

        case Keyword::SegmentNumber:
            return get<Keyword::SegmentNumber>();

        case Keyword::SegmentLabel:
            return get<Keyword::SegmentLabel>();

        case Keyword::SegmentDescription:
            return get<Keyword::SegmentDescription>();

        case Keyword::SegmentationAlgorithmIdentificationSequence:
            return get<Keyword::SegmentationAlgorithmIdentificationSequence>();

        case Keyword::SegmentAlgorithmType:
            return get<Keyword::SegmentAlgorithmType>();

        case Keyword::SegmentAlgorithmName:
            return get<Keyword::SegmentAlgorithmName>();

        case Keyword::SegmentIdentificationSequence:
            return get<Keyword::SegmentIdentificationSequence>();

        case Keyword::ReferencedSegmentNumber:
            return get<Keyword::ReferencedSegmentNumber>();

        case Keyword::RecommendedDisplayGrayscaleValue:
            return get<Keyword::RecommendedDisplayGrayscaleValue>();

        case Keyword::RecommendedDisplayCIELabValue:
            return get<Keyword::RecommendedDisplayCIELabValue>();

        case Keyword::MaximumFractionalValue:
            return get<Keyword::MaximumFractionalValue>();

        case Keyword::SegmentedPropertyTypeCodeSequence:
            return get<Keyword::SegmentedPropertyTypeCodeSequence>();

        case Keyword::SegmentationFractionalType:
            return get<Keyword::SegmentationFractionalType>();

        case Keyword::SegmentedPropertyTypeModifierCodeSequence:
            return get<Keyword::SegmentedPropertyTypeModifierCodeSequence>();

        case Keyword::SegmentsOverlap:
            return get<Keyword::SegmentsOverlap>();

        case Keyword::TrackingID:
            return get<Keyword::TrackingID>();

        case Keyword::TrackingUID:
            return get<Keyword::TrackingUID>();

        case Keyword::NumberOfSurfaces:
            return get<Keyword::NumberOfSurfaces>();

        case Keyword::SurfaceSequence:
            return get<Keyword::SurfaceSequence>();

        case Keyword::SurfaceNumber:
            return get<Keyword::SurfaceNumber>();

        case Keyword::SurfaceComments:
            return get<Keyword::SurfaceComments>();

        case Keyword::SurfaceProcessing:
            return get<Keyword::SurfaceProcessing>();

        case Keyword::SurfaceProcessingRatio:
            return get<Keyword::SurfaceProcessingRatio>();

        case Keyword::SurfaceProcessingDescription:
            return get<Keyword::SurfaceProcessingDescription>();

        case Keyword::RecommendedPresentationOpacity:
            return get<Keyword::RecommendedPresentationOpacity>();

        case Keyword::RecommendedPresentationType:
            return get<Keyword::RecommendedPresentationType>();

        case Keyword::FiniteVolume:
            return get<Keyword::FiniteVolume>();

        case Keyword::Manifold:
            return get<Keyword::Manifold>();

        case Keyword::SurfacePointsSequence:
            return get<Keyword::SurfacePointsSequence>();

        case Keyword::SurfacePointsNormalsSequence:
            return get<Keyword::SurfacePointsNormalsSequence>();

        case Keyword::SurfaceMeshPrimitivesSequence:
            return get<Keyword::SurfaceMeshPrimitivesSequence>();

        case Keyword::NumberOfSurfacePoints:
            return get<Keyword::NumberOfSurfacePoints>();

        case Keyword::PointCoordinatesData:
            return get<Keyword::PointCoordinatesData>();

        case Keyword::PointPositionAccuracy:
            return get<Keyword::PointPositionAccuracy>();

        case Keyword::MeanPointDistance:
            return get<Keyword::MeanPointDistance>();

        case Keyword::MaximumPointDistance:
            return get<Keyword::MaximumPointDistance>();

        case Keyword::PointsBoundingBoxCoordinates:
            return get<Keyword::PointsBoundingBoxCoordinates>();

        case Keyword::AxisOfRotation:
            return get<Keyword::AxisOfRotation>();

        case Keyword::CenterOfRotation:
            return get<Keyword::CenterOfRotation>();

        case Keyword::SurfaceCount:
            return get<Keyword::SurfaceCount>();

        case Keyword::ReferencedSurfaceSequence:
            return get<Keyword::ReferencedSurfaceSequence>();

        case Keyword::ReferencedSurfaceNumber:
            return get<Keyword::ReferencedSurfaceNumber>();

        case Keyword::AlgorithmFamilyCodeSequence:
            return get<Keyword::AlgorithmFamilyCodeSequence>();

        case Keyword::AlgorithmNameCodeSequence:
            return get<Keyword::AlgorithmNameCodeSequence>();

        case Keyword::AlgorithmVersion:
            return get<Keyword::AlgorithmVersion>();

        case Keyword::AlgorithmParameters:
            return get<Keyword::AlgorithmParameters>();

        case Keyword::SurfaceProcessingAlgorithmIdentificationSequence:
            return get<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>();

        case Keyword::AlgorithmName:
            return get<Keyword::AlgorithmName>();

        case Keyword::RecommendedPointRadius:
            return get<Keyword::RecommendedPointRadius>();

        case Keyword::RecommendedLineThickness:
            return get<Keyword::RecommendedLineThickness>();

        case Keyword::ImplantSize:
            return get<Keyword::ImplantSize>();

        case Keyword::ImplantTemplateVersion:
            return get<Keyword::ImplantTemplateVersion>();

        case Keyword::ReplacedImplantTemplateSequence:
            return get<Keyword::ReplacedImplantTemplateSequence>();

        case Keyword::ImplantType:
            return get<Keyword::ImplantType>();

        case Keyword::DerivationImplantTemplateSequence:
            return get<Keyword::DerivationImplantTemplateSequence>();

        case Keyword::OriginalImplantTemplateSequence:
            return get<Keyword::OriginalImplantTemplateSequence>();

        case Keyword::EffectiveDateTime:
            return get<Keyword::EffectiveDateTime>();

        case Keyword::ImplantTargetAnatomySequence:
            return get<Keyword::ImplantTargetAnatomySequence>();

        case Keyword::InformationFromManufacturerSequence:
            return get<Keyword::InformationFromManufacturerSequence>();

        case Keyword::NotificationFromManufacturerSequence:
            return get<Keyword::NotificationFromManufacturerSequence>();

        case Keyword::InformationIssueDateTime:
            return get<Keyword::InformationIssueDateTime>();

        case Keyword::InformationSummary:
            return get<Keyword::InformationSummary>();

        case Keyword::ImplantRegulatoryDisapprovalCodeSequence:
            return get<Keyword::ImplantRegulatoryDisapprovalCodeSequence>();

        case Keyword::OverallTemplateSpatialTolerance:
            return get<Keyword::OverallTemplateSpatialTolerance>();

        case Keyword::HPGLDocumentSequence:
            return get<Keyword::HPGLDocumentSequence>();

        case Keyword::HPGLDocumentID:
            return get<Keyword::HPGLDocumentID>();

        case Keyword::HPGLDocumentLabel:
            return get<Keyword::HPGLDocumentLabel>();

        case Keyword::ViewOrientationCodeSequence:
            return get<Keyword::ViewOrientationCodeSequence>();

        case Keyword::ViewOrientationModifierCodeSequence:
            return get<Keyword::ViewOrientationModifierCodeSequence>();

        case Keyword::HPGLDocumentScaling:
            return get<Keyword::HPGLDocumentScaling>();

        case Keyword::HPGLDocument:
            return get<Keyword::HPGLDocument>();

        case Keyword::HPGLContourPenNumber:
            return get<Keyword::HPGLContourPenNumber>();

        case Keyword::HPGLPenSequence:
            return get<Keyword::HPGLPenSequence>();

        case Keyword::RecommendedRotationPoint:
            return get<Keyword::RecommendedRotationPoint>();

        case Keyword::BoundingRectangle:
            return get<Keyword::BoundingRectangle>();

        case Keyword::ImplantTemplate3DModelSurfaceNumber:
            return get<Keyword::ImplantTemplate3DModelSurfaceNumber>();

        case Keyword::SurfaceModelDescriptionSequence:
            return get<Keyword::SurfaceModelDescriptionSequence>();

        case Keyword::SurfaceModelLabel:
            return get<Keyword::SurfaceModelLabel>();

        case Keyword::SurfaceModelScalingFactor:
            return get<Keyword::SurfaceModelScalingFactor>();

        case Keyword::MaterialsCodeSequence:
            return get<Keyword::MaterialsCodeSequence>();

        case Keyword::CoatingMaterialsCodeSequence:
            return get<Keyword::CoatingMaterialsCodeSequence>();

        case Keyword::ImplantTypeCodeSequence:
            return get<Keyword::ImplantTypeCodeSequence>();

        case Keyword::FixationMethodCodeSequence:
            return get<Keyword::FixationMethodCodeSequence>();

        case Keyword::MatingFeatureSetsSequence:
            return get<Keyword::MatingFeatureSetsSequence>();

        case Keyword::MatingFeatureSetID:
            return get<Keyword::MatingFeatureSetID>();

        case Keyword::MatingFeatureSetLabel:
            return get<Keyword::MatingFeatureSetLabel>();

        case Keyword::MatingFeatureSequence:
            return get<Keyword::MatingFeatureSequence>();

        case Keyword::ReferencedHPGLDocumentID:
            return get<Keyword::ReferencedHPGLDocumentID>();

        case Keyword::PlanningLandmarkPointSequence:
            return get<Keyword::PlanningLandmarkPointSequence>();

        case Keyword::PlanningLandmarkLineSequence:
            return get<Keyword::PlanningLandmarkLineSequence>();

        case Keyword::PlanningLandmarkPlaneSequence:
            return get<Keyword::PlanningLandmarkPlaneSequence>();

        case Keyword::PlanningLandmarkID:
            return get<Keyword::PlanningLandmarkID>();

        case Keyword::PlanningLandmarkDescription:
            return get<Keyword::PlanningLandmarkDescription>();

        case Keyword::PlanningLandmarkIdentificationCodeSequence:
            return get<Keyword::PlanningLandmarkIdentificationCodeSequence>();

        case Keyword::TwoDPointCoordinatesSequence:
            return get<Keyword::TwoDPointCoordinatesSequence>();

        case Keyword::TwoDPointCoordinates:
            return get<Keyword::TwoDPointCoordinates>();

        case Keyword::ThreeDPointCoordinates:
            return get<Keyword::ThreeDPointCoordinates>();

        case Keyword::TwoDLineCoordinatesSequence:
            return get<Keyword::TwoDLineCoordinatesSequence>();

        case Keyword::TwoDLineCoordinates:
            return get<Keyword::TwoDLineCoordinates>();

        case Keyword::ThreeDLineCoordinates:
            return get<Keyword::ThreeDLineCoordinates>();

        case Keyword::TwoDPlaneCoordinatesSequence:
            return get<Keyword::TwoDPlaneCoordinatesSequence>();

        case Keyword::TwoDPlaneIntersection:
            return get<Keyword::TwoDPlaneIntersection>();

        case Keyword::ThreeDPlaneOrigin:
            return get<Keyword::ThreeDPlaneOrigin>();

        case Keyword::ThreeDPlaneNormal:
            return get<Keyword::ThreeDPlaneNormal>();

        case Keyword::ModelModification:
            return get<Keyword::ModelModification>();

        case Keyword::ModelMirroring:
            return get<Keyword::ModelMirroring>();

        case Keyword::ModelUsageCodeSequence:
            return get<Keyword::ModelUsageCodeSequence>();

        case Keyword::ModelGroupUID:
            return get<Keyword::ModelGroupUID>();

        case Keyword::RelativeURIReferenceWithinEncapsulatedDocument:
            return get<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>();

        case Keyword::UnformattedTextValue:
            return get<Keyword::UnformattedTextValue>();

        case Keyword::BoundingBoxTextHorizontalJustification:
            return get<Keyword::BoundingBoxTextHorizontalJustification>();

        case Keyword::GraphicData:
            return get<Keyword::GraphicData>();

        case Keyword::GraphicType:
            return get<Keyword::GraphicType>();

        case Keyword::ContentLabel:
            return get<Keyword::ContentLabel>();

        case Keyword::ContentDescription:
            return get<Keyword::ContentDescription>();

        case Keyword::PresentationCreationDate:
            return get<Keyword::PresentationCreationDate>();

        case Keyword::PresentationCreationTime:
            return get<Keyword::PresentationCreationTime>();

        case Keyword::ContentCreatorName:
            return get<Keyword::ContentCreatorName>();

        case Keyword::ContentCreatorIdentificationCodeSequence:
            return get<Keyword::ContentCreatorIdentificationCodeSequence>();

        case Keyword::AlternateContentDescriptionSequence:
            return get<Keyword::AlternateContentDescriptionSequence>();

        case Keyword::FiducialUID:
            return get<Keyword::FiducialUID>();

        case Keyword::FiducialSetSequence:
            return get<Keyword::FiducialSetSequence>();

        case Keyword::FiducialSequence:
            return get<Keyword::FiducialSequence>();

        case Keyword::GraphicLayerRecommendedDisplayCIELabValue:
            return get<Keyword::GraphicLayerRecommendedDisplayCIELabValue>();

        case Keyword::ReferencedSpatialRegistrationSequence:
            return get<Keyword::ReferencedSpatialRegistrationSequence>();

        case Keyword::RenderProjection:
            return get<Keyword::RenderProjection>();

        case Keyword::ViewpointPosition:
            return get<Keyword::ViewpointPosition>();

        case Keyword::ViewpointLookAtPoint:
            return get<Keyword::ViewpointLookAtPoint>();

        case Keyword::ViewpointUpDirection:
            return get<Keyword::ViewpointUpDirection>();

        case Keyword::RenderFieldOfView:
            return get<Keyword::RenderFieldOfView>();

        case Keyword::HangingProtocolName:
            return get<Keyword::HangingProtocolName>();

        case Keyword::HangingProtocolCreator:
            return get<Keyword::HangingProtocolCreator>();

        case Keyword::NumberOfScreens:
            return get<Keyword::NumberOfScreens>();

        case Keyword::NominalScreenDefinitionSequence:
            return get<Keyword::NominalScreenDefinitionSequence>();

        case Keyword::NumberOfVerticalPixels:
            return get<Keyword::NumberOfVerticalPixels>();

        case Keyword::NumberOfHorizontalPixels:
            return get<Keyword::NumberOfHorizontalPixels>();

        case Keyword::DisplayEnvironmentSpatialPosition:
            return get<Keyword::DisplayEnvironmentSpatialPosition>();

        case Keyword::ScreenMinimumGrayscaleBitDepth:
            return get<Keyword::ScreenMinimumGrayscaleBitDepth>();

        case Keyword::ScreenMinimumColorBitDepth:
            return get<Keyword::ScreenMinimumColorBitDepth>();

        case Keyword::ApplicationMaximumRepaintTime:
            return get<Keyword::ApplicationMaximumRepaintTime>();

        case Keyword::ImageBoxNumber:
            return get<Keyword::ImageBoxNumber>();

        case Keyword::ImageBoxLayoutType:
            return get<Keyword::ImageBoxLayoutType>();

        case Keyword::ImageBoxTileHorizontalDimension:
            return get<Keyword::ImageBoxTileHorizontalDimension>();

        case Keyword::ImageBoxTileVerticalDimension:
            return get<Keyword::ImageBoxTileVerticalDimension>();

        case Keyword::ImageBoxOverlapPriority:
            return get<Keyword::ImageBoxOverlapPriority>();

        case Keyword::CineRelativeToRealTime:
            return get<Keyword::CineRelativeToRealTime>();

        case Keyword::StructuredDisplayBackgroundCIELabValue:
            return get<Keyword::StructuredDisplayBackgroundCIELabValue>();

        case Keyword::EmptyImageBoxCIELabValue:
            return get<Keyword::EmptyImageBoxCIELabValue>();

        case Keyword::StructuredDisplayImageBoxSequence:
            return get<Keyword::StructuredDisplayImageBoxSequence>();

        case Keyword::StructuredDisplayTextBoxSequence:
            return get<Keyword::StructuredDisplayTextBoxSequence>();

        case Keyword::ReferencedFirstFrameSequence:
            return get<Keyword::ReferencedFirstFrameSequence>();

        case Keyword::ImageBoxSynchronizationSequence:
            return get<Keyword::ImageBoxSynchronizationSequence>();

        case Keyword::SynchronizedImageBoxList:
            return get<Keyword::SynchronizedImageBoxList>();

        case Keyword::TypeOfSynchronization:
            return get<Keyword::TypeOfSynchronization>();

        case Keyword::DisplaySetHorizontalJustification:
            return get<Keyword::DisplaySetHorizontalJustification>();

        case Keyword::DisplaySetVerticalJustification:
            return get<Keyword::DisplaySetVerticalJustification>();

        case Keyword::PerformedProcessingParametersSequence:
            return get<Keyword::PerformedProcessingParametersSequence>();

        case Keyword::SurfaceScanAcquisitionTypeCodeSequence:
            return get<Keyword::SurfaceScanAcquisitionTypeCodeSequence>();

        case Keyword::SurfaceScanModeCodeSequence:
            return get<Keyword::SurfaceScanModeCodeSequence>();

        case Keyword::RegistrationMethodCodeSequence:
            return get<Keyword::RegistrationMethodCodeSequence>();

        case Keyword::ShotDurationTime:
            return get<Keyword::ShotDurationTime>();

        case Keyword::ShotOffsetTime:
            return get<Keyword::ShotOffsetTime>();

        case Keyword::SurfacePointPresentationValueData:
            return get<Keyword::SurfacePointPresentationValueData>();

        case Keyword::SurfacePointColorCIELabValueData:
            return get<Keyword::SurfacePointColorCIELabValueData>();

        case Keyword::UVMappingSequence:
            return get<Keyword::UVMappingSequence>();

        case Keyword::TextureLabel:
            return get<Keyword::TextureLabel>();

        case Keyword::UValueData:
            return get<Keyword::UValueData>();

        case Keyword::VValueData:
            return get<Keyword::VValueData>();

        case Keyword::ReferencedTextureSequence:
            return get<Keyword::ReferencedTextureSequence>();

        case Keyword::ReferencedSurfaceDataSequence:
            return get<Keyword::ReferencedSurfaceDataSequence>();

        case Keyword::StorageMediaFileSetID:
            return get<Keyword::StorageMediaFileSetID>();

        case Keyword::StorageMediaFileSetUID:
            return get<Keyword::StorageMediaFileSetUID>();

        case Keyword::IconImageSequence:
            return get<Keyword::IconImageSequence>();

        case Keyword::SOPInstanceStatus:
            return get<Keyword::SOPInstanceStatus>();

        case Keyword::SOPAuthorizationDateTime:
            return get<Keyword::SOPAuthorizationDateTime>();

        case Keyword::SOPAuthorizationComment:
            return get<Keyword::SOPAuthorizationComment>();

        case Keyword::AuthorizationEquipmentCertificationNumber:
            return get<Keyword::AuthorizationEquipmentCertificationNumber>();

        case Keyword::MACIDNumber:
            return get<Keyword::MACIDNumber>();

        case Keyword::MACCalculationTransferSyntaxUID:
            return get<Keyword::MACCalculationTransferSyntaxUID>();

        case Keyword::MACAlgorithm:
            return get<Keyword::MACAlgorithm>();

        case Keyword::DataElementsSigned:
            return get<Keyword::DataElementsSigned>();

        case Keyword::DigitalSignatureUID:
            return get<Keyword::DigitalSignatureUID>();

        case Keyword::DigitalSignatureDateTime:
            return get<Keyword::DigitalSignatureDateTime>();

        case Keyword::CertificateType:
            return get<Keyword::CertificateType>();

        case Keyword::CertificateOfSigner:
            return get<Keyword::CertificateOfSigner>();

        case Keyword::Signature:
            return get<Keyword::Signature>();

        case Keyword::CertifiedTimestampType:
            return get<Keyword::CertifiedTimestampType>();

        case Keyword::CertifiedTimestamp:
            return get<Keyword::CertifiedTimestamp>();

        case Keyword::DigitalSignaturePurposeCodeSequence:
            return get<Keyword::DigitalSignaturePurposeCodeSequence>();

        case Keyword::ReferencedDigitalSignatureSequence:
            return get<Keyword::ReferencedDigitalSignatureSequence>();

        case Keyword::ReferencedSOPInstanceMACSequence:
            return get<Keyword::ReferencedSOPInstanceMACSequence>();

        case Keyword::EncryptedAttributesSequence:
            return get<Keyword::EncryptedAttributesSequence>();

        case Keyword::EncryptedContentTransferSyntaxUID:
            return get<Keyword::EncryptedContentTransferSyntaxUID>();

        case Keyword::EncryptedContent:
            return get<Keyword::EncryptedContent>();

        case Keyword::ModifiedAttributesSequence:
            return get<Keyword::ModifiedAttributesSequence>();

        case Keyword::NonconformingModifiedAttributesSequence:
            return get<Keyword::NonconformingModifiedAttributesSequence>();

        case Keyword::OriginalAttributesSequence:
            return get<Keyword::OriginalAttributesSequence>();

        case Keyword::AttributeModificationDateTime:
            return get<Keyword::AttributeModificationDateTime>();

        case Keyword::ModifyingSystem:
            return get<Keyword::ModifyingSystem>();

        case Keyword::SourceOfPreviousValues:
            return get<Keyword::SourceOfPreviousValues>();

        case Keyword::ReasonForTheAttributeModification:
            return get<Keyword::ReasonForTheAttributeModification>();

        case Keyword::InstanceOriginStatus:
            return get<Keyword::InstanceOriginStatus>();

        case Keyword::Illumination:
            return get<Keyword::Illumination>();

        case Keyword::ReflectedAmbientLight:
            return get<Keyword::ReflectedAmbientLight>();

        case Keyword::PresentationLUTShape:
            return get<Keyword::PresentationLUTShape>();

        case Keyword::LabelText:
            return get<Keyword::LabelText>();

        case Keyword::BarcodeValue:
            return get<Keyword::BarcodeValue>();

        case Keyword::RTImageLabel:
            return get<Keyword::RTImageLabel>();

        case Keyword::RTImageName:
            return get<Keyword::RTImageName>();

        case Keyword::RTImageDescription:
            return get<Keyword::RTImageDescription>();

        case Keyword::ReportedValuesOrigin:
            return get<Keyword::ReportedValuesOrigin>();

        case Keyword::RTImagePlane:
            return get<Keyword::RTImagePlane>();

        case Keyword::XRayImageReceptorTranslation:
            return get<Keyword::XRayImageReceptorTranslation>();

        case Keyword::XRayImageReceptorAngle:
            return get<Keyword::XRayImageReceptorAngle>();

        case Keyword::RTImageOrientation:
            return get<Keyword::RTImageOrientation>();

        case Keyword::ImagePlanePixelSpacing:
            return get<Keyword::ImagePlanePixelSpacing>();

        case Keyword::RTImagePosition:
            return get<Keyword::RTImagePosition>();

        case Keyword::RadiationMachineName:
            return get<Keyword::RadiationMachineName>();

        case Keyword::RadiationMachineSAD:
            return get<Keyword::RadiationMachineSAD>();

        case Keyword::RadiationMachineSSD:
            return get<Keyword::RadiationMachineSSD>();

        case Keyword::RTImageSID:
            return get<Keyword::RTImageSID>();

        case Keyword::SourceToReferenceObjectDistance:
            return get<Keyword::SourceToReferenceObjectDistance>();

        case Keyword::FractionNumber:
            return get<Keyword::FractionNumber>();

        case Keyword::ExposureSequence:
            return get<Keyword::ExposureSequence>();

        case Keyword::MetersetExposure:
            return get<Keyword::MetersetExposure>();

        case Keyword::DiaphragmPosition:
            return get<Keyword::DiaphragmPosition>();

        case Keyword::FluenceMapSequence:
            return get<Keyword::FluenceMapSequence>();

        case Keyword::FluenceDataSource:
            return get<Keyword::FluenceDataSource>();

        case Keyword::FluenceDataScale:
            return get<Keyword::FluenceDataScale>();

        case Keyword::PrimaryFluenceModeSequence:
            return get<Keyword::PrimaryFluenceModeSequence>();

        case Keyword::SelectedFrameNumber:
            return get<Keyword::SelectedFrameNumber>();

        case Keyword::SelectedFrameFunctionalGroupsSequence:
            return get<Keyword::SelectedFrameFunctionalGroupsSequence>();

        case Keyword::RTImageFrameGeneralContentSequence:
            return get<Keyword::RTImageFrameGeneralContentSequence>();

        case Keyword::RTImageFrameContextSequence:
            return get<Keyword::RTImageFrameContextSequence>();

        case Keyword::RTImageScopeSequence:
            return get<Keyword::RTImageScopeSequence>();

        case Keyword::BeamModifierCoordinatesPresenceFlag:
            return get<Keyword::BeamModifierCoordinatesPresenceFlag>();

        case Keyword::StartCumulativeMeterset:
            return get<Keyword::StartCumulativeMeterset>();

        case Keyword::StopCumulativeMeterset:
            return get<Keyword::StopCumulativeMeterset>();

        case Keyword::RTImageFrameImagingDevicePositionSequence:
            return get<Keyword::RTImageFrameImagingDevicePositionSequence>();

        case Keyword::RTImageFramekVRadiationAcquisitionSequence:
            return get<Keyword::RTImageFramekVRadiationAcquisitionSequence>();

        case Keyword::RTImageFrameMVRadiationAcquisitionSequence:
            return get<Keyword::RTImageFrameMVRadiationAcquisitionSequence>();

        case Keyword::RTImageFrameRadiationAcquisitionSequence:
            return get<Keyword::RTImageFrameRadiationAcquisitionSequence>();

        case Keyword::ImagingSourcePositionSequence:
            return get<Keyword::ImagingSourcePositionSequence>();

        case Keyword::ImageReceptorPositionSequence:
            return get<Keyword::ImageReceptorPositionSequence>();

        case Keyword::DevicePositionToEquipmentMappingMatrix:
            return get<Keyword::DevicePositionToEquipmentMappingMatrix>();

        case Keyword::DevicePositionParameterSequence:
            return get<Keyword::DevicePositionParameterSequence>();

        case Keyword::NumberOfAcquisitionDevices:
            return get<Keyword::NumberOfAcquisitionDevices>();

        case Keyword::AcquisitionDeviceSequence:
            return get<Keyword::AcquisitionDeviceSequence>();

        case Keyword::DVHType:
            return get<Keyword::DVHType>();

        case Keyword::DoseUnits:
            return get<Keyword::DoseUnits>();

        case Keyword::DoseType:
            return get<Keyword::DoseType>();

        case Keyword::SpatialTransformOfDose:
            return get<Keyword::SpatialTransformOfDose>();

        case Keyword::DoseComment:
            return get<Keyword::DoseComment>();

        case Keyword::NormalizationPoint:
            return get<Keyword::NormalizationPoint>();

        case Keyword::DoseSummationType:
            return get<Keyword::DoseSummationType>();

        case Keyword::GridFrameOffsetVector:
            return get<Keyword::GridFrameOffsetVector>();

        case Keyword::DoseGridScaling:
            return get<Keyword::DoseGridScaling>();

        case Keyword::TissueHeterogeneityCorrection:
            return get<Keyword::TissueHeterogeneityCorrection>();

        case Keyword::DVHNormalizationPoint:
            return get<Keyword::DVHNormalizationPoint>();

        case Keyword::DVHNormalizationDoseValue:
            return get<Keyword::DVHNormalizationDoseValue>();

        case Keyword::DVHSequence:
            return get<Keyword::DVHSequence>();

        case Keyword::DVHDoseScaling:
            return get<Keyword::DVHDoseScaling>();

        case Keyword::DVHVolumeUnits:
            return get<Keyword::DVHVolumeUnits>();

        case Keyword::DVHNumberOfBins:
            return get<Keyword::DVHNumberOfBins>();

        case Keyword::DVHData:
            return get<Keyword::DVHData>();

        case Keyword::DVHReferencedROISequence:
            return get<Keyword::DVHReferencedROISequence>();

        case Keyword::DVHMinimumDose:
            return get<Keyword::DVHMinimumDose>();

        case Keyword::DVHMaximumDose:
            return get<Keyword::DVHMaximumDose>();

        case Keyword::DVHMeanDose:
            return get<Keyword::DVHMeanDose>();

        case Keyword::ReferencedFrameOfReferenceUID:
            return get<Keyword::ReferencedFrameOfReferenceUID>();

        case Keyword::ReferencedROINumber:
            return get<Keyword::ReferencedROINumber>();

        case Keyword::FrameOfReferenceTransformationComment:
            return get<Keyword::FrameOfReferenceTransformationComment>();

        case Keyword::PatientLocationCoordinatesSequence:
            return get<Keyword::PatientLocationCoordinatesSequence>();

        case Keyword::PatientLocationCoordinatesCodeSequence:
            return get<Keyword::PatientLocationCoordinatesCodeSequence>();

        case Keyword::PatientSupportPositionSequence:
            return get<Keyword::PatientSupportPositionSequence>();

        case Keyword::CurrentFractionNumber:
            return get<Keyword::CurrentFractionNumber>();

        case Keyword::ReferencedTreatmentRecordSequence:
            return get<Keyword::ReferencedTreatmentRecordSequence>();

        case Keyword::EnhancedRTBeamLimitingDeviceSequence:
            return get<Keyword::EnhancedRTBeamLimitingDeviceSequence>();

        case Keyword::EnhancedRTBeamLimitingOpeningSequence:
            return get<Keyword::EnhancedRTBeamLimitingOpeningSequence>();

        case Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag:
            return get<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>();

        case Keyword::ParallelRTBeamDelimiterOpeningExtents:
            return get<Keyword::ParallelRTBeamDelimiterOpeningExtents>();

        case Keyword::RTPlanLabel:
            return get<Keyword::RTPlanLabel>();

        case Keyword::PrimaryDosimeterUnit:
            return get<Keyword::PrimaryDosimeterUnit>();

        case Keyword::BeamLimitingDeviceSequence:
            return get<Keyword::BeamLimitingDeviceSequence>();

        case Keyword::NumberOfBlocks:
            return get<Keyword::NumberOfBlocks>();

        case Keyword::BlockSequence:
            return get<Keyword::BlockSequence>();

        case Keyword::ApplicatorSequence:
            return get<Keyword::ApplicatorSequence>();

        case Keyword::GantryAngle:
            return get<Keyword::GantryAngle>();

        case Keyword::BeamLimitingDeviceAngle:
            return get<Keyword::BeamLimitingDeviceAngle>();

        case Keyword::PatientSupportAngle:
            return get<Keyword::PatientSupportAngle>();

        case Keyword::TableTopEccentricAxisDistance:
            return get<Keyword::TableTopEccentricAxisDistance>();

        case Keyword::TableTopEccentricAngle:
            return get<Keyword::TableTopEccentricAngle>();

        case Keyword::TableTopVerticalPosition:
            return get<Keyword::TableTopVerticalPosition>();

        case Keyword::TableTopLongitudinalPosition:
            return get<Keyword::TableTopLongitudinalPosition>();

        case Keyword::TableTopLateralPosition:
            return get<Keyword::TableTopLateralPosition>();

        case Keyword::IsocenterPosition:
            return get<Keyword::IsocenterPosition>();

        case Keyword::TableTopPitchAngle:
            return get<Keyword::TableTopPitchAngle>();

        case Keyword::TableTopRollAngle:
            return get<Keyword::TableTopRollAngle>();

        case Keyword::GantryPitchAngle:
            return get<Keyword::GantryPitchAngle>();

        case Keyword::GeneralAccessorySequence:
            return get<Keyword::GeneralAccessorySequence>();

        case Keyword::ReferencedDefinedDeviceIndex:
            return get<Keyword::ReferencedDefinedDeviceIndex>();

        case Keyword::TreatmentPositionIndex:
            return get<Keyword::TreatmentPositionIndex>();

        case Keyword::ReferencedDeviceIndex:
            return get<Keyword::ReferencedDeviceIndex>();

        case Keyword::ReferencedTreatmentPositionIndex:
            return get<Keyword::ReferencedTreatmentPositionIndex>();

        case Keyword::ReferencedRTAccessoryHolderDeviceIndex:
            return get<Keyword::ReferencedRTAccessoryHolderDeviceIndex>();

        case Keyword::RTAccessoryHolderSlotID:
            return get<Keyword::RTAccessoryHolderSlotID>();

        case Keyword::RTAccessorySlotDistance:
            return get<Keyword::RTAccessorySlotDistance>();

        case Keyword::RTAccessoryDeviceSlotID:
            return get<Keyword::RTAccessoryDeviceSlotID>();

        case Keyword::TreatmentPositionSequence:
            return get<Keyword::TreatmentPositionSequence>();

        case Keyword::NumberOfRTBeamLimitingDevices:
            return get<Keyword::NumberOfRTBeamLimitingDevices>();

        case Keyword::RTBeamLimitingDeviceProximalDistance:
            return get<Keyword::RTBeamLimitingDeviceProximalDistance>();

        case Keyword::RTBeamLimitingDeviceDistalDistance:
            return get<Keyword::RTBeamLimitingDeviceDistalDistance>();

        case Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence:
            return get<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>();

        case Keyword::BeamModifierOrientationAngle:
            return get<Keyword::BeamModifierOrientationAngle>();

        case Keyword::FixedRTBeamDelimiterDeviceSequence:
            return get<Keyword::FixedRTBeamDelimiterDeviceSequence>();

        case Keyword::ParallelRTBeamDelimiterDeviceSequence:
            return get<Keyword::ParallelRTBeamDelimiterDeviceSequence>();

        case Keyword::NumberOfParallelRTBeamDelimiters:
            return get<Keyword::NumberOfParallelRTBeamDelimiters>();

        case Keyword::ParallelRTBeamDelimiterBoundaries:
            return get<Keyword::ParallelRTBeamDelimiterBoundaries>();

        case Keyword::ParallelRTBeamDelimiterPositions:
            return get<Keyword::ParallelRTBeamDelimiterPositions>();

        case Keyword::RTBeamLimitingDeviceOffset:
            return get<Keyword::RTBeamLimitingDeviceOffset>();

        case Keyword::RTBeamDelimiterGeometrySequence:
            return get<Keyword::RTBeamDelimiterGeometrySequence>();

        case Keyword::RTBeamLimitingDeviceDefinitionSequence:
            return get<Keyword::RTBeamLimitingDeviceDefinitionSequence>();

        case Keyword::ParallelRTBeamDelimiterOpeningMode:
            return get<Keyword::ParallelRTBeamDelimiterOpeningMode>();

        case Keyword::ParallelRTBeamDelimiterLeafMountingSide:
            return get<Keyword::ParallelRTBeamDelimiterLeafMountingSide>();

        case Keyword::RTBeamLimitingDeviceOpeningSequence:
            return get<Keyword::RTBeamLimitingDeviceOpeningSequence>();

        case Keyword::RadiationDosimeterUnitSequence:
            return get<Keyword::RadiationDosimeterUnitSequence>();

        case Keyword::RTDeviceDistanceReferenceLocationCodeSequence:
            return get<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>();

        case Keyword::PatientSupportPositionParameterSequence:
            return get<Keyword::PatientSupportPositionParameterSequence>();

        case Keyword::PatientSupportPositionSpecificationMethod:
            return get<Keyword::PatientSupportPositionSpecificationMethod>();

        case Keyword::PatientSupportPositionDeviceParameterSequence:
            return get<Keyword::PatientSupportPositionDeviceParameterSequence>();

        case Keyword::DeviceOrderIndex:
            return get<Keyword::DeviceOrderIndex>();

        case Keyword::GeneralAccessoryDefinitionSequence:
            return get<Keyword::GeneralAccessoryDefinitionSequence>();

        case Keyword::NumberOfGeneralAccessories:
            return get<Keyword::NumberOfGeneralAccessories>();

        case Keyword::EquipmentFrameOfReferenceUID:
            return get<Keyword::EquipmentFrameOfReferenceUID>();

        case Keyword::PatientSupportDevicesSequence:
            return get<Keyword::PatientSupportDevicesSequence>();

        case Keyword::NumberOfPatientSupportDevices:
            return get<Keyword::NumberOfPatientSupportDevices>();

        case Keyword::RTBeamModifierDefinitionDistance:
            return get<Keyword::RTBeamModifierDefinitionDistance>();

        case Keyword::TreatmentSessionUID:
            return get<Keyword::TreatmentSessionUID>();

        case Keyword::RTRadiationSetDeliveryNumber:
            return get<Keyword::RTRadiationSetDeliveryNumber>();

        case Keyword::ClinicalFractionNumber:
            return get<Keyword::ClinicalFractionNumber>();

        case Keyword::ReferencedRTPlanSequence:
            return get<Keyword::ReferencedRTPlanSequence>();

        case Keyword::ReferencedBeamSequence:
            return get<Keyword::ReferencedBeamSequence>();

        case Keyword::ReferencedBeamNumber:
            return get<Keyword::ReferencedBeamNumber>();

        case Keyword::StartCumulativeMetersetWeight:
            return get<Keyword::StartCumulativeMetersetWeight>();

        case Keyword::EndCumulativeMetersetWeight:
            return get<Keyword::EndCumulativeMetersetWeight>();

        case Keyword::ReferencedFractionGroupSequence:
            return get<Keyword::ReferencedFractionGroupSequence>();

        case Keyword::ReferencedFractionGroupNumber:
            return get<Keyword::ReferencedFractionGroupNumber>();

        case Keyword::ReferencedStructureSetSequence:
            return get<Keyword::ReferencedStructureSetSequence>();

        case Keyword::PrescriptionOverviewSequence:
            return get<Keyword::PrescriptionOverviewSequence>();

        case Keyword::PlanOverviewSequence:
            return get<Keyword::PlanOverviewSequence>();

        case Keyword::PlanOverviewIndex:
            return get<Keyword::PlanOverviewIndex>();

        case Keyword::ReferencedPlanOverviewIndex:
            return get<Keyword::ReferencedPlanOverviewIndex>();

        case Keyword::NumberOfFractionsIncluded:
            return get<Keyword::NumberOfFractionsIncluded>();

        case Keyword::ApprovalStatus:
            return get<Keyword::ApprovalStatus>();

        case Keyword::ReviewDate:
            return get<Keyword::ReviewDate>();

        case Keyword::ReviewTime:
            return get<Keyword::ReviewTime>();

        case Keyword::ReviewerName:
            return get<Keyword::ReviewerName>();

        case Keyword::AuthorIdentificationSequence:
            return get<Keyword::AuthorIdentificationSequence>();

        case Keyword::ManufacturerModelVersion:
            return get<Keyword::ManufacturerModelVersion>();

        case Keyword::DeviceAlternateIdentifier:
            return get<Keyword::DeviceAlternateIdentifier>();

        case Keyword::DeviceAlternateIdentifierType:
            return get<Keyword::DeviceAlternateIdentifierType>();

        case Keyword::DeviceAlternateIdentifierFormat:
            return get<Keyword::DeviceAlternateIdentifierFormat>();

        case Keyword::ConceptualVolumeSequence:
            return get<Keyword::ConceptualVolumeSequence>();

        case Keyword::DeviceLabel:
            return get<Keyword::DeviceLabel>();

        case Keyword::DeviceTypeCodeSequence:
            return get<Keyword::DeviceTypeCodeSequence>();

        case Keyword::PatientEquipmentRelationshipCodeSequence:
            return get<Keyword::PatientEquipmentRelationshipCodeSequence>();

        case Keyword::EntityDescription:
            return get<Keyword::EntityDescription>();

        case Keyword::EntityLongLabel:
            return get<Keyword::EntityLongLabel>();

        case Keyword::DeviceIndex:
            return get<Keyword::DeviceIndex>();

        case Keyword::ManufacturerDeviceIdentifier:
            return get<Keyword::ManufacturerDeviceIdentifier>();

        case Keyword::InstanceLevelReferencedPerformedProcedureStepSequence:
            return get<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>();

        case Keyword::TreatmentSite:
            return get<Keyword::TreatmentSite>();

        case Keyword::TreatmentSiteCodeSequence:
            return get<Keyword::TreatmentSiteCodeSequence>();

        case Keyword::MACParametersSequence:
            return get<Keyword::MACParametersSequence>();

        case Keyword::SharedFunctionalGroupsSequence:
            return get<Keyword::SharedFunctionalGroupsSequence>();

        case Keyword::PerFrameFunctionalGroupsSequence:
            return get<Keyword::PerFrameFunctionalGroupsSequence>();

        case Keyword::OverlayRows:
            return get<Keyword::OverlayRows>();

        case Keyword::OverlayColumns:
            return get<Keyword::OverlayColumns>();

        case Keyword::NumberOfFramesInOverlay:
            return get<Keyword::NumberOfFramesInOverlay>();

        case Keyword::OverlayDescription:
            return get<Keyword::OverlayDescription>();

        case Keyword::OverlayType:
            return get<Keyword::OverlayType>();

        case Keyword::OverlaySubtype:
            return get<Keyword::OverlaySubtype>();

        case Keyword::OverlayOrigin:
            return get<Keyword::OverlayOrigin>();

        case Keyword::ImageFrameOrigin:
            return get<Keyword::ImageFrameOrigin>();

        case Keyword::OverlayBitsAllocated:
            return get<Keyword::OverlayBitsAllocated>();

        case Keyword::OverlayBitPosition:
            return get<Keyword::OverlayBitPosition>();

        case Keyword::ROIArea:
            return get<Keyword::ROIArea>();

        case Keyword::ROIMean:
            return get<Keyword::ROIMean>();

        case Keyword::ROIStandardDeviation:
            return get<Keyword::ROIStandardDeviation>();

        case Keyword::OverlayLabel:
            return get<Keyword::OverlayLabel>();

        case Keyword::OverlayData:
            return get<Keyword::OverlayData>();

        case Keyword::ExtendedOffsetTable:
            return get<Keyword::ExtendedOffsetTable>();

        case Keyword::ExtendedOffsetTableLengths:
            return get<Keyword::ExtendedOffsetTableLengths>();

        case Keyword::EncapsulatedPixelDataValueTotalLength:
            return get<Keyword::EncapsulatedPixelDataValueTotalLength>();

        case Keyword::FloatPixelData:
            return get<Keyword::FloatPixelData>();

        case Keyword::DoubleFloatPixelData:
            return get<Keyword::DoubleFloatPixelData>();

        case Keyword::PixelData:
            return get<Keyword::PixelData>();

        case Keyword::DigitalSignaturesSequence:
            return get<Keyword::DigitalSignaturesSequence>();

        default:
            SIGHT_THROW("Unknown Attribute Keyword: '" << std::uint16_t(keyword) << "'.");
    }
}

//------------------------------------------------------------------------------

const IAttribute& get(std::uint16_t group, std::uint16_t element)
{
    // Special case for groups in the range 0x6000-0x60FF for attribute (60xx, xxxx)
    if(group > 0x6000 && group <= 0x60FF)
    {
        group = 0x6000;
    }

    switch(group)
    {
        case 0x0008:
        {
            switch(element)
            {
                case 0x0005:
                    return get<Keyword::SpecificCharacterSet>();

                case 0x0006:
                    return get<Keyword::LanguageCodeSequence>();

                case 0x0008:
                    return get<Keyword::ImageType>();

                case 0x0012:
                    return get<Keyword::InstanceCreationDate>();

                case 0x0013:
                    return get<Keyword::InstanceCreationTime>();

                case 0x0014:
                    return get<Keyword::InstanceCreatorUID>();

                case 0x0015:
                    return get<Keyword::InstanceCoercionDateTime>();

                case 0x0016:
                    return get<Keyword::sop_classUID>();

                case 0x0017:
                    return get<Keyword::AcquisitionUID>();

                case 0x0018:
                    return get<Keyword::SOPInstanceUID>();

                case 0x0019:
                    return get<Keyword::PyramidUID>();

                case 0x001A:
                    return get<Keyword::RelatedGeneralsop_classUID>();

                case 0x001B:
                    return get<Keyword::OriginalSpecializedsop_classUID>();

                case 0x0020:
                    return get<Keyword::StudyDate>();

                case 0x0021:
                    return get<Keyword::SeriesDate>();

                case 0x0022:
                    return get<Keyword::AcquisitionDate>();

                case 0x0023:
                    return get<Keyword::ContentDate>();

                case 0x002A:
                    return get<Keyword::AcquisitionDateTime>();

                case 0x0030:
                    return get<Keyword::StudyTime>();

                case 0x0031:
                    return get<Keyword::SeriesTime>();

                case 0x0032:
                    return get<Keyword::AcquisitionTime>();

                case 0x0033:
                    return get<Keyword::ContentTime>();

                case 0x0050:
                    return get<Keyword::AccessionNumber>();

                case 0x0051:
                    return get<Keyword::IssuerOfAccessionNumberSequence>();

                case 0x0053:
                    return get<Keyword::QueryRetrieveView>();

                case 0x0054:
                    return get<Keyword::RetrieveAETitle>();

                case 0x0055:
                    return get<Keyword::StationAETitle>();

                case 0x0060:
                    return get<Keyword::Modality>();

                case 0x0064:
                    return get<Keyword::ConversionType>();

                case 0x0068:
                    return get<Keyword::PresentationIntentType>();

                case 0x0070:
                    return get<Keyword::Manufacturer>();

                case 0x0080:
                    return get<Keyword::InstitutionName>();

                case 0x0081:
                    return get<Keyword::InstitutionAddress>();

                case 0x0082:
                    return get<Keyword::InstitutionCodeSequence>();

                case 0x0090:
                    return get<Keyword::ReferringPhysicianName>();

                case 0x0096:
                    return get<Keyword::ReferringPhysicianIdentificationSequence>();

                case 0x009C:
                    return get<Keyword::ConsultingPhysicianName>();

                case 0x009D:
                    return get<Keyword::ConsultingPhysicianIdentificationSequence>();

                case 0x0100:
                    return get<Keyword::CodeValue>();

                case 0x0102:
                    return get<Keyword::CodingSchemeDesignator>();

                case 0x0103:
                    return get<Keyword::CodingSchemeVersion>();

                case 0x0104:
                    return get<Keyword::CodeMeaning>();

                case 0x0105:
                    return get<Keyword::MappingResource>();

                case 0x0106:
                    return get<Keyword::ContextGroupVersion>();

                case 0x0107:
                    return get<Keyword::ContextGroupLocalVersion>();

                case 0x0109:
                    return get<Keyword::CodingSchemeResourcesSequence>();

                case 0x010B:
                    return get<Keyword::ContextGroupExtensionFlag>();

                case 0x010C:
                    return get<Keyword::CodingSchemeUID>();

                case 0x010D:
                    return get<Keyword::ContextGroupExtensionCreatorUID>();

                case 0x010F:
                    return get<Keyword::ContextIdentifier>();

                case 0x0110:
                    return get<Keyword::CodingSchemeIdentificationSequence>();

                case 0x0112:
                    return get<Keyword::CodingSchemeRegistry>();

                case 0x0114:
                    return get<Keyword::CodingSchemeExternalID>();

                case 0x0115:
                    return get<Keyword::CodingSchemeName>();

                case 0x0116:
                    return get<Keyword::CodingSchemeResponsibleOrganization>();

                case 0x0117:
                    return get<Keyword::ContextUID>();

                case 0x0118:
                    return get<Keyword::MappingResourceUID>();

                case 0x0119:
                    return get<Keyword::LongCodeValue>();

                case 0x0120:
                    return get<Keyword::URNCodeValue>();

                case 0x0121:
                    return get<Keyword::EquivalentCodeSequence>();

                case 0x0122:
                    return get<Keyword::MappingResourceName>();

                case 0x0123:
                    return get<Keyword::ContextGroupIdentificationSequence>();

                case 0x0124:
                    return get<Keyword::MappingResourceIdentificationSequence>();

                case 0x0201:
                    return get<Keyword::TimezoneOffsetFromUTC>();

                case 0x0220:
                    return get<Keyword::ResponsibleGroupCodeSequence>();

                case 0x0300:
                    return get<Keyword::PrivateDataElementCharacteristicsSequence>();

                case 0x0301:
                    return get<Keyword::PrivateGroupReference>();

                case 0x0302:
                    return get<Keyword::PrivateCreatorReference>();

                case 0x0303:
                    return get<Keyword::BlockIdentifyingInformationStatus>();

                case 0x0304:
                    return get<Keyword::NonidentifyingPrivateElements>();

                case 0x0305:
                    return get<Keyword::DeidentificationActionSequence>();

                case 0x0310:
                    return get<Keyword::PrivateDataElementDefinitionSequence>();

                case 0x1010:
                    return get<Keyword::StationName>();

                case 0x1030:
                    return get<Keyword::StudyDescription>();

                case 0x1032:
                    return get<Keyword::ProcedureCodeSequence>();

                case 0x103E:
                    return get<Keyword::SeriesDescription>();

                case 0x103F:
                    return get<Keyword::SeriesDescriptionCodeSequence>();

                case 0x1040:
                    return get<Keyword::InstitutionalDepartmentName>();

                case 0x1041:
                    return get<Keyword::InstitutionalDepartmentTypeCodeSequence>();

                case 0x1048:
                    return get<Keyword::PhysiciansOfRecord>();

                case 0x1049:
                    return get<Keyword::PhysiciansOfRecordIdentificationSequence>();

                case 0x1050:
                    return get<Keyword::PerformingPhysicianName>();

                case 0x1052:
                    return get<Keyword::PerformingPhysicianIdentificationSequence>();

                case 0x1060:
                    return get<Keyword::NameOfPhysiciansReadingStudy>();

                case 0x1062:
                    return get<Keyword::PhysiciansReadingStudyIdentificationSequence>();

                case 0x1070:
                    return get<Keyword::OperatorsName>();

                case 0x1072:
                    return get<Keyword::OperatorIdentificationSequence>();

                case 0x1080:
                    return get<Keyword::AdmittingDiagnosesDescription>();

                case 0x1084:
                    return get<Keyword::AdmittingDiagnosesCodeSequence>();

                case 0x1088:
                    return get<Keyword::PyramidDescription>();

                case 0x1090:
                    return get<Keyword::ManufacturerModelName>();

                case 0x1110:
                    return get<Keyword::ReferencedStudySequence>();

                case 0x1111:
                    return get<Keyword::ReferencedPerformedProcedureStepSequence>();

                case 0x1115:
                    return get<Keyword::ReferencedSeriesSequence>();

                case 0x1120:
                    return get<Keyword::ReferencedPatientSequence>();

                case 0x1134:
                    return get<Keyword::ReferencedStereometricInstanceSequence>();

                case 0x113A:
                    return get<Keyword::ReferencedWaveformSequence>();

                case 0x1140:
                    return get<Keyword::ReferencedImageSequence>();

                case 0x114A:
                    return get<Keyword::ReferencedInstanceSequence>();

                case 0x114B:
                    return get<Keyword::ReferencedRealWorldValueMappingInstanceSequence>();

                case 0x1150:
                    return get<Keyword::ReferencedSOPClassUID>();

                case 0x1155:
                    return get<Keyword::ReferencedSOPInstanceUID>();

                case 0x1156:
                    return get<Keyword::DefinitionSourceSequence>();

                case 0x1160:
                    return get<Keyword::ReferencedFrameNumber>();

                case 0x1161:
                    return get<Keyword::SimpleFrameList>();

                case 0x1162:
                    return get<Keyword::CalculatedFrameList>();

                case 0x1163:
                    return get<Keyword::TimeRange>();

                case 0x1164:
                    return get<Keyword::FrameExtractionSequence>();

                case 0x1167:
                    return get<Keyword::MultiFrameSourceSOPInstanceUID>();

                case 0x1190:
                    return get<Keyword::RetrieveURL>();

                case 0x1199:
                    return get<Keyword::ReferencedSOPSequence>();

                case 0x1200:
                    return get<Keyword::StudiesContainingOtherReferencedInstancesSequence>();

                case 0x1250:
                    return get<Keyword::RelatedSeriesSequence>();

                case 0x2111:
                    return get<Keyword::DerivationDescription>();

                case 0x2112:
                    return get<Keyword::SourceImageSequence>();

                case 0x2120:
                    return get<Keyword::StageName>();

                case 0x2122:
                    return get<Keyword::StageNumber>();

                case 0x2124:
                    return get<Keyword::NumberOfStages>();

                case 0x2127:
                    return get<Keyword::ViewName>();

                case 0x2128:
                    return get<Keyword::ViewNumber>();

                case 0x2129:
                    return get<Keyword::NumberOfEventTimers>();

                case 0x212A:
                    return get<Keyword::NumberOfViewsInStage>();

                case 0x2130:
                    return get<Keyword::EventElapsedTimes>();

                case 0x2132:
                    return get<Keyword::EventTimerNames>();

                case 0x2133:
                    return get<Keyword::EventTimerSequence>();

                case 0x2134:
                    return get<Keyword::EventTimeOffset>();

                case 0x2135:
                    return get<Keyword::EventCodeSequence>();

                case 0x2142:
                    return get<Keyword::StartTrim>();

                case 0x2143:
                    return get<Keyword::StopTrim>();

                case 0x2144:
                    return get<Keyword::RecommendedDisplayFrameRate>();

                case 0x2218:
                    return get<Keyword::AnatomicRegionSequence>();

                case 0x2220:
                    return get<Keyword::AnatomicRegionModifierSequence>();

                case 0x2228:
                    return get<Keyword::PrimaryAnatomicStructureSequence>();

                case 0x2230:
                    return get<Keyword::PrimaryAnatomicStructureModifierSequence>();

                case 0x3010:
                    return get<Keyword::IrradiationEventUID>();

                case 0x3011:
                    return get<Keyword::SourceIrradiationEventSequence>();

                case 0x3012:
                    return get<Keyword::RadiopharmaceuticalAdministrationEventUID>();

                case 0x9007:
                    return get<Keyword::FrameType>();

                case 0x9092:
                    return get<Keyword::ReferencedImageEvidenceSequence>();

                case 0x9121:
                    return get<Keyword::ReferencedRawDataSequence>();

                case 0x9124:
                    return get<Keyword::DerivationImageSequence>();

                case 0x9154:
                    return get<Keyword::SourceImageEvidenceSequence>();

                case 0x9205:
                    return get<Keyword::PixelPresentation>();

                case 0x9206:
                    return get<Keyword::VolumetricProperties>();

                case 0x9207:
                    return get<Keyword::VolumeBasedCalculationTechnique>();

                case 0x9208:
                    return get<Keyword::ComplexImageComponent>();

                case 0x9209:
                    return get<Keyword::AcquisitionContrast>();

                case 0x9215:
                    return get<Keyword::DerivationCodeSequence>();

                case 0x9237:
                    return get<Keyword::ReferencedPresentationStateSequence>();

                case 0x9410:
                    return get<Keyword::ReferencedOtherPlaneSequence>();

                case 0x9458:
                    return get<Keyword::FrameDisplaySequence>();

                case 0x9459:
                    return get<Keyword::RecommendedDisplayFrameRateInFloat>();

                case 0x9460:
                    return get<Keyword::SkipFrameRangeFlag>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0010:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::PatientName>();

                case 0x0020:
                    return get<Keyword::PatientID>();

                case 0x0021:
                    return get<Keyword::IssuerOfPatientID>();

                case 0x0022:
                    return get<Keyword::TypeOfPatientID>();

                case 0x0024:
                    return get<Keyword::IssuerOfPatientIDQualifiersSequence>();

                case 0x0026:
                    return get<Keyword::SourcePatientGroupIdentificationSequence>();

                case 0x0027:
                    return get<Keyword::GroupOfPatientsIdentificationSequence>();

                case 0x0028:
                    return get<Keyword::SubjectRelativePositionInImage>();

                case 0x0030:
                    return get<Keyword::PatientBirthDate>();

                case 0x0032:
                    return get<Keyword::PatientBirthTime>();

                case 0x0033:
                    return get<Keyword::PatientBirthDateInAlternativeCalendar>();

                case 0x0034:
                    return get<Keyword::PatientDeathDateInAlternativeCalendar>();

                case 0x0035:
                    return get<Keyword::PatientAlternativeCalendar>();

                case 0x0040:
                    return get<Keyword::PatientSex>();

                case 0x0200:
                    return get<Keyword::QualityControlSubject>();

                case 0x0212:
                    return get<Keyword::StrainDescription>();

                case 0x0213:
                    return get<Keyword::StrainNomenclature>();

                case 0x0214:
                    return get<Keyword::StrainStockNumber>();

                case 0x0215:
                    return get<Keyword::StrainSourceRegistryCodeSequence>();

                case 0x0216:
                    return get<Keyword::StrainStockSequence>();

                case 0x0217:
                    return get<Keyword::StrainSource>();

                case 0x0218:
                    return get<Keyword::StrainAdditionalInformation>();

                case 0x0219:
                    return get<Keyword::StrainCodeSequence>();

                case 0x0221:
                    return get<Keyword::GeneticModificationsSequence>();

                case 0x0222:
                    return get<Keyword::GeneticModificationsDescription>();

                case 0x0223:
                    return get<Keyword::GeneticModificationsNomenclature>();

                case 0x0229:
                    return get<Keyword::GeneticModificationsCodeSequence>();

                case 0x1001:
                    return get<Keyword::OtherPatientNames>();

                case 0x1002:
                    return get<Keyword::OtherPatientIDsSequence>();

                case 0x1010:
                    return get<Keyword::PatientAge>();

                case 0x1020:
                    return get<Keyword::PatientSize>();

                case 0x1021:
                    return get<Keyword::PatientSizeCodeSequence>();

                case 0x1022:
                    return get<Keyword::PatientBodyMassIndex>();

                case 0x1023:
                    return get<Keyword::MeasuredAPDimension>();

                case 0x1024:
                    return get<Keyword::MeasuredLateralDimension>();

                case 0x1030:
                    return get<Keyword::PatientWeight>();

                case 0x1100:
                    return get<Keyword::ReferencedPatientPhotoSequence>();

                case 0x2000:
                    return get<Keyword::MedicalAlerts>();

                case 0x2110:
                    return get<Keyword::Allergies>();

                case 0x2160:
                    return get<Keyword::EthnicGroup>();

                case 0x2180:
                    return get<Keyword::Occupation>();

                case 0x21A0:
                    return get<Keyword::SmokingStatus>();

                case 0x21B0:
                    return get<Keyword::AdditionalPatientHistory>();

                case 0x21C0:
                    return get<Keyword::PregnancyStatus>();

                case 0x21D0:
                    return get<Keyword::LastMenstrualDate>();

                case 0x2201:
                    return get<Keyword::PatientSpeciesDescription>();

                case 0x2202:
                    return get<Keyword::PatientSpeciesCodeSequence>();

                case 0x2203:
                    return get<Keyword::PatientSexNeutered>();

                case 0x2210:
                    return get<Keyword::AnatomicalOrientationType>();

                case 0x2292:
                    return get<Keyword::PatientBreedDescription>();

                case 0x2293:
                    return get<Keyword::PatientBreedCodeSequence>();

                case 0x2294:
                    return get<Keyword::BreedRegistrationSequence>();

                case 0x2295:
                    return get<Keyword::BreedRegistrationNumber>();

                case 0x2296:
                    return get<Keyword::BreedRegistryCodeSequence>();

                case 0x2297:
                    return get<Keyword::ResponsiblePerson>();

                case 0x2298:
                    return get<Keyword::ResponsiblePersonRole>();

                case 0x2299:
                    return get<Keyword::ResponsibleOrganization>();

                case 0x4000:
                    return get<Keyword::PatientComments>();

                case 0x9431:
                    return get<Keyword::ExaminedBodyThickness>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0012:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::ClinicalTrialSponsorName>();

                case 0x0020:
                    return get<Keyword::ClinicalTrialProtocolID>();

                case 0x0021:
                    return get<Keyword::ClinicalTrialProtocolName>();

                case 0x0030:
                    return get<Keyword::ClinicalTrialSiteID>();

                case 0x0031:
                    return get<Keyword::ClinicalTrialSiteName>();

                case 0x0040:
                    return get<Keyword::ClinicalTrialSubjectID>();

                case 0x0042:
                    return get<Keyword::ClinicalTrialSubjectReadingID>();

                case 0x0050:
                    return get<Keyword::ClinicalTrialTimePointID>();

                case 0x0051:
                    return get<Keyword::ClinicalTrialTimePointDescription>();

                case 0x0052:
                    return get<Keyword::LongitudinalTemporalOffsetFromEvent>();

                case 0x0053:
                    return get<Keyword::LongitudinalTemporalEventType>();

                case 0x0054:
                    return get<Keyword::ClinicalTrialTimePointTypeCodeSequence>();

                case 0x0060:
                    return get<Keyword::ClinicalTrialCoordinatingCenterName>();

                case 0x0062:
                    return get<Keyword::PatientIdentityRemoved>();

                case 0x0063:
                    return get<Keyword::DeidentificationMethod>();

                case 0x0064:
                    return get<Keyword::DeidentificationMethodCodeSequence>();

                case 0x0071:
                    return get<Keyword::ClinicalTrialSeriesID>();

                case 0x0072:
                    return get<Keyword::ClinicalTrialSeriesDescription>();

                case 0x0081:
                    return get<Keyword::ClinicalTrialProtocolEthicsCommitteeName>();

                case 0x0082:
                    return get<Keyword::ClinicalTrialProtocolEthicsCommitteeApprovalNumber>();

                case 0x0083:
                    return get<Keyword::ConsentForClinicalTrialUseSequence>();

                case 0x0084:
                    return get<Keyword::DistributionType>();

                case 0x0085:
                    return get<Keyword::ConsentForDistributionFlag>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0016:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::WhitePoint>();

                case 0x0002:
                    return get<Keyword::PrimaryChromaticities>();

                case 0x0003:
                    return get<Keyword::BatteryLevel>();

                case 0x0004:
                    return get<Keyword::ExposureTimeInSeconds>();

                case 0x0005:
                    return get<Keyword::FNumber>();

                case 0x0006:
                    return get<Keyword::OECFRows>();

                case 0x0007:
                    return get<Keyword::OECFColumns>();

                case 0x0008:
                    return get<Keyword::OECFColumnNames>();

                case 0x0009:
                    return get<Keyword::OECFValues>();

                case 0x000A:
                    return get<Keyword::SpatialFrequencyResponseRows>();

                case 0x000B:
                    return get<Keyword::SpatialFrequencyResponseColumns>();

                case 0x000C:
                    return get<Keyword::SpatialFrequencyResponseColumnNames>();

                case 0x000D:
                    return get<Keyword::SpatialFrequencyResponseValues>();

                case 0x000E:
                    return get<Keyword::ColorFilterArrayPatternRows>();

                case 0x000F:
                    return get<Keyword::ColorFilterArrayPatternColumns>();

                case 0x0010:
                    return get<Keyword::ColorFilterArrayPatternValues>();

                case 0x0011:
                    return get<Keyword::FlashFiringStatus>();

                case 0x0012:
                    return get<Keyword::FlashReturnStatus>();

                case 0x0013:
                    return get<Keyword::FlashMode>();

                case 0x0014:
                    return get<Keyword::FlashFunctionPresent>();

                case 0x0015:
                    return get<Keyword::FlashRedEyeMode>();

                case 0x0016:
                    return get<Keyword::ExposureProgram>();

                case 0x0017:
                    return get<Keyword::SpectralSensitivity>();

                case 0x0018:
                    return get<Keyword::PhotographicSensitivity>();

                case 0x0019:
                    return get<Keyword::SelfTimerMode>();

                case 0x001A:
                    return get<Keyword::SensitivityType>();

                case 0x001B:
                    return get<Keyword::StandardOutputSensitivity>();

                case 0x001C:
                    return get<Keyword::RecommendedExposureIndex>();

                case 0x001D:
                    return get<Keyword::ISOSpeed>();

                case 0x001E:
                    return get<Keyword::ISOSpeedLatitudeyyy>();

                case 0x001F:
                    return get<Keyword::ISOSpeedLatitudezzz>();

                case 0x0020:
                    return get<Keyword::EXIFVersion>();

                case 0x0021:
                    return get<Keyword::ShutterSpeedValue>();

                case 0x0022:
                    return get<Keyword::ApertureValue>();

                case 0x0023:
                    return get<Keyword::BrightnessValue>();

                case 0x0024:
                    return get<Keyword::ExposureBiasValue>();

                case 0x0025:
                    return get<Keyword::MaxApertureValue>();

                case 0x0026:
                    return get<Keyword::SubjectDistance>();

                case 0x0027:
                    return get<Keyword::MeteringMode>();

                case 0x0028:
                    return get<Keyword::LightSource>();

                case 0x0029:
                    return get<Keyword::FocalLength>();

                case 0x002A:
                    return get<Keyword::SubjectArea>();

                case 0x002B:
                    return get<Keyword::MakerNote>();

                case 0x0030:
                    return get<Keyword::Temperature>();

                case 0x0031:
                    return get<Keyword::Humidity>();

                case 0x0032:
                    return get<Keyword::Pressure>();

                case 0x0033:
                    return get<Keyword::WaterDepth>();

                case 0x0034:
                    return get<Keyword::Acceleration>();

                case 0x0035:
                    return get<Keyword::CameraElevationAngle>();

                case 0x0036:
                    return get<Keyword::FlashEnergy>();

                case 0x0037:
                    return get<Keyword::SubjectLocation>();

                case 0x0038:
                    return get<Keyword::PhotographicExposureIndex>();

                case 0x0039:
                    return get<Keyword::SensingMethod>();

                case 0x003A:
                    return get<Keyword::FileSource>();

                case 0x003B:
                    return get<Keyword::SceneType>();

                case 0x0041:
                    return get<Keyword::CustomRendered>();

                case 0x0042:
                    return get<Keyword::ExposureMode>();

                case 0x0043:
                    return get<Keyword::WhiteBalance>();

                case 0x0044:
                    return get<Keyword::DigitalZoomRatio>();

                case 0x0045:
                    return get<Keyword::FocalLengthIn35mmFilm>();

                case 0x0046:
                    return get<Keyword::SceneCaptureType>();

                case 0x0047:
                    return get<Keyword::GainControl>();

                case 0x0048:
                    return get<Keyword::Contrast>();

                case 0x0049:
                    return get<Keyword::Saturation>();

                case 0x004A:
                    return get<Keyword::Sharpness>();

                case 0x004B:
                    return get<Keyword::DeviceSettingDescription>();

                case 0x004C:
                    return get<Keyword::SubjectDistanceRange>();

                case 0x004D:
                    return get<Keyword::CameraOwnerName>();

                case 0x004E:
                    return get<Keyword::LensSpecification>();

                case 0x004F:
                    return get<Keyword::LensMake>();

                case 0x0050:
                    return get<Keyword::LensModel>();

                case 0x0051:
                    return get<Keyword::LensSerialNumber>();

                case 0x0061:
                    return get<Keyword::InteroperabilityIndex>();

                case 0x0062:
                    return get<Keyword::InteroperabilityVersion>();

                case 0x0070:
                    return get<Keyword::GPSVersionID>();

                case 0x0071:
                    return get<Keyword::GPSLatitudeRef>();

                case 0x0072:
                    return get<Keyword::GPSLatitude>();

                case 0x0073:
                    return get<Keyword::GPSLongitudeRef>();

                case 0x0074:
                    return get<Keyword::GPSLongitude>();

                case 0x0075:
                    return get<Keyword::GPSAltitudeRef>();

                case 0x0076:
                    return get<Keyword::GPSAltitude>();

                case 0x0077:
                    return get<Keyword::GPSTimeStamp>();

                case 0x0078:
                    return get<Keyword::GPSSatellites>();

                case 0x0079:
                    return get<Keyword::GPstatus>();

                case 0x007A:
                    return get<Keyword::GPSMeasureMode>();

                case 0x007B:
                    return get<Keyword::GPSDOP>();

                case 0x007C:
                    return get<Keyword::GPSSpeedRef>();

                case 0x007D:
                    return get<Keyword::GPSSpeed>();

                case 0x007E:
                    return get<Keyword::GPSTrackRef>();

                case 0x007F:
                    return get<Keyword::GPSTrack>();

                case 0x0080:
                    return get<Keyword::GPSImgDirectionRef>();

                case 0x0081:
                    return get<Keyword::GPSImgDirection>();

                case 0x0082:
                    return get<Keyword::GPSMapDatum>();

                case 0x0083:
                    return get<Keyword::GPSDestLatitudeRef>();

                case 0x0084:
                    return get<Keyword::GPSDestLatitude>();

                case 0x0085:
                    return get<Keyword::GPSDestLongitudeRef>();

                case 0x0086:
                    return get<Keyword::GPSDestLongitude>();

                case 0x0087:
                    return get<Keyword::GPSDestBearingRef>();

                case 0x0088:
                    return get<Keyword::GPSDestBearing>();

                case 0x0089:
                    return get<Keyword::GPSDestDistanceRef>();

                case 0x008A:
                    return get<Keyword::GPSDestDistance>();

                case 0x008B:
                    return get<Keyword::GPSProcessingMethod>();

                case 0x008C:
                    return get<Keyword::GPSAreaInformation>();

                case 0x008D:
                    return get<Keyword::GPSDateStamp>();

                case 0x008E:
                    return get<Keyword::GPSDifferential>();

                case 0x1001:
                    return get<Keyword::LightSourcePolarization>();

                case 0x1002:
                    return get<Keyword::EmitterColorTemperature>();

                case 0x1003:
                    return get<Keyword::ContactMethod>();

                case 0x1004:
                    return get<Keyword::ImmersionMedia>();

                case 0x1005:
                    return get<Keyword::OpticalMagnificationFactor>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0018:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::ContrastBolusAgent>();

                case 0x0012:
                    return get<Keyword::ContrastBolusAgentSequence>();

                case 0x0013:
                    return get<Keyword::ContrastBolusT1Relaxivity>();

                case 0x0014:
                    return get<Keyword::ContrastBolusAdministrationRouteSequence>();

                case 0x0015:
                    return get<Keyword::BodyPartExamined>();

                case 0x0020:
                    return get<Keyword::ScanningSequence>();

                case 0x0021:
                    return get<Keyword::SequenceVariant>();

                case 0x0022:
                    return get<Keyword::ScanOptions>();

                case 0x0023:
                    return get<Keyword::MRAcquisitionType>();

                case 0x0024:
                    return get<Keyword::SequenceName>();

                case 0x0025:
                    return get<Keyword::AngioFlag>();

                case 0x0026:
                    return get<Keyword::InterventionDrugInformationSequence>();

                case 0x0027:
                    return get<Keyword::InterventionDrugStopTime>();

                case 0x0028:
                    return get<Keyword::InterventionDrugDose>();

                case 0x0029:
                    return get<Keyword::InterventionDrugCodeSequence>();

                case 0x002A:
                    return get<Keyword::AdditionalDrugSequence>();

                case 0x0031:
                    return get<Keyword::Radiopharmaceutical>();

                case 0x0034:
                    return get<Keyword::InterventionDrugName>();

                case 0x0035:
                    return get<Keyword::InterventionDrugStartTime>();

                case 0x0036:
                    return get<Keyword::InterventionSequence>();

                case 0x0038:
                    return get<Keyword::InterventionStatus>();

                case 0x003A:
                    return get<Keyword::InterventionDescription>();

                case 0x0040:
                    return get<Keyword::CineRate>();

                case 0x0042:
                    return get<Keyword::InitialCineRunState>();

                case 0x0050:
                    return get<Keyword::SliceThickness>();

                case 0x0060:
                    return get<Keyword::KVP>();

                case 0x0070:
                    return get<Keyword::CountsAccumulated>();

                case 0x0071:
                    return get<Keyword::AcquisitionTerminationCondition>();

                case 0x0072:
                    return get<Keyword::EffectiveDuration>();

                case 0x0073:
                    return get<Keyword::AcquisitionStartCondition>();

                case 0x0074:
                    return get<Keyword::AcquisitionStartConditionData>();

                case 0x0075:
                    return get<Keyword::AcquisitionTerminationConditionData>();

                case 0x0080:
                    return get<Keyword::RepetitionTime>();

                case 0x0081:
                    return get<Keyword::EchoTime>();

                case 0x0082:
                    return get<Keyword::InversionTime>();

                case 0x0083:
                    return get<Keyword::NumberOfAverages>();

                case 0x0084:
                    return get<Keyword::ImagingFrequency>();

                case 0x0085:
                    return get<Keyword::ImagedNucleus>();

                case 0x0086:
                    return get<Keyword::EchoNumbers>();

                case 0x0087:
                    return get<Keyword::MagneticFieldStrength>();

                case 0x0088:
                    return get<Keyword::SpacingBetweenSlices>();

                case 0x0089:
                    return get<Keyword::NumberOfPhaseEncodingSteps>();

                case 0x0090:
                    return get<Keyword::DataCollectionDiameter>();

                case 0x0091:
                    return get<Keyword::EchoTrainLength>();

                case 0x0093:
                    return get<Keyword::PercentSampling>();

                case 0x0094:
                    return get<Keyword::PercentPhaseFieldOfView>();

                case 0x0095:
                    return get<Keyword::PixelBandwidth>();

                case 0x1000:
                    return get<Keyword::DeviceSerialNumber>();

                case 0x1002:
                    return get<Keyword::DeviceUID>();

                case 0x1003:
                    return get<Keyword::DeviceID>();

                case 0x1004:
                    return get<Keyword::PlateID>();

                case 0x1005:
                    return get<Keyword::GeneratorID>();

                case 0x1006:
                    return get<Keyword::GridID>();

                case 0x1007:
                    return get<Keyword::CassetteID>();

                case 0x1008:
                    return get<Keyword::GantryID>();

                case 0x1009:
                    return get<Keyword::UniqueDeviceIdentifier>();

                case 0x100A:
                    return get<Keyword::UDISequence>();

                case 0x100B:
                    return get<Keyword::ManufacturerDeviceClassUID>();

                case 0x1010:
                    return get<Keyword::SecondaryCaptureDeviceID>();

                case 0x1012:
                    return get<Keyword::DateOfSecondaryCapture>();

                case 0x1014:
                    return get<Keyword::TimeOfSecondaryCapture>();

                case 0x1016:
                    return get<Keyword::SecondaryCaptureDeviceManufacturer>();

                case 0x1018:
                    return get<Keyword::SecondaryCaptureDeviceManufacturerModelName>();

                case 0x1019:
                    return get<Keyword::SecondaryCaptureDeviceSoftwareVersions>();

                case 0x1020:
                    return get<Keyword::SoftwareVersions>();

                case 0x1022:
                    return get<Keyword::VideoImageFormatAcquired>();

                case 0x1023:
                    return get<Keyword::DigitalImageFormatAcquired>();

                case 0x1030:
                    return get<Keyword::ProtocolName>();

                case 0x1040:
                    return get<Keyword::ContrastBolusRoute>();

                case 0x1041:
                    return get<Keyword::ContrastBolusVolume>();

                case 0x1042:
                    return get<Keyword::ContrastBolusStartTime>();

                case 0x1043:
                    return get<Keyword::ContrastBolusStopTime>();

                case 0x1044:
                    return get<Keyword::ContrastBolusTotalDose>();

                case 0x1046:
                    return get<Keyword::ContrastFlowRate>();

                case 0x1047:
                    return get<Keyword::ContrastFlowDuration>();

                case 0x1048:
                    return get<Keyword::ContrastBolusIngredient>();

                case 0x1049:
                    return get<Keyword::ContrastBolusIngredientConcentration>();

                case 0x1050:
                    return get<Keyword::SpatialResolution>();

                case 0x1060:
                    return get<Keyword::TriggerTime>();

                case 0x1061:
                    return get<Keyword::TriggerSourceOrType>();

                case 0x1062:
                    return get<Keyword::NominalInterval>();

                case 0x1063:
                    return get<Keyword::FrameTime>();

                case 0x1064:
                    return get<Keyword::CardiacFramingType>();

                case 0x1065:
                    return get<Keyword::FrameTimeVector>();

                case 0x1066:
                    return get<Keyword::FrameDelay>();

                case 0x1067:
                    return get<Keyword::ImageTriggerDelay>();

                case 0x106A:
                    return get<Keyword::SynchronizationTrigger>();

                case 0x106C:
                    return get<Keyword::SynchronizationChannel>();

                case 0x1070:
                    return get<Keyword::RadiopharmaceuticalRoute>();

                case 0x1071:
                    return get<Keyword::RadiopharmaceuticalVolume>();

                case 0x1072:
                    return get<Keyword::RadiopharmaceuticalStartTime>();

                case 0x1073:
                    return get<Keyword::RadiopharmaceuticalStopTime>();

                case 0x1074:
                    return get<Keyword::RadionuclideTotalDose>();

                case 0x1075:
                    return get<Keyword::RadionuclideHalfLife>();

                case 0x1076:
                    return get<Keyword::RadionuclidePositronFraction>();

                case 0x1077:
                    return get<Keyword::RadiopharmaceuticalSpecificActivity>();

                case 0x1078:
                    return get<Keyword::RadiopharmaceuticalStartDateTime>();

                case 0x1079:
                    return get<Keyword::RadiopharmaceuticalStopDateTime>();

                case 0x1080:
                    return get<Keyword::BeatRejectionFlag>();

                case 0x1081:
                    return get<Keyword::LowRRValue>();

                case 0x1082:
                    return get<Keyword::HighRRValue>();

                case 0x1083:
                    return get<Keyword::IntervalsAcquired>();

                case 0x1084:
                    return get<Keyword::IntervalsRejected>();

                case 0x1085:
                    return get<Keyword::PVCRejection>();

                case 0x1086:
                    return get<Keyword::SkipBeats>();

                case 0x1088:
                    return get<Keyword::HeartRate>();

                case 0x1090:
                    return get<Keyword::CardiacNumberOfImages>();

                case 0x1094:
                    return get<Keyword::TriggerWindow>();

                case 0x1100:
                    return get<Keyword::ReconstructionDiameter>();

                case 0x1110:
                    return get<Keyword::DistanceSourceToDetector>();

                case 0x1111:
                    return get<Keyword::DistanceSourceToPatient>();

                case 0x1114:
                    return get<Keyword::EstimatedRadiographicMagnificationFactor>();

                case 0x1120:
                    return get<Keyword::GantryDetectorTilt>();

                case 0x1121:
                    return get<Keyword::GantryDetectorSlew>();

                case 0x1130:
                    return get<Keyword::TableHeight>();

                case 0x1131:
                    return get<Keyword::TableTraverse>();

                case 0x1134:
                    return get<Keyword::TableMotion>();

                case 0x1135:
                    return get<Keyword::TableVerticalIncrement>();

                case 0x1136:
                    return get<Keyword::TableLateralIncrement>();

                case 0x1137:
                    return get<Keyword::TableLongitudinalIncrement>();

                case 0x1138:
                    return get<Keyword::TableAngle>();

                case 0x113A:
                    return get<Keyword::TableType>();

                case 0x1140:
                    return get<Keyword::RotationDirection>();

                case 0x1142:
                    return get<Keyword::RadialPosition>();

                case 0x1143:
                    return get<Keyword::ScanArc>();

                case 0x1144:
                    return get<Keyword::AngularStep>();

                case 0x1145:
                    return get<Keyword::CenterOfRotationOffset>();

                case 0x1147:
                    return get<Keyword::FieldOfViewShape>();

                case 0x1149:
                    return get<Keyword::FieldOfViewDimensions>();

                case 0x1150:
                    return get<Keyword::ExposureTime>();

                case 0x1151:
                    return get<Keyword::XRayTubeCurrent>();

                case 0x1152:
                    return get<Keyword::Exposure>();

                case 0x1153:
                    return get<Keyword::ExposureInuAs>();

                case 0x1154:
                    return get<Keyword::AveragePulseWidth>();

                case 0x1155:
                    return get<Keyword::RadiationSetting>();

                case 0x1156:
                    return get<Keyword::RectificationType>();

                case 0x115A:
                    return get<Keyword::RadiationMode>();

                case 0x115E:
                    return get<Keyword::ImageAndFluoroscopyAreaDoseProduct>();

                case 0x1160:
                    return get<Keyword::FilterType>();

                case 0x1161:
                    return get<Keyword::TypeOfFilters>();

                case 0x1162:
                    return get<Keyword::IntensifierSize>();

                case 0x1164:
                    return get<Keyword::ImagerPixelSpacing>();

                case 0x1166:
                    return get<Keyword::Grid>();

                case 0x1170:
                    return get<Keyword::GeneratorPower>();

                case 0x1180:
                    return get<Keyword::CollimatorGridName>();

                case 0x1181:
                    return get<Keyword::CollimatorType>();

                case 0x1182:
                    return get<Keyword::FocalDistance>();

                case 0x1183:
                    return get<Keyword::XFocusCenter>();

                case 0x1184:
                    return get<Keyword::YFocusCenter>();

                case 0x1190:
                    return get<Keyword::FocalSpots>();

                case 0x1191:
                    return get<Keyword::AnodeTargetMaterial>();

                case 0x11A0:
                    return get<Keyword::BodyPartThickness>();

                case 0x11A2:
                    return get<Keyword::CompressionForce>();

                case 0x11A3:
                    return get<Keyword::CompressionPressure>();

                case 0x11A4:
                    return get<Keyword::PaddleDescription>();

                case 0x11A5:
                    return get<Keyword::CompressionContactArea>();

                case 0x1200:
                    return get<Keyword::DateOfLastCalibration>();

                case 0x1201:
                    return get<Keyword::TimeOfLastCalibration>();

                case 0x1204:
                    return get<Keyword::DateOfManufacture>();

                case 0x1205:
                    return get<Keyword::DateOfInstallation>();

                case 0x1210:
                    return get<Keyword::ConvolutionKernel>();

                case 0x1242:
                    return get<Keyword::ActualFrameDuration>();

                case 0x1243:
                    return get<Keyword::CountRate>();

                case 0x1244:
                    return get<Keyword::PreferredPlaybackSequencing>();

                case 0x1250:
                    return get<Keyword::ReceiveCoilName>();

                case 0x1251:
                    return get<Keyword::TransmitCoilName>();

                case 0x1260:
                    return get<Keyword::PlateType>();

                case 0x1261:
                    return get<Keyword::PhosphorType>();

                case 0x1271:
                    return get<Keyword::WaterEquivalentDiameter>();

                case 0x1272:
                    return get<Keyword::WaterEquivalentDiameterCalculationMethodCodeSequence>();

                case 0x1300:
                    return get<Keyword::ScanVelocity>();

                case 0x1301:
                    return get<Keyword::WholeBodyTechnique>();

                case 0x1302:
                    return get<Keyword::ScanLength>();

                case 0x1310:
                    return get<Keyword::AcquisitionMatrix>();

                case 0x1312:
                    return get<Keyword::InPlanePhaseEncodingDirection>();

                case 0x1314:
                    return get<Keyword::FlipAngle>();

                case 0x1315:
                    return get<Keyword::VariableFlipAngleFlag>();

                case 0x1316:
                    return get<Keyword::SAR>();

                case 0x1318:
                    return get<Keyword::dBdt>();

                case 0x1320:
                    return get<Keyword::B1rms>();

                case 0x1400:
                    return get<Keyword::AcquisitionDeviceProcessingDescription>();

                case 0x1401:
                    return get<Keyword::AcquisitionDeviceProcessingCode>();

                case 0x1402:
                    return get<Keyword::CassetteOrientation>();

                case 0x1403:
                    return get<Keyword::CassetteSize>();

                case 0x1404:
                    return get<Keyword::ExposuresOnPlate>();

                case 0x1405:
                    return get<Keyword::RelativeXRayExposure>();

                case 0x1411:
                    return get<Keyword::ExposureIndex>();

                case 0x1412:
                    return get<Keyword::TargetExposureIndex>();

                case 0x1413:
                    return get<Keyword::DeviationIndex>();

                case 0x1450:
                    return get<Keyword::ColumnAngulation>();

                case 0x1460:
                    return get<Keyword::TomoLayerHeight>();

                case 0x1470:
                    return get<Keyword::TomoAngle>();

                case 0x1480:
                    return get<Keyword::TomoTime>();

                case 0x1490:
                    return get<Keyword::TomoType>();

                case 0x1491:
                    return get<Keyword::TomoClass>();

                case 0x1495:
                    return get<Keyword::NumberOfTomosynthesisSourceImages>();

                case 0x1500:
                    return get<Keyword::PositionerMotion>();

                case 0x1508:
                    return get<Keyword::PositionerType>();

                case 0x1510:
                    return get<Keyword::PositionerPrimaryAngle>();

                case 0x1511:
                    return get<Keyword::PositionerSecondaryAngle>();

                case 0x1520:
                    return get<Keyword::PositionerPrimaryAngleIncrement>();

                case 0x1521:
                    return get<Keyword::PositionerSecondaryAngleIncrement>();

                case 0x1530:
                    return get<Keyword::DetectorPrimaryAngle>();

                case 0x1531:
                    return get<Keyword::DetectorSecondaryAngle>();

                case 0x1600:
                    return get<Keyword::ShutterShape>();

                case 0x1602:
                    return get<Keyword::ShutterLeftVerticalEdge>();

                case 0x1604:
                    return get<Keyword::ShutterRightVerticalEdge>();

                case 0x1606:
                    return get<Keyword::ShutterUpperHorizontalEdge>();

                case 0x1608:
                    return get<Keyword::ShutterLowerHorizontalEdge>();

                case 0x1610:
                    return get<Keyword::CenterOfCircularShutter>();

                case 0x1612:
                    return get<Keyword::RadiusOfCircularShutter>();

                case 0x1620:
                    return get<Keyword::VerticesOfThePolygonalShutter>();

                case 0x1622:
                    return get<Keyword::ShutterPresentationValue>();

                case 0x1623:
                    return get<Keyword::ShutterOverlayGroup>();

                case 0x1624:
                    return get<Keyword::ShutterPresentationColorCIELabValue>();

                case 0x1630:
                    return get<Keyword::OutlineShapeType>();

                case 0x1631:
                    return get<Keyword::OutlineLeftVerticalEdge>();

                case 0x1632:
                    return get<Keyword::OutlineRightVerticalEdge>();

                case 0x1633:
                    return get<Keyword::OutlineUpperHorizontalEdge>();

                case 0x1634:
                    return get<Keyword::OutlineLowerHorizontalEdge>();

                case 0x1635:
                    return get<Keyword::CenterOfCircularOutline>();

                case 0x1636:
                    return get<Keyword::DiameterOfCircularOutline>();

                case 0x1637:
                    return get<Keyword::NumberOfPolygonalVertices>();

                case 0x1638:
                    return get<Keyword::VerticesOfThePolygonalOutline>();

                case 0x1700:
                    return get<Keyword::CollimatorShape>();

                case 0x1702:
                    return get<Keyword::CollimatorLeftVerticalEdge>();

                case 0x1704:
                    return get<Keyword::CollimatorRightVerticalEdge>();

                case 0x1706:
                    return get<Keyword::CollimatorUpperHorizontalEdge>();

                case 0x1708:
                    return get<Keyword::CollimatorLowerHorizontalEdge>();

                case 0x1710:
                    return get<Keyword::CenterOfCircularCollimator>();

                case 0x1712:
                    return get<Keyword::RadiusOfCircularCollimator>();

                case 0x1720:
                    return get<Keyword::VerticesOfThePolygonalCollimator>();

                case 0x1800:
                    return get<Keyword::AcquisitionTimeSynchronized>();

                case 0x1801:
                    return get<Keyword::TimeSource>();

                case 0x1802:
                    return get<Keyword::TimeDistributionProtocol>();

                case 0x1803:
                    return get<Keyword::NTPSourceAddress>();

                case 0x2001:
                    return get<Keyword::PageNumberVector>();

                case 0x2002:
                    return get<Keyword::FrameLabelVector>();

                case 0x2003:
                    return get<Keyword::FramePrimaryAngleVector>();

                case 0x2004:
                    return get<Keyword::FrameSecondaryAngleVector>();

                case 0x2005:
                    return get<Keyword::SliceLocationVector>();

                case 0x2006:
                    return get<Keyword::DisplayWindowLabelVector>();

                case 0x2010:
                    return get<Keyword::NominalScannedPixelSpacing>();

                case 0x2020:
                    return get<Keyword::DigitizingDeviceTransportDirection>();

                case 0x2030:
                    return get<Keyword::RotationOfScannedFilm>();

                case 0x2041:
                    return get<Keyword::BiopsyTargetSequence>();

                case 0x2042:
                    return get<Keyword::TargetUID>();

                case 0x2043:
                    return get<Keyword::LocalizingCursorPosition>();

                case 0x2044:
                    return get<Keyword::CalculatedTargetPosition>();

                case 0x2045:
                    return get<Keyword::TargetLabel>();

                case 0x2046:
                    return get<Keyword::DisplayedZValue>();

                case 0x3100:
                    return get<Keyword::IVUSAcquisition>();

                case 0x3101:
                    return get<Keyword::IVUSPullbackRate>();

                case 0x3102:
                    return get<Keyword::IVUSGatedRate>();

                case 0x3103:
                    return get<Keyword::IVUSPullbackStartFrameNumber>();

                case 0x3104:
                    return get<Keyword::IVUSPullbackStopFrameNumber>();

                case 0x3105:
                    return get<Keyword::LesionNumber>();

                case 0x5000:
                    return get<Keyword::OutputPower>();

                case 0x5010:
                    return get<Keyword::TransducerData>();

                case 0x5011:
                    return get<Keyword::TransducerIdentificationSequence>();

                case 0x5012:
                    return get<Keyword::FocusDepth>();

                case 0x5020:
                    return get<Keyword::ProcessingFunction>();

                case 0x5022:
                    return get<Keyword::MechanicalIndex>();

                case 0x5024:
                    return get<Keyword::BoneThermalIndex>();

                case 0x5026:
                    return get<Keyword::CranialThermalIndex>();

                case 0x5027:
                    return get<Keyword::SoftTissueThermalIndex>();

                case 0x5028:
                    return get<Keyword::SoftTissueFocusThermalIndex>();

                case 0x5029:
                    return get<Keyword::SoftTissueSurfaceThermalIndex>();

                case 0x5050:
                    return get<Keyword::DepthOfScanField>();

                case 0x5100:
                    return get<Keyword::PatientPosition>();

                case 0x5101:
                    return get<Keyword::ViewPosition>();

                case 0x5104:
                    return get<Keyword::ProjectionEponymousNameCodeSequence>();

                case 0x6000:
                    return get<Keyword::Sensitivity>();

                case 0x6011:
                    return get<Keyword::SequenceOfUltrasoundRegions>();

                case 0x6012:
                    return get<Keyword::RegionSpatialFormat>();

                case 0x6014:
                    return get<Keyword::RegionDataType>();

                case 0x6016:
                    return get<Keyword::RegionFlags>();

                case 0x6018:
                    return get<Keyword::RegionLocationMinX0>();

                case 0x601A:
                    return get<Keyword::RegionLocationMinY0>();

                case 0x601C:
                    return get<Keyword::RegionLocationMaxX1>();

                case 0x601E:
                    return get<Keyword::RegionLocationMaxY1>();

                case 0x6020:
                    return get<Keyword::ReferencePixelX0>();

                case 0x6022:
                    return get<Keyword::ReferencePixelY0>();

                case 0x6024:
                    return get<Keyword::PhysicalUnitsXDirection>();

                case 0x6026:
                    return get<Keyword::PhysicalUnitsYDirection>();

                case 0x6028:
                    return get<Keyword::ReferencePixelPhysicalValueX>();

                case 0x602A:
                    return get<Keyword::ReferencePixelPhysicalValueY>();

                case 0x602C:
                    return get<Keyword::PhysicalDeltaX>();

                case 0x602E:
                    return get<Keyword::PhysicalDeltaY>();

                case 0x6030:
                    return get<Keyword::TransducerFrequency>();

                case 0x6031:
                    return get<Keyword::TransducerType>();

                case 0x6032:
                    return get<Keyword::PulseRepetitionFrequency>();

                case 0x6034:
                    return get<Keyword::DopplerCorrectionAngle>();

                case 0x6036:
                    return get<Keyword::SteeringAngle>();

                case 0x6039:
                    return get<Keyword::DopplerSampleVolumeXPosition>();

                case 0x603B:
                    return get<Keyword::DopplerSampleVolumeYPosition>();

                case 0x603D:
                    return get<Keyword::TMLinePositionX0>();

                case 0x603F:
                    return get<Keyword::TMLinePositionY0>();

                case 0x6041:
                    return get<Keyword::TMLinePositionX1>();

                case 0x6043:
                    return get<Keyword::TMLinePositionY1>();

                case 0x6044:
                    return get<Keyword::PixelComponentOrganization>();

                case 0x6046:
                    return get<Keyword::PixelComponentMask>();

                case 0x6048:
                    return get<Keyword::PixelComponentRangeStart>();

                case 0x604A:
                    return get<Keyword::PixelComponentRangeStop>();

                case 0x604C:
                    return get<Keyword::PixelComponentPhysicalUnits>();

                case 0x604E:
                    return get<Keyword::PixelComponentDataType>();

                case 0x6050:
                    return get<Keyword::NumberOfTableBreakPoints>();

                case 0x6052:
                    return get<Keyword::TableOfXBreakPoints>();

                case 0x6054:
                    return get<Keyword::TableOfYBreakPoints>();

                case 0x6056:
                    return get<Keyword::NumberOfTableEntries>();

                case 0x6058:
                    return get<Keyword::TableOfPixelValues>();

                case 0x605A:
                    return get<Keyword::TableOfParameterValues>();

                case 0x6060:
                    return get<Keyword::RWaveTimeVector>();

                case 0x6070:
                    return get<Keyword::ActiveImageAreaOverlayGroup>();

                case 0x7000:
                    return get<Keyword::DetectorConditionsNominalFlag>();

                case 0x7001:
                    return get<Keyword::DetectorTemperature>();

                case 0x7004:
                    return get<Keyword::DetectorType>();

                case 0x7005:
                    return get<Keyword::DetectorConfiguration>();

                case 0x7006:
                    return get<Keyword::DetectorDescription>();

                case 0x7008:
                    return get<Keyword::DetectorMode>();

                case 0x700A:
                    return get<Keyword::DetectorID>();

                case 0x700C:
                    return get<Keyword::DateOfLastDetectorCalibration>();

                case 0x700E:
                    return get<Keyword::TimeOfLastDetectorCalibration>();

                case 0x7010:
                    return get<Keyword::ExposuresOnDetectorSinceLastCalibration>();

                case 0x7011:
                    return get<Keyword::ExposuresOnDetectorSinceManufactured>();

                case 0x7012:
                    return get<Keyword::DetectorTimeSinceLastExposure>();

                case 0x7014:
                    return get<Keyword::DetectorActiveTime>();

                case 0x7016:
                    return get<Keyword::DetectorActivationOffsetFromExposure>();

                case 0x701A:
                    return get<Keyword::DetectorBinning>();

                case 0x7020:
                    return get<Keyword::DetectorElementPhysicalSize>();

                case 0x7022:
                    return get<Keyword::DetectorElementSpacing>();

                case 0x7024:
                    return get<Keyword::DetectorActiveShape>();

                case 0x7026:
                    return get<Keyword::DetectorActiveDimensions>();

                case 0x7028:
                    return get<Keyword::DetectorActiveOrigin>();

                case 0x702A:
                    return get<Keyword::DetectorManufacturerName>();

                case 0x702B:
                    return get<Keyword::DetectorManufacturerModelName>();

                case 0x7030:
                    return get<Keyword::FieldOfViewOrigin>();

                case 0x7032:
                    return get<Keyword::FieldOfViewRotation>();

                case 0x7034:
                    return get<Keyword::FieldOfViewHorizontalFlip>();

                case 0x7036:
                    return get<Keyword::PixelDataAreaOriginRelativeToFOV>();

                case 0x7038:
                    return get<Keyword::PixelDataAreaRotationAngleRelativeToFOV>();

                case 0x7040:
                    return get<Keyword::GridAbsorbingMaterial>();

                case 0x7041:
                    return get<Keyword::GridSpacingMaterial>();

                case 0x7042:
                    return get<Keyword::GridThickness>();

                case 0x7044:
                    return get<Keyword::GridPitch>();

                case 0x7046:
                    return get<Keyword::GridAspectRatio>();

                case 0x7048:
                    return get<Keyword::GridPeriod>();

                case 0x704C:
                    return get<Keyword::GridFocalDistance>();

                case 0x7050:
                    return get<Keyword::FilterMaterial>();

                case 0x7052:
                    return get<Keyword::FilterThicknessMinimum>();

                case 0x7054:
                    return get<Keyword::FilterThicknessMaximum>();

                case 0x7056:
                    return get<Keyword::FilterBeamPathLengthMinimum>();

                case 0x7058:
                    return get<Keyword::FilterBeamPathLengthMaximum>();

                case 0x7060:
                    return get<Keyword::ExposureControlMode>();

                case 0x7062:
                    return get<Keyword::ExposureControlModeDescription>();

                case 0x7064:
                    return get<Keyword::ExposureStatus>();

                case 0x7065:
                    return get<Keyword::PhototimerSetting>();

                case 0x8150:
                    return get<Keyword::ExposureTimeInuS>();

                case 0x8151:
                    return get<Keyword::XRayTubeCurrentInuA>();

                case 0x9004:
                    return get<Keyword::ContentQualification>();

                case 0x9005:
                    return get<Keyword::PulseSequenceName>();

                case 0x9006:
                    return get<Keyword::MRImagingModifierSequence>();

                case 0x9008:
                    return get<Keyword::EchoPulseSequence>();

                case 0x9009:
                    return get<Keyword::InversionRecovery>();

                case 0x9010:
                    return get<Keyword::FlowCompensation>();

                case 0x9011:
                    return get<Keyword::MultipleSpinEcho>();

                case 0x9012:
                    return get<Keyword::MultiPlanarExcitation>();

                case 0x9014:
                    return get<Keyword::PhaseContrast>();

                case 0x9015:
                    return get<Keyword::TimeOfFlightContrast>();

                case 0x9016:
                    return get<Keyword::Spoiling>();

                case 0x9017:
                    return get<Keyword::SteadyStatePulseSequence>();

                case 0x9018:
                    return get<Keyword::EchoPlanarPulseSequence>();

                case 0x9019:
                    return get<Keyword::TagAngleFirstAxis>();

                case 0x9020:
                    return get<Keyword::MagnetizationTransfer>();

                case 0x9021:
                    return get<Keyword::T2Preparation>();

                case 0x9022:
                    return get<Keyword::BloodSignalNulling>();

                case 0x9024:
                    return get<Keyword::SaturationRecovery>();

                case 0x9025:
                    return get<Keyword::SpectrallySelectedSuppression>();

                case 0x9026:
                    return get<Keyword::SpectrallySelectedExcitation>();

                case 0x9027:
                    return get<Keyword::SpatialPresaturation>();

                case 0x9028:
                    return get<Keyword::Tagging>();

                case 0x9029:
                    return get<Keyword::OversamplingPhase>();

                case 0x9030:
                    return get<Keyword::TagSpacingFirstDimension>();

                case 0x9032:
                    return get<Keyword::GeometryOfKSpaceTraversal>();

                case 0x9033:
                    return get<Keyword::SegmentedKSpaceTraversal>();

                case 0x9034:
                    return get<Keyword::RectilinearPhaseEncodeReordering>();

                case 0x9035:
                    return get<Keyword::TagThickness>();

                case 0x9036:
                    return get<Keyword::PartialFourierDirection>();

                case 0x9037:
                    return get<Keyword::CardiacSynchronizationTechnique>();

                case 0x9041:
                    return get<Keyword::ReceiveCoilManufacturerName>();

                case 0x9042:
                    return get<Keyword::MRReceiveCoilSequence>();

                case 0x9043:
                    return get<Keyword::ReceiveCoilType>();

                case 0x9044:
                    return get<Keyword::QuadratureReceiveCoil>();

                case 0x9045:
                    return get<Keyword::MultiCoilDefinitionSequence>();

                case 0x9046:
                    return get<Keyword::MultiCoilConfiguration>();

                case 0x9049:
                    return get<Keyword::MRTransmitCoilSequence>();

                case 0x9050:
                    return get<Keyword::TransmitCoilManufacturerName>();

                case 0x9051:
                    return get<Keyword::TransmitCoilType>();

                case 0x9058:
                    return get<Keyword::MRAcquisitionFrequencyEncodingSteps>();

                case 0x9064:
                    return get<Keyword::KSpaceFiltering>();

                case 0x9069:
                    return get<Keyword::ParallelReductionFactorInPlane>();

                case 0x9070:
                    return get<Keyword::CardiacRRIntervalSpecified>();

                case 0x9073:
                    return get<Keyword::AcquisitionDuration>();

                case 0x9074:
                    return get<Keyword::FrameAcquisitionDateTime>();

                case 0x9075:
                    return get<Keyword::DiffusionDirectionality>();

                case 0x9076:
                    return get<Keyword::DiffusionGradientDirectionSequence>();

                case 0x9077:
                    return get<Keyword::ParallelAcquisition>();

                case 0x9078:
                    return get<Keyword::ParallelAcquisitionTechnique>();

                case 0x9079:
                    return get<Keyword::InversionTimes>();

                case 0x9080:
                    return get<Keyword::MetaboliteMapDescription>();

                case 0x9081:
                    return get<Keyword::PartialFourier>();

                case 0x9082:
                    return get<Keyword::EffectiveEchoTime>();

                case 0x9083:
                    return get<Keyword::MetaboliteMapCodeSequence>();

                case 0x9084:
                    return get<Keyword::ChemicalShiftSequence>();

                case 0x9085:
                    return get<Keyword::CardiacSignalSource>();

                case 0x9087:
                    return get<Keyword::DiffusionBValue>();

                case 0x9090:
                    return get<Keyword::VelocityEncodingDirection>();

                case 0x9091:
                    return get<Keyword::VelocityEncodingMinimumValue>();

                case 0x9092:
                    return get<Keyword::VelocityEncodingAcquisitionSequence>();

                case 0x9093:
                    return get<Keyword::NumberOfKSpaceTrajectories>();

                case 0x9094:
                    return get<Keyword::CoverageOfKSpace>();

                case 0x9098:
                    return get<Keyword::TransmitterFrequency>();

                case 0x9100:
                    return get<Keyword::ResonantNucleus>();

                case 0x9104:
                    return get<Keyword::SlabThickness>();

                case 0x9105:
                    return get<Keyword::SlabOrientation>();

                case 0x9106:
                    return get<Keyword::MidSlabPosition>();

                case 0x9107:
                    return get<Keyword::MRSpatialSaturationSequence>();

                case 0x9112:
                    return get<Keyword::MRTimingAndRelatedParametersSequence>();

                case 0x9114:
                    return get<Keyword::MREchoSequence>();

                case 0x9115:
                    return get<Keyword::MRModifierSequence>();

                case 0x9117:
                    return get<Keyword::MRDiffusionSequence>();

                case 0x9118:
                    return get<Keyword::CardiacSynchronizationSequence>();

                case 0x9119:
                    return get<Keyword::MRAveragesSequence>();

                case 0x9125:
                    return get<Keyword::MRFOVGeometrySequence>();

                case 0x9147:
                    return get<Keyword::DiffusionAnisotropyType>();

                case 0x9151:
                    return get<Keyword::FrameReferenceDateTime>();

                case 0x9152:
                    return get<Keyword::MRMetaboliteMapSequence>();

                case 0x9155:
                    return get<Keyword::ParallelReductionFactorOutOfPlane>();

                case 0x9168:
                    return get<Keyword::ParallelReductionFactorSecondInPlane>();

                case 0x9169:
                    return get<Keyword::CardiacBeatRejectionTechnique>();

                case 0x9170:
                    return get<Keyword::RespiratoryMotionCompensationTechnique>();

                case 0x9171:
                    return get<Keyword::RespiratorySignalSource>();

                case 0x9172:
                    return get<Keyword::BulkMotionCompensationTechnique>();

                case 0x9173:
                    return get<Keyword::BulkMotionSignalSource>();

                case 0x9174:
                    return get<Keyword::ApplicableSafetyStandardAgency>();

                case 0x9175:
                    return get<Keyword::ApplicableSafetyStandardDescription>();

                case 0x9176:
                    return get<Keyword::OperatingModeSequence>();

                case 0x9180:
                    return get<Keyword::GradientOutputType>();

                case 0x9182:
                    return get<Keyword::GradientOutput>();

                case 0x9183:
                    return get<Keyword::FlowCompensationDirection>();

                case 0x9184:
                    return get<Keyword::TaggingDelay>();

                case 0x9197:
                    return get<Keyword::MRVelocityEncodingSequence>();

                case 0x9214:
                    return get<Keyword::RespiratoryCyclePosition>();

                case 0x9217:
                    return get<Keyword::VelocityEncodingMaximumValue>();

                case 0x9218:
                    return get<Keyword::TagSpacingSecondDimension>();

                case 0x9219:
                    return get<Keyword::TagAngleSecondAxis>();

                case 0x9220:
                    return get<Keyword::FrameAcquisitionDuration>();

                case 0x9226:
                    return get<Keyword::MRImageFrameTypeSequence>();

                case 0x9231:
                    return get<Keyword::MRAcquisitionPhaseEncodingStepsInPlane>();

                case 0x9232:
                    return get<Keyword::MRAcquisitionPhaseEncodingStepsOutOfPlane>();

                case 0x9236:
                    return get<Keyword::CardiacCyclePosition>();

                case 0x9239:
                    return get<Keyword::SpecificAbsorptionRateSequence>();

                case 0x9240:
                    return get<Keyword::RFEchoTrainLength>();

                case 0x9241:
                    return get<Keyword::GradientEchoTrainLength>();

                case 0x9250:
                    return get<Keyword::ArterialSpinLabelingContrast>();

                case 0x9251:
                    return get<Keyword::MRArterialSpinLabelingSequence>();

                case 0x9252:
                    return get<Keyword::ASLTechniqueDescription>();

                case 0x9257:
                    return get<Keyword::ASLContext>();

                case 0x9259:
                    return get<Keyword::ASLCrusherFlag>();

                case 0x925A:
                    return get<Keyword::ASLCrusherFlowLimit>();

                case 0x925B:
                    return get<Keyword::ASLCrusherDescription>();

                case 0x925C:
                    return get<Keyword::ASLBolusCutoffFlag>();

                case 0x925D:
                    return get<Keyword::ASLBolusCutoffTimingSequence>();

                case 0x9260:
                    return get<Keyword::ASLSlabSequence>();

                case 0x9301:
                    return get<Keyword::CTAcquisitionTypeSequence>();

                case 0x9302:
                    return get<Keyword::AcquisitionType>();

                case 0x9303:
                    return get<Keyword::TubeAngle>();

                case 0x9304:
                    return get<Keyword::CTAcquisitionDetailsSequence>();

                case 0x9305:
                    return get<Keyword::RevolutionTime>();

                case 0x9306:
                    return get<Keyword::SingleCollimationWidth>();

                case 0x9307:
                    return get<Keyword::TotalCollimationWidth>();

                case 0x9308:
                    return get<Keyword::CTTableDynamicsSequence>();

                case 0x9309:
                    return get<Keyword::TableSpeed>();

                case 0x9310:
                    return get<Keyword::TableFeedPerRotation>();

                case 0x9311:
                    return get<Keyword::SpiralPitchFactor>();

                case 0x9312:
                    return get<Keyword::CTGeometrySequence>();

                case 0x9313:
                    return get<Keyword::DataCollectionCenterPatient>();

                case 0x9314:
                    return get<Keyword::CTReconstructionSequence>();

                case 0x9315:
                    return get<Keyword::ReconstructionAlgorithm>();

                case 0x9316:
                    return get<Keyword::ConvolutionKernelGroup>();

                case 0x9317:
                    return get<Keyword::ReconstructionFieldOfView>();

                case 0x9318:
                    return get<Keyword::ReconstructionTargetCenterPatient>();

                case 0x9319:
                    return get<Keyword::ReconstructionAngle>();

                case 0x9320:
                    return get<Keyword::ImageFilter>();

                case 0x9321:
                    return get<Keyword::CTExposureSequence>();

                case 0x9322:
                    return get<Keyword::ReconstructionPixelSpacing>();

                case 0x9323:
                    return get<Keyword::ExposureModulationType>();

                case 0x9325:
                    return get<Keyword::CTXRayDetailsSequence>();

                case 0x9326:
                    return get<Keyword::CTPositionSequence>();

                case 0x9327:
                    return get<Keyword::TablePosition>();

                case 0x9328:
                    return get<Keyword::ExposureTimeInms>();

                case 0x9329:
                    return get<Keyword::CTImageFrameTypeSequence>();

                case 0x9330:
                    return get<Keyword::XRayTubeCurrentInmA>();

                case 0x9332:
                    return get<Keyword::ExposureInmAs>();

                case 0x9333:
                    return get<Keyword::ConstantVolumeFlag>();

                case 0x9334:
                    return get<Keyword::FluoroscopyFlag>();

                case 0x9335:
                    return get<Keyword::DistanceSourceToDataCollectionCenter>();

                case 0x9337:
                    return get<Keyword::ContrastBolusAgentNumber>();

                case 0x9338:
                    return get<Keyword::ContrastBolusIngredientCodeSequence>();

                case 0x9340:
                    return get<Keyword::ContrastAdministrationProfileSequence>();

                case 0x9341:
                    return get<Keyword::ContrastBolusUsageSequence>();

                case 0x9342:
                    return get<Keyword::ContrastBolusAgentAdministered>();

                case 0x9343:
                    return get<Keyword::ContrastBolusAgentDetected>();

                case 0x9344:
                    return get<Keyword::ContrastBolusAgentPhase>();

                case 0x9345:
                    return get<Keyword::CTDIvol>();

                case 0x9346:
                    return get<Keyword::CTDIPhantomTypeCodeSequence>();

                case 0x9351:
                    return get<Keyword::CalciumScoringMassFactorPatient>();

                case 0x9352:
                    return get<Keyword::CalciumScoringMassFactorDevice>();

                case 0x9353:
                    return get<Keyword::EnergyWeightingFactor>();

                case 0x9360:
                    return get<Keyword::CTAdditionalXRaySourceSequence>();

                case 0x9361:
                    return get<Keyword::MultienergyCTAcquisition>();

                case 0x9362:
                    return get<Keyword::MultienergyCTAcquisitionSequence>();

                case 0x9363:
                    return get<Keyword::MultienergyCTProcessingSequence>();

                case 0x9364:
                    return get<Keyword::MultienergyCTCharacteristicsSequence>();

                case 0x9365:
                    return get<Keyword::MultienergyCTXRaySourceSequence>();

                case 0x9366:
                    return get<Keyword::XRaySourceIndex>();

                case 0x9367:
                    return get<Keyword::XRaySourceID>();

                case 0x9368:
                    return get<Keyword::MultienergySourceTechnique>();

                case 0x9369:
                    return get<Keyword::SourceStartDateTime>();

                case 0x936A:
                    return get<Keyword::SourceEndDateTime>();

                case 0x936B:
                    return get<Keyword::SwitchingPhaseNumber>();

                case 0x936C:
                    return get<Keyword::SwitchingPhaseNominalDuration>();

                case 0x936D:
                    return get<Keyword::SwitchingPhaseTransitionDuration>();

                case 0x936E:
                    return get<Keyword::EffectiveBinEnergy>();

                case 0x936F:
                    return get<Keyword::MultienergyCTXRayDetectorSequence>();

                case 0x9370:
                    return get<Keyword::XRayDetectorIndex>();

                case 0x9371:
                    return get<Keyword::XRayDetectorID>();

                case 0x9372:
                    return get<Keyword::MultienergyDetectorType>();

                case 0x9373:
                    return get<Keyword::XRayDetectorLabel>();

                case 0x9374:
                    return get<Keyword::NominalMaxEnergy>();

                case 0x9375:
                    return get<Keyword::NominalMinEnergy>();

                case 0x9376:
                    return get<Keyword::ReferencedXRayDetectorIndex>();

                case 0x9377:
                    return get<Keyword::ReferencedXRaySourceIndex>();

                case 0x9378:
                    return get<Keyword::ReferencedPathIndex>();

                case 0x9379:
                    return get<Keyword::MultienergyCTPathSequence>();

                case 0x937A:
                    return get<Keyword::MultienergyCTPathIndex>();

                case 0x937B:
                    return get<Keyword::MultienergyAcquisitionDescription>();

                case 0x937C:
                    return get<Keyword::MonoenergeticEnergyEquivalent>();

                case 0x937E:
                    return get<Keyword::DecompositionMethod>();

                case 0x937F:
                    return get<Keyword::DecompositionDescription>();

                case 0x9380:
                    return get<Keyword::DecompositionAlgorithmIdentificationSequence>();

                case 0x9381:
                    return get<Keyword::DecompositionMaterialSequence>();

                case 0x9401:
                    return get<Keyword::ProjectionPixelCalibrationSequence>();

                case 0x9402:
                    return get<Keyword::DistanceSourceToIsocenter>();

                case 0x9403:
                    return get<Keyword::DistanceObjectToTableTop>();

                case 0x9404:
                    return get<Keyword::ObjectPixelSpacingInCenterOfBeam>();

                case 0x9405:
                    return get<Keyword::PositionerPositionSequence>();

                case 0x9406:
                    return get<Keyword::TablePositionSequence>();

                case 0x9407:
                    return get<Keyword::CollimatorShapeSequence>();

                case 0x9410:
                    return get<Keyword::PlanesInAcquisition>();

                case 0x9412:
                    return get<Keyword::XAXRFFrameCharacteristicsSequence>();

                case 0x9417:
                    return get<Keyword::FrameAcquisitionSequence>();

                case 0x9420:
                    return get<Keyword::XRayReceptorType>();

                case 0x9423:
                    return get<Keyword::AcquisitionProtocolName>();

                case 0x9424:
                    return get<Keyword::AcquisitionProtocolDescription>();

                case 0x9425:
                    return get<Keyword::ContrastBolusIngredientOpaque>();

                case 0x9426:
                    return get<Keyword::DistanceReceptorPlaneToDetectorHousing>();

                case 0x9427:
                    return get<Keyword::IntensifierActiveShape>();

                case 0x9428:
                    return get<Keyword::IntensifierActiveDimensions>();

                case 0x9429:
                    return get<Keyword::PhysicalDetectorSize>();

                case 0x9430:
                    return get<Keyword::PositionOfIsocenterProjection>();

                case 0x9432:
                    return get<Keyword::FieldOfViewSequence>();

                case 0x9433:
                    return get<Keyword::FieldOfViewDescription>();

                case 0x9434:
                    return get<Keyword::ExposureControlSensingRegionsSequence>();

                case 0x9435:
                    return get<Keyword::ExposureControlSensingRegionShape>();

                case 0x9436:
                    return get<Keyword::ExposureControlSensingRegionLeftVerticalEdge>();

                case 0x9437:
                    return get<Keyword::ExposureControlSensingRegionRightVerticalEdge>();

                case 0x9438:
                    return get<Keyword::ExposureControlSensingRegionUpperHorizontalEdge>();

                case 0x9439:
                    return get<Keyword::ExposureControlSensingRegionLowerHorizontalEdge>();

                case 0x9440:
                    return get<Keyword::CenterOfCircularExposureControlSensingRegion>();

                case 0x9441:
                    return get<Keyword::RadiusOfCircularExposureControlSensingRegion>();

                case 0x9442:
                    return get<Keyword::VerticesOfThePolygonalExposureControlSensingRegion>();

                case 0x9447:
                    return get<Keyword::ColumnAngulationPatient>();

                case 0x9449:
                    return get<Keyword::BeamAngle>();

                case 0x9451:
                    return get<Keyword::FrameDetectorParametersSequence>();

                case 0x9452:
                    return get<Keyword::CalculatedAnatomyThickness>();

                case 0x9455:
                    return get<Keyword::CalibrationSequence>();

                case 0x9456:
                    return get<Keyword::ObjectThicknessSequence>();

                case 0x9457:
                    return get<Keyword::PlaneIdentification>();

                case 0x9461:
                    return get<Keyword::FieldOfViewDimensionsInFloat>();

                case 0x9462:
                    return get<Keyword::IsocenterReferenceSystemSequence>();

                case 0x9463:
                    return get<Keyword::PositionerIsocenterPrimaryAngle>();

                case 0x9464:
                    return get<Keyword::PositionerIsocenterSecondaryAngle>();

                case 0x9465:
                    return get<Keyword::PositionerIsocenterDetectorRotationAngle>();

                case 0x9466:
                    return get<Keyword::TableXPositionToIsocenter>();

                case 0x9467:
                    return get<Keyword::TableYPositionToIsocenter>();

                case 0x9468:
                    return get<Keyword::TableZPositionToIsocenter>();

                case 0x9469:
                    return get<Keyword::TableHorizontalRotationAngle>();

                case 0x9470:
                    return get<Keyword::TableHeadTiltAngle>();

                case 0x9471:
                    return get<Keyword::TableCradleTiltAngle>();

                case 0x9472:
                    return get<Keyword::FrameDisplayShutterSequence>();

                case 0x9473:
                    return get<Keyword::AcquiredImageAreaDoseProduct>();

                case 0x9474:
                    return get<Keyword::CArmPositionerTabletopRelationship>();

                case 0x9476:
                    return get<Keyword::XRayGeometrySequence>();

                case 0x9477:
                    return get<Keyword::IrradiationEventIdentificationSequence>();

                case 0x9504:
                    return get<Keyword::XRay3DFrameTypeSequence>();

                case 0x9506:
                    return get<Keyword::ContributingSourcesSequence>();

                case 0x9507:
                    return get<Keyword::XRay3DAcquisitionSequence>();

                case 0x9508:
                    return get<Keyword::PrimaryPositionerScanArc>();

                case 0x9509:
                    return get<Keyword::SecondaryPositionerScanArc>();

                case 0x9510:
                    return get<Keyword::PrimaryPositionerScanStartAngle>();

                case 0x9511:
                    return get<Keyword::SecondaryPositionerScanStartAngle>();

                case 0x9514:
                    return get<Keyword::PrimaryPositionerIncrement>();

                case 0x9515:
                    return get<Keyword::SecondaryPositionerIncrement>();

                case 0x9516:
                    return get<Keyword::StartAcquisitionDateTime>();

                case 0x9517:
                    return get<Keyword::EndAcquisitionDateTime>();

                case 0x9518:
                    return get<Keyword::PrimaryPositionerIncrementSign>();

                case 0x9519:
                    return get<Keyword::SecondaryPositionerIncrementSign>();

                case 0x9524:
                    return get<Keyword::ApplicationName>();

                case 0x9525:
                    return get<Keyword::ApplicationVersion>();

                case 0x9526:
                    return get<Keyword::ApplicationManufacturer>();

                case 0x9527:
                    return get<Keyword::AlgorithmType>();

                case 0x9528:
                    return get<Keyword::AlgorithmDescription>();

                case 0x9530:
                    return get<Keyword::XRay3DReconstructionSequence>();

                case 0x9531:
                    return get<Keyword::ReconstructionDescription>();

                case 0x9538:
                    return get<Keyword::PerProjectionAcquisitionSequence>();

                case 0x9541:
                    return get<Keyword::DetectorPositionSequence>();

                case 0x9542:
                    return get<Keyword::XRayAcquisitionDoseSequence>();

                case 0x9543:
                    return get<Keyword::XRaySourceIsocenterPrimaryAngle>();

                case 0x9544:
                    return get<Keyword::XRaySourceIsocenterSecondaryAngle>();

                case 0x9545:
                    return get<Keyword::BreastSupportIsocenterPrimaryAngle>();

                case 0x9546:
                    return get<Keyword::BreastSupportIsocenterSecondaryAngle>();

                case 0x9547:
                    return get<Keyword::BreastSupportXPositionToIsocenter>();

                case 0x9548:
                    return get<Keyword::BreastSupportYPositionToIsocenter>();

                case 0x9549:
                    return get<Keyword::BreastSupportZPositionToIsocenter>();

                case 0x9550:
                    return get<Keyword::DetectorIsocenterPrimaryAngle>();

                case 0x9551:
                    return get<Keyword::DetectorIsocenterSecondaryAngle>();

                case 0x9552:
                    return get<Keyword::DetectorXPositionToIsocenter>();

                case 0x9553:
                    return get<Keyword::DetectorYPositionToIsocenter>();

                case 0x9554:
                    return get<Keyword::DetectorZPositionToIsocenter>();

                case 0x9555:
                    return get<Keyword::XRayGridSequence>();

                case 0x9556:
                    return get<Keyword::XRayFilterSequence>();

                case 0x9557:
                    return get<Keyword::DetectorActiveAreaTLHCPosition>();

                case 0x9558:
                    return get<Keyword::DetectorActiveAreaOrientation>();

                case 0x9559:
                    return get<Keyword::PositionerPrimaryAngleDirection>();

                case 0x9601:
                    return get<Keyword::DiffusionBMatrixSequence>();

                case 0x9621:
                    return get<Keyword::FunctionalMRSequence>();

                case 0x9622:
                    return get<Keyword::FunctionalSettlingPhaseFramesPresent>();

                case 0x9623:
                    return get<Keyword::FunctionalSyncPulse>();

                case 0x9624:
                    return get<Keyword::SettlingPhaseFrame>();

                case 0x9701:
                    return get<Keyword::DecayCorrectionDateTime>();

                case 0x9715:
                    return get<Keyword::StartDensityThreshold>();

                case 0x9716:
                    return get<Keyword::StartRelativeDensityDifferenceThreshold>();

                case 0x9717:
                    return get<Keyword::StartCardiacTriggerCountThreshold>();

                case 0x9718:
                    return get<Keyword::StartRespiratoryTriggerCountThreshold>();

                case 0x9719:
                    return get<Keyword::TerminationCountsThreshold>();

                case 0x9720:
                    return get<Keyword::TerminationDensityThreshold>();

                case 0x9721:
                    return get<Keyword::TerminationRelativeDensityThreshold>();

                case 0x9722:
                    return get<Keyword::TerminationTimeThreshold>();

                case 0x9723:
                    return get<Keyword::TerminationCardiacTriggerCountThreshold>();

                case 0x9724:
                    return get<Keyword::TerminationRespiratoryTriggerCountThreshold>();

                case 0x9725:
                    return get<Keyword::DetectorGeometry>();

                case 0x9726:
                    return get<Keyword::TransverseDetectorSeparation>();

                case 0x9727:
                    return get<Keyword::AxialDetectorDimension>();

                case 0x9729:
                    return get<Keyword::RadiopharmaceuticalAgentNumber>();

                case 0x9732:
                    return get<Keyword::PETFrameAcquisitionSequence>();

                case 0x9733:
                    return get<Keyword::PETDetectorMotionDetailsSequence>();

                case 0x9734:
                    return get<Keyword::PETTableDynamicsSequence>();

                case 0x9735:
                    return get<Keyword::PETPositionSequence>();

                case 0x9736:
                    return get<Keyword::PETFrameCorrectionFactorsSequence>();

                case 0x9737:
                    return get<Keyword::RadiopharmaceuticalUsageSequence>();

                case 0x9738:
                    return get<Keyword::AttenuationCorrectionSource>();

                case 0x9739:
                    return get<Keyword::NumberOfIterations>();

                case 0x9740:
                    return get<Keyword::NumberOfSubsets>();

                case 0x9749:
                    return get<Keyword::PETReconstructionSequence>();

                case 0x9751:
                    return get<Keyword::PETFrameTypeSequence>();

                case 0x9755:
                    return get<Keyword::TimeOfFlightInformationUsed>();

                case 0x9756:
                    return get<Keyword::ReconstructionType>();

                case 0x9758:
                    return get<Keyword::DecayCorrected>();

                case 0x9759:
                    return get<Keyword::AttenuationCorrected>();

                case 0x9760:
                    return get<Keyword::ScatterCorrected>();

                case 0x9761:
                    return get<Keyword::DeadTimeCorrected>();

                case 0x9762:
                    return get<Keyword::GantryMotionCorrected>();

                case 0x9763:
                    return get<Keyword::PatientMotionCorrected>();

                case 0x9764:
                    return get<Keyword::CountLossNormalizationCorrected>();

                case 0x9765:
                    return get<Keyword::RandomsCorrected>();

                case 0x9766:
                    return get<Keyword::NonUniformRadialSamplingCorrected>();

                case 0x9767:
                    return get<Keyword::SensitivityCalibrated>();

                case 0x9768:
                    return get<Keyword::DetectorNormalizationCorrection>();

                case 0x9769:
                    return get<Keyword::IterativeReconstructionMethod>();

                case 0x9770:
                    return get<Keyword::AttenuationCorrectionTemporalRelationship>();

                case 0x9771:
                    return get<Keyword::PatientPhysiologicalStateSequence>();

                case 0x9772:
                    return get<Keyword::PatientPhysiologicalStateCodeSequence>();

                case 0x9801:
                    return get<Keyword::DepthsOfFocus>();

                case 0x9803:
                    return get<Keyword::ExcludedIntervalsSequence>();

                case 0x9804:
                    return get<Keyword::ExclusionStartDateTime>();

                case 0x9805:
                    return get<Keyword::ExclusionDuration>();

                case 0x9806:
                    return get<Keyword::USImageDescriptionSequence>();

                case 0x9807:
                    return get<Keyword::ImageDataTypeSequence>();

                case 0x9808:
                    return get<Keyword::DataType>();

                case 0x9809:
                    return get<Keyword::TransducerScanPatternCodeSequence>();

                case 0x980B:
                    return get<Keyword::AliasedDataType>();

                case 0x980C:
                    return get<Keyword::PositionMeasuringDeviceUsed>();

                case 0x980D:
                    return get<Keyword::TransducerGeometryCodeSequence>();

                case 0x980E:
                    return get<Keyword::TransducerBeamSteeringCodeSequence>();

                case 0x980F:
                    return get<Keyword::TransducerApplicationCodeSequence>();

                case 0x9810:
                    return get<Keyword::ZeroVelocityPixelValue>();

                case 0x9821:
                    return get<Keyword::PhotoacousticExcitationCharacteristicsSequence>();

                case 0x9822:
                    return get<Keyword::ExcitationSpectralWidth>();

                case 0x9823:
                    return get<Keyword::ExcitationEnergy>();

                case 0x9824:
                    return get<Keyword::ExcitationPulseDuration>();

                case 0x9825:
                    return get<Keyword::ExcitationWavelengthSequence>();

                case 0x9826:
                    return get<Keyword::ExcitationWavelength>();

                case 0x9828:
                    return get<Keyword::IlluminationTranslationFlag>();

                case 0x9829:
                    return get<Keyword::AcousticCouplingMediumFlag>();

                case 0x982A:
                    return get<Keyword::AcousticCouplingMediumCodeSequence>();

                case 0x982B:
                    return get<Keyword::AcousticCouplingMediumTemperature>();

                case 0x982C:
                    return get<Keyword::TransducerResponseSequence>();

                case 0x982D:
                    return get<Keyword::CenterFrequency>();

                case 0x982E:
                    return get<Keyword::FractionalBandwidth>();

                case 0x982F:
                    return get<Keyword::LowerCutoffFrequency>();

                case 0x9830:
                    return get<Keyword::UpperCutoffFrequency>();

                case 0x9831:
                    return get<Keyword::TransducerTechnologySequence>();

                case 0x9832:
                    return get<Keyword::SoundSpeedCorrectionMechanismCodeSequence>();

                case 0x9833:
                    return get<Keyword::ObjectSoundSpeed>();

                case 0x9834:
                    return get<Keyword::AcousticCouplingMediumSoundSpeed>();

                case 0x9835:
                    return get<Keyword::PhotoacousticImageFrameTypeSequence>();

                case 0x9836:
                    return get<Keyword::ImageDataTypeCodeSequence>();

                case 0x990C:
                    return get<Keyword::ReferencedDefinedProtocolSequence>();

                case 0x990D:
                    return get<Keyword::ReferencedPerformedProtocolSequence>();

                case 0x9938:
                    return get<Keyword::SourceAcquisitionProtocolElementNumber>();

                case 0x993A:
                    return get<Keyword::SourceReconstructionProtocolElementNumber>();

                case 0x993D:
                    return get<Keyword::ReconstructionAlgorithmSequence>();

                case 0xA001:
                    return get<Keyword::ContributingEquipmentSequence>();

                case 0xA002:
                    return get<Keyword::ContributionDateTime>();

                case 0xA003:
                    return get<Keyword::ContributionDescription>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0020:
        {
            switch(element)
            {
                case 0x000D:
                    return get<Keyword::StudyInstanceUID>();

                case 0x000E:
                    return get<Keyword::SeriesInstanceUID>();

                case 0x0010:
                    return get<Keyword::StudyID>();

                case 0x0011:
                    return get<Keyword::SeriesNumber>();

                case 0x0012:
                    return get<Keyword::AcquisitionNumber>();

                case 0x0013:
                    return get<Keyword::InstanceNumber>();

                case 0x0020:
                    return get<Keyword::PatientOrientation>();

                case 0x0027:
                    return get<Keyword::PyramidLabel>();

                case 0x0032:
                    return get<Keyword::ImagePositionPatient>();

                case 0x0037:
                    return get<Keyword::ImageOrientationPatient>();

                case 0x0052:
                    return get<Keyword::FrameOfReferenceUID>();

                case 0x0060:
                    return get<Keyword::Laterality>();

                case 0x0062:
                    return get<Keyword::ImageLaterality>();

                case 0x0100:
                    return get<Keyword::TemporalPositionIdentifier>();

                case 0x0105:
                    return get<Keyword::NumberOfTemporalPositions>();

                case 0x0110:
                    return get<Keyword::TemporalResolution>();

                case 0x0200:
                    return get<Keyword::SynchronizationFrameOfReferenceUID>();

                case 0x0242:
                    return get<Keyword::SOPInstanceUIDOfConcatenationSource>();

                case 0x1002:
                    return get<Keyword::ImagesInAcquisition>();

                case 0x1040:
                    return get<Keyword::PositionReferenceIndicator>();

                case 0x1041:
                    return get<Keyword::SliceLocation>();

                case 0x4000:
                    return get<Keyword::ImageComments>();

                case 0x9056:
                    return get<Keyword::StackID>();

                case 0x9057:
                    return get<Keyword::InStackPositionNumber>();

                case 0x9071:
                    return get<Keyword::FrameAnatomySequence>();

                case 0x9072:
                    return get<Keyword::FrameLaterality>();

                case 0x9111:
                    return get<Keyword::FrameContentSequence>();

                case 0x9113:
                    return get<Keyword::PlanePositionSequence>();

                case 0x9116:
                    return get<Keyword::PlaneOrientationSequence>();

                case 0x9128:
                    return get<Keyword::TemporalPositionIndex>();

                case 0x9153:
                    return get<Keyword::NominalCardiacTriggerDelayTime>();

                case 0x9154:
                    return get<Keyword::NominalCardiacTriggerTimePriorToRPeak>();

                case 0x9155:
                    return get<Keyword::ActualCardiacTriggerTimePriorToRPeak>();

                case 0x9156:
                    return get<Keyword::FrameAcquisitionNumber>();

                case 0x9157:
                    return get<Keyword::DimensionIndexValues>();

                case 0x9158:
                    return get<Keyword::FrameComments>();

                case 0x9161:
                    return get<Keyword::ConcatenationUID>();

                case 0x9162:
                    return get<Keyword::InConcatenationNumber>();

                case 0x9163:
                    return get<Keyword::InConcatenationTotalNumber>();

                case 0x9164:
                    return get<Keyword::DimensionOrganizationUID>();

                case 0x9165:
                    return get<Keyword::DimensionIndexPointer>();

                case 0x9167:
                    return get<Keyword::FunctionalGroupPointer>();

                case 0x9170:
                    return get<Keyword::UnassignedSharedConvertedAttributesSequence>();

                case 0x9171:
                    return get<Keyword::UnassignedPerFrameConvertedAttributesSequence>();

                case 0x9172:
                    return get<Keyword::ConversionSourceAttributesSequence>();

                case 0x9213:
                    return get<Keyword::DimensionIndexPrivateCreator>();

                case 0x9221:
                    return get<Keyword::DimensionOrganizationSequence>();

                case 0x9222:
                    return get<Keyword::DimensionIndexSequence>();

                case 0x9228:
                    return get<Keyword::ConcatenationFrameOffsetNumber>();

                case 0x9238:
                    return get<Keyword::FunctionalGroupPrivateCreator>();

                case 0x9241:
                    return get<Keyword::NominalPercentageOfCardiacPhase>();

                case 0x9245:
                    return get<Keyword::NominalPercentageOfRespiratoryPhase>();

                case 0x9246:
                    return get<Keyword::StartingRespiratoryAmplitude>();

                case 0x9247:
                    return get<Keyword::StartingRespiratoryPhase>();

                case 0x9248:
                    return get<Keyword::EndingRespiratoryAmplitude>();

                case 0x9249:
                    return get<Keyword::EndingRespiratoryPhase>();

                case 0x9250:
                    return get<Keyword::RespiratoryTriggerType>();

                case 0x9251:
                    return get<Keyword::RRIntervalTimeNominal>();

                case 0x9252:
                    return get<Keyword::ActualCardiacTriggerDelayTime>();

                case 0x9253:
                    return get<Keyword::RespiratorySynchronizationSequence>();

                case 0x9254:
                    return get<Keyword::RespiratoryIntervalTime>();

                case 0x9255:
                    return get<Keyword::NominalRespiratoryTriggerDelayTime>();

                case 0x9256:
                    return get<Keyword::RespiratoryTriggerDelayThreshold>();

                case 0x9257:
                    return get<Keyword::ActualRespiratoryTriggerDelayTime>();

                case 0x9301:
                    return get<Keyword::ImagePositionVolume>();

                case 0x9302:
                    return get<Keyword::ImageOrientationVolume>();

                case 0x9307:
                    return get<Keyword::UltrasoundAcquisitionGeometry>();

                case 0x9308:
                    return get<Keyword::ApexPosition>();

                case 0x9309:
                    return get<Keyword::VolumeToTransducerMappingMatrix>();

                case 0x930A:
                    return get<Keyword::VolumeToTableMappingMatrix>();

                case 0x930B:
                    return get<Keyword::VolumeToTransducerRelationship>();

                case 0x930C:
                    return get<Keyword::PatientFrameOfReferenceSource>();

                case 0x930D:
                    return get<Keyword::TemporalPositionTimeOffset>();

                case 0x930E:
                    return get<Keyword::PlanePositionVolumeSequence>();

                case 0x930F:
                    return get<Keyword::PlaneOrientationVolumeSequence>();

                case 0x9310:
                    return get<Keyword::TemporalPositionSequence>();

                case 0x9311:
                    return get<Keyword::DimensionOrganizationType>();

                case 0x9312:
                    return get<Keyword::VolumeFrameOfReferenceUID>();

                case 0x9313:
                    return get<Keyword::TableFrameOfReferenceUID>();

                case 0x9421:
                    return get<Keyword::DimensionDescriptionLabel>();

                case 0x9450:
                    return get<Keyword::PatientOrientationInFrameSequence>();

                case 0x9453:
                    return get<Keyword::FrameLabel>();

                case 0x9518:
                    return get<Keyword::AcquisitionIndex>();

                case 0x9529:
                    return get<Keyword::ContributingSOPInstancesReferenceSequence>();

                case 0x9536:
                    return get<Keyword::ReconstructionIndex>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0022:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::LightPathFilterPassThroughWavelength>();

                case 0x0002:
                    return get<Keyword::LightPathFilterPassBand>();

                case 0x0003:
                    return get<Keyword::ImagePathFilterPassThroughWavelength>();

                case 0x0004:
                    return get<Keyword::ImagePathFilterPassBand>();

                case 0x0005:
                    return get<Keyword::PatientEyeMovementCommanded>();

                case 0x0006:
                    return get<Keyword::PatientEyeMovementCommandCodeSequence>();

                case 0x0007:
                    return get<Keyword::SphericalLensPower>();

                case 0x0008:
                    return get<Keyword::CylinderLensPower>();

                case 0x0009:
                    return get<Keyword::CylinderAxis>();

                case 0x000A:
                    return get<Keyword::EmmetropicMagnification>();

                case 0x000B:
                    return get<Keyword::IntraOcularPressure>();

                case 0x000C:
                    return get<Keyword::HorizontalFieldOfView>();

                case 0x000D:
                    return get<Keyword::PupilDilated>();

                case 0x000E:
                    return get<Keyword::DegreeOfDilation>();

                case 0x0015:
                    return get<Keyword::AcquisitionDeviceTypeCodeSequence>();

                case 0x0016:
                    return get<Keyword::IlluminationTypeCodeSequence>();

                case 0x0017:
                    return get<Keyword::LightPathFilterTypeStackCodeSequence>();

                case 0x0018:
                    return get<Keyword::ImagePathFilterTypeStackCodeSequence>();

                case 0x0019:
                    return get<Keyword::LensesCodeSequence>();

                case 0x001A:
                    return get<Keyword::ChannelDescriptionCodeSequence>();

                case 0x001B:
                    return get<Keyword::RefractiveStateSequence>();

                case 0x001C:
                    return get<Keyword::MydriaticAgentCodeSequence>();

                case 0x001D:
                    return get<Keyword::RelativeImagePositionCodeSequence>();

                case 0x001E:
                    return get<Keyword::CameraAngleOfView>();

                case 0x0028:
                    return get<Keyword::StereoPairsPresent>();

                case 0x0030:
                    return get<Keyword::AxialLengthOfTheEye>();

                case 0x0031:
                    return get<Keyword::OphthalmicFrameLocationSequence>();

                case 0x0032:
                    return get<Keyword::ReferenceCoordinates>();

                case 0x0035:
                    return get<Keyword::DepthSpatialResolution>();

                case 0x0036:
                    return get<Keyword::MaximumDepthDistortion>();

                case 0x0037:
                    return get<Keyword::AlongScanSpatialResolution>();

                case 0x0038:
                    return get<Keyword::MaximumAlongScanDistortion>();

                case 0x0039:
                    return get<Keyword::OphthalmicImageOrientation>();

                case 0x0041:
                    return get<Keyword::DepthOfTransverseImage>();

                case 0x0042:
                    return get<Keyword::MydriaticAgentConcentrationUnitsSequence>();

                case 0x0048:
                    return get<Keyword::AcrossScanSpatialResolution>();

                case 0x0049:
                    return get<Keyword::MaximumAcrossScanDistortion>();

                case 0x004E:
                    return get<Keyword::MydriaticAgentConcentration>();

                case 0x0055:
                    return get<Keyword::IlluminationWaveLength>();

                case 0x0056:
                    return get<Keyword::IlluminationPower>();

                case 0x0057:
                    return get<Keyword::IlluminationBandwidth>();

                case 0x0058:
                    return get<Keyword::MydriaticAgentSequence>();

                case 0x1019:
                    return get<Keyword::OphthalmicAxialLength>();

                case 0x1095:
                    return get<Keyword::ImplantName>();

                case 0x1097:
                    return get<Keyword::ImplantPartNumber>();

                case 0x1415:
                    return get<Keyword::OphthalmicMappingDeviceType>();

                case 0x1420:
                    return get<Keyword::AcquisitionMethodCodeSequence>();

                case 0x1423:
                    return get<Keyword::AcquisitionMethodAlgorithmSequence>();

                case 0x1436:
                    return get<Keyword::OphthalmicThicknessMapTypeCodeSequence>();

                case 0x1443:
                    return get<Keyword::OphthalmicThicknessMappingNormalsSequence>();

                case 0x1445:
                    return get<Keyword::RetinalThicknessDefinitionCodeSequence>();

                case 0x1450:
                    return get<Keyword::PixelValueMappingToCodedConceptSequence>();

                case 0x1452:
                    return get<Keyword::MappedPixelValue>();

                case 0x1454:
                    return get<Keyword::PixelValueMappingExplanation>();

                case 0x1458:
                    return get<Keyword::OphthalmicThicknessMapQualityThresholdSequence>();

                case 0x1463:
                    return get<Keyword::AnatomicStructureReferencePoint>();

                case 0x1465:
                    return get<Keyword::RegistrationToLocalizerSequence>();

                case 0x1466:
                    return get<Keyword::RegisteredLocalizerUnits>();

                case 0x1467:
                    return get<Keyword::RegisteredLocalizerTopLeftHandCorner>();

                case 0x1468:
                    return get<Keyword::RegisteredLocalizerBottomRightHandCorner>();

                case 0x1470:
                    return get<Keyword::OphthalmicThicknessMapQualityRatingSequence>();

                case 0x1472:
                    return get<Keyword::RelevantOPTAttributesSequence>();

                case 0x1512:
                    return get<Keyword::TransformationMethodCodeSequence>();

                case 0x1513:
                    return get<Keyword::TransformationAlgorithmSequence>();

                case 0x1515:
                    return get<Keyword::OphthalmicAxialLengthMethod>();

                case 0x1517:
                    return get<Keyword::OphthalmicFOV>();

                case 0x1518:
                    return get<Keyword::TwoDimensionalToThreeDimensionalMapSequence>();

                case 0x1525:
                    return get<Keyword::WideFieldOphthalmicPhotographyQualityRatingSequence>();

                case 0x1526:
                    return get<Keyword::WideFieldOphthalmicPhotographyQualityThresholdSequence>();

                case 0x1528:
                    return get<Keyword::XCoordinatesCenterPixelViewAngle>();

                case 0x1529:
                    return get<Keyword::YCoordinatesCenterPixelViewAngle>();

                case 0x1530:
                    return get<Keyword::NumberOfMapPoints>();

                case 0x1531:
                    return get<Keyword::TwoDimensionalToThreeDimensionalMapData>();

                case 0x1612:
                    return get<Keyword::DerivationAlgorithmSequence>();

                case 0x1615:
                    return get<Keyword::OphthalmicImageTypeCodeSequence>();

                case 0x1616:
                    return get<Keyword::OphthalmicImageTypeDescription>();

                case 0x1618:
                    return get<Keyword::ScanPatternTypeCodeSequence>();

                case 0x1620:
                    return get<Keyword::ReferencedSurfaceMeshIdentificationSequence>();

                case 0x1622:
                    return get<Keyword::OphthalmicVolumetricPropertiesFlag>();

                case 0x1624:
                    return get<Keyword::OphthalmicAnatomicReferencePointXCoordinate>();

                case 0x1626:
                    return get<Keyword::OphthalmicAnatomicReferencePointYCoordinate>();

                case 0x1628:
                    return get<Keyword::OphthalmicEnFaceImageQualityRatingSequence>();

                case 0x1630:
                    return get<Keyword::QualityThreshold>();

                case 0x1640:
                    return get<Keyword::OCTBscanAnalysisAcquisitionParametersSequence>();

                case 0x1642:
                    return get<Keyword::NumberOfBscansPerFrame>();

                case 0x1643:
                    return get<Keyword::BscanSlabThickness>();

                case 0x1644:
                    return get<Keyword::DistanceBetweenBscanSlabs>();

                case 0x1645:
                    return get<Keyword::BscanCycleTime>();

                case 0x1646:
                    return get<Keyword::BscanCycleTimeVector>();

                case 0x1649:
                    return get<Keyword::AscanRate>();

                case 0x1650:
                    return get<Keyword::BscanRate>();

                case 0x1658:
                    return get<Keyword::SurfaceMeshZPixelOffset>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0024:
        {
            switch(element)
            {
                case 0x0202:
                    return get<Keyword::AlgorithmSource>();

                case 0x0306:
                    return get<Keyword::DataSetName>();

                case 0x0307:
                    return get<Keyword::DataSetVersion>();

                case 0x0308:
                    return get<Keyword::DataSetSource>();

                case 0x0309:
                    return get<Keyword::DataSetDescription>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0028:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::SamplesPerPixel>();

                case 0x0003:
                    return get<Keyword::SamplesPerPixelUsed>();

                case 0x0004:
                    return get<Keyword::PhotometricInterpretation>();

                case 0x0006:
                    return get<Keyword::PlanarConfiguration>();

                case 0x0008:
                    return get<Keyword::NumberOfFrames>();

                case 0x0009:
                    return get<Keyword::FrameIncrementPointer>();

                case 0x000A:
                    return get<Keyword::FrameDimensionPointer>();

                case 0x0010:
                    return get<Keyword::Rows>();

                case 0x0011:
                    return get<Keyword::Columns>();

                case 0x0014:
                    return get<Keyword::UltrasoundColorDataPresent>();

                case 0x0030:
                    return get<Keyword::PixelSpacing>();

                case 0x0031:
                    return get<Keyword::ZoomFactor>();

                case 0x0032:
                    return get<Keyword::ZoomCenter>();

                case 0x0034:
                    return get<Keyword::PixelAspectRatio>();

                case 0x0051:
                    return get<Keyword::CorrectedImage>();

                case 0x0100:
                    return get<Keyword::BitsAllocated>();

                case 0x0101:
                    return get<Keyword::BitsStored>();

                case 0x0102:
                    return get<Keyword::HighBit>();

                case 0x0103:
                    return get<Keyword::PixelRepresentation>();

                case 0x0106:
                    return get<Keyword::SmallestImagePixelValue>();

                case 0x0107:
                    return get<Keyword::LargestImagePixelValue>();

                case 0x0108:
                    return get<Keyword::SmallestPixelValueInSeries>();

                case 0x0109:
                    return get<Keyword::LargestPixelValueInSeries>();

                case 0x0120:
                    return get<Keyword::PixelPaddingValue>();

                case 0x0121:
                    return get<Keyword::PixelPaddingRangeLimit>();

                case 0x0122:
                    return get<Keyword::FloatPixelPaddingValue>();

                case 0x0123:
                    return get<Keyword::DoubleFloatPixelPaddingValue>();

                case 0x0124:
                    return get<Keyword::FloatPixelPaddingRangeLimit>();

                case 0x0125:
                    return get<Keyword::DoubleFloatPixelPaddingRangeLimit>();

                case 0x0300:
                    return get<Keyword::QualityControlImage>();

                case 0x0301:
                    return get<Keyword::BurnedInAnnotation>();

                case 0x0302:
                    return get<Keyword::RecognizableVisualFeatures>();

                case 0x0303:
                    return get<Keyword::LongitudinalTemporalInformationModified>();

                case 0x0304:
                    return get<Keyword::ReferencedColorPaletteInstanceUID>();

                case 0x0A02:
                    return get<Keyword::PixelSpacingCalibrationType>();

                case 0x0A04:
                    return get<Keyword::PixelSpacingCalibrationDescription>();

                case 0x1040:
                    return get<Keyword::PixelIntensityRelationship>();

                case 0x1041:
                    return get<Keyword::PixelIntensityRelationshipSign>();

                case 0x1050:
                    return get<Keyword::WindowCenter>();

                case 0x1051:
                    return get<Keyword::WindowWidth>();

                case 0x1052:
                    return get<Keyword::RescaleIntercept>();

                case 0x1053:
                    return get<Keyword::RescaleSlope>();

                case 0x1054:
                    return get<Keyword::RescaleType>();

                case 0x1055:
                    return get<Keyword::WindowCenterWidthExplanation>();

                case 0x1056:
                    return get<Keyword::VOILUTFunction>();

                case 0x1090:
                    return get<Keyword::RecommendedViewingMode>();

                case 0x1101:
                    return get<Keyword::RedPaletteColorLookupTableDescriptor>();

                case 0x1102:
                    return get<Keyword::GreenPaletteColorLookupTableDescriptor>();

                case 0x1103:
                    return get<Keyword::BluePaletteColorLookupTableDescriptor>();

                case 0x1104:
                    return get<Keyword::AlphaPaletteColorLookupTableDescriptor>();

                case 0x1199:
                    return get<Keyword::PaletteColorLookupTableUID>();

                case 0x1201:
                    return get<Keyword::RedPaletteColorLookupTableData>();

                case 0x1202:
                    return get<Keyword::GreenPaletteColorLookupTableData>();

                case 0x1203:
                    return get<Keyword::BluePaletteColorLookupTableData>();

                case 0x1204:
                    return get<Keyword::AlphaPaletteColorLookupTableData>();

                case 0x1221:
                    return get<Keyword::SegmentedRedPaletteColorLookupTableData>();

                case 0x1222:
                    return get<Keyword::SegmentedGreenPaletteColorLookupTableData>();

                case 0x1223:
                    return get<Keyword::SegmentedBluePaletteColorLookupTableData>();

                case 0x1230:
                    return get<Keyword::StoredValueColorRangeSequence>();

                case 0x1231:
                    return get<Keyword::MinimumStoredValueMapped>();

                case 0x1232:
                    return get<Keyword::MaximumStoredValueMapped>();

                case 0x1300:
                    return get<Keyword::BreastImplantPresent>();

                case 0x1350:
                    return get<Keyword::PartialView>();

                case 0x1351:
                    return get<Keyword::PartialViewDescription>();

                case 0x1352:
                    return get<Keyword::PartialViewCodeSequence>();

                case 0x135A:
                    return get<Keyword::SpatialLocationsPreserved>();

                case 0x1401:
                    return get<Keyword::DataFrameAssignmentSequence>();

                case 0x1402:
                    return get<Keyword::DataPathAssignment>();

                case 0x1403:
                    return get<Keyword::BitsMappedToColorLookupTable>();

                case 0x1404:
                    return get<Keyword::BlendingLUT1Sequence>();

                case 0x1405:
                    return get<Keyword::BlendingLUT1TransferFunction>();

                case 0x1406:
                    return get<Keyword::BlendingWeightConstant>();

                case 0x1407:
                    return get<Keyword::BlendingLookupTableDescriptor>();

                case 0x1408:
                    return get<Keyword::BlendingLookupTableData>();

                case 0x140B:
                    return get<Keyword::EnhancedPaletteColorLookupTableSequence>();

                case 0x140C:
                    return get<Keyword::BlendingLUT2Sequence>();

                case 0x140D:
                    return get<Keyword::BlendingLUT2TransferFunction>();

                case 0x140E:
                    return get<Keyword::DataPathID>();

                case 0x140F:
                    return get<Keyword::RGBLUTTransferFunction>();

                case 0x1410:
                    return get<Keyword::AlphaLUTTransferFunction>();

                case 0x2000:
                    return get<Keyword::ICCProfile>();

                case 0x2002:
                    return get<Keyword::ColorSpace>();

                case 0x2110:
                    return get<Keyword::LossyImageCompression>();

                case 0x2112:
                    return get<Keyword::LossyImageCompressionRatio>();

                case 0x2114:
                    return get<Keyword::LossyImageCompressionMethod>();

                case 0x3000:
                    return get<Keyword::ModalityLUTSequence>();

                case 0x3002:
                    return get<Keyword::LUTDescriptor>();

                case 0x3003:
                    return get<Keyword::LUTExplanation>();

                case 0x3004:
                    return get<Keyword::ModalityLUTType>();

                case 0x3006:
                    return get<Keyword::LUTData>();

                case 0x3010:
                    return get<Keyword::VOILUTSequence>();

                case 0x6010:
                    return get<Keyword::RepresentativeFrameNumber>();

                case 0x6020:
                    return get<Keyword::FrameNumbersOfInterest>();

                case 0x6022:
                    return get<Keyword::FrameOfInterestDescription>();

                case 0x6023:
                    return get<Keyword::FrameOfInterestType>();

                case 0x6040:
                    return get<Keyword::RWavePointer>();

                case 0x6100:
                    return get<Keyword::MaskSubtractionSequence>();

                case 0x6101:
                    return get<Keyword::MaskOperation>();

                case 0x6102:
                    return get<Keyword::ApplicableFrameRange>();

                case 0x6110:
                    return get<Keyword::MaskFrameNumbers>();

                case 0x6112:
                    return get<Keyword::ContrastFrameAveraging>();

                case 0x6114:
                    return get<Keyword::MaskSubPixelShift>();

                case 0x6120:
                    return get<Keyword::TIDOffset>();

                case 0x6190:
                    return get<Keyword::MaskOperationExplanation>();

                case 0x7FE0:
                    return get<Keyword::PixelDataProviderURL>();

                case 0x9110:
                    return get<Keyword::PixelMeasuresSequence>();

                case 0x9132:
                    return get<Keyword::FrameVOILUTSequence>();

                case 0x9145:
                    return get<Keyword::PixelValueTransformationSequence>();

                case 0x9411:
                    return get<Keyword::DisplayFilterPercentage>();

                case 0x9415:
                    return get<Keyword::FramePixelShiftSequence>();

                case 0x9416:
                    return get<Keyword::SubtractionItemID>();

                case 0x9422:
                    return get<Keyword::PixelIntensityRelationshipLUTSequence>();

                case 0x9443:
                    return get<Keyword::FramePixelDataPropertiesSequence>();

                case 0x9444:
                    return get<Keyword::GeometricalProperties>();

                case 0x9445:
                    return get<Keyword::GeometricMaximumDistortion>();

                case 0x9446:
                    return get<Keyword::ImageProcessingApplied>();

                case 0x9454:
                    return get<Keyword::MaskSelectionMode>();

                case 0x9474:
                    return get<Keyword::LUTFunction>();

                case 0x9478:
                    return get<Keyword::MaskVisibilityPercentage>();

                case 0x9520:
                    return get<Keyword::ImageToEquipmentMappingMatrix>();

                case 0x9537:
                    return get<Keyword::EquipmentCoordinateSystemIdentification>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0032:
        {
            switch(element)
            {
                case 0x1033:
                    return get<Keyword::RequestingService>();

                case 0x1034:
                    return get<Keyword::RequestingServiceCodeSequence>();

                case 0x1060:
                    return get<Keyword::RequestedProcedureDescription>();

                case 0x1064:
                    return get<Keyword::RequestedProcedureCodeSequence>();

                case 0x1066:
                    return get<Keyword::ReasonForVisit>();

                case 0x1067:
                    return get<Keyword::ReasonForVisitCodeSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0034:
        {
            switch(element)
            {
                case 0x0007:
                    return get<Keyword::FrameOriginTimestamp>();

                case 0x0008:
                    return get<Keyword::IncludesImagingSubject>();

                case 0x0009:
                    return get<Keyword::FrameUsefulnessGroupSequence>();

                case 0x000B:
                    return get<Keyword::CameraPositionGroupSequence>();

                case 0x000C:
                    return get<Keyword::IncludesInformation>();

                case 0x000D:
                    return get<Keyword::TimeOfFrameGroupSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0038:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::AdmissionID>();

                case 0x0014:
                    return get<Keyword::IssuerOfAdmissionIDSequence>();

                case 0x0060:
                    return get<Keyword::ServiceEpisodeID>();

                case 0x0062:
                    return get<Keyword::ServiceEpisodeDescription>();

                case 0x0064:
                    return get<Keyword::IssuerOfServiceEpisodeIDSequence>();

                case 0x0500:
                    return get<Keyword::PatientState>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x003A:
        {
            switch(element)
            {
                case 0x0208:
                    return get<Keyword::ChannelSourceSequence>();

                case 0x0300:
                    return get<Keyword::MultiplexedAudioChannelsDescriptionCodeSequence>();

                case 0x0301:
                    return get<Keyword::ChannelIdentificationCode>();

                case 0x0302:
                    return get<Keyword::ChannelMode>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0040:
        {
            switch(element)
            {
                case 0x0007:
                    return get<Keyword::ScheduledProcedureStepDescription>();

                case 0x0008:
                    return get<Keyword::ScheduledProtocolCodeSequence>();

                case 0x0009:
                    return get<Keyword::ScheduledProcedureStepID>();

                case 0x000A:
                    return get<Keyword::StageCodeSequence>();

                case 0x0026:
                    return get<Keyword::OrderPlacerIdentifierSequence>();

                case 0x0027:
                    return get<Keyword::OrderFillerIdentifierSequence>();

                case 0x0031:
                    return get<Keyword::LocalNamespaceEntityID>();

                case 0x0032:
                    return get<Keyword::UniversalEntityID>();

                case 0x0033:
                    return get<Keyword::UniversalEntityIDType>();

                case 0x0035:
                    return get<Keyword::IdentifierTypeCode>();

                case 0x0036:
                    return get<Keyword::AssigningFacilitySequence>();

                case 0x0039:
                    return get<Keyword::AssigningJurisdictionCodeSequence>();

                case 0x003A:
                    return get<Keyword::AssigningAgencyOrDepartmentCodeSequence>();

                case 0x0244:
                    return get<Keyword::PerformedProcedureStepStartDate>();

                case 0x0245:
                    return get<Keyword::PerformedProcedureStepStartTime>();

                case 0x0250:
                    return get<Keyword::PerformedProcedureStepEndDate>();

                case 0x0251:
                    return get<Keyword::PerformedProcedureStepEndTime>();

                case 0x0253:
                    return get<Keyword::PerformedProcedureStepID>();

                case 0x0254:
                    return get<Keyword::PerformedProcedureStepDescription>();

                case 0x0260:
                    return get<Keyword::PerformedProtocolCodeSequence>();

                case 0x0261:
                    return get<Keyword::PerformedProtocolType>();

                case 0x0275:
                    return get<Keyword::RequestAttributesSequence>();

                case 0x0280:
                    return get<Keyword::CommentsOnThePerformedProcedureStep>();

                case 0x0302:
                    return get<Keyword::EntranceDose>();

                case 0x0303:
                    return get<Keyword::ExposedArea>();

                case 0x0306:
                    return get<Keyword::DistanceSourceToEntrance>();

                case 0x0310:
                    return get<Keyword::CommentsOnRadiationDose>();

                case 0x0312:
                    return get<Keyword::XRayOutput>();

                case 0x0314:
                    return get<Keyword::HalfValueLayer>();

                case 0x0316:
                    return get<Keyword::OrganDose>();

                case 0x0318:
                    return get<Keyword::OrganExposed>();

                case 0x0440:
                    return get<Keyword::ProtocolContextSequence>();

                case 0x0441:
                    return get<Keyword::ContentItemModifierSequence>();

                case 0x0512:
                    return get<Keyword::ContainerIdentifier>();

                case 0x0513:
                    return get<Keyword::IssuerOfTheContainerIdentifierSequence>();

                case 0x0515:
                    return get<Keyword::AlternateContainerIdentifierSequence>();

                case 0x0518:
                    return get<Keyword::ContainerTypeCodeSequence>();

                case 0x051A:
                    return get<Keyword::ContainerDescription>();

                case 0x0520:
                    return get<Keyword::ContainerComponentSequence>();

                case 0x0551:
                    return get<Keyword::SpecimenIdentifier>();

                case 0x0554:
                    return get<Keyword::SpecimenUID>();

                case 0x0555:
                    return get<Keyword::AcquisitionContextSequence>();

                case 0x0556:
                    return get<Keyword::AcquisitionContextDescription>();

                case 0x0560:
                    return get<Keyword::SpecimenDescriptionSequence>();

                case 0x0562:
                    return get<Keyword::IssuerOfTheSpecimenIdentifierSequence>();

                case 0x059A:
                    return get<Keyword::SpecimenTypeCodeSequence>();

                case 0x0600:
                    return get<Keyword::SpecimenShortDescription>();

                case 0x0602:
                    return get<Keyword::SpecimenDetailedDescription>();

                case 0x0610:
                    return get<Keyword::SpecimenPreparationSequence>();

                case 0x0620:
                    return get<Keyword::SpecimenLocalizationContentItemSequence>();

                case 0x0710:
                    return get<Keyword::WholeSlideMicroscopyImageFrameTypeSequence>();

                case 0x071A:
                    return get<Keyword::ImageCenterPointCoordinatesSequence>();

                case 0x072A:
                    return get<Keyword::XOffsetInSlideCoordinateSystem>();

                case 0x073A:
                    return get<Keyword::YOffsetInSlideCoordinateSystem>();

                case 0x074A:
                    return get<Keyword::ZOffsetInSlideCoordinateSystem>();

                case 0x08EA:
                    return get<Keyword::MeasurementUnitsCodeSequence>();

                case 0x1001:
                    return get<Keyword::RequestedProcedureID>();

                case 0x1002:
                    return get<Keyword::ReasonForTheRequestedProcedure>();

                case 0x100A:
                    return get<Keyword::ReasonForRequestedProcedureCodeSequence>();

                case 0x1012:
                    return get<Keyword::ReasonForPerformedProcedureCodeSequence>();

                case 0x1101:
                    return get<Keyword::PersonIdentificationCodeSequence>();

                case 0x1102:
                    return get<Keyword::PersonAddress>();

                case 0x1103:
                    return get<Keyword::PersonTelephoneNumbers>();

                case 0x1104:
                    return get<Keyword::PersonTelecomInformation>();

                case 0x2016:
                    return get<Keyword::PlacerOrderNumberImagingServiceRequest>();

                case 0x2017:
                    return get<Keyword::FillerOrderNumberImagingServiceRequest>();

                case 0x8302:
                    return get<Keyword::EntranceDoseInmGy>();

                case 0x8303:
                    return get<Keyword::EntranceDoseDerivation>();

                case 0x9092:
                    return get<Keyword::ParametricMapFrameTypeSequence>();

                case 0x9096:
                    return get<Keyword::RealWorldValueMappingSequence>();

                case 0x9098:
                    return get<Keyword::PixelValueMappingCodeSequence>();

                case 0x9210:
                    return get<Keyword::LUTLabel>();

                case 0x9211:
                    return get<Keyword::RealWorldValueLastValueMapped>();

                case 0x9212:
                    return get<Keyword::RealWorldValueLUTData>();

                case 0x9213:
                    return get<Keyword::DoubleFloatRealWorldValueLastValueMapped>();

                case 0x9214:
                    return get<Keyword::DoubleFloatRealWorldValueFirstValueMapped>();

                case 0x9216:
                    return get<Keyword::RealWorldValueFirstValueMapped>();

                case 0x9220:
                    return get<Keyword::QuantityDefinitionSequence>();

                case 0x9224:
                    return get<Keyword::RealWorldValueIntercept>();

                case 0x9225:
                    return get<Keyword::RealWorldValueSlope>();

                case 0xA010:
                    return get<Keyword::RelationshipType>();

                case 0xA027:
                    return get<Keyword::VerifyingOrganization>();

                case 0xA030:
                    return get<Keyword::VerificationDateTime>();

                case 0xA032:
                    return get<Keyword::ObservationDateTime>();

                case 0xA033:
                    return get<Keyword::ObservationStartDateTime>();

                case 0xA040:
                    return get<Keyword::ValueType>();

                case 0xA043:
                    return get<Keyword::ConceptNameCodeSequence>();

                case 0xA050:
                    return get<Keyword::ContinuityOfContent>();

                case 0xA073:
                    return get<Keyword::VerifyingObserverSequence>();

                case 0xA075:
                    return get<Keyword::VerifyingObserverName>();

                case 0xA078:
                    return get<Keyword::AuthorObserverSequence>();

                case 0xA07A:
                    return get<Keyword::ParticipantSequence>();

                case 0xA07C:
                    return get<Keyword::CustodialOrganizationSequence>();

                case 0xA080:
                    return get<Keyword::ParticipationType>();

                case 0xA082:
                    return get<Keyword::ParticipationDateTime>();

                case 0xA084:
                    return get<Keyword::ObserverType>();

                case 0xA088:
                    return get<Keyword::VerifyingObserverIdentificationCodeSequence>();

                case 0xA0B0:
                    return get<Keyword::ReferencedWaveformChannels>();

                case 0xA120:
                    return get<Keyword::DateTime>();

                case 0xA121:
                    return get<Keyword::Date>();

                case 0xA122:
                    return get<Keyword::Time>();

                case 0xA123:
                    return get<Keyword::PersonName>();

                case 0xA124:
                    return get<Keyword::UID>();

                case 0xA130:
                    return get<Keyword::TemporalRangeType>();

                case 0xA132:
                    return get<Keyword::ReferencedSamplePositions>();

                case 0xA138:
                    return get<Keyword::ReferencedTimeOffsets>();

                case 0xA13A:
                    return get<Keyword::ReferencedDateTime>();

                case 0xA160:
                    return get<Keyword::TextValue>();

                case 0xA161:
                    return get<Keyword::FloatingPointValue>();

                case 0xA162:
                    return get<Keyword::RationalNumeratorValue>();

                case 0xA163:
                    return get<Keyword::RationalDenominatorValue>();

                case 0xA168:
                    return get<Keyword::ConceptCodeSequence>();

                case 0xA170:
                    return get<Keyword::PurposeOfReferenceCodeSequence>();

                case 0xA171:
                    return get<Keyword::ObservationUID>();

                case 0xA300:
                    return get<Keyword::MeasuredValueSequence>();

                case 0xA301:
                    return get<Keyword::NumericValueQualifierCodeSequence>();

                case 0xA30A:
                    return get<Keyword::NumericValue>();

                case 0xA360:
                    return get<Keyword::PredecessorDocumentsSequence>();

                case 0xA370:
                    return get<Keyword::ReferencedRequestSequence>();

                case 0xA372:
                    return get<Keyword::PerformedProcedureCodeSequence>();

                case 0xA375:
                    return get<Keyword::CurrentRequestedProcedureEvidenceSequence>();

                case 0xA385:
                    return get<Keyword::PertinentOtherEvidenceSequence>();

                case 0xA390:
                    return get<Keyword::HL7StructuredDocumentReferenceSequence>();

                case 0xA491:
                    return get<Keyword::CompletionFlag>();

                case 0xA492:
                    return get<Keyword::CompletionFlagDescription>();

                case 0xA493:
                    return get<Keyword::VerificationFlag>();

                case 0xA496:
                    return get<Keyword::PreliminaryFlag>();

                case 0xA504:
                    return get<Keyword::ContentTemplateSequence>();

                case 0xA525:
                    return get<Keyword::IdenticalDocumentsSequence>();

                case 0xA730:
                    return get<Keyword::ContentSequence>();

                case 0xA801:
                    return get<Keyword::TabulatedValuesSequence>();

                case 0xA802:
                    return get<Keyword::NumberOfTableRows>();

                case 0xA803:
                    return get<Keyword::NumberOfTableColumns>();

                case 0xA806:
                    return get<Keyword::TableRowDefinitionSequence>();

                case 0xA807:
                    return get<Keyword::TableColumnDefinitionSequence>();

                case 0xA808:
                    return get<Keyword::CellValuesSequence>();

                case 0xDB00:
                    return get<Keyword::TemplateIdentifier>();

                case 0xDB73:
                    return get<Keyword::ReferencedContentItemIdentifier>();

                case 0xE001:
                    return get<Keyword::HL7InstanceIdentifier>();

                case 0xE008:
                    return get<Keyword::DocumentClassCodeSequence>();

                case 0xE010:
                    return get<Keyword::RetrieveURI>();

                case 0xE011:
                    return get<Keyword::RetrieveLocationUID>();

                case 0xE020:
                    return get<Keyword::TypeOfInstances>();

                case 0xE021:
                    return get<Keyword::DICOMRetrievalSequence>();

                case 0xE022:
                    return get<Keyword::DICOMMediaRetrievalSequence>();

                case 0xE023:
                    return get<Keyword::WADORetrievalSequence>();

                case 0xE024:
                    return get<Keyword::XDSRetrievalSequence>();

                case 0xE025:
                    return get<Keyword::WADORSRetrievalSequence>();

                case 0xE030:
                    return get<Keyword::RepositoryUniqueID>();

                case 0xE031:
                    return get<Keyword::HomeCommunityID>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0042:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::DocumentTitle>();

                case 0x0011:
                    return get<Keyword::EncapsulatedDocument>();

                case 0x0012:
                    return get<Keyword::MIMETypeOfEncapsulatedDocument>();

                case 0x0013:
                    return get<Keyword::SourceInstanceSequence>();

                case 0x0014:
                    return get<Keyword::ListOfMIMETypes>();

                case 0x0015:
                    return get<Keyword::EncapsulatedDocumentLength>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0044:
        {
            switch(element)
            {
                case 0x010A:
                    return get<Keyword::OrganizationalRoleCodeSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0046:
        {
            switch(element)
            {
                case 0x0074:
                    return get<Keyword::SteepKeratometricAxisSequence>();

                case 0x0075:
                    return get<Keyword::RadiusOfCurvature>();

                case 0x0076:
                    return get<Keyword::KeratometricPower>();

                case 0x0077:
                    return get<Keyword::KeratometricAxis>();

                case 0x0080:
                    return get<Keyword::FlatKeratometricAxisSequence>();

                case 0x0201:
                    return get<Keyword::CornealTopographySurface>();

                case 0x0202:
                    return get<Keyword::CornealVertexLocation>();

                case 0x0203:
                    return get<Keyword::PupilCentroidXCoordinate>();

                case 0x0204:
                    return get<Keyword::PupilCentroidYCoordinate>();

                case 0x0205:
                    return get<Keyword::EquivalentPupilRadius>();

                case 0x0207:
                    return get<Keyword::CornealTopographyMapTypeCodeSequence>();

                case 0x0208:
                    return get<Keyword::VerticesOfTheOutlineOfPupil>();

                case 0x0210:
                    return get<Keyword::CornealTopographyMappingNormalsSequence>();

                case 0x0211:
                    return get<Keyword::MaximumCornealCurvatureSequence>();

                case 0x0212:
                    return get<Keyword::MaximumCornealCurvature>();

                case 0x0213:
                    return get<Keyword::MaximumCornealCurvatureLocation>();

                case 0x0215:
                    return get<Keyword::MinimumKeratometricSequence>();

                case 0x0218:
                    return get<Keyword::SimulatedKeratometricCylinderSequence>();

                case 0x0220:
                    return get<Keyword::AverageCornealPower>();

                case 0x0224:
                    return get<Keyword::CornealISValue>();

                case 0x0227:
                    return get<Keyword::AnalyzedArea>();

                case 0x0230:
                    return get<Keyword::SurfaceRegularityIndex>();

                case 0x0232:
                    return get<Keyword::SurfaceAsymmetryIndex>();

                case 0x0234:
                    return get<Keyword::CornealEccentricityIndex>();

                case 0x0236:
                    return get<Keyword::KeratoconusPredictionIndex>();

                case 0x0238:
                    return get<Keyword::DecimalPotentialVisualAcuity>();

                case 0x0242:
                    return get<Keyword::CornealTopographyMapQualityEvaluation>();

                case 0x0244:
                    return get<Keyword::SourceImageCornealProcessedDataSequence>();

                case 0x0247:
                    return get<Keyword::CornealPointLocation>();

                case 0x0248:
                    return get<Keyword::CornealPointEstimated>();

                case 0x0249:
                    return get<Keyword::AxialPower>();

                case 0x0250:
                    return get<Keyword::TangentialPower>();

                case 0x0251:
                    return get<Keyword::RefractivePower>();

                case 0x0252:
                    return get<Keyword::RelativeElevation>();

                case 0x0253:
                    return get<Keyword::CornealWavefront>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0048:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::ImagedVolumeWidth>();

                case 0x0002:
                    return get<Keyword::ImagedVolumeHeight>();

                case 0x0003:
                    return get<Keyword::ImagedVolumeDepth>();

                case 0x0006:
                    return get<Keyword::TotalPixelMatrixColumns>();

                case 0x0007:
                    return get<Keyword::TotalPixelMatrixRows>();

                case 0x0008:
                    return get<Keyword::TotalPixelMatrixOriginSequence>();

                case 0x0010:
                    return get<Keyword::SpecimenLabelInImage>();

                case 0x0011:
                    return get<Keyword::FocusMethod>();

                case 0x0012:
                    return get<Keyword::ExtendedDepthOfField>();

                case 0x0013:
                    return get<Keyword::NumberOfFocalPlanes>();

                case 0x0014:
                    return get<Keyword::DistanceBetweenFocalPlanes>();

                case 0x0015:
                    return get<Keyword::RecommendedAbsentPixelCIELabValue>();

                case 0x0100:
                    return get<Keyword::IlluminatorTypeCodeSequence>();

                case 0x0102:
                    return get<Keyword::ImageOrientationSlide>();

                case 0x0105:
                    return get<Keyword::OpticalPathSequence>();

                case 0x0106:
                    return get<Keyword::OpticalPathIdentifier>();

                case 0x0107:
                    return get<Keyword::OpticalPathDescription>();

                case 0x0108:
                    return get<Keyword::IlluminationColorCodeSequence>();

                case 0x0110:
                    return get<Keyword::SpecimenReferenceSequence>();

                case 0x0111:
                    return get<Keyword::CondenserLensPower>();

                case 0x0112:
                    return get<Keyword::ObjectiveLensPower>();

                case 0x0113:
                    return get<Keyword::ObjectiveLensNumericalAperture>();

                case 0x0120:
                    return get<Keyword::PaletteColorLookupTableSequence>();

                case 0x0207:
                    return get<Keyword::OpticalPathIdentificationSequence>();

                case 0x021A:
                    return get<Keyword::PlanePositionSlideSequence>();

                case 0x021E:
                    return get<Keyword::ColumnPositionInTotalImagePixelMatrix>();

                case 0x021F:
                    return get<Keyword::RowPositionInTotalImagePixelMatrix>();

                case 0x0301:
                    return get<Keyword::PixelOriginInterpretation>();

                case 0x0302:
                    return get<Keyword::NumberOfOpticalPaths>();

                case 0x0303:
                    return get<Keyword::TotalPixelMatrixFocalPlanes>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0050:
        {
            switch(element)
            {
                case 0x0004:
                    return get<Keyword::CalibrationImage>();

                case 0x0010:
                    return get<Keyword::DeviceSequence>();

                case 0x0012:
                    return get<Keyword::ContainerComponentTypeCodeSequence>();

                case 0x0013:
                    return get<Keyword::ContainerComponentThickness>();

                case 0x0014:
                    return get<Keyword::DeviceLength>();

                case 0x0015:
                    return get<Keyword::ContainerComponentWidth>();

                case 0x0016:
                    return get<Keyword::DeviceDiameter>();

                case 0x0017:
                    return get<Keyword::DeviceDiameterUnits>();

                case 0x0018:
                    return get<Keyword::DeviceVolume>();

                case 0x0019:
                    return get<Keyword::InterMarkerDistance>();

                case 0x001A:
                    return get<Keyword::ContainerComponentMaterial>();

                case 0x001B:
                    return get<Keyword::ContainerComponentID>();

                case 0x001C:
                    return get<Keyword::ContainerComponentLength>();

                case 0x001D:
                    return get<Keyword::ContainerComponentDiameter>();

                case 0x001E:
                    return get<Keyword::ContainerComponentDescription>();

                case 0x0020:
                    return get<Keyword::DeviceDescription>();

                case 0x0021:
                    return get<Keyword::LongDeviceDescription>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0052:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::ContrastBolusIngredientPercentByVolume>();

                case 0x0002:
                    return get<Keyword::OCTFocalDistance>();

                case 0x0003:
                    return get<Keyword::BeamSpotSize>();

                case 0x0004:
                    return get<Keyword::EffectiveRefractiveIndex>();

                case 0x0006:
                    return get<Keyword::OCTAcquisitionDomain>();

                case 0x0007:
                    return get<Keyword::OCTOpticalCenterWavelength>();

                case 0x0008:
                    return get<Keyword::AxialResolution>();

                case 0x0009:
                    return get<Keyword::RangingDepth>();

                case 0x0011:
                    return get<Keyword::ALineRate>();

                case 0x0012:
                    return get<Keyword::ALinesPerFrame>();

                case 0x0013:
                    return get<Keyword::CatheterRotationalRate>();

                case 0x0014:
                    return get<Keyword::ALinePixelSpacing>();

                case 0x0016:
                    return get<Keyword::ModeOfPercutaneousAccessSequence>();

                case 0x0025:
                    return get<Keyword::IntravascularOCTFrameTypeSequence>();

                case 0x0026:
                    return get<Keyword::OCTZOffsetApplied>();

                case 0x0027:
                    return get<Keyword::IntravascularFrameContentSequence>();

                case 0x0028:
                    return get<Keyword::IntravascularLongitudinalDistance>();

                case 0x0029:
                    return get<Keyword::IntravascularOCTFrameContentSequence>();

                case 0x0030:
                    return get<Keyword::OCTZOffsetCorrection>();

                case 0x0031:
                    return get<Keyword::CatheterDirectionOfRotation>();

                case 0x0033:
                    return get<Keyword::SeamLineLocation>();

                case 0x0034:
                    return get<Keyword::FirstALineLocation>();

                case 0x0036:
                    return get<Keyword::SeamLineIndex>();

                case 0x0038:
                    return get<Keyword::NumberOfPaddedALines>();

                case 0x0039:
                    return get<Keyword::InterpolationType>();

                case 0x003A:
                    return get<Keyword::RefractiveIndexApplied>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0054:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::EnergyWindowVector>();

                case 0x0011:
                    return get<Keyword::NumberOfEnergyWindows>();

                case 0x0012:
                    return get<Keyword::EnergyWindowInformationSequence>();

                case 0x0013:
                    return get<Keyword::EnergyWindowRangeSequence>();

                case 0x0014:
                    return get<Keyword::EnergyWindowLowerLimit>();

                case 0x0015:
                    return get<Keyword::EnergyWindowUpperLimit>();

                case 0x0016:
                    return get<Keyword::RadiopharmaceuticalInformationSequence>();

                case 0x0018:
                    return get<Keyword::EnergyWindowName>();

                case 0x0020:
                    return get<Keyword::DetectorVector>();

                case 0x0021:
                    return get<Keyword::NumberOfDetectors>();

                case 0x0022:
                    return get<Keyword::DetectorInformationSequence>();

                case 0x0030:
                    return get<Keyword::PhaseVector>();

                case 0x0031:
                    return get<Keyword::NumberOfPhases>();

                case 0x0032:
                    return get<Keyword::PhaseInformationSequence>();

                case 0x0033:
                    return get<Keyword::NumberOfFramesInPhase>();

                case 0x0036:
                    return get<Keyword::PhaseDelay>();

                case 0x0038:
                    return get<Keyword::PauseBetweenFrames>();

                case 0x0039:
                    return get<Keyword::PhaseDescription>();

                case 0x0050:
                    return get<Keyword::RotationVector>();

                case 0x0051:
                    return get<Keyword::NumberOfRotations>();

                case 0x0052:
                    return get<Keyword::RotationInformationSequence>();

                case 0x0053:
                    return get<Keyword::NumberOfFramesInRotation>();

                case 0x0060:
                    return get<Keyword::RRIntervalVector>();

                case 0x0061:
                    return get<Keyword::NumberOfRRIntervals>();

                case 0x0062:
                    return get<Keyword::GatedInformationSequence>();

                case 0x0063:
                    return get<Keyword::DataInformationSequence>();

                case 0x0070:
                    return get<Keyword::TimeSlotVector>();

                case 0x0071:
                    return get<Keyword::NumberOfTimeSlots>();

                case 0x0080:
                    return get<Keyword::SliceVector>();

                case 0x0081:
                    return get<Keyword::NumberOfSlices>();

                case 0x0090:
                    return get<Keyword::AngularViewVector>();

                case 0x0100:
                    return get<Keyword::TimeSliceVector>();

                case 0x0101:
                    return get<Keyword::NumberOfTimeSlices>();

                case 0x0200:
                    return get<Keyword::StartAngle>();

                case 0x0202:
                    return get<Keyword::TypeOfDetectorMotion>();

                case 0x0210:
                    return get<Keyword::TriggerVector>();

                case 0x0211:
                    return get<Keyword::NumberOfTriggersInPhase>();

                case 0x0220:
                    return get<Keyword::ViewCodeSequence>();

                case 0x0222:
                    return get<Keyword::ViewModifierCodeSequence>();

                case 0x0300:
                    return get<Keyword::RadionuclideCodeSequence>();

                case 0x0302:
                    return get<Keyword::AdministrationRouteCodeSequence>();

                case 0x0304:
                    return get<Keyword::RadiopharmaceuticalCodeSequence>();

                case 0x0306:
                    return get<Keyword::CalibrationDataSequence>();

                case 0x0400:
                    return get<Keyword::ImageID>();

                case 0x0410:
                    return get<Keyword::PatientOrientationCodeSequence>();

                case 0x0412:
                    return get<Keyword::PatientOrientationModifierCodeSequence>();

                case 0x0414:
                    return get<Keyword::PatientGantryRelationshipCodeSequence>();

                case 0x0500:
                    return get<Keyword::SliceProgressionDirection>();

                case 0x0501:
                    return get<Keyword::ScanProgressionDirection>();

                case 0x1000:
                    return get<Keyword::SeriesType>();

                case 0x1001:
                    return get<Keyword::Units>();

                case 0x1002:
                    return get<Keyword::CountsSource>();

                case 0x1004:
                    return get<Keyword::ReprojectionMethod>();

                case 0x1006:
                    return get<Keyword::SUVType>();

                case 0x1100:
                    return get<Keyword::RandomsCorrectionMethod>();

                case 0x1101:
                    return get<Keyword::AttenuationCorrectionMethod>();

                case 0x1102:
                    return get<Keyword::DecayCorrection>();

                case 0x1103:
                    return get<Keyword::ReconstructionMethod>();

                case 0x1104:
                    return get<Keyword::DetectorLinesOfResponseUsed>();

                case 0x1105:
                    return get<Keyword::ScatterCorrectionMethod>();

                case 0x1200:
                    return get<Keyword::AxialAcceptance>();

                case 0x1201:
                    return get<Keyword::AxialMash>();

                case 0x1202:
                    return get<Keyword::TransverseMash>();

                case 0x1203:
                    return get<Keyword::DetectorElementSize>();

                case 0x1210:
                    return get<Keyword::CoincidenceWindowWidth>();

                case 0x1220:
                    return get<Keyword::SecondaryCountsType>();

                case 0x1300:
                    return get<Keyword::FrameReferenceTime>();

                case 0x1310:
                    return get<Keyword::PrimaryPromptsCountsAccumulated>();

                case 0x1311:
                    return get<Keyword::SecondaryCountsAccumulated>();

                case 0x1320:
                    return get<Keyword::SliceSensitivityFactor>();

                case 0x1321:
                    return get<Keyword::DecayFactor>();

                case 0x1322:
                    return get<Keyword::DoseCalibrationFactor>();

                case 0x1323:
                    return get<Keyword::ScatterFractionFactor>();

                case 0x1324:
                    return get<Keyword::DeadTimeFactor>();

                case 0x1330:
                    return get<Keyword::ImageIndex>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0060:
        {
            switch(element)
            {
                case 0x3000:
                    return get<Keyword::HistogramSequence>();

                case 0x3002:
                    return get<Keyword::HistogramNumberOfBins>();

                case 0x3004:
                    return get<Keyword::HistogramFirstBinValue>();

                case 0x3006:
                    return get<Keyword::HistogramLastBinValue>();

                case 0x3008:
                    return get<Keyword::HistogramBinWidth>();

                case 0x3010:
                    return get<Keyword::HistogramExplanation>();

                case 0x3020:
                    return get<Keyword::HistogramData>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0062:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::SegmentationType>();

                case 0x0002:
                    return get<Keyword::SegmentSequence>();

                case 0x0003:
                    return get<Keyword::SegmentedPropertyCategoryCodeSequence>();

                case 0x0004:
                    return get<Keyword::SegmentNumber>();

                case 0x0005:
                    return get<Keyword::SegmentLabel>();

                case 0x0006:
                    return get<Keyword::SegmentDescription>();

                case 0x0007:
                    return get<Keyword::SegmentationAlgorithmIdentificationSequence>();

                case 0x0008:
                    return get<Keyword::SegmentAlgorithmType>();

                case 0x0009:
                    return get<Keyword::SegmentAlgorithmName>();

                case 0x000A:
                    return get<Keyword::SegmentIdentificationSequence>();

                case 0x000B:
                    return get<Keyword::ReferencedSegmentNumber>();

                case 0x000C:
                    return get<Keyword::RecommendedDisplayGrayscaleValue>();

                case 0x000D:
                    return get<Keyword::RecommendedDisplayCIELabValue>();

                case 0x000E:
                    return get<Keyword::MaximumFractionalValue>();

                case 0x000F:
                    return get<Keyword::SegmentedPropertyTypeCodeSequence>();

                case 0x0010:
                    return get<Keyword::SegmentationFractionalType>();

                case 0x0011:
                    return get<Keyword::SegmentedPropertyTypeModifierCodeSequence>();

                case 0x0013:
                    return get<Keyword::SegmentsOverlap>();

                case 0x0020:
                    return get<Keyword::TrackingID>();

                case 0x0021:
                    return get<Keyword::TrackingUID>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0066:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::NumberOfSurfaces>();

                case 0x0002:
                    return get<Keyword::SurfaceSequence>();

                case 0x0003:
                    return get<Keyword::SurfaceNumber>();

                case 0x0004:
                    return get<Keyword::SurfaceComments>();

                case 0x0009:
                    return get<Keyword::SurfaceProcessing>();

                case 0x000A:
                    return get<Keyword::SurfaceProcessingRatio>();

                case 0x000B:
                    return get<Keyword::SurfaceProcessingDescription>();

                case 0x000C:
                    return get<Keyword::RecommendedPresentationOpacity>();

                case 0x000D:
                    return get<Keyword::RecommendedPresentationType>();

                case 0x000E:
                    return get<Keyword::FiniteVolume>();

                case 0x0010:
                    return get<Keyword::Manifold>();

                case 0x0011:
                    return get<Keyword::SurfacePointsSequence>();

                case 0x0012:
                    return get<Keyword::SurfacePointsNormalsSequence>();

                case 0x0013:
                    return get<Keyword::SurfaceMeshPrimitivesSequence>();

                case 0x0015:
                    return get<Keyword::NumberOfSurfacePoints>();

                case 0x0016:
                    return get<Keyword::PointCoordinatesData>();

                case 0x0017:
                    return get<Keyword::PointPositionAccuracy>();

                case 0x0018:
                    return get<Keyword::MeanPointDistance>();

                case 0x0019:
                    return get<Keyword::MaximumPointDistance>();

                case 0x001A:
                    return get<Keyword::PointsBoundingBoxCoordinates>();

                case 0x001B:
                    return get<Keyword::AxisOfRotation>();

                case 0x001C:
                    return get<Keyword::CenterOfRotation>();

                case 0x002A:
                    return get<Keyword::SurfaceCount>();

                case 0x002B:
                    return get<Keyword::ReferencedSurfaceSequence>();

                case 0x002C:
                    return get<Keyword::ReferencedSurfaceNumber>();

                case 0x002F:
                    return get<Keyword::AlgorithmFamilyCodeSequence>();

                case 0x0030:
                    return get<Keyword::AlgorithmNameCodeSequence>();

                case 0x0031:
                    return get<Keyword::AlgorithmVersion>();

                case 0x0032:
                    return get<Keyword::AlgorithmParameters>();

                case 0x0035:
                    return get<Keyword::SurfaceProcessingAlgorithmIdentificationSequence>();

                case 0x0036:
                    return get<Keyword::AlgorithmName>();

                case 0x0037:
                    return get<Keyword::RecommendedPointRadius>();

                case 0x0038:
                    return get<Keyword::RecommendedLineThickness>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0068:
        {
            switch(element)
            {
                case 0x6210:
                    return get<Keyword::ImplantSize>();

                case 0x6221:
                    return get<Keyword::ImplantTemplateVersion>();

                case 0x6222:
                    return get<Keyword::ReplacedImplantTemplateSequence>();

                case 0x6223:
                    return get<Keyword::ImplantType>();

                case 0x6224:
                    return get<Keyword::DerivationImplantTemplateSequence>();

                case 0x6225:
                    return get<Keyword::OriginalImplantTemplateSequence>();

                case 0x6226:
                    return get<Keyword::EffectiveDateTime>();

                case 0x6230:
                    return get<Keyword::ImplantTargetAnatomySequence>();

                case 0x6260:
                    return get<Keyword::InformationFromManufacturerSequence>();

                case 0x6265:
                    return get<Keyword::NotificationFromManufacturerSequence>();

                case 0x6270:
                    return get<Keyword::InformationIssueDateTime>();

                case 0x6280:
                    return get<Keyword::InformationSummary>();

                case 0x62A0:
                    return get<Keyword::ImplantRegulatoryDisapprovalCodeSequence>();

                case 0x62A5:
                    return get<Keyword::OverallTemplateSpatialTolerance>();

                case 0x62C0:
                    return get<Keyword::HPGLDocumentSequence>();

                case 0x62D0:
                    return get<Keyword::HPGLDocumentID>();

                case 0x62D5:
                    return get<Keyword::HPGLDocumentLabel>();

                case 0x62E0:
                    return get<Keyword::ViewOrientationCodeSequence>();

                case 0x62F0:
                    return get<Keyword::ViewOrientationModifierCodeSequence>();

                case 0x62F2:
                    return get<Keyword::HPGLDocumentScaling>();

                case 0x6300:
                    return get<Keyword::HPGLDocument>();

                case 0x6310:
                    return get<Keyword::HPGLContourPenNumber>();

                case 0x6320:
                    return get<Keyword::HPGLPenSequence>();

                case 0x6346:
                    return get<Keyword::RecommendedRotationPoint>();

                case 0x6347:
                    return get<Keyword::BoundingRectangle>();

                case 0x6350:
                    return get<Keyword::ImplantTemplate3DModelSurfaceNumber>();

                case 0x6360:
                    return get<Keyword::SurfaceModelDescriptionSequence>();

                case 0x6380:
                    return get<Keyword::SurfaceModelLabel>();

                case 0x6390:
                    return get<Keyword::SurfaceModelScalingFactor>();

                case 0x63A0:
                    return get<Keyword::MaterialsCodeSequence>();

                case 0x63A4:
                    return get<Keyword::CoatingMaterialsCodeSequence>();

                case 0x63A8:
                    return get<Keyword::ImplantTypeCodeSequence>();

                case 0x63AC:
                    return get<Keyword::FixationMethodCodeSequence>();

                case 0x63B0:
                    return get<Keyword::MatingFeatureSetsSequence>();

                case 0x63C0:
                    return get<Keyword::MatingFeatureSetID>();

                case 0x63D0:
                    return get<Keyword::MatingFeatureSetLabel>();

                case 0x63E0:
                    return get<Keyword::MatingFeatureSequence>();

                case 0x6440:
                    return get<Keyword::ReferencedHPGLDocumentID>();

                case 0x6500:
                    return get<Keyword::PlanningLandmarkPointSequence>();

                case 0x6510:
                    return get<Keyword::PlanningLandmarkLineSequence>();

                case 0x6520:
                    return get<Keyword::PlanningLandmarkPlaneSequence>();

                case 0x6530:
                    return get<Keyword::PlanningLandmarkID>();

                case 0x6540:
                    return get<Keyword::PlanningLandmarkDescription>();

                case 0x6545:
                    return get<Keyword::PlanningLandmarkIdentificationCodeSequence>();

                case 0x6550:
                    return get<Keyword::TwoDPointCoordinatesSequence>();

                case 0x6560:
                    return get<Keyword::TwoDPointCoordinates>();

                case 0x6590:
                    return get<Keyword::ThreeDPointCoordinates>();

                case 0x65A0:
                    return get<Keyword::TwoDLineCoordinatesSequence>();

                case 0x65B0:
                    return get<Keyword::TwoDLineCoordinates>();

                case 0x65D0:
                    return get<Keyword::ThreeDLineCoordinates>();

                case 0x65E0:
                    return get<Keyword::TwoDPlaneCoordinatesSequence>();

                case 0x65F0:
                    return get<Keyword::TwoDPlaneIntersection>();

                case 0x6610:
                    return get<Keyword::ThreeDPlaneOrigin>();

                case 0x6620:
                    return get<Keyword::ThreeDPlaneNormal>();

                case 0x7001:
                    return get<Keyword::ModelModification>();

                case 0x7002:
                    return get<Keyword::ModelMirroring>();

                case 0x7003:
                    return get<Keyword::ModelUsageCodeSequence>();

                case 0x7004:
                    return get<Keyword::ModelGroupUID>();

                case 0x7005:
                    return get<Keyword::RelativeURIReferenceWithinEncapsulatedDocument>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0070:
        {
            switch(element)
            {
                case 0x0006:
                    return get<Keyword::UnformattedTextValue>();

                case 0x0012:
                    return get<Keyword::BoundingBoxTextHorizontalJustification>();

                case 0x0022:
                    return get<Keyword::GraphicData>();

                case 0x0023:
                    return get<Keyword::GraphicType>();

                case 0x0080:
                    return get<Keyword::ContentLabel>();

                case 0x0081:
                    return get<Keyword::ContentDescription>();

                case 0x0082:
                    return get<Keyword::PresentationCreationDate>();

                case 0x0083:
                    return get<Keyword::PresentationCreationTime>();

                case 0x0084:
                    return get<Keyword::ContentCreatorName>();

                case 0x0086:
                    return get<Keyword::ContentCreatorIdentificationCodeSequence>();

                case 0x0087:
                    return get<Keyword::AlternateContentDescriptionSequence>();

                case 0x031A:
                    return get<Keyword::FiducialUID>();

                case 0x031C:
                    return get<Keyword::FiducialSetSequence>();

                case 0x031E:
                    return get<Keyword::FiducialSequence>();

                case 0x0401:
                    return get<Keyword::GraphicLayerRecommendedDisplayCIELabValue>();

                case 0x0404:
                    return get<Keyword::ReferencedSpatialRegistrationSequence>();

                case 0x1602:
                    return get<Keyword::RenderProjection>();

                case 0x1603:
                    return get<Keyword::ViewpointPosition>();

                case 0x1604:
                    return get<Keyword::ViewpointLookAtPoint>();

                case 0x1605:
                    return get<Keyword::ViewpointUpDirection>();

                case 0x1606:
                    return get<Keyword::RenderFieldOfView>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0072:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::HangingProtocolName>();

                case 0x0008:
                    return get<Keyword::HangingProtocolCreator>();

                case 0x0100:
                    return get<Keyword::NumberOfScreens>();

                case 0x0102:
                    return get<Keyword::NominalScreenDefinitionSequence>();

                case 0x0104:
                    return get<Keyword::NumberOfVerticalPixels>();

                case 0x0106:
                    return get<Keyword::NumberOfHorizontalPixels>();

                case 0x0108:
                    return get<Keyword::DisplayEnvironmentSpatialPosition>();

                case 0x010A:
                    return get<Keyword::ScreenMinimumGrayscaleBitDepth>();

                case 0x010C:
                    return get<Keyword::ScreenMinimumColorBitDepth>();

                case 0x010E:
                    return get<Keyword::ApplicationMaximumRepaintTime>();

                case 0x0302:
                    return get<Keyword::ImageBoxNumber>();

                case 0x0304:
                    return get<Keyword::ImageBoxLayoutType>();

                case 0x0306:
                    return get<Keyword::ImageBoxTileHorizontalDimension>();

                case 0x0308:
                    return get<Keyword::ImageBoxTileVerticalDimension>();

                case 0x0320:
                    return get<Keyword::ImageBoxOverlapPriority>();

                case 0x0330:
                    return get<Keyword::CineRelativeToRealTime>();

                case 0x0420:
                    return get<Keyword::StructuredDisplayBackgroundCIELabValue>();

                case 0x0421:
                    return get<Keyword::EmptyImageBoxCIELabValue>();

                case 0x0422:
                    return get<Keyword::StructuredDisplayImageBoxSequence>();

                case 0x0424:
                    return get<Keyword::StructuredDisplayTextBoxSequence>();

                case 0x0427:
                    return get<Keyword::ReferencedFirstFrameSequence>();

                case 0x0430:
                    return get<Keyword::ImageBoxSynchronizationSequence>();

                case 0x0432:
                    return get<Keyword::SynchronizedImageBoxList>();

                case 0x0434:
                    return get<Keyword::TypeOfSynchronization>();

                case 0x0717:
                    return get<Keyword::DisplaySetHorizontalJustification>();

                case 0x0718:
                    return get<Keyword::DisplaySetVerticalJustification>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0074:
        {
            switch(element)
            {
                case 0x1212:
                    return get<Keyword::PerformedProcessingParametersSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0080:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::SurfaceScanAcquisitionTypeCodeSequence>();

                case 0x0002:
                    return get<Keyword::SurfaceScanModeCodeSequence>();

                case 0x0003:
                    return get<Keyword::RegistrationMethodCodeSequence>();

                case 0x0004:
                    return get<Keyword::ShotDurationTime>();

                case 0x0005:
                    return get<Keyword::ShotOffsetTime>();

                case 0x0006:
                    return get<Keyword::SurfacePointPresentationValueData>();

                case 0x0007:
                    return get<Keyword::SurfacePointColorCIELabValueData>();

                case 0x0008:
                    return get<Keyword::UVMappingSequence>();

                case 0x0009:
                    return get<Keyword::TextureLabel>();

                case 0x0010:
                    return get<Keyword::UValueData>();

                case 0x0011:
                    return get<Keyword::VValueData>();

                case 0x0012:
                    return get<Keyword::ReferencedTextureSequence>();

                case 0x0013:
                    return get<Keyword::ReferencedSurfaceDataSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0088:
        {
            switch(element)
            {
                case 0x0130:
                    return get<Keyword::StorageMediaFileSetID>();

                case 0x0140:
                    return get<Keyword::StorageMediaFileSetUID>();

                case 0x0200:
                    return get<Keyword::IconImageSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0100:
        {
            switch(element)
            {
                case 0x0410:
                    return get<Keyword::SOPInstanceStatus>();

                case 0x0420:
                    return get<Keyword::SOPAuthorizationDateTime>();

                case 0x0424:
                    return get<Keyword::SOPAuthorizationComment>();

                case 0x0426:
                    return get<Keyword::AuthorizationEquipmentCertificationNumber>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x0400:
        {
            switch(element)
            {
                case 0x0005:
                    return get<Keyword::MACIDNumber>();

                case 0x0010:
                    return get<Keyword::MACCalculationTransferSyntaxUID>();

                case 0x0015:
                    return get<Keyword::MACAlgorithm>();

                case 0x0020:
                    return get<Keyword::DataElementsSigned>();

                case 0x0100:
                    return get<Keyword::DigitalSignatureUID>();

                case 0x0105:
                    return get<Keyword::DigitalSignatureDateTime>();

                case 0x0110:
                    return get<Keyword::CertificateType>();

                case 0x0115:
                    return get<Keyword::CertificateOfSigner>();

                case 0x0120:
                    return get<Keyword::Signature>();

                case 0x0305:
                    return get<Keyword::CertifiedTimestampType>();

                case 0x0310:
                    return get<Keyword::CertifiedTimestamp>();

                case 0x0401:
                    return get<Keyword::DigitalSignaturePurposeCodeSequence>();

                case 0x0402:
                    return get<Keyword::ReferencedDigitalSignatureSequence>();

                case 0x0403:
                    return get<Keyword::ReferencedSOPInstanceMACSequence>();

                case 0x0500:
                    return get<Keyword::EncryptedAttributesSequence>();

                case 0x0510:
                    return get<Keyword::EncryptedContentTransferSyntaxUID>();

                case 0x0520:
                    return get<Keyword::EncryptedContent>();

                case 0x0550:
                    return get<Keyword::ModifiedAttributesSequence>();

                case 0x0551:
                    return get<Keyword::NonconformingModifiedAttributesSequence>();

                case 0x0561:
                    return get<Keyword::OriginalAttributesSequence>();

                case 0x0562:
                    return get<Keyword::AttributeModificationDateTime>();

                case 0x0563:
                    return get<Keyword::ModifyingSystem>();

                case 0x0564:
                    return get<Keyword::SourceOfPreviousValues>();

                case 0x0565:
                    return get<Keyword::ReasonForTheAttributeModification>();

                case 0x0600:
                    return get<Keyword::InstanceOriginStatus>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x2010:
        {
            switch(element)
            {
                case 0x015E:
                    return get<Keyword::Illumination>();

                case 0x0160:
                    return get<Keyword::ReflectedAmbientLight>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x2050:
        {
            switch(element)
            {
                case 0x0020:
                    return get<Keyword::PresentationLUTShape>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x2200:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::LabelText>();

                case 0x0005:
                    return get<Keyword::BarcodeValue>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x3002:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::RTImageLabel>();

                case 0x0003:
                    return get<Keyword::RTImageName>();

                case 0x0004:
                    return get<Keyword::RTImageDescription>();

                case 0x000A:
                    return get<Keyword::ReportedValuesOrigin>();

                case 0x000C:
                    return get<Keyword::RTImagePlane>();

                case 0x000D:
                    return get<Keyword::XRayImageReceptorTranslation>();

                case 0x000E:
                    return get<Keyword::XRayImageReceptorAngle>();

                case 0x0010:
                    return get<Keyword::RTImageOrientation>();

                case 0x0011:
                    return get<Keyword::ImagePlanePixelSpacing>();

                case 0x0012:
                    return get<Keyword::RTImagePosition>();

                case 0x0020:
                    return get<Keyword::RadiationMachineName>();

                case 0x0022:
                    return get<Keyword::RadiationMachineSAD>();

                case 0x0024:
                    return get<Keyword::RadiationMachineSSD>();

                case 0x0026:
                    return get<Keyword::RTImageSID>();

                case 0x0028:
                    return get<Keyword::SourceToReferenceObjectDistance>();

                case 0x0029:
                    return get<Keyword::FractionNumber>();

                case 0x0030:
                    return get<Keyword::ExposureSequence>();

                case 0x0032:
                    return get<Keyword::MetersetExposure>();

                case 0x0034:
                    return get<Keyword::DiaphragmPosition>();

                case 0x0040:
                    return get<Keyword::FluenceMapSequence>();

                case 0x0041:
                    return get<Keyword::FluenceDataSource>();

                case 0x0042:
                    return get<Keyword::FluenceDataScale>();

                case 0x0050:
                    return get<Keyword::PrimaryFluenceModeSequence>();

                case 0x0100:
                    return get<Keyword::SelectedFrameNumber>();

                case 0x0101:
                    return get<Keyword::SelectedFrameFunctionalGroupsSequence>();

                case 0x0102:
                    return get<Keyword::RTImageFrameGeneralContentSequence>();

                case 0x0103:
                    return get<Keyword::RTImageFrameContextSequence>();

                case 0x0104:
                    return get<Keyword::RTImageScopeSequence>();

                case 0x0105:
                    return get<Keyword::BeamModifierCoordinatesPresenceFlag>();

                case 0x0106:
                    return get<Keyword::StartCumulativeMeterset>();

                case 0x0107:
                    return get<Keyword::StopCumulativeMeterset>();

                case 0x0109:
                    return get<Keyword::RTImageFrameImagingDevicePositionSequence>();

                case 0x010A:
                    return get<Keyword::RTImageFramekVRadiationAcquisitionSequence>();

                case 0x010B:
                    return get<Keyword::RTImageFrameMVRadiationAcquisitionSequence>();

                case 0x010C:
                    return get<Keyword::RTImageFrameRadiationAcquisitionSequence>();

                case 0x010D:
                    return get<Keyword::ImagingSourcePositionSequence>();

                case 0x010E:
                    return get<Keyword::ImageReceptorPositionSequence>();

                case 0x010F:
                    return get<Keyword::DevicePositionToEquipmentMappingMatrix>();

                case 0x0110:
                    return get<Keyword::DevicePositionParameterSequence>();

                case 0x0116:
                    return get<Keyword::NumberOfAcquisitionDevices>();

                case 0x0117:
                    return get<Keyword::AcquisitionDeviceSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x3004:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::DVHType>();

                case 0x0002:
                    return get<Keyword::DoseUnits>();

                case 0x0004:
                    return get<Keyword::DoseType>();

                case 0x0005:
                    return get<Keyword::SpatialTransformOfDose>();

                case 0x0006:
                    return get<Keyword::DoseComment>();

                case 0x0008:
                    return get<Keyword::NormalizationPoint>();

                case 0x000A:
                    return get<Keyword::DoseSummationType>();

                case 0x000C:
                    return get<Keyword::GridFrameOffsetVector>();

                case 0x000E:
                    return get<Keyword::DoseGridScaling>();

                case 0x0014:
                    return get<Keyword::TissueHeterogeneityCorrection>();

                case 0x0040:
                    return get<Keyword::DVHNormalizationPoint>();

                case 0x0042:
                    return get<Keyword::DVHNormalizationDoseValue>();

                case 0x0050:
                    return get<Keyword::DVHSequence>();

                case 0x0052:
                    return get<Keyword::DVHDoseScaling>();

                case 0x0054:
                    return get<Keyword::DVHVolumeUnits>();

                case 0x0056:
                    return get<Keyword::DVHNumberOfBins>();

                case 0x0058:
                    return get<Keyword::DVHData>();

                case 0x0060:
                    return get<Keyword::DVHReferencedROISequence>();

                case 0x0070:
                    return get<Keyword::DVHMinimumDose>();

                case 0x0072:
                    return get<Keyword::DVHMaximumDose>();

                case 0x0074:
                    return get<Keyword::DVHMeanDose>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x3006:
        {
            switch(element)
            {
                case 0x0024:
                    return get<Keyword::ReferencedFrameOfReferenceUID>();

                case 0x0084:
                    return get<Keyword::ReferencedROINumber>();

                case 0x00C8:
                    return get<Keyword::FrameOfReferenceTransformationComment>();

                case 0x00C9:
                    return get<Keyword::PatientLocationCoordinatesSequence>();

                case 0x00CA:
                    return get<Keyword::PatientLocationCoordinatesCodeSequence>();

                case 0x00CB:
                    return get<Keyword::PatientSupportPositionSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x3008:
        {
            switch(element)
            {
                case 0x0022:
                    return get<Keyword::CurrentFractionNumber>();

                case 0x0030:
                    return get<Keyword::ReferencedTreatmentRecordSequence>();

                case 0x00A1:
                    return get<Keyword::EnhancedRTBeamLimitingDeviceSequence>();

                case 0x00A2:
                    return get<Keyword::EnhancedRTBeamLimitingOpeningSequence>();

                case 0x00A3:
                    return get<Keyword::EnhancedRTBeamLimitingDeviceDefinitionFlag>();

                case 0x00A4:
                    return get<Keyword::ParallelRTBeamDelimiterOpeningExtents>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x300A:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::RTPlanLabel>();

                case 0x00B3:
                    return get<Keyword::PrimaryDosimeterUnit>();

                case 0x00B6:
                    return get<Keyword::BeamLimitingDeviceSequence>();

                case 0x00F0:
                    return get<Keyword::NumberOfBlocks>();

                case 0x00F4:
                    return get<Keyword::BlockSequence>();

                case 0x0107:
                    return get<Keyword::ApplicatorSequence>();

                case 0x011E:
                    return get<Keyword::GantryAngle>();

                case 0x0120:
                    return get<Keyword::BeamLimitingDeviceAngle>();

                case 0x0122:
                    return get<Keyword::PatientSupportAngle>();

                case 0x0124:
                    return get<Keyword::TableTopEccentricAxisDistance>();

                case 0x0125:
                    return get<Keyword::TableTopEccentricAngle>();

                case 0x0128:
                    return get<Keyword::TableTopVerticalPosition>();

                case 0x0129:
                    return get<Keyword::TableTopLongitudinalPosition>();

                case 0x012A:
                    return get<Keyword::TableTopLateralPosition>();

                case 0x012C:
                    return get<Keyword::IsocenterPosition>();

                case 0x0140:
                    return get<Keyword::TableTopPitchAngle>();

                case 0x0144:
                    return get<Keyword::TableTopRollAngle>();

                case 0x014A:
                    return get<Keyword::GantryPitchAngle>();

                case 0x0420:
                    return get<Keyword::GeneralAccessorySequence>();

                case 0x0602:
                    return get<Keyword::ReferencedDefinedDeviceIndex>();

                case 0x0606:
                    return get<Keyword::TreatmentPositionIndex>();

                case 0x0607:
                    return get<Keyword::ReferencedDeviceIndex>();

                case 0x060B:
                    return get<Keyword::ReferencedTreatmentPositionIndex>();

                case 0x060E:
                    return get<Keyword::ReferencedRTAccessoryHolderDeviceIndex>();

                case 0x0611:
                    return get<Keyword::RTAccessoryHolderSlotID>();

                case 0x0613:
                    return get<Keyword::RTAccessorySlotDistance>();

                case 0x0615:
                    return get<Keyword::RTAccessoryDeviceSlotID>();

                case 0x063F:
                    return get<Keyword::TreatmentPositionSequence>();

                case 0x0641:
                    return get<Keyword::NumberOfRTBeamLimitingDevices>();

                case 0x0642:
                    return get<Keyword::RTBeamLimitingDeviceProximalDistance>();

                case 0x0643:
                    return get<Keyword::RTBeamLimitingDeviceDistalDistance>();

                case 0x0644:
                    return get<Keyword::ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence>();

                case 0x0645:
                    return get<Keyword::BeamModifierOrientationAngle>();

                case 0x0646:
                    return get<Keyword::FixedRTBeamDelimiterDeviceSequence>();

                case 0x0647:
                    return get<Keyword::ParallelRTBeamDelimiterDeviceSequence>();

                case 0x0648:
                    return get<Keyword::NumberOfParallelRTBeamDelimiters>();

                case 0x0649:
                    return get<Keyword::ParallelRTBeamDelimiterBoundaries>();

                case 0x064A:
                    return get<Keyword::ParallelRTBeamDelimiterPositions>();

                case 0x064B:
                    return get<Keyword::RTBeamLimitingDeviceOffset>();

                case 0x064C:
                    return get<Keyword::RTBeamDelimiterGeometrySequence>();

                case 0x064D:
                    return get<Keyword::RTBeamLimitingDeviceDefinitionSequence>();

                case 0x064E:
                    return get<Keyword::ParallelRTBeamDelimiterOpeningMode>();

                case 0x064F:
                    return get<Keyword::ParallelRTBeamDelimiterLeafMountingSide>();

                case 0x0656:
                    return get<Keyword::RTBeamLimitingDeviceOpeningSequence>();

                case 0x0658:
                    return get<Keyword::RadiationDosimeterUnitSequence>();

                case 0x0659:
                    return get<Keyword::RTDeviceDistanceReferenceLocationCodeSequence>();

                case 0x065B:
                    return get<Keyword::PatientSupportPositionParameterSequence>();

                case 0x065C:
                    return get<Keyword::PatientSupportPositionSpecificationMethod>();

                case 0x065D:
                    return get<Keyword::PatientSupportPositionDeviceParameterSequence>();

                case 0x065E:
                    return get<Keyword::DeviceOrderIndex>();

                case 0x0671:
                    return get<Keyword::GeneralAccessoryDefinitionSequence>();

                case 0x0672:
                    return get<Keyword::NumberOfGeneralAccessories>();

                case 0x0675:
                    return get<Keyword::EquipmentFrameOfReferenceUID>();

                case 0x0686:
                    return get<Keyword::PatientSupportDevicesSequence>();

                case 0x0687:
                    return get<Keyword::NumberOfPatientSupportDevices>();

                case 0x0688:
                    return get<Keyword::RTBeamModifierDefinitionDistance>();

                case 0x0700:
                    return get<Keyword::TreatmentSessionUID>();

                case 0x0704:
                    return get<Keyword::RTRadiationSetDeliveryNumber>();

                case 0x0705:
                    return get<Keyword::ClinicalFractionNumber>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x300C:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::ReferencedRTPlanSequence>();

                case 0x0004:
                    return get<Keyword::ReferencedBeamSequence>();

                case 0x0006:
                    return get<Keyword::ReferencedBeamNumber>();

                case 0x0008:
                    return get<Keyword::StartCumulativeMetersetWeight>();

                case 0x0009:
                    return get<Keyword::EndCumulativeMetersetWeight>();

                case 0x0020:
                    return get<Keyword::ReferencedFractionGroupSequence>();

                case 0x0022:
                    return get<Keyword::ReferencedFractionGroupNumber>();

                case 0x0060:
                    return get<Keyword::ReferencedStructureSetSequence>();

                case 0x0114:
                    return get<Keyword::PrescriptionOverviewSequence>();

                case 0x0116:
                    return get<Keyword::PlanOverviewSequence>();

                case 0x0117:
                    return get<Keyword::PlanOverviewIndex>();

                case 0x0118:
                    return get<Keyword::ReferencedPlanOverviewIndex>();

                case 0x0119:
                    return get<Keyword::NumberOfFractionsIncluded>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x300E:
        {
            switch(element)
            {
                case 0x0002:
                    return get<Keyword::ApprovalStatus>();

                case 0x0004:
                    return get<Keyword::ReviewDate>();

                case 0x0005:
                    return get<Keyword::ReviewTime>();

                case 0x0008:
                    return get<Keyword::ReviewerName>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x3010:
        {
            switch(element)
            {
                case 0x0019:
                    return get<Keyword::AuthorIdentificationSequence>();

                case 0x001A:
                    return get<Keyword::ManufacturerModelVersion>();

                case 0x001B:
                    return get<Keyword::DeviceAlternateIdentifier>();

                case 0x001C:
                    return get<Keyword::DeviceAlternateIdentifierType>();

                case 0x001D:
                    return get<Keyword::DeviceAlternateIdentifierFormat>();

                case 0x0025:
                    return get<Keyword::ConceptualVolumeSequence>();

                case 0x002D:
                    return get<Keyword::DeviceLabel>();

                case 0x002E:
                    return get<Keyword::DeviceTypeCodeSequence>();

                case 0x0030:
                    return get<Keyword::PatientEquipmentRelationshipCodeSequence>();

                case 0x0037:
                    return get<Keyword::EntityDescription>();

                case 0x0038:
                    return get<Keyword::EntityLongLabel>();

                case 0x0039:
                    return get<Keyword::DeviceIndex>();

                case 0x0043:
                    return get<Keyword::ManufacturerDeviceIdentifier>();

                case 0x0044:
                    return get<Keyword::InstanceLevelReferencedPerformedProcedureStepSequence>();

                case 0x0077:
                    return get<Keyword::TreatmentSite>();

                case 0x0078:
                    return get<Keyword::TreatmentSiteCodeSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x4FFE:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::MACParametersSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x5200:
        {
            switch(element)
            {
                case 0x9229:
                    return get<Keyword::SharedFunctionalGroupsSequence>();

                case 0x9230:
                    return get<Keyword::PerFrameFunctionalGroupsSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x6000:
        {
            switch(element)
            {
                case 0x0010:
                    return get<Keyword::OverlayRows>();

                case 0x0011:
                    return get<Keyword::OverlayColumns>();

                case 0x0015:
                    return get<Keyword::NumberOfFramesInOverlay>();

                case 0x0022:
                    return get<Keyword::OverlayDescription>();

                case 0x0040:
                    return get<Keyword::OverlayType>();

                case 0x0045:
                    return get<Keyword::OverlaySubtype>();

                case 0x0050:
                    return get<Keyword::OverlayOrigin>();

                case 0x0051:
                    return get<Keyword::ImageFrameOrigin>();

                case 0x0100:
                    return get<Keyword::OverlayBitsAllocated>();

                case 0x0102:
                    return get<Keyword::OverlayBitPosition>();

                case 0x1301:
                    return get<Keyword::ROIArea>();

                case 0x1302:
                    return get<Keyword::ROIMean>();

                case 0x1303:
                    return get<Keyword::ROIStandardDeviation>();

                case 0x1500:
                    return get<Keyword::OverlayLabel>();

                case 0x3000:
                    return get<Keyword::OverlayData>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0x7FE0:
        {
            switch(element)
            {
                case 0x0001:
                    return get<Keyword::ExtendedOffsetTable>();

                case 0x0002:
                    return get<Keyword::ExtendedOffsetTableLengths>();

                case 0x0003:
                    return get<Keyword::EncapsulatedPixelDataValueTotalLength>();

                case 0x0008:
                    return get<Keyword::FloatPixelData>();

                case 0x0009:
                    return get<Keyword::DoubleFloatPixelData>();

                case 0x0010:
                    return get<Keyword::PixelData>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        case 0xFFFA:
        {
            switch(element)
            {
                case 0xFFFA:
                    return get<Keyword::DigitalSignaturesSequence>();

                default:
                    SIGHT_THROW("Unknown element: '" << element << "'.");
            }
        }

        default:
            SIGHT_THROW("Unknown group: '" << group << "'.");
    }
}

//------------------------------------------------------------------------------

} // namespace sight::data::dicom::attribute

// NOLINTEND
