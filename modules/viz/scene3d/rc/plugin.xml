<plugin id="sight::module::viz::scene3d" library="true" autostart="true">

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::axis</service>
         <desc>This adaptor shows a simple coordinate system.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::camera</service>
         <object key="calibration">sight::data::camera</object>
         <object key="transform">sight::data::matrix4</object>
         <desc>This adaptor transforms a Sight camera to an Ogre camera.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::IParameter</type>
         <service>sight::module::viz::scene3d::adaptor::compositor_parameter</service>
         <object key="parameter">sight::data::object</object>
         <desc>This adaptor binds a Sight data to a shader uniform from a specific compositor.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::event</service>
         <desc>This adaptor echoes the input events received in a scene.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::fragments_info</service>
         <desc>This adaptor takes a snapshot of layer fragments information and output it as a data::image.</desc>
    </extension>
    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::frustum</service>
         <object key="camera">sight::data::camera</object>
         <desc>This adaptor displays the frustum of an data::camera.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::frustum_list</service>
         <object key="camera">sight::data::camera</object>
         <object key="transform">sight::data::matrix4</object>
         <desc>This adaptor displays a new Frustum each times the transform is updated.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::image_multi_distances</service>
         <object key="image">sight::data::image</object>
         <desc>This adaptor displays distances retrieved from an image fields.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::landmarks</service>
         <object key="landmarks">sight::data::landmarks</object>
         <object key="image">sight::data::image</object>
         <desc>This adaptor displays landmarks.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::ILight</type>
         <service>sight::module::viz::scene3d::adaptor::light</service>
         <object key="diffuseColor">sight::data::color</object>
         <object key="specularColor">sight::data::color</object>
         <desc>This adaptors adds a light to the scene manager.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::line</service>
         <desc>This adaptor shows a simple line.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::grid</service>
         <desc>This adaptor shows a grid.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::material</service>
         <object key="material">sight::data::material</object>
         <desc>This adaptor adapts a data::material, allowing to tweak material parameters.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::mesh</service>
         <object key="mesh">sight::data::mesh</object>
         <desc>This adaptor shows individual meshes.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::mesh_list</service>
         <object key="texture">sight::data::image</object>
         <object key="transform">sight::data::matrix4</object>
         <object key="mesh">sight::data::mesh</object>
         <desc>This adaptor shows a list of mesh.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::model_series</service>
         <object key="model">sight::data::model_series</object>
         <desc>This adaptor shows a modelSeries. It creates an adaptor for each reconstruction in the model.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::negato2d</service>
         <object key="image">sight::data::image</object>
         <object key="tf">sight::data::transfer_function</object>
         <desc>This adaptor displays a 2D negato.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::negato2d_camera</service>
         <object key="image">sight::data::image</object>
         <object key="tf">sight::data::transfer_function</object>
         <desc>This adaptor lets the user move an orthographic camera to visualize medical images in 2D.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::negato3d</service>
         <object key="image">sight::data::image</object>
         <object key="tf">sight::data::transfer_function</object>
         <desc>This adaptor displays a 3D negato.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::orientation_marker</service>
         <object key="matrix">sight::data::matrix4</object>
         <desc>This adaptor displays an orientation "marker", marker is represented by a human body mesh, its orientation follows camera movement.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::picker</service>
         <desc>This adaptor performs picking queries on mouse clicks and forwards the picked data through a signal.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::point_list</service>
         <object key="pointList">sight::data::point_list</object>
         <object key="mesh">sight::data::mesh</object>
         <desc>This adaptor shows a point lists using billboards generated by a geometry shader.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::reconstruction</service>
         <object key="reconstruction">sight::data::reconstruction</object>
         <desc>This adaptor displays a reconstruction.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::render_stats</service>
         <desc>This adaptor displays rendering statistics in the window overlay.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::resize_viewport</service>
         <desc>This adaptor resizes and moves viewports.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::IParameter</type>
         <service>sight::module::viz::scene3d::adaptor::shader_parameter</service>
         <object key="parameter">sight::data::object</object>
         <desc>This adaptor sends a Sight data as a shader parameter.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::shape_extruder</service>
         <object key="extrudedMeshes">sight::data::model_series</object>
         <desc>This adaptor allows to draw a 2D shape with a lasso tool, and create an extruded mesh from it.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::text</service>
         <desc>This adaptor displays a text object in the center or along the window's borders.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::texture</service>
         <object key="image">sight::data::image</object>
         <desc>This adaptor maps a texture on a mesh. This is done via module::viz::scene3d::adaptor::material. In the</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::trackball_camera</service>
         <desc>This adaptor lets the user move the camera around a point of interest using the mouse and keyboard.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::transform</service>
         <object key="transform">sight::data::matrix4</object>
         <desc>This adaptor binds a data::matrix4 to an Ogre scene node.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::vector</service>
         <desc>This adaptor shows a simple vector.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::video</service>
         <object key="image">sight::data::image</object>
         <object key="tf">sight::data::transfer_function</object>
         <object key="pointList">sight::data::point_list</object>
         <desc>This adaptor renders a video frame from a 2D-image.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::volume_render</service>
         <object key="image">sight::data::image</object>
         <object key="tf">sight::data::transfer_function</object>
         <object key="clippingMatrix">sight::data::matrix4</object>
         <desc>This adaptor displays a volume rendering.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::voxel_picker</service>
         <object key="image">sight::data::image</object>
         <desc>This adaptor performs picking queries on an image voxel using slices.</desc>
    </extension>

    <extension implements="sight::service::extension::factory">
         <type>sight::viz::scene3d::adaptor</type>
         <service>sight::module::viz::scene3d::adaptor::predefined_camera</service>
         <desc>This adaptor forbid mouse action to move camera.</desc>
    </extension>

</plugin>
