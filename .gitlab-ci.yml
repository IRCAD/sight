stages:
  - lint
  - prebuild
  - build
  - deploy

include:
  - project: "sight/sight-gitlab"
    ref: dev
    file: "/.templates/deploy.yml"
  - project: "sight/sight-gitlab"
    ref: dev
    file: "/.templates/build.yml"

lint:sheldon:
  extends: .lint

.linux_build:
  extends: .linux_before
  dependencies: []
  stage: build
  variables:
    SIGHT_BUILD_DOC: "OFF"
    SIGHT_BUILD_PACKAGES: "OFF"
    SIGHT_BUILD_SDK: "OFF"
  script:
    # Reset the modified time of all files to improve ccache performance
    - /usr/lib/git-core/git-restore-mtime --force --skip-missing --commit-time
    # Print CCache statistics
    - ccache -s
    # Launch CMake
    - cd $CI_PROJECT_DIR/.build
    - >
      cmake $CI_PROJECT_DIR
      -G Ninja
      -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/.install
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DSIGHT_ARCH=sandybridge
      -DSIGHT_BUILD_TESTS=ON
      -DSIGHT_BUILD_DOC=${SIGHT_BUILD_DOC}
      -DSIGHT_ENABLE_PCH=OFF
      -DSIGHT_DEPS_ROOT_DIRECTORY=/cache/.sight-deps
      -DSIGHT_ENABLE_OPENVSLAM=ON
      -DSIGHT_ENABLE_REALSENSE=ON
      -DSIGHT_ENABLE_COVERAGE=${SIGHT_ENABLE_COVERAGE}
      -DSIGHT_ENABLE_GDB=ON
    # Touch all generated files to improve CCache performance
    - find . -type f -iname '*.?pp' -exec touch -t 197001010000 {} \;
    # Build
    - ninja
    # Print CCache statistics (Cache hit rate should have raised)
    - ccache -s
    # Clone sight-data.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b ${EXTRA_BRANCH}
    - export FWTEST_DATA_DIR=$CI_PROJECT_DIR/.build/sight-data
    # Launch tests
    - ctest --timeout 480 --output-on-failure -O ctest.log -j4
    # Build documentation if needed
    - >
      if [ "${SIGHT_BUILD_DOC}" == "ON" ]; then
        ninja doc
      fi
    - >
      if [ "${SIGHT_BUILD_PACKAGES}" == "ON" ]; then
        ninja SightViewer_package
        rm -rf ${CI_PROJECT_DIR}/.install
        ninja SightCalibrator_package
        rm -rf ${CI_PROJECT_DIR}/.install
      fi
    - >
      if [ "${SIGHT_BUILD_SDK}" == "ON" ]; then
        ninja install
        ninja package
      fi
    - >
      if [ "${SIGHT_ENABLE_COVERAGE}" == "ON" ]; then
        mkdir -p coverage
        gcovr -j$(nproc) -r .. --filter ../libs --filter ../modules --exclude ".*test.*" --html --html-details coverage/index.html --xml coverage/cobertura-coverage.xml --print-summary .
      fi

  artifacts: &linux_build_artifacts
    when: always
    paths:
      - .build/ctest.log
      - .build/Documentation/Doxygen/
      - .build/packages/*.tar.zst
      - .build/coverage
      - .build/bin/*.core

build:linux-21.10-debug-gcc:
  extends: .linux_build
  variables:
    BUILD_TYPE: "Debug"
    SIGHT_BUILD_SDK: "ON"
    SIGHT_IGNORE_UNSTABLE_TESTS: 1
    CC: "/usr/lib/ccache/gcc"
    CXX: "/usr/lib/ccache/g++"

build:linux-21.10-release-gcc:
  extends: .linux_build
  variables:
    BUILD_TYPE: "Release"
    SIGHT_BUILD_SDK: "ON"
    SIGHT_BUILD_PACKAGES: "ON"
    SIGHT_IGNORE_UNSTABLE_TESTS: 1
    CC: "/usr/lib/ccache/gcc"
    CXX: "/usr/lib/ccache/g++"

build:linux-21.10-RelWithDebInfo-clang:
  extends: .linux_build
  variables:
    BUILD_TYPE: "RelWithDebInfo"
    SIGHT_IGNORE_UNSTABLE_TESTS: 1
    CC: "/usr/lib/ccache/clang"
    CXX: "/usr/lib/ccache/clang++"

build:linux-21.10-coverage-gcc:
  extends: .linux_build
  variables:
    BUILD_TYPE: "RelWithDebInfo"
    SIGHT_BUILD_DOC: "ON"
    SIGHT_ENABLE_COVERAGE: "ON"
    SIGHT_IGNORE_UNSTABLE_TESTS: 1
    CC: "/usr/lib/ccache/gcc"
    CXX: "/usr/lib/ccache/g++"
  coverage: /^lines:\s+(\d+\.*\d*\%).*$/
  artifacts:
    <<: *linux_build_artifacts
    reports:
      cobertura: .build/coverage/cobertura-coverage.xml

deploy:linux-debug:
  extends: .linux_deploy
  dependencies:
    - build:linux-21.10-debug-gcc
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  only:
    refs:
      - master
      - dev

deploy_manual:linux-debug:
  extends: .linux_deploy
  dependencies:
    - build:linux-21.10-debug-gcc
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  when: manual

deploy:linux-release:
  extends: .linux_deploy
  dependencies:
    - build:linux-21.10-release-gcc
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  only:
    refs:
      - master
      - dev

deploy_manual:linux-release:
  extends: .linux_deploy
  dependencies:
    - build:linux-21.10-release-gcc
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  when: manual

deploy:apps-linux-release:
  extends: .linux_deploy
  dependencies:
    - build:linux-21.10-release-gcc
  variables:
    APPS: "SightViewer,SightCalibrator"
    URL: "IRCAD%20-%20Open/"
  only:
    refs:
      - master
      - dev

deploy_manual:apps-linux-release:
  extends: .linux_deploy
  dependencies:
    - build:linux-21.10-release-gcc
  variables:
    APPS: "SightViewer,SightCalibrator"
    URL: "IRCAD%20-%20Open/"
  when: manual

.windows_build:
  extends: .windows_before
  dependencies: []
  variables:
    TOOLCHAIN: "scripts\\buildsystems\\vcpkg.cmake"
    SIGHT_BUILD_PACKAGES: "OFF"
    SIGHT_BUILD_SDK: "OFF"
  stage: build
  script:
    # Get the package_name name from our CMake script
    - $PACKAGE_NAME = cmd /c cmake -DGET_ARCHIVE_FOLDER=ON -P "${env:CI_PROJECT_DIR}\cmake\build\download_deps.cmake" '2>&1'
    # Build the project on the merge result.
    - cd "${env:CI_PROJECT_DIR}/build"
    - cmake "$env:CI_PROJECT_DIR" -G Ninja -DCMAKE_TOOLCHAIN_FILE="$CACHE\$PACKAGE_NAME\$TOOLCHAIN" -DCMAKE_INSTALL_PREFIX="$env:CI_PROJECT_DIR/install" -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DSIGHT_BUILD_TESTS=ON -DSIGHT_ENABLE_PCH=ON
    - $env:TMP="$CACHE\tmp"
    - $env:TEMP="$CACHE\tmp"
    - ninja
    # Clone sight-data.
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@git.ircad.fr/Sight/sight-data.git -b ${EXTRA_BRANCH}
    - $env:FWTEST_DATA_DIR="${env:CI_PROJECT_DIR}/build/sight-data"
    # Launch tests
    - ctest --timeout 480 --output-on-failure -O ctest.log -j6
    - |
      if ("${SIGHT_BUILD_PACKAGES}" -eq "ON") {
        ninja SightViewer_package
        Remove-Item -Path "${env:CI_PROJECT_DIR}/install" -Force -Recurse
        ninja SightCalibrator_package
        Remove-Item -Path "${env:CI_PROJECT_DIR}/install" -Force -Recurse
      }
    - |
      if ("${SIGHT_BUILD_SDK}" -eq "ON") {
        ninja install
        ninja package
      }
  artifacts:
    when: always
    name: "${env:CI_JOB_NAME}-${env:CI_COMMIT_REF_SLUG}"
    paths:
      - build/ctest.log
      - build/fwTest.log
      - build/packages/*.exe
      - build/packages/sight-*.zip

build:windows-debug:
  extends: .windows_build
  variables:
    BUILD_TYPE: "Debug"
    SIGHT_BUILD_SDK: "ON"

build:windows-release:
  extends: .windows_build
  variables:
    BUILD_TYPE: "Release"
    SIGHT_BUILD_PACKAGES: "ON"
    SIGHT_BUILD_SDK: "ON"

deploy:windows-debug:
  extends: .windows_deploy
  dependencies:
    - build:windows-debug
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  only:
    refs:
      - master
      - dev

deploy_manual:windows-debug:
  extends: .windows_deploy
  dependencies:
    - build:windows-debug
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  when: manual

deploy:windows-release:
  extends: .windows_deploy
  dependencies:
    - build:windows-release
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  only:
    refs:
      - master
      - dev

deploy_manual:windows-release:
  extends: .windows_deploy
  dependencies:
    - build:windows-release
  variables:
    APPS: "sight-"
    URL: "IRCAD%20-%20Open/"
  when: manual

deploy:apps-windows-release:
  extends: .windows_deploy
  dependencies:
    - build:windows-release
  variables:
    APPS: "SightViewer,SightCalibrator"
    URL: "IRCAD%20-%20Open/"
  only:
    refs:
      - master
      - dev

deploy_manual:apps-windows-release:
  extends: .windows_deploy
  dependencies:
    - build:windows-release
  variables:
    APPS: "SightViewer,SightCalibrator"
    URL: "IRCAD%20-%20Open/"
  when: manual

deploy:pages:
  image: "${SIGHT_CI_UBUNTU21_10}:dev"
  stage: deploy
  dependencies:
    - build:linux-21.10-coverage-gcc
  script:
    - mv .build/Documentation/Doxygen/html/ public/
    - mv .build/coverage/ public/coverage
  artifacts:
    paths:
      - public
  only:
    - dev
