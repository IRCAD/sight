<!--
    This configuration allows to launch activities sequentially. It should be called from an activity like:
    It displays a "stepper" that allows to select the current activity, they are enabled sequencially when their
    inputs are present.

    The configuration can be launched by a 'config_controller':

    <service uid="activityLauncher" type="sight::app::config_controller">
        <appConfig id="ActivityLauncher" />
        <inout group="data">
            <key name="activitySet" uid="..." />
        </inout>
        <parameter replace="WID_PARENT" by="activityView" />
        <parameter replace="ICON_PATH" by="${ICON_PATH}" />
        <parameter replace="SEQUENCER_CONFIG" by="sequencerServiceConfigName" />
    </service>

    You can also launch this configuration as an activity :

    <extension implements="sight::activity::extension">
        <id>sequencerActivityName</id>
        <title>Activity title</title>
        <desc>Description of the activity</desc>
        <icon>path/to</icon>
        <requirements>
            <requirement name="activitySet" type="sight::data::activity_set" minOccurs="0" maxOccurs="0" />
        </requirements>
        <appConfig id="ActivityLauncher">
            <parameters>
                <parameter replace="SEQUENCER_CONFIG" by="sequencerServiceConfigName" />
            </parameters>
        </appConfig>
    </extension>

    The Activity representing the activities launched by this config will be saved in the ActivitySet object, when
    they are loaded, the sequencer will jump to the last activity.

    The SEQUENCER_CONFIG represents the list of the activities to launch, like:

    <extension implements="sight::service::extension::config">
        <id>sequencerServiceConfigName</id>
        <service>sight::module::ui::qt::activity::sequencer</service>
        <desc>Configuration for the sequencer</desc>
        <config>
            <activity id="activity1" name="my activity 1" />
            <activity id="activity2" name="my activity 2" />
            <activity id="activity3" name="my activity 3" />
        </config>
    </extension>

    With:
    - id: identifier of the activity
    - name (optional): name displayed in the activity stepper. If the name is not define, the title of the activity will
    be used.


    You can override the default configuration for activity reader/writer by adding the two parameters:
    <parameter replace="ACTIVITY_READER_CONFIG" by="ActivityReaderConfig" />
    <parameter replace="ACTIVITY_WRITER_CONFIG" by="ActivityWriterConfig" />

    You can override the default activity wizard configuration by adding the parameter:
    <parameter replace="WIZARD_CONFIG" by="activityWizardServiceConfigName" />
-->
<extension implements="sight::app::extension::config">
    <id>ActivityLauncher</id>
    <parameters>
        <object uid="activitySet" type="sight::data::activity_set" />

        <param name="WID_PARENT" />
        <param name="ICON_PATH" />
        <param name="SEQUENCER_CONFIG" />
        <param name="WIZARD_CONFIG" default="defaultWizardConfig" />
        <param name="SESSION_READER_CONFIG" default="DefaultSessionReaderConfig" />
        <param name="SESSION_WRITER_CONFIG" default="DefaultSessionWriterConfig" />
        <param name="APPLICATION_ICON_PATH" default="sight::module::ui::icons/sight_logo.svg" />
    </parameters>
    <desc>Configuration to launch activities sequentially</desc>
    <config>
        <!-- ************************************* Begin layouts declaration *************************************** -->

        <service uid="mainView" type="sight::module::ui::view">
            <gui>
                <layout type="sight::ui::layout::line">
                    <orientation value="vertical" />
                    <view proportion="0" />
                    <view proportion="1" />
                    <view proportion="1" visible="false" />
                </layout>
            </gui>
            <registry>
                <parent wid="${WID_PARENT}" />
                <view sid="stepperView" start="true" />
                <view sid="dynamicView" start="true" />
                <view sid="activityCreator" start="true" />
            </registry>
        </service>

        <service uid="stepperView" type="sight::module::ui::view">
            <gui>
                <layout type="sight::ui::layout::line">
                    <orientation value="horizontal" />
                    <view proportion="0" />
                    <view proportion="1" />
                    <view proportion="0" />
                    <view proportion="0" />
                    <view proportion="0" />
                    <view proportion="0" />
                </layout>
            </gui>
            <registry>
                <view sid="appLogoView" start="true" />
                <view sid="activitySequencer" start="true" />
                <view sid="openButton" start="true" />
                <view sid="saveButton" start="true" />
                <view sid="ircadLogoView" start="true" />
            </registry>
        </service>

        <!-- ************************************* Begin editor declaration *************************************** -->

        <service uid="openButton" type="sight::module::ui::qt::com::signal_button">
            <config>
                <icon>sight::module::ui::icons/load.svg</icon>
                <iconWidth>40</iconWidth>
                <iconHeight>40</iconHeight>
            </config>
        </service>

        <service uid="saveButton" type="sight::module::ui::qt::com::signal_button">
            <config>
                <icon>sight::module::ui::icons/save.svg</icon>
                <iconWidth>40</iconWidth>
                <iconHeight>40</iconHeight>
            </config>
        </service>

        <service uid="appLogoView" type="sight::module::ui::qt::image::image">
            <path>${APPLICATION_ICON_PATH}</path>
            <height>70</height>
        </service>

        <service uid="ircadLogoView" type="sight::module::ui::qt::image::image">
            <path>sight::module::ui::icons/ircad_white.svg</path>
            <height>70</height>
        </service>

        <!-- ************************************* Begin reader/writer declaration ********************************* -->

        <service uid="SDBReader" type="sight::module::io::session::reader" config="${SESSION_READER_CONFIG}">
            <inout key="data" uid="${activitySet}" />
        </service>

        <service uid="SDBWriter" type="sight::module::io::session::writer" config="${SESSION_WRITER_CONFIG}">
            <in key="data" uid="${activitySet}" />
        </service>

        <!-- *************************************** Begin view declaration **************************************** -->

        <!-- Display the activity in the current view -->
        <service uid="dynamicView" type="sight::module::ui::qt::activity::view">
            <parameters>
                <parameter replace="ICON_PATH" by="${ICON_PATH}" />
                <parameter replace="previousActivityChannel" by="previousActivityChannel" />
                <parameter replace="nextActivityChannel" by="nextActivityChannel" />
                <parameter replace="validationChannel" by="validationChannel" />
                <parameter replace="goToChannel" by="goToChannel" />
            </parameters>
        </service>

        <!-- Display the activity data selector -->
        <service uid="activityCreator" type="sight::module::ui::qt::activity::wizard" config="${WIZARD_CONFIG}">
            <inout key="activitySet" uid="${activitySet}" />
        </service>

        <!-- Launch the activity sequentially -->
        <service uid="activitySequencer" type="sight::module::ui::qt::activity::sequencer" config="${SEQUENCER_CONFIG}">
            <inout key="activitySet" uid="${activitySet}" auto_connect="true" />
        </service>

        <!-- ************************************ Begin connection declaration ************************************* -->

        <!-- Connections to open a SeriesSet when the open button is clicked -->
        <connect>
            <signal>openButton/clicked</signal>
            <slot>SDBReader/update</slot>
        </connect>

        <!-- Connections to save the SeriesSet when the save button is clicked -->
        <connect>
            <signal>saveButton/clicked</signal>
            <slot>SDBWriter/update</slot>
        </connect>

        <!-- connect to launch the activity when it is created/updated. -->
        <connect channel="launchActivityChannel">
            <signal>activitySequencer/activity_created</signal>
            <slot>dynamicView/show</slot>
            <slot>dynamicView/launch_activity</slot>
            <slot>activityCreator/hide</slot>
            <slot>activitySequencer/check_next</slot>
        </connect>

        <!-- Update the sequencer information when an activity is updated -->
        <connect>
            <signal>activityCreator/activity_updated</signal>
            <slot>activitySequencer/update</slot>
        </connect>

        <!-- When the activity is launched, the sequencer sends the information to enable "previous" and "next" actions -->
        <connect>
            <signal>dynamicView/activity_launched</signal>
            <slot>activitySequencer/send_info</slot>
        </connect>

        <!-- Display the wizard when data are missing for the next activity -->
        <connect>
            <signal>activitySequencer/data_required</signal>
            <slot>activityCreator/update_activity</slot>
            <slot>activityCreator/show</slot>
            <slot>dynamicView/hide</slot>
        </connect>

        <!-- Hide the creator editor when the activity creation is canceled. -->
        <connect>
            <signal>activityCreator/canceled</signal>
            <slot>activityCreator/hide</slot>
            <slot>dynamicView/show</slot>
        </connect>

        <!-- The activity sequencer should receive the call from the "previous" action. -->
        <connect channel="previousActivityChannel">
            <slot>activitySequencer/previous</slot>
        </connect>

        <!-- The activity sequencer should receive the call from the "next" action. -->
        <connect channel="nextActivityChannel">
            <slot>activitySequencer/next</slot>
        </connect>

        <!-- The activity sequencer should receive the call from the "previous" action. -->
        <connect channel="validationChannel">
            <slot>activitySequencer/check_next</slot>
        </connect>

        <!-- The activity sequencer should receive the call from the "go_to" action. -->
        <connect channel="goToChannel">
            <slot>activitySequencer/go_to</slot>
        </connect>

        <!-- *************************************** Begin start and update **************************************** -->

        <start uid="mainView" />
        <start uid="SDBReader" />
        <start uid="SDBWriter" />

        <!-- Load the sub-activities contained in the SeriesSet, or launch the first activity from the sequencer -->
        <update uid="activitySequencer" />
    </config>
</extension>
