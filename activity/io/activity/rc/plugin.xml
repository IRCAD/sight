<plugin id="sight::module::io::activity">
    <requirement id="sight::module::io::session" />
    <requirement id="sight::module::activity" />

    <!-- Activity used to export an image series. -->
    <extension implements="sight::activity::extension">
        <id>ImageSeriesExport</id>
        <title>ImageSeries Export</title>
        <desc>Activity to export the selected ImageSeries.</desc>
        <icon>sight::module::ui::icons/export.svg</icon>
        <requirements>
            <requirement name="series" type="sight::data::image_series" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>sight::activity::builder::Activity</builder>
        <appConfig id="ExportSelection" />
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="sight::activity::extension">
        <id>ModelSeriesExport</id>
        <title>ModelSeries Export</title>
        <desc>Activity to export the selected ModelSeries.</desc>
        <icon>sight::module::ui::icons/export.svg</icon>
        <requirements>
            <requirement name="series" type="sight::data::model_series" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>sight::activity::builder::Activity</builder>
        <appConfig id="ExportSelection" />
    </extension>

    <!-- Activity used to export a model series. -->
    <extension implements="sight::activity::extension">
        <id>DicomSegmentationSurfaceExport</id>
        <title>Dicom Segmentation Surface Export</title>
        <desc>Activity to export a ModelSeries as a Dicom Segmentation Surface file.</desc>
        <icon>sight::module::ui::icons/export.svg</icon>
        <requirements>
            <requirement name="modelSeries" type="sight::data::model_series" minOccurs="1" maxOccurs="1" />
        </requirements>
        <builder>sight::activity::builder::Activity</builder>
        <appConfig id="ExportDicomSelection" />
    </extension>

    <!-- App config used to export the selected series. -->
    <extension implements="sight::app::extension::config">
        <id>ExportSelection</id>
        <parameters>
            <object uid="series" type="sight::data::series" />
        </parameters>
        <config>
            <service uid="export_selection" type="sight::module::ui::io::selector">
                <inout key="data" uid="${series}" />
                <type mode="writer" />
                <selection mode="exclude" />
                <addSelection service="sight::module::io::session::writer" />
            </service>
            <update uid="export_selection" />
        </config>
    </extension>

    <!-- App config used to export a Model to a Dicom Segmentation Surface. -->
    <extension implements="sight::app::extension::config">
        <id>ExportDicomSelection</id>
        <parameters>
            <object uid="modelSeries" type="sight::data::model_series" />
        </parameters>
        <config>
            <service uid="exportSelection" type="sight::module::ui::io::selector">
                <inout key="data" uid="${modelSeries}" />
                <type mode="writer" />
                <selection mode="include" />
                <addSelection service="sight::module::io::dicom::surface_segmentation_writer" />
            </service>

            <update uid="exportSelection" />
        </config>
    </extension>

    <!-- Service config used to read SeriesSet without using session. -->
    <extension implements="sight::service::extension::config">
        <id>SDBReaderIOSelectorConfig</id>
        <service>sight::module::ui::io::selector</service>
        <desc>IOSelectorService config for SeriesSet reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <addSelection service="sight::module::io::session::reader" />
            <addSelection service="sight::module::io::matrix::SAttachmentSeriesReader" />
        </config>
    </extension>

    <!-- Service config used to read SeriesSet using Session. -->
    <extension implements="sight::service::extension::config">
        <id>SDBSessionReaderIOSelectorConfig</id>
        <service>sight::module::ui::io::selector</service>
        <desc>Session SeriesSet reader.</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::reader" />
            <config id="SightDataConfig" service="sight::module::io::session::reader" />
        </config>
    </extension>

    <!-- Service config used to write a SeriesSet using Session. -->
    <extension implements="sight::service::extension::config">
        <id>SDBSessionWriterIOSelectorConfig</id>
        <service>sight::module::ui::io::selector</service>
        <desc>Session SeriesSet writer.</desc>
        <config>
            <type mode="writer" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::writer" />
            <config id="SightDataConfig" service="sight::module::io::session::writer" />
        </config>
    </extension>

    <!-- Service config used to read SeriesSet with all the available reader for SeriesSet. -->
    <extension implements="sight::service::extension::config">
        <id>FullSDBReaderIOSelectorConfig</id>
        <service>sight::module::ui::io::selector</service>
        <desc>IOSelectorService config for SeriesSet reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="exclude" />
            <addSelection service="sight::module::io::matrix::SAttachmentSeriesReader" />
            <config id="SightDataConfig" service="sight::module::io::session::reader" />
        </config>
    </extension>

    <!-- Service config used for io_session reader and writer -->
    <extension implements="sight::service::extension::config">
        <id>SightDataConfig</id>
        <desc>Sight data</desc>
        <config>
            <dialog extension=".sight" description="Sight data" policy="default" />
            <password policy="default" encryption="default" />
        </config>
    </extension>

    <extension implements="sight::service::extension::config">
        <id>ActivityReaderConfig</id>
        <service>sight::module::ui::io::selector</service>
        <desc>Activity reader</desc>
        <config>
            <type mode="reader" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::reader" />
            <config id="sight::module::io::activity::default_session_reader" service="sight::module::io::session::reader" />
        </config>
    </extension>

    <extension implements="sight::service::extension::config">
        <id>ActivityWriterConfig</id>
        <service>sight::module::ui::io::selector</service>
        <desc>Activity writer</desc>
        <config>
            <type mode="writer" />
            <selection mode="include" />
            <addSelection service="sight::module::io::session::writer" />
            <config id="sight::module::io::activity::default_session_writer" service="sight::module::io::session::writer" />
        </config>
    </extension>

    <!-- Service config used for reading / writing landmarks -->
    <extension implements="sight::service::extension::config">
        <id>LandmarksConfig</id>
        <desc>Landmarks Reader/Writer</desc>
        <config>
            <dialog extension=".sight" description="Sight Landmarks" policy="default" />
            <password policy="default" encryption="default" />
        </config>
    </extension>

    <!-- Service config used for session reader and writer -->
    <extension implements="sight::service::extension::config">
        <id>sight::module::io::activity::default_session_reader</id>
        <service>sight::module::io::session::reader</service>
        <desc>Session reader</desc>
        <config>
            <dialog extension=".sight" description="Sight session" policy="default" />
            <password policy="default" encryption="default" />
        </config>
    </extension>

    <extension implements="sight::service::extension::config">
        <id>sight::module::io::activity::default_session_writer</id>
        <service>sight::module::io::session::writer</service>
        <desc>Session writer</desc>
        <config>
            <dialog extension=".sight" description="Sight session" policy="default" />
            <password policy="default" encryption="default" />
        </config>
    </extension>
</plugin>
